/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:07:18 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomUtils_ESTest extends RandomUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = RandomUtils.nextInt(1387, 1988);
      assertEquals(1387, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = RandomUtils.nextLong(0L, 48L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float float0 = RandomUtils.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = RandomUtils.nextLong();
      assertEquals(922337203685477632L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = RandomUtils.nextInt(1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      float float0 = RandomUtils.nextFloat();
      assertEquals(2.7222588E38F, float0, 0.01F);
      
      long long0 = RandomUtils.nextLong(299L, 5427L);
      assertEquals((-3803L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = RandomUtils.nextBytes(0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float float0 = RandomUtils.nextFloat(1.0F, 121.8884F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = RandomUtils.nextDouble(871.9508149, 1060.9874258373);
      assertEquals(871.9508149, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = RandomUtils.nextLong(299L, 5427L);
      assertEquals(299L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = RandomUtils.nextInt(0, Integer.MAX_VALUE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float float0 = RandomUtils.nextFloat((float) 0L, (float) 0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextFloat((-2971.9768F), (-2971.9768F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextFloat((float) 1379, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = RandomUtils.nextDouble(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextDouble((-1907.7882106916645), (double) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextDouble(375.7845229723, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = RandomUtils.nextLong(312L, 312L);
      assertEquals(312L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextLong((-1496L), (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextLong(0L, (-1650L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextInt((-2787), (-2787));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextInt(0, (-477));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = RandomUtils.nextBytes(1213);
      assertEquals(1213, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextBytes((-1738));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Count cannot be negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = RandomUtils.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = RandomUtils.nextInt();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = RandomUtils.nextInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = RandomUtils.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = RandomUtils.nextLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RandomUtils randomUtils0 = new RandomUtils();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float float0 = RandomUtils.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = RandomUtils.nextDouble();
      assertEquals(1.7976931348623158E307, double0, 0.01);
  }
}
