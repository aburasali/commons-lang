/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:42:12 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.CharSetUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharSetUtils_ESTest extends CharSetUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "gd1QB>k6-l!NCQh";
      String string0 = CharSetUtils.squeeze("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string0 = CharSetUtils.squeeze("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0);
      assertEquals("Aborting to protect against StackOverflowEror - output of one lop is the input of another", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = CharSetUtils.squeeze((String) null, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = CharSetUtils.delete((String) null, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[M";
      String string0 = CharSetUtils.squeeze("zS/!PPH^\"[uuwj_", stringArray0);
      assertEquals("zS/!PPH^\"[uuwj_", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zS/!PPH^=\"[uuwj_";
      String string0 = CharSetUtils.squeeze("zS/!PPH^=\"[uuwj_", stringArray0);
      assertEquals("zS/!PH^=\"[uwj_", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = CharSetUtils.squeeze("[M", stringArray0);
      assertEquals("[M", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = CharSetUtils.squeeze("", (String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zS/!PPH^=\"[uuwj_";
      String string0 = CharSetUtils.keep("zS/!PPH^=\"[uuwj_", stringArray0);
      assertEquals("zS/!PPH^\"[uuwj_", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = CharSetUtils.keep("", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = CharSetUtils.keep((String) null, (String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = CharSetUtils.keep("zS/!PPH^=\"[uuwj_", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zS/!PPH^=\"[uuwj_";
      String string0 = CharSetUtils.delete("(jZ0", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = CharSetUtils.delete("(jZ0", stringArray0);
      assertEquals("(jZ0", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[M";
      int int0 = CharSetUtils.count("i*uDjwl]A;q3%5n", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zS/!PPH^=\"[uuwj_";
      int int0 = CharSetUtils.count("i*uDjwl]A;q3%5n", stringArray0);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = CharSetUtils.count("VJe\"!{~gKERY4=*K", (String[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = CharSetUtils.count("", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "hCiI;w";
      boolean boolean0 = CharSetUtils.containsAny("hCiI;w", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]%0I%?U";
      boolean boolean0 = CharSetUtils.containsAny("e", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[9];
      boolean boolean0 = CharSetUtils.containsAny("e", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = CharSetUtils.containsAny((String) null, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharSetUtils charSetUtils0 = new CharSetUtils();
  }
}
