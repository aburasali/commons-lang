/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:16:37 GMT 2019
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Field;
import java.util.Collection;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.IntStream;
import org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle;
import org.apache.commons.lang3.builder.RecursiveToStringStyle;
import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import org.apache.commons.lang3.builder.StandardToStringStyle;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectionToStringBuilder_ESTest extends ReflectionToStringBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReflectionToStringBuilder.toString((Object) "Specified class is not a s4perclass of the oNject");
      Class<String> class0 = String.class;
      ReflectionToStringBuilder.toString("", (ToStringStyle) null, true, true, true, (Class<? super String>) class0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.lang.String@3[value={},hash=0,serialPersistentFields={},serialVersionUID=-6849794470754667710,CASE_INSENSITIVE_ORDER=java.lang.String$CaseInsensitiveComparator@67f9d302]";
      stringArray0[1] = "java.lang.String@1[value={S,p,e,c,i,f,i,e,d, ,c,l,a,s,s, ,i,s, ,n,o,t, ,a, ,s,4,p,e,r,c,l,a,s,s, ,o,f, ,t,h,e, ,o,N,j,e,c,t},hash=249377513]";
      stringArray0[2] = "Specified class is not a s4perclass of the oNject";
      stringArray0[3] = "&uArr;";
      stringArray0[4] = "java.lang.String@1[value={S,p,e,c,i,f,i,e,d, ,c,l,a,s,s, ,i,s, ,n,o,t, ,a, ,s,4,p,e,r,c,l,a,s,s, ,o,f, ,t,h,e, ,o,N,j,e,c,t},hash=249377513]";
      stringArray0[5] = "java.lang.String@3[value={},hash=0,serialPersistentFields={},serialVersionUID=-6849794470754667710,CASE_INSENSITIVE_ORDER=java.lang.String$CaseInsensitiveComparator@67f9d302]";
      stringArray0[6] = "";
      stringArray0[7] = "java.lang.String@1[value={S,p,e,c,i,f,i,e,d, ,c,l,a,s,s, ,i,s, ,n,o,t, ,a, ,s,4,p,e,r,c,l,a,s,s, ,o,f, ,t,h,e, ,o,N,j,e,c,t},hash=249377513]";
      stringArray0[8] = "java.lang.String@1[value={S,p,e,c,i,f,i,e,d, ,c,l,a,s,s, ,i,s, ,n,o,t, ,a, ,s,4,p,e,r,c,l,a,s,s, ,o,f, ,t,h,e, ,o,N,j,e,c,t},hash=249377513]";
      ReflectionToStringBuilder.toStringExclude((Object) "Specified class is not a s4perclass of the oNject", stringArray0);
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, (ToStringStyle) null);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-9);
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)2506;
      shortArray0[3] = (short) (-257);
      shortArray0[4] = (short)6;
      reflectionToStringBuilder0.append("", shortArray0);
      reflectionToStringBuilder0.getUpToClass();
      ReflectionToStringBuilder.toNoNullStringArray(stringArray0);
      reflectionToStringBuilder0.setUpToClass((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("|9afMMQeJw!Nc3");
      ReflectionToStringBuilder.toStringExclude((Object) integer0, (Collection<String>) linkedList0);
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      String[] stringArray0 = new String[0];
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      reflectionToStringBuilder1.appendToString("java.lang.Integer@2[value=0]value=0]");
      reflectionToStringBuilder1.isAppendStatics();
      reflectionToStringBuilder1.isAppendTransients();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      ReflectionToStringBuilder reflectionToStringBuilder2 = (ReflectionToStringBuilder)reflectionToStringBuilder0.append("|9afMMQeJw!Nc3", intArray0);
      ReflectionToStringBuilder.toStringExclude((Object) "Unexpected IllegalAccessException: ", stringArray0);
      reflectionToStringBuilder1.isAppendStatics();
      Class<Object> class0 = Object.class;
      reflectionToStringBuilder1.setUpToClass(class0);
      reflectionToStringBuilder2.getExcludeFieldNames();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder.toString("2GVu", toStringStyle0, true, true, false, (Class<? super String>) class0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("{2,G,V,u},1560564,{},-6849794470754667710,java.lang.String$CaseInsensitiveComparator@67f9d302");
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = 'S';
      reflectionToStringBuilder0.append("&rdquo;", charArray0, false);
      Field field0 = null;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.accept((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder.toString("Gv0!Z_T#0iqX", toStringStyle0, true, true, true, (Class<? super String>) class0);
      ReflectionToStringBuilder.toString((Object) class0, toStringStyle0);
      Integer integer0 = new Integer(422);
      ReflectionToStringBuilder.toString((Object) integer0, toStringStyle0, true, true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(737);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ReflectionToStringBuilder.toStringExclude((Object) integer0, (Collection<String>) linkedList0);
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "java.lang.Integer@1[value=737]value=737]";
      stringArray0[1] = "java.lang.Integer@1[value=737]value=737]";
      stringArray0[2] = "java.lang.Integer@1[value=737]value=737]";
      stringArray0[3] = "java.lang.Integer@1[value=737]value=737]";
      stringArray0[4] = "java.lang.Integer@1[value=737]value=737]";
      linkedList0.add("java.lang.Integer@1[value=737]value=737]");
      stringArray0[5] = "java.lang.Integer@1[value=737]value=737]";
      stringArray0[6] = "java.lang.Integer@1[value=737]value=737]";
      stringArray0[7] = "e/J;OwK+{";
      ReflectionToStringBuilder.toStringExclude((Object) "java.lang.Integer@1[value=737]value=737]", stringArray0);
      Integer integer1 = new Integer(0);
      ReflectionToStringBuilder.toString((Object) integer1);
      reflectionToStringBuilder0.isExcludeNullValues();
      ReflectionToStringBuilder.toStringExclude((Object) "java.lang.Integer@1[value=737]value=737]", (Collection<String>) linkedList0);
      ReflectionToStringBuilder.toString((Object) "e/J;OwK+{");
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      ReflectionToStringBuilder.toString((Object) integer0, toStringStyle0);
      reflectionToStringBuilder0.toString();
      reflectionToStringBuilder0.setAppendStatics(false);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getValue((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      Object object1 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer();
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object1, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, true, true);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)25;
      shortArray0[3] = (short) (-3073);
      shortArray0[4] = (short)1;
      reflectionToStringBuilder0.append("The Object passed in should not be null.", shortArray0);
      ReflectionToStringBuilder.toString((Object) "The Object passed in should not be null.", toStringStyle0);
      reflectionToStringBuilder0.appendFieldsIn(class0);
      ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      ReflectionToStringBuilder.toString((Object) "The Object passed in should not be null.", (ToStringStyle) recursiveToStringStyle0);
      Object object2 = new Object();
      ReflectionToStringBuilder.toString(object2, toStringStyle0, true, true, true, (Class<? super Object>) class0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder.toString(object0, toStringStyle0, false, false, (Class<? super Object>) class0);
      Object object1 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object1);
      reflectionToStringBuilder0.getUpToClass();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, toStringStyle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      boolean boolean0 = false;
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder.toString((Object) integer0, (ToStringStyle) null, false, false, (Class<? super Object>) class0);
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, (ToStringStyle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toNoNullStringArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      String string0 = "Specified class is not a superclass of the object";
      StringBuffer stringBuffer0 = new StringBuffer("Specified class is not a superclass of the object");
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, true, true, true);
      reflectionToStringBuilder0.isAppendStatics();
      Class<Object> class1 = Object.class;
      reflectionToStringBuilder0.setUpToClass(class1);
      reflectionToStringBuilder0.isAppendTransients();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "Specified class is not a superclass of the object");
      // Undeclared exception!
      try { 
        predicate0.or((Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, (ToStringStyle) null, (StringBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      boolean boolean0 = true;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, toStringStyle0, false, true, true, (Class<? super Object>) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      StringBuffer stringBuffer0 = new StringBuffer();
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((String) null, toStringStyle0, stringBuffer0, (Class<? super String>) class0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder.toString(object0, toStringStyle0, false, false, false, (Class<? super Object>) class0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Object[]";
      ReflectionToStringBuilder.toStringExclude(object0, stringArray0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("Object[]");
      String[] stringArray1 = new String[8];
      stringArray1[0] = "java.lang.Object@2[]]";
      stringArray1[1] = "Object[]";
      stringArray1[2] = "java.lang.Object@2[]]";
      stringArray1[3] = "java.lang.Object@2[]]";
      stringArray1[4] = "java.lang.Object@2[]]";
      stringArray1[5] = "Object[]";
      stringArray1[6] = "Object[]";
      stringArray1[7] = "Object[]";
      reflectionToStringBuilder0.excludeFieldNames = stringArray1;
      reflectionToStringBuilder0.setAppendTransients(false);
      reflectionToStringBuilder0.getExcludeFieldNames();
      reflectionToStringBuilder0.setAppendTransients(false);
      ReflectionToStringBuilder.toString((Object) "Object[]", toStringStyle0, false, true, (Class<? super Object>) class0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ReflectionToStringBuilder.toString((Object) "Mrk+");
      ReflectionToStringBuilder.toString((Object) "Mrk+");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.stream();
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      ToStringStyle toStringStyle0 = null;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "java.lang.String@1[value={M,r,k,+},hash=2406821]");
      Class<Object> class0 = Object.class;
      stringBuffer0.append((CharSequence) "java.lang.String@1[value={M,r,k,+},hash=2406821]");
      boolean boolean0 = false;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("", (ToStringStyle) null, stringBuffer0, (Class<? super String>) class0, false, false);
      reflectionToStringBuilder0.toString();
      ReflectionToStringBuilder.toString((Object) "", (ToStringStyle) null, false);
      ReflectionToStringBuilder.toNoNullStringArray(stringArray0);
      ReflectionToStringBuilder.toString((Object) stringBuffer0, (ToStringStyle) null, false, true);
      reflectionToStringBuilder0.isExcludeNullValues();
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, (ToStringStyle) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      ReflectionToStringBuilder.toString((Object) "mPXsQf+Ln-", toStringStyle0, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{m,P,X,s,Q,f,+,L,n,-},1634108371";
      stringArray0[1] = "{m,P,X,s,Q,f,+,L,n,-},1634108371";
      stringArray0[2] = "mPXsQf+Ln-";
      stringArray0[3] = "mPXsQf+Ln-";
      stringArray0[4] = "";
      stringArray0[5] = "mPXsQf+Ln-";
      ReflectionToStringBuilder.toStringExclude((Object) "{m,P,X,s,Q,f,+,L,n,-},1634108371", stringArray0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("{m,P,X,s,Q,f,+,L,n,-},1634108371", toStringStyle0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("java.lang.String@2[value={{,m,,,P,,,X,,,s,,,Q,,,f,,,+,,,L,,,n,,,-,},,,1,6,3,4,1,0,8,3,7,1},hash=1973678131]value={{,m,,,P,,,X,,,s,,,Q,,,f,,,+,,,L,,,n,,,-,},,,1,6,3,4,1,0,8,3,7,1},hash=1973678131]");
      reflectionToStringBuilder0.appendSuper("mPXsQf+Ln-");
      String[] stringArray1 = ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      reflectionToStringBuilder0.getUpToClass();
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toStringExclude((Object) null, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.chars();
      ReflectionToStringBuilder.toString((Object) "|^vOYp8Nw<}5", toStringStyle0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) stringBuffer0;
      ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      stringBuffer0.append(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      String string0 = "}e4FJn3?TEm";
      StringBuffer stringBuffer0 = new StringBuffer("}e4FJn3?TEm");
      Class<Object> class0 = Object.class;
      stringBuffer0.insert(0, 696.0F);
      boolean boolean0 = false;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(integer0, toStringStyle0, stringBuffer0, (Class<? super Integer>) class0, true, false, false);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.appendFieldsIn(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("org.apache.commons.lang3.builder.ReflectionToStringBuilder");
      ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      ReflectionToStringBuilder.toString((Object) "org.apache.commons.lang3.builder.ReflectionToStringBuilder", (ToStringStyle) standardToStringStyle0);
      Object object0 = new Object();
      StringBuffer stringBuffer0 = new StringBuffer();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, standardToStringStyle0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.push("{");
      ReflectionToStringBuilder.toStringExclude(object0, (Collection<String>) linkedList0);
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      StringBuffer stringBuffer0 = new StringBuffer(36);
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) "java.lang.Object@2[]]", toStringStyle0, stringBuffer0, (Class<? super Object>) class0, true, true, true);
      stringBuffer0.append('}');
      reflectionToStringBuilder0.setAppendTransients(true);
      ReflectionToStringBuilder.toString((Object) stringBuffer0, toStringStyle0, true, false);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(integer0);
      reflectionToStringBuilder0.getUpToClass();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "QMvK#X/";
      stringArray0[1] = "QMvK#X/";
      stringArray0[2] = "QMvK#X/";
      stringArray0[3] = "QMvK#X/";
      stringArray0[4] = "Cannot store ";
      stringArray0[5] = "QMvK#X/";
      stringArray0[6] = "g/";
      stringArray0[7] = "QMvK#X/";
      stringArray0[8] = "QMvK#X/";
      ReflectionToStringBuilder.toStringExclude((Object) "QMvK#X/", stringArray0);
      reflectionToStringBuilder0.setExcludeNullValues(true);
      reflectionToStringBuilder0.isExcludeNullValues();
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder.toString((Object) "QMvK#X/", (ToStringStyle) multilineRecursiveToStringStyle0, false, false, true, (Class<? super Object>) class0);
      Object object0 = new Object();
      ReflectionToStringBuilder.toString(object0, (ToStringStyle) multilineRecursiveToStringStyle0, true, true, (Class<? super Object>) class0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer("");
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("", toStringStyle0, stringBuffer0, (Class<? super String>) class0, true, true, true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      int[] intArray0 = new int[3];
      Object object0 = new Object();
      ToStringBuilder.reflectionToString(object0, toStringStyle0, true);
      stringBuffer0.append((CharSequence) "java.lang.Object@3[]");
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      reflectionToStringBuilder0.append(".bP^8Ba", intArray0);
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      reflectionToStringBuilder1.setExcludeNullValues(true);
      reflectionToStringBuilder1.isAppendTransients();
      ReflectionToStringBuilder.toString((Object) "", toStringStyle0, true);
      ReflectionToStringBuilder.toString((Object) toStringStyle0, toStringStyle0, false, true, (Class<? super Object>) class0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      ReflectionToStringBuilder.toString(object0, toStringStyle0, false);
      Object object1 = new Object();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object1, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, false, true);
      Integer integer0 = new Integer(0);
      ReflectionToStringBuilder.toString((Object) integer0, toStringStyle0, true, true, (Class<? super Object>) class0);
      ReflectionToStringBuilder.toString((Object) "`u{fHV+$$&VpoZ->q", toStringStyle0, true, false, (Class<? super Object>) class0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder.toString(object0, toStringStyle0, true, true, false, (Class<? super Object>) class0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(toStringStyle0);
      ReflectionToStringBuilder.toString((Object) "[]", toStringStyle0, true);
      reflectionToStringBuilder0.toString();
      ReflectionToStringBuilder.toString((Object) "[value={[,]},hash=0]", toStringStyle0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("W(YfZ,xzTFZ@X", standardToStringStyle0);
      reflectionToStringBuilder0.getUpToClass();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "W(YfZ,xzTFZ@X");
      standardToStringStyle0.appendFieldEnd(stringBuffer0, "");
      ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      reflectionToStringBuilder0.setExcludeNullValues(false);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, (ToStringStyle) standardToStringStyle0, false, true, (Class<? super Object>) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(1160);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ReflectionToStringBuilder.toStringExclude((Object) integer0, (Collection<String>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = null;
      Collection<String> collection0 = null;
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toStringExclude((Object) null, (Collection<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(31);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Class<Object> class0 = Object.class;
      StringBuffer stringBuffer0 = new StringBuffer();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(class0, toStringStyle0, stringBuffer0);
      reflectionToStringBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray((Collection<String>) null);
      ReflectionToStringBuilder.toNoNullStringArray(stringArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer();
      IntStream intStream0 = stringBuffer0.chars();
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (Object) intStream0);
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("|^vOYp8Nw<}5", toStringStyle0, stringBuffer0, (Class<? super String>) class0, false, false);
      reflectionToStringBuilder0.append((long) 0);
      reflectionToStringBuilder0.toString();
      boolean boolean0 = false;
      ReflectionToStringBuilder.toString((Object) "|^vOYp8Nw<}5", toStringStyle0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) reflectionToStringBuilder0;
      objectArray0[2] = (Object) stringBuffer1;
      ToStringBuilder toStringBuilder0 = reflectionToStringBuilder0.append(0L);
      objectArray0[3] = (Object) stringBuffer0;
      ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      stringBuffer0.append(stringBuffer1);
      reflectionToStringBuilder0.isAppendTransients();
      Class<Object> class1 = Object.class;
      ReflectionToStringBuilder.toString((Object) toStringBuilder0, toStringStyle0, false, false, false, (Class<? super Object>) class1);
      reflectionToStringBuilder0.toString();
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getExcludeFieldNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("");
      Class<Object> class0 = Object.class;
      reflectionToStringBuilder0.appendFieldsIn(class0);
      reflectionToStringBuilder0.isAppendTransients();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getExcludeFieldNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, (ToStringStyle) standardToStringStyle0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0);
      ReflectionToStringBuilder.toString((Object) reflectionToStringBuilder0, toStringStyle0, true, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        linkedList0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer();
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, true, true, true);
      String string0 = "Specified class is not a superclass of the object";
      reflectionToStringBuilder0.append("Specified class is not a superclass of the object", (-518.36865F));
      reflectionToStringBuilder0.setAppendTransients(false);
      reflectionToStringBuilder0.appendFieldsIn(class0);
      reflectionToStringBuilder0.setAppendStatics(true);
      int int0 = 36;
      Integer integer0 = new Integer(36);
      ReflectionToStringBuilder.toString((Object) integer0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0);
      ReflectionToStringBuilder.toString(object0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray(object1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      ReflectionToStringBuilder.toString(object0, toStringStyle0, false, false);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer((-1244));
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(integer0);
      Class<Integer> class0 = Integer.class;
      reflectionToStringBuilder0.setUpToClass(class0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = new Object();
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, multilineRecursiveToStringStyle0);
      reflectionToStringBuilder0.append("WGstS|kF`:&Gv", false);
      reflectionToStringBuilder0.setExcludeNullValues(true);
      reflectionToStringBuilder0.isAppendStatics();
      reflectionToStringBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer("");
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("", toStringStyle0, stringBuffer0, (Class<? super String>) class0, true, true);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("0", toStringStyle0, (StringBuffer) null, (Class<? super String>) class0, true, true, true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      reflectionToStringBuilder1.appendFieldsIn(class0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, standardToStringStyle0, (StringBuffer) null);
      reflectionToStringBuilder0.appendAsObjectToString(standardToStringStyle0);
      String[] stringArray0 = new String[0];
      reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      reflectionToStringBuilder0.isExcludeNullValues();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("IMSXcANlFOcxkx\u0000R0", toStringStyle0, stringBuffer0);
      reflectionToStringBuilder0.getUpToClass();
      Class<Object> class0 = Object.class;
      reflectionToStringBuilder0.appendFieldsIn(class0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.appendFieldsIn((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "xU7f_l}k:*2o/vM1IB;";
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("xU7f_l}k:*2o/vM1IB;");
      reflectionToStringBuilder0.setAppendTransients(true);
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      ReflectionToStringBuilder.toString((Object) reflectionToStringBuilder0, toStringStyle0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.setUpToClass(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified class is not a superclass of the object
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      Class<Object> class0 = Object.class;
      ToStringBuilder.reflectionToString("G0N$c", (ToStringStyle) null, false, (Class<? super String>) class0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "java.lang.String@1[value={G,0,N,$,c},hash=67076132]");
      Class<Object> class1 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, toStringStyle0, stringBuffer0, (Class<? super Object>) class1, true, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      boolean boolean0 = false;
      reflectionToStringBuilder0.append((long[]) null);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((String) null, toStringStyle0, false, false, false, (Class<? super String>) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      ReflectionToStringBuilder.toStringExclude(object0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      reflectionToStringBuilder0.append('i');
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.setUpToClass(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified class is not a superclass of the object
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object object0 = new Object();
      StringBuffer stringBuffer0 = new StringBuffer(837);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, (ToStringStyle) null, stringBuffer0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray(stringBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      ReflectionToStringBuilder.toStringExclude(object0, (Collection<String>) linkedList1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder.toString("!dNu", toStringStyle0, true, true, true, (Class<? super String>) class0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Collection<String> collection0 = null;
      ReflectionToStringBuilder.toNoNullStringArray((Collection<String>) null);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) stringArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      ReflectionToStringBuilder.toString((Object) "", toStringStyle0);
      Class<String> class0 = String.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("", toStringStyle0, (StringBuffer) null, (Class<? super String>) class0, false, false, true);
      float[] floatArray0 = new float[0];
      reflectionToStringBuilder0.append(" :o", floatArray0);
      reflectionToStringBuilder0.getUpToClass();
      reflectionToStringBuilder0.toString();
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      reflectionToStringBuilder0.append(booleanArray0);
      reflectionToStringBuilder0.append((String) null, (Object) null);
      reflectionToStringBuilder0.getUpToClass();
      reflectionToStringBuilder0.setAppendStatics(true);
      reflectionToStringBuilder0.setExcludeFieldNames((String[]) null);
      Object object0 = new Object();
      ReflectionToStringBuilder.toString(object0, toStringStyle0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer(358);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(integer0, toStringStyle0);
      reflectionToStringBuilder0.setAppendTransients(true);
      reflectionToStringBuilder0.isAppendTransients();
      reflectionToStringBuilder0.isExcludeNullValues();
      reflectionToStringBuilder0.isAppendStatics();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'r';
      charArray0[2] = '+';
      charArray0[1] = 'J';
      charArray0[4] = '>';
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-1257), (double) (-1257));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1257
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, (ToStringStyle) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) reflectionToStringBuilder0;
      objectArray0[3] = object0;
      reflectionToStringBuilder0.append("Specified class is not a superclass of the object", (short) (-2920));
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) reflectionToStringBuilder0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      Integer integer0 = new Integer(0);
      ReflectionToStringBuilder.toString((Object) integer0, (ToStringStyle) null);
      reflectionToStringBuilder0.toString();
      ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      reflectionToStringBuilder0.isAppendStatics();
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      Object object2 = new Object();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder1.setUpToClass(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified class is not a superclass of the object
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      Object object0 = new Object();
      ToStringStyle.isRegistered(object0);
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder.toString((Object) linkedList0, (ToStringStyle) recursiveToStringStyle0, true, true, false, (Class<? super Object>) class0);
      Object object1 = new Object();
      recursiveToStringStyle0.setFieldSeparatorAtStart(true);
      boolean boolean0 = false;
      ReflectionToStringBuilder.toString((Object) class0, (ToStringStyle) recursiveToStringStyle0, false, true);
      Object object2 = new Object();
      ReflectionToStringBuilder.toString(object2, (ToStringStyle) recursiveToStringStyle0, false);
      Object object3 = new Object();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object3, recursiveToStringStyle0, stringBuffer0);
      reflectionToStringBuilder0.isAppendStatics();
      // Undeclared exception!
      try { 
        ToStringBuilder.reflectionToString((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ReflectionToStringBuilder.toStringExclude((Object) integer0, (Collection<String>) linkedList0);
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      String[] stringArray0 = new String[0];
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      ReflectionToStringBuilder reflectionToStringBuilder2 = (ReflectionToStringBuilder)reflectionToStringBuilder1.appendToString("java.lang.Integer@1[value=0]value=0]");
      reflectionToStringBuilder1.isAppendStatics();
      reflectionToStringBuilder1.isAppendTransients();
      int[] intArray0 = new int[6];
      intArray0[5] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      ReflectionToStringBuilder.toStringExclude((Object) "Unexpected IllegalAccessException: ", stringArray0);
      reflectionToStringBuilder1.isAppendStatics();
      reflectionToStringBuilder2.getExcludeFieldNames();
      // Undeclared exception!
      try { 
        reflectionToStringBuilder1.reflectionAppendArray(reflectionToStringBuilder2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
