/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:55:11 GMT 2019
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import java.util.ConcurrentModificationException;
import java.util.Spliterator;
import org.apache.commons.lang3.builder.Diff;
import org.apache.commons.lang3.builder.DiffBuilder;
import org.apache.commons.lang3.builder.DiffResult;
import org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle;
import org.apache.commons.lang3.builder.RecursiveToStringStyle;
import org.apache.commons.lang3.builder.StandardToStringStyle;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DiffBuilder_ESTest extends DiffBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff0, toStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-781.6636183073355);
      doubleArray0[1] = 528.1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1114.2452105139);
      doubleArray0[5] = 502.9;
      doubleArray0[6] = 381.39446;
      doubleArray0[7] = 1.0;
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("Z", doubleArray0, doubleArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new double[] {(-781.6636183073355), 528.1, 0.0, 0.0, (-1114.2452105139), 502.9, 381.39446, 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      DiffBuilder<Diff<Integer>> diffBuilder2 = diffBuilder1.append("Z", '>', 'I');
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertArrayEquals(new double[] {(-781.6636183073355), 528.1, 0.0, 0.0, (-1114.2452105139), 502.9, 381.39446, 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      DiffBuilder<Diff<Integer>> diffBuilder3 = diffBuilder2.append("Z", (-5716.3797188586), 0.0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertArrayEquals(new double[] {(-781.6636183073355), 528.1, 0.0, 0.0, (-1114.2452105139), 502.9, 381.39446, 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      DiffBuilder<Diff<Integer>> diffBuilder4 = diffBuilder3.append("Z", 1.0F, 1.0F);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertArrayEquals(new double[] {(-781.6636183073355), 528.1, 0.0, 0.0, (-1114.2452105139), 502.9, 381.39446, 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      DiffBuilder<Diff<Integer>> diffBuilder5 = diffBuilder4.append("Z", 0, 0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder5);
      assertArrayEquals(new double[] {(-781.6636183073355), 528.1, 0.0, 0.0, (-1114.2452105139), 502.9, 381.39446, 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      DiffBuilder<Diff<Integer>> diffBuilder6 = diffBuilder5.append("=", (byte)7, (byte)0);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder5);
      assertArrayEquals(new double[] {(-781.6636183073355), 528.1, 0.0, 0.0, (-1114.2452105139), 502.9, 381.39446, 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Integer integer0 = new Integer(598);
      assertNotNull(integer0);
      assertEquals(598, (int)integer0);
      
      DiffBuilder<Integer> diffBuilder7 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      assertNotNull(diffBuilder7);
      
      DiffBuilder<Integer> diffBuilder8 = diffBuilder7.append("Z", false, false);
      assertNotNull(diffBuilder8);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder8, diffBuilder7);
      
      DiffBuilder<Integer> diffBuilder9 = diffBuilder8.append("=", (-1363.0F), 1.0F);
      assertNotNull(diffBuilder9);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder7, diffBuilder9);
      assertSame(diffBuilder8, diffBuilder7);
      assertSame(diffBuilder8, diffBuilder9);
      assertSame(diffBuilder9, diffBuilder7);
      assertSame(diffBuilder9, diffBuilder8);
      
      DiffBuilder<Integer> diffBuilder10 = diffBuilder9.append("Z", (byte)0, (byte) (-71));
      assertNotNull(diffBuilder10);
      assertSame(diffBuilder7, diffBuilder10);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder7, diffBuilder9);
      assertSame(diffBuilder8, diffBuilder10);
      assertSame(diffBuilder8, diffBuilder7);
      assertSame(diffBuilder8, diffBuilder9);
      assertSame(diffBuilder9, diffBuilder7);
      assertSame(diffBuilder9, diffBuilder8);
      assertSame(diffBuilder9, diffBuilder10);
      assertSame(diffBuilder10, diffBuilder7);
      assertSame(diffBuilder10, diffBuilder9);
      assertSame(diffBuilder10, diffBuilder8);
      
      DiffResult<Integer> diffResult0 = diffBuilder10.build();
      assertNotNull(diffResult0);
      assertSame(diffBuilder7, diffBuilder10);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder7, diffBuilder9);
      assertSame(diffBuilder8, diffBuilder10);
      assertSame(diffBuilder8, diffBuilder7);
      assertSame(diffBuilder8, diffBuilder9);
      assertSame(diffBuilder9, diffBuilder7);
      assertSame(diffBuilder9, diffBuilder8);
      assertSame(diffBuilder9, diffBuilder10);
      assertSame(diffBuilder10, diffBuilder7);
      assertSame(diffBuilder10, diffBuilder9);
      assertSame(diffBuilder10, diffBuilder8);
      assertEquals(2, diffResult0.getNumberOfDiffs());
      
      // Undeclared exception!
      try { 
        diffBuilder10.append("=", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(3319);
      assertNotNull(integer0);
      assertEquals(3319, (int)integer0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      assertNotNull(diffBuilder0);
      
      Object[] objectArray0 = new Object[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder", objectArray0, objectArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '#';
      charArray0[2] = 'p';
      charArray0[3] = '?';
      charArray0[4] = 'o';
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("j.C87", charArray0, charArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertArrayEquals(new char[] {'~', '#', 'p', '?', 'o'}, charArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(5, charArray0.length);
      
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("org.apache.commons.lang3.builder.DiffBuilder", 'p', 'o');
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertArrayEquals(new char[] {'~', '#', 'p', '?', 'o'}, charArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(5, charArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'o';
      floatArray0[1] = (float) '#';
      floatArray0[2] = (float) 'o';
      floatArray0[3] = (float) '?';
      floatArray0[4] = (float) '#';
      floatArray0[5] = (float) '?';
      floatArray0[6] = (float) '~';
      DiffBuilder<Integer> diffBuilder4 = diffBuilder3.append("", floatArray0, floatArray0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertArrayEquals(new char[] {'~', '#', 'p', '?', 'o'}, charArray0);
      assertArrayEquals(new float[] {111.0F, 35.0F, 111.0F, 63.0F, 35.0F, 63.0F, 126.0F}, floatArray0, 0.01F);
      assertEquals(0, objectArray0.length);
      assertEquals(5, charArray0.length);
      assertEquals(7, floatArray0.length);
      
      DiffBuilder<Integer> diffBuilder5 = diffBuilder4.append("org.apache.commons.lang3.builder.DiffBuilder", (short)2847, (short)2847);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertArrayEquals(new char[] {'~', '#', 'p', '?', 'o'}, charArray0);
      assertArrayEquals(new float[] {111.0F, 35.0F, 111.0F, 63.0F, 35.0F, 63.0F, 126.0F}, floatArray0, 0.01F);
      assertEquals(0, objectArray0.length);
      assertEquals(5, charArray0.length);
      assertEquals(7, floatArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '?';
      longArray0[1] = (long) '?';
      longArray0[2] = (long) '#';
      longArray0[3] = (long) '~';
      longArray0[4] = (long) (short)2847;
      longArray0[5] = (long) '~';
      DiffBuilder<Integer> diffBuilder6 = diffBuilder5.append("", (long[]) null, longArray0);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder1);
      assertArrayEquals(new char[] {'~', '#', 'p', '?', 'o'}, charArray0);
      assertArrayEquals(new long[] {63L, 63L, 35L, 126L, 2847L, 126L}, longArray0);
      assertArrayEquals(new float[] {111.0F, 35.0F, 111.0F, 63.0F, 35.0F, 63.0F, 126.0F}, floatArray0, 0.01F);
      assertEquals(0, objectArray0.length);
      assertEquals(5, charArray0.length);
      assertEquals(6, longArray0.length);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 34;
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = (-1);
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, false);
      assertNotNull(diffBuilder0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      
      String string0 = null;
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (double) 34, (-973.8968));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(2080);
      assertNotNull(integer0);
      assertEquals(2080, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      assertNotNull(diffBuilder0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      assertNotNull(diffResult0);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      Spliterator<Diff<?>> spliterator0 = diffResult0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", diffResult0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2080;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("", floatArray0, floatArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new float[] {0.0F, 2080.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(4, floatArray0.length);
      
      Object[] objectArray0 = new Object[0];
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("", objectArray0, objectArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new float[] {0.0F, 2080.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(4, floatArray0.length);
      assertEquals(0, objectArray0.length);
      
      DiffBuilder<Integer> diffBuilder4 = diffBuilder3.append(".gy(&", (Object) diffBuilder1, (Object) diffBuilder0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new float[] {0.0F, 2080.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(4, floatArray0.length);
      assertEquals(0, objectArray0.length);
      
      DiffBuilder<Integer> diffBuilder5 = diffBuilder2.append("pMDj?21", diffResult0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new float[] {0.0F, 2080.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(4, floatArray0.length);
      
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<Integer>> diffBuilder6 = new DiffBuilder<Diff<Integer>>(diff0, diff0, toStringStyle0, true);
      assertNotNull(diffBuilder6);
      
      DiffBuilder<Diff<Integer>> diffBuilder7 = diffBuilder6.append("{", 'q', 'a');
      assertNotNull(diffBuilder7);
      assertSame(diffBuilder6, diffBuilder7);
      assertSame(diffBuilder7, diffBuilder6);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      charArray0[4] = 'a';
      charArray0[5] = 'q';
      charArray0[6] = 'a';
      // Undeclared exception!
      try { 
        diffBuilder7.append((String) null, charArray0, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("org.apache.commons.lang3.builder.DiffBuilder$6", "", toStringStyle0);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$13", '_', '_');
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)104;
      DiffBuilder<String> diffBuilder2 = diffBuilder0.append("y6ppm@", byteArray0, byteArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-44), (byte)81, (byte) (-21), (byte)23, (byte) (-1), (byte)104}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      DiffBuilder<String> diffBuilder3 = diffBuilder1.append("y6ppm@", 1146, 0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      
      DiffBuilder<String> diffBuilder4 = diffBuilder3.append("org.apache.commons.lang3.builder.DiffBuilder$13", false, false);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      
      DiffBuilder<String> diffBuilder5 = diffBuilder4.append("S;nP4ZCCM(lP8ki`", 0.0, (double) 0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder3);
      
      DiffBuilder<String> diffBuilder6 = diffBuilder4.append("y6ppm@", (byte) (-100), (byte) (-100));
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder2);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      DiffBuilder<String> diffBuilder7 = diffBuilder6.append("ykJCRtO(=", booleanArray0, (boolean[]) null);
      assertNotNull(diffBuilder7);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder7);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder7);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder7, diffBuilder2);
      assertSame(diffBuilder7, diffBuilder1);
      assertSame(diffBuilder7, diffBuilder3);
      assertSame(diffBuilder7, diffBuilder5);
      assertSame(diffBuilder7, diffBuilder6);
      assertSame(diffBuilder7, diffBuilder4);
      assertSame(diffBuilder7, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder7);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder7);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder7);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(44);
      assertNotNull(integer0);
      assertEquals(44, (int)integer0);
      
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      assertNotNull(toStringStyle0);
      
      boolean boolean0 = false;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("K2hA^Z", (float) 44, (float) 44);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("K2hA^Z", 1348.42F, 1348.42F);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte) (-52);
      byteArray1[4] = (byte)44;
      DiffBuilder<Integer> diffBuilder3 = diffBuilder0.append("K2hA^Z", byteArray0, byteArray1);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)0, (byte)1, (byte) (-52), (byte)44}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      Diff<Object> diff0 = (Diff<Object>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<Object>> diffBuilder4 = new DiffBuilder<Diff<Object>>(diff0, diff0, toStringStyle0);
      assertNotNull(diffBuilder4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DiffBuilder<Diff<Object>> diffBuilder5 = diffBuilder4.append("%O+$46sSr$)_BoCdT$m", (Object) "K2hA^Z", object0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder5);
      
      // Undeclared exception!
      try { 
        diffBuilder5.append((String) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<Object> diffBuilder1 = new DiffBuilder<Object>(integer0, diffBuilder0, toStringStyle0, true);
      assertNotNull(diffBuilder1);
      
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("Field name cannot be null", (double) (-1), (double) (-1));
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      
      DiffBuilder<Object> diffBuilder3 = diffBuilder2.append("org.apache.commons.lang3.builder.Diff", (-1), 0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Field name cannot be null";
      objectArray0[1] = (Object) "org.apache.commons.lang3.builder.Diff";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "Field name cannot be null";
      objectArray0[4] = (Object) integer0;
      DiffBuilder<Object> diffBuilder4 = diffBuilder3.append("Field name cannot be null", (Object[]) null, objectArray0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertEquals(5, objectArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1356;
      DiffBuilder<Object> diffBuilder5 = diffBuilder3.append("org.apache.commons.lang3.builder.DiffBuilder$7", shortArray0, shortArray0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1356}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      DiffBuilder<Object> diffBuilder6 = diffBuilder5.append("", true, true);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1356}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      DiffBuilder<String> diffBuilder7 = new DiffBuilder<String>("org.apache.commons.lang3.builder.DiffBuilder$7", "Field name cannot be null", toStringStyle0);
      assertNotNull(diffBuilder7);
      
      DiffBuilder<String> diffBuilder8 = diffBuilder7.append("org.apache.commons.lang3.builder.DiffBuilder", (float) (short)1356, (-2850.002F));
      assertNotNull(diffBuilder8);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder8, diffBuilder7);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff0, toStringStyle0);
      assertNotNull(diffBuilder0);
      
      String string0 = "|oUVyh1p";
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("|oUVyh1p", (short)0, (short)0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      DiffBuilder<Diff<Integer>> diffBuilder2 = diffBuilder1.append("|oUVyh1p", (-1L), (-1L));
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = 'V';
      charArray0[2] = '}';
      // Undeclared exception!
      try { 
        diffBuilder1.append((String) null, charArray0, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(44);
      assertNotNull(integer0);
      assertEquals(44, (int)integer0);
      
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      assertNotNull(toStringStyle0);
      
      boolean boolean0 = false;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (long) 44, (-1123L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(3091);
      assertNotNull(integer0);
      assertEquals(3091, (int)integer0);
      
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertNotNull(standardToStringStyle0);
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      assertNotNull(diffBuilder0);
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", '|', 'D');
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("C~Cm0zwT=}l}(@", 1137.0F, 1.0F);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("par", false, true);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      
      DiffBuilder<Integer> diffBuilder4 = diffBuilder3.append("C~Cm0zwT=}l}(@", (long) 3091, (long) 3091);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      
      DiffBuilder<Integer> diffBuilder5 = diffBuilder4.append("C~Cm0zwT=}l}(@", (byte)0, (byte)0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        diffBuilder5.append((String) null, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertNotNull(standardToStringStyle0);
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, standardToStringStyle0);
      assertNotNull(diffBuilder0);
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder", (int[]) null, (int[]) null);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("org.apache.commons.lang3.builder.DiffBuilder", object0, (Object) null);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)226;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1160;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      DiffBuilder<Object> diffBuilder3 = diffBuilder2.append("org.apache.commons.lang3.builder.DiffBuilder", shortArray0, shortArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertArrayEquals(new short[] {(short)226, (short)0, (short)0, (short)1160, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) diffBuilder2;
      objectArray0[1] = (Object) diffBuilder3;
      objectArray0[2] = (Object) "org.apache.commons.lang3.builder.DiffBuilder";
      objectArray0[3] = (Object) diffBuilder0;
      objectArray0[4] = (Object) standardToStringStyle0;
      objectArray0[5] = (Object) diffBuilder3;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        diffBuilder3.append((String) null, objectArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("|GeLn.v>ZG>G", "Ud_Bx", toStringStyle0);
      assertNotNull(diffBuilder0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2698);
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("Ud_Bx", shortArray0, shortArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new short[] {(short) (-2698)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      DiffBuilder<String> diffBuilder2 = diffBuilder1.append("org.apache.commons.lang3.builder.DiffBuilder$18", true, false);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertArrayEquals(new short[] {(short) (-2698)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-2698);
      DiffBuilder<String> diffBuilder3 = diffBuilder2.append("|GeLn.v>ZG>G", floatArray0, floatArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertArrayEquals(new short[] {(short) (-2698)}, shortArray0);
      assertArrayEquals(new float[] {(-2698.0F)}, floatArray0, 0.01F);
      assertEquals(1, shortArray0.length);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = '';
      DiffBuilder<String> diffBuilder4 = diffBuilder3.append("|GeLn.v>ZG>G", (char[]) null, charArray0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertArrayEquals(new short[] {(short) (-2698)}, shortArray0);
      assertArrayEquals(new float[] {(-2698.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {'P', ''}, charArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, floatArray0.length);
      assertEquals(2, charArray0.length);
      
      DiffBuilder<String> diffBuilder5 = diffBuilder4.append("<Rp9", 0, (int) (short) (-2698));
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder4);
      assertArrayEquals(new short[] {(short) (-2698)}, shortArray0);
      assertArrayEquals(new float[] {(-2698.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {'P', ''}, charArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, floatArray0.length);
      assertEquals(2, charArray0.length);
      
      DiffBuilder<String> diffBuilder6 = diffBuilder5.append("org.apache.commons.lang3.builder.DiffBuilder$18", (long) (short) (-2698), (-1L));
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder2);
      assertArrayEquals(new short[] {(short) (-2698)}, shortArray0);
      assertArrayEquals(new float[] {(-2698.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {'P', ''}, charArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, floatArray0.length);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 41;
      Integer integer1 = new Integer(41);
      assertNotNull(integer1);
      assertEquals(41, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      assertNotNull(toStringStyle0);
      
      boolean boolean0 = true;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, true);
      assertNotNull(diffBuilder0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      
      String string0 = null;
      short short0 = (short)2582;
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (short)2582, (short)2582);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<String> diffBuilder1 = new DiffBuilder<String>("OHDK\"9F< PEe", "|?K9qkPRjkv", toStringStyle0, false);
      assertNotNull(diffBuilder1);
      
      DiffBuilder<String> diffBuilder2 = diffBuilder1.append("OHDK\"9F< PEe", 0.0F, 0.0F);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) diffBuilder1;
      objectArray0[1] = (Object) diffBuilder1;
      objectArray0[2] = (Object) diffBuilder1;
      objectArray0[3] = (Object) diffBuilder1;
      objectArray0[4] = (Object) diffBuilder1;
      DiffBuilder<String> diffBuilder3 = diffBuilder2.append("|?K9qkPRjkv", objectArray0, objectArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertEquals(5, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      DiffBuilder<String> diffBuilder4 = diffBuilder3.append("|?K9qkPRjkv", doubleArray0, doubleArray0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder3);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      
      DiffBuilder<String> diffBuilder5 = diffBuilder4.append("||1Mj", (byte)0, (byte)0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (byte)0;
      // Undeclared exception!
      try { 
        diffBuilder5.append((String) null, longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      assertNotNull(recursiveToStringStyle0);
      
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("}&U", "}&U", recursiveToStringStyle0);
      assertNotNull(diffBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      assertNotNull(diffBuilder0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = null;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, booleanArray0, booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-134));
      assertNotNull(integer0);
      assertEquals((-134), (int)integer0);
      
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      assertNotNull(diffBuilder0);
      
      String string0 = "";
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)0;
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (byte) (-1), (byte)0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("", (Object) diffBuilder0, (Object) integer0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      assertNotNull(diffResult0);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("", diffResult0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-134);
      floatArray0[3] = (float) (byte)0;
      DiffBuilder<Integer> diffBuilder4 = diffBuilder3.append("", floatArray0, floatArray0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new float[] {0.0F, 0.0F, (-134.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      String string1 = null;
      byte byte2 = (byte)64;
      // Undeclared exception!
      try { 
        diffBuilder4.append((String) null, (byte)64, (byte)64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("F|RNesHW_||.>'QoD", "org.apache.commons.lang3.builder.DiffBuilder$12", toStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$12", (int[]) null, (int[]) null);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      Integer integer0 = new Integer(196);
      assertNotNull(integer0);
      assertEquals(196, (int)integer0);
      
      DiffBuilder<String> diffBuilder2 = diffBuilder1.append("org.apache.commons.lang3.builder.DiffBuilder$12", (Object) null, (Object) integer0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      
      DiffBuilder<String> diffBuilder3 = diffBuilder2.append("$V]pYf._Buu#(d)h", (Object) toStringStyle0, (Object) diffBuilder1);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      
      DiffBuilder<String> diffBuilder4 = diffBuilder2.append("org.apache.commons.lang3.builder.DiffBuilder$12", 0L, (-542L));
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder0);
      
      DiffBuilder<String> diffBuilder5 = diffBuilder4.append("org.apache.commons.lang3.builder.DiffBuilder$12", 1.0, (double) (-542L));
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder2);
      
      DiffBuilder<String> diffBuilder6 = diffBuilder1.append("org.apache.commons.lang3.builder.DiffBuilder$12", (-542L), 1L);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder1);
      
      DiffBuilder<Object> diffBuilder7 = new DiffBuilder<Object>(diffBuilder4, "org.apache.commons.lang3.builder.DiffBuilder$12", toStringStyle0);
      assertNotNull(diffBuilder7);
      
      DiffBuilder<Object> diffBuilder8 = diffBuilder7.append("F|RNesHW_||.>'QoD", (int[]) null, (int[]) null);
      assertNotNull(diffBuilder8);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder8, diffBuilder7);
      
      DiffBuilder<String> diffBuilder9 = diffBuilder1.append("", 1.0, (-2177.6955));
      assertNotNull(diffBuilder9);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder9);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder9);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder9, diffBuilder0);
      assertSame(diffBuilder9, diffBuilder2);
      assertSame(diffBuilder9, diffBuilder6);
      assertSame(diffBuilder9, diffBuilder1);
      assertSame(diffBuilder9, diffBuilder4);
      assertSame(diffBuilder9, diffBuilder5);
      assertSame(diffBuilder9, diffBuilder3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      int int0 = (-2114);
      Integer integer0 = new Integer((-2114));
      assertNotNull(integer0);
      assertEquals((-2114), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>("org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle", integer0, toStringStyle0, true);
      assertNotNull(diffBuilder0);
      assertTrue(integer0.equals((Object)int0));
      
      short short0 = (short) (-2928);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle", (short) (-2928), (short) (-2928));
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        diffBuilder1.append((String) null, '(', 'd');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("<^", "<^", toStringStyle0);
      assertNotNull(diffBuilder0);
      
      Integer integer0 = new Integer(2422);
      assertNotNull(integer0);
      assertEquals(2422, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      DiffBuilder<Integer> diffBuilder1 = new DiffBuilder<Integer>(integer0, integer1, (ToStringStyle) null, true);
      assertNotNull(diffBuilder1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2422;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2422;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2422;
      doubleArray0[5] = (double) 2422;
      doubleArray0[6] = (double) 2422;
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("<^", doubleArray0, doubleArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertArrayEquals(new double[] {2422.0, 0.0, 2422.0, 0.0, 2422.0, 2422.0, 2422.0}, doubleArray0, 0.01);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(7, doubleArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1;
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("<^", shortArray0, shortArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertArrayEquals(new double[] {2422.0, 0.0, 2422.0, 0.0, 2422.0, 2422.0, 2422.0}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(7, doubleArray0.length);
      assertEquals(2, shortArray0.length);
      
      DiffBuilder<Integer> diffBuilder4 = diffBuilder3.append("<^", (-2690.0266F), (float) 0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertArrayEquals(new double[] {2422.0, 0.0, 2422.0, 0.0, 2422.0, 2422.0, 2422.0}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(7, doubleArray0.length);
      assertEquals(2, shortArray0.length);
      
      DiffBuilder<Integer> diffBuilder5 = diffBuilder4.append("<^", 2376L, (long) (short)1);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertArrayEquals(new double[] {2422.0, 0.0, 2422.0, 0.0, 2422.0, 2422.0, 2422.0}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(7, doubleArray0.length);
      assertEquals(2, shortArray0.length);
      
      DiffBuilder<Integer> diffBuilder6 = diffBuilder5.append("<^", true, true);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder6);
      assertArrayEquals(new double[] {2422.0, 0.0, 2422.0, 0.0, 2422.0, 2422.0, 2422.0}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(7, doubleArray0.length);
      assertEquals(2, shortArray0.length);
      
      DiffBuilder<Integer> diffBuilder7 = diffBuilder6.append("<^", shortArray0, shortArray0);
      assertNotNull(diffBuilder7);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder7);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder7);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder7);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder7);
      assertSame(diffBuilder1, diffBuilder7);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder7, diffBuilder3);
      assertSame(diffBuilder7, diffBuilder2);
      assertSame(diffBuilder7, diffBuilder1);
      assertSame(diffBuilder7, diffBuilder4);
      assertSame(diffBuilder7, diffBuilder5);
      assertSame(diffBuilder7, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder7);
      assertArrayEquals(new double[] {2422.0, 0.0, 2422.0, 0.0, 2422.0, 2422.0, 2422.0}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(7, doubleArray0.length);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertNotNull(standardToStringStyle0);
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      assertNotNull(diffBuilder0);
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 3549;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      assertNotNull(recursiveToStringStyle0);
      
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, recursiveToStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-1882L);
      longArray0[2] = 0L;
      longArray0[3] = (-681L);
      longArray0[4] = 1076L;
      longArray0[5] = (-3233L);
      longArray0[6] = (-2937L);
      longArray0[7] = (-1L);
      longArray0[8] = 0L;
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$7", longArray0, longArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new long[] {0L, (-1882L), 0L, (-681L), 1076L, (-3233L), (-2937L), (-1L), 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("org.apache.commons.lang3.builder.DiffBuilder$7", intArray0, intArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertArrayEquals(new long[] {0L, (-1882L), 0L, (-681L), 1076L, (-3233L), (-2937L), (-1L), 0L}, longArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(9, longArray0.length);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1076L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-1882L);
      doubleArray0[5] = (double) 1076L;
      doubleArray0[6] = 2941.73792495;
      DiffBuilder<Object> diffBuilder3 = diffBuilder2.append("org.apache.commons.lang3.builder.DiffBuilder$7", doubleArray0, doubleArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertArrayEquals(new double[] {0.0, 1076.0, 0.0, 0.0, (-1882.0), 1076.0, 2941.73792495}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {0L, (-1882L), 0L, (-681L), 1076L, (-3233L), (-2937L), (-1L), 0L}, longArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(9, longArray0.length);
      assertEquals(2, intArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      DiffBuilder<Object> diffBuilder4 = diffBuilder3.append("org.apache.commons.lang3.builder.DiffBuilder$7", object1, object2);
      assertNotNull(diffBuilder4);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertArrayEquals(new double[] {0.0, 1076.0, 0.0, 0.0, (-1882.0), 1076.0, 2941.73792495}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {0L, (-1882L), 0L, (-681L), 1076L, (-3233L), (-2937L), (-1L), 0L}, longArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertEquals(7, doubleArray0.length);
      assertEquals(9, longArray0.length);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-928);
      shortArray0[2] = (short) (-1654);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)5105;
      shortArray0[5] = (short) (-1);
      DiffBuilder<Object> diffBuilder5 = diffBuilder4.append("org.apache.commons.lang3.builder.DiffBuilder$7", shortArray0, shortArray0);
      assertNotNull(diffBuilder5);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder2);
      assertArrayEquals(new double[] {0.0, 1076.0, 0.0, 0.0, (-1882.0), 1076.0, 2941.73792495}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {0L, (-1882L), 0L, (-681L), 1076L, (-3233L), (-2937L), (-1L), 0L}, longArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-928), (short) (-1654), (short) (-1), (short)5105, (short) (-1)}, shortArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertEquals(7, doubleArray0.length);
      assertEquals(9, longArray0.length);
      assertEquals(6, shortArray0.length);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        diffBuilder5.append((String) null, shortArray0, shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertNotNull(standardToStringStyle0);
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object1, standardToStringStyle0);
      assertNotNull(diffBuilder0);
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("]JqMMJFA_%", intArray0, intArray0);
      assertNotNull(diffBuilder1);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(2, intArray0.length);
      
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("]JqMMJFA_%", (byte)34, (byte)34);
      assertNotNull(diffBuilder2);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)34;
      DiffBuilder<Object> diffBuilder3 = diffBuilder2.append("]JqMMJFA_%", shortArray0, shortArray0);
      assertNotNull(diffBuilder3);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)34}, shortArray0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(2, intArray0.length);
      assertEquals(1, shortArray0.length);
      
      DiffBuilder<Object> diffBuilder4 = diffBuilder3.append("", (Object) diffBuilder2, (Object) diffBuilder2);
      assertNotNull(diffBuilder4);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)34}, shortArray0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(2, intArray0.length);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (short)34;
      DiffBuilder<Object> diffBuilder5 = diffBuilder4.append("]JqMMJFA_%", floatArray0, (float[]) null);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder2);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)34}, shortArray0);
      assertArrayEquals(new float[] {0.0F, 34.0F}, floatArray0, 0.01F);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(2, intArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      DiffBuilder<Object> diffBuilder6 = diffBuilder5.append(":4-|O`}d /jUKR\"du=", byteArray0, byteArray0);
      assertNotNull(diffBuilder6);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder4);
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertArrayEquals(new byte[] {(byte)34, (byte)34}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)34}, shortArray0);
      assertArrayEquals(new float[] {0.0F, 34.0F}, floatArray0, 0.01F);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(2, byteArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(2, floatArray0.length);
      
      DiffBuilder<String> diffBuilder7 = new DiffBuilder<String>("", "]*:~<Em", standardToStringStyle0);
      assertNotNull(diffBuilder7);
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      
      DiffBuilder<String> diffBuilder8 = diffBuilder7.append("[%s: %s, %s]", intArray0, intArray0);
      assertNotNull(diffBuilder8);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder8, diffBuilder7);
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      DiffBuilder<String> diffBuilder9 = diffBuilder8.append("}0:dk51;'", (float[]) null, (float[]) null);
      assertNotNull(diffBuilder9);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder7, diffBuilder9);
      assertSame(diffBuilder8, diffBuilder9);
      assertSame(diffBuilder8, diffBuilder7);
      assertSame(diffBuilder9, diffBuilder8);
      assertSame(diffBuilder9, diffBuilder7);
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      DiffBuilder<String> diffBuilder10 = diffBuilder9.append("]*:~<Em", 'F', 'K');
      assertNotNull(diffBuilder10);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder7, diffBuilder10);
      assertSame(diffBuilder7, diffBuilder9);
      assertSame(diffBuilder8, diffBuilder10);
      assertSame(diffBuilder8, diffBuilder9);
      assertSame(diffBuilder8, diffBuilder7);
      assertSame(diffBuilder9, diffBuilder10);
      assertSame(diffBuilder9, diffBuilder8);
      assertSame(diffBuilder9, diffBuilder7);
      assertSame(diffBuilder10, diffBuilder8);
      assertSame(diffBuilder10, diffBuilder7);
      assertSame(diffBuilder10, diffBuilder9);
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Object> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<Object>((Object) null, (Object) null, toStringStyle0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lhs cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>("'ogx-1BG @>Dh", "'ogx-1BG @>Dh", toStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("'ogx-1BG @>Dh", 'd', 'd');
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("`Xh", true, false);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) toStringStyle0;
      objectArray0[1] = (Object) diffBuilder1;
      objectArray0[2] = (Object) diffBuilder0;
      objectArray0[3] = (Object) "`Xh";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "'ogx-1BG @>Dh";
      objectArray0[6] = (Object) diffBuilder0;
      objectArray0[7] = (Object) "'ogx-1BG @>Dh";
      objectArray0[8] = (Object) "`Xh";
      DiffBuilder<Object> diffBuilder3 = diffBuilder2.append("e!b-'f,_", objectArray0, objectArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, false);
      assertNotNull(diffBuilder0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      String string0 = "@|bn>E;!e=aG@H>u2";
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      longArray0[8] = (long) 1;
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("@|bn>E;!e=aG@H>u2", longArray0, longArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(9, longArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) diffBuilder1;
      objectArray0[1] = (Object) 1L;
      objectArray0[2] = (Object) diffBuilder0;
      objectArray0[3] = (Object) 1L;
      objectArray0[4] = (Object) diffBuilder1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) 1L;
      objectArray0[8] = (Object) toStringStyle0;
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("@|bn>E;!e=aG@H>u2", objectArray0, objectArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(9, objectArray0.length);
      assertEquals(9, longArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("@|bn>E;!e=aG@H>u2", byteArray0, byteArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)0, (byte)0}, byteArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(9, objectArray0.length);
      assertEquals(9, longArray0.length);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 1L;
      // Undeclared exception!
      try { 
        diffBuilder3.append((String) null, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-191));
      assertNotNull(integer0);
      assertEquals((-191), (int)integer0);
      
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      assertNotNull(recursiveToStringStyle0);
      
      boolean boolean0 = false;
      DiffBuilder<Object> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<Object>(integer0, (Object) null, recursiveToStringStyle0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rhs cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1170));
      assertNotNull(integer0);
      assertEquals((-1170), (int)integer0);
      
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, integer0, toStringStyle0, true);
      assertNotNull(diffBuilder0);
      
      short[] shortArray0 = new short[0];
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("YwmUfhx,`", shortArray0, (short[]) null);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1170);
      intArray0[1] = (-1170);
      intArray0[2] = (-1170);
      intArray0[3] = (-1170);
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("YwmUfhx,`", intArray0, intArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new int[] {(-1170), (-1170), (-1170), (-1170)}, intArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(4, intArray0.length);
      
      DiffBuilder<Object> diffBuilder3 = diffBuilder2.append("org.apache.commons.lang3.tuple.Pair", (-1), (-1170));
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new int[] {(-1170), (-1170), (-1170), (-1170)}, intArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(4, intArray0.length);
      
      DiffBuilder<Object> diffBuilder4 = diffBuilder3.append("null", (Object) "YwmUfhx,`", (Object) diffBuilder1);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new int[] {(-1170), (-1170), (-1170), (-1170)}, intArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(4, intArray0.length);
      
      DiffBuilder<Object> diffBuilder5 = diffBuilder4.append("=Ou{8V<8``9}V", (float[]) null, (float[]) null);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new int[] {(-1170), (-1170), (-1170), (-1170)}, intArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, "Cannot alter Diff object.", toStringStyle0, true);
      assertNotNull(diffBuilder0);
      
      Integer integer1 = new Integer(2206);
      assertNotNull(integer1);
      assertEquals(2206, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      ToStringStyle toStringStyle1 = ToStringStyle.DEFAULT_STYLE;
      assertNotNull(toStringStyle1);
      assertFalse(toStringStyle1.equals((Object)toStringStyle0));
      
      DiffBuilder<Integer> diffBuilder1 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle1);
      assertNotNull(diffBuilder1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(toStringStyle1.equals((Object)toStringStyle0));
      
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("Cannot alter Diff object.", true, true);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(toStringStyle1.equals((Object)toStringStyle0));
      
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("org.apache.commons.lang3.builder.DiffBuilder$10", (double) 2, (double) 2);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(toStringStyle1.equals((Object)toStringStyle0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      DiffBuilder<Integer> diffBuilder4 = diffBuilder3.append("Cannot alter Diff object.", booleanArray0, booleanArray0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder3);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(toStringStyle1.equals((Object)toStringStyle0));
      assertEquals(4, booleanArray0.length);
      
      DiffBuilder<Integer> diffBuilder5 = diffBuilder4.append("y-9,X$e$HI", booleanArray0, booleanArray0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder3);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(toStringStyle1.equals((Object)toStringStyle0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, true);
      assertNotNull(diffBuilder0);
      
      boolean[] booleanArray0 = new boolean[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("YZN3", booleanArray0, booleanArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder", (byte) (-111), (byte)1);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("org.apache.commons.lang3.builder.DiffBuilder", (long) 0, (long) 0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("org.apache.commons.lang3.builder.DiffBuilder$9", (-5817.2753), (double) (byte)1);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)1;
      DiffBuilder<Integer> diffBuilder4 = diffBuilder3.append("", byteArray0, byteArray0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertArrayEquals(new byte[] {(byte)123, (byte)1, (byte)1, (byte) (-111), (byte) (-111), (byte)1}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      DiffBuilder<Integer> diffBuilder5 = diffBuilder4.append("", (float) (byte)123, (float) (byte)1);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder0);
      assertArrayEquals(new byte[] {(byte)123, (byte)1, (byte)1, (byte) (-111), (byte) (-111), (byte)1}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      DiffBuilder<Integer> diffBuilder6 = diffBuilder5.append(".j6u3gS2q", (byte)9, (byte)1);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder2);
      assertArrayEquals(new byte[] {(byte)123, (byte)1, (byte)1, (byte) (-111), (byte) (-111), (byte)1}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-2771));
      assertNotNull(integer0);
      assertEquals((-2771), (int)integer0);
      
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      assertNotNull(toStringStyle0);
      
      boolean boolean0 = false;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, integer0, toStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$16", 0L, (-1644L));
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      char[] charArray0 = new char[0];
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("", charArray0, charArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      DiffResult<Object> diffResult0 = diffBuilder1.build();
      assertNotNull(diffResult0);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertEquals(1, diffResult0.getNumberOfDiffs());
      
      DiffResult<Object> diffResult1 = diffBuilder0.build();
      assertNotNull(diffResult1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertNotSame(diffResult1, diffResult0);
      assertEquals(1, diffResult1.getNumberOfDiffs());
      assertFalse(diffResult1.equals((Object)diffResult0));
      
      DiffBuilder<String> diffBuilder3 = new DiffBuilder<String>("org.apache.commons.lang3.builder.DiffBuilder$16", "7qyYFG|Hs^F&K8", toStringStyle0);
      assertNotNull(diffBuilder3);
      
      DiffBuilder<String> diffBuilder4 = diffBuilder3.append("", 1286.713567, (double) (-2771));
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder3);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)34;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-3350);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      DiffBuilder<String> diffBuilder5 = diffBuilder4.append("7qyYFG|Hs^F&K8", shortArray0, shortArray0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertArrayEquals(new short[] {(short)34, (short)1, (short) (-3350), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2771);
      // Undeclared exception!
      try { 
        diffBuilder5.append((String) null, floatArray0, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertNotNull(standardToStringStyle0);
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, standardToStringStyle0);
      assertNotNull(diffBuilder0);
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      String string0 = "Y#WBRSB}DaoC^5(BZ";
      byte byte0 = (byte)7;
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("Y#WBRSB}DaoC^5(BZ", (byte)7, (byte)7);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) (byte)7;
      floatArray1[3] = (float) 0;
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("Y#WBRSB}DaoC^5(BZ", floatArray0, floatArray1);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 7.0F, 0.0F}, floatArray1, 0.01F);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      String string1 = "2xh(";
      DiffResult<Integer> diffResult0 = null;
      // Undeclared exception!
      try { 
        diffBuilder2.append("2xh(", (DiffResult<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Diff result cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, true);
      assertNotNull(diffBuilder0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'u';
      charArray0[2] = '^';
      charArray0[3] = 'H';
      charArray0[4] = '<';
      charArray0[5] = 'c';
      charArray0[6] = '3';
      charArray0[7] = '<';
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$10", charArray0, charArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new char[] {'f', 'u', '^', 'H', '<', 'c', '3', '<'}, charArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(8, charArray0.length);
      
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("", (byte) (-85), (byte) (-85));
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertArrayEquals(new char[] {'f', 'u', '^', 'H', '<', 'c', '3', '<'}, charArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(8, charArray0.length);
      
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("org.apache.commons.lang3.builder.DiffBuilder$10", (float) (byte) (-85), (float) (byte) (-85));
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertArrayEquals(new char[] {'f', 'u', '^', 'H', '<', 'c', '3', '<'}, charArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("", "org.apache.commons.lang3.builder.DiffBuilder$5", toStringStyle0);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("!]E", (-5096), (-5096));
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      DiffBuilder<String> diffBuilder2 = diffBuilder1.append("", 2424.561, (double) (-5096));
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      
      DiffBuilder<String> diffBuilder3 = diffBuilder2.append("", (char[]) null, (char[]) null);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      
      DiffBuilder<String> diffBuilder4 = diffBuilder3.append("org.apache.commons.lang3.builder.DiffBuilder$5", (short) (-474), (short) (-1));
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (-5096);
      doubleArray0[2] = (double) (short) (-474);
      doubleArray0[3] = (double) (short) (-474);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short) (-474);
      doubleArray0[6] = (double) (-5096);
      doubleArray0[7] = (double) (short) (-1);
      doubleArray0[8] = (double) (-5096);
      DiffBuilder<String> diffBuilder5 = diffBuilder4.append("", doubleArray0, doubleArray0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertArrayEquals(new double[] {(-1.0), (-5096.0), (-474.0), (-474.0), (-1.0), (-474.0), (-5096.0), (-1.0), (-5096.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      DiffResult<String> diffResult0 = diffBuilder5.build();
      assertNotNull(diffResult0);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertEquals(2, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new double[] {(-1.0), (-5096.0), (-474.0), (-474.0), (-1.0), (-474.0), (-5096.0), (-1.0), (-5096.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      assertNotNull(multilineRecursiveToStringStyle0);
      
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("7-n+W>", "", multilineRecursiveToStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("7-n+W>", false, false);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      DiffBuilder<String> diffBuilder2 = diffBuilder1.append("7-n+W>", (-1175), 1);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      
      DiffBuilder<String> diffBuilder3 = diffBuilder2.append("", (short) (-1), (short) (-1));
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (-1175);
      intArray0[2] = (-1175);
      intArray0[3] = 1;
      intArray0[4] = (-1175);
      intArray0[5] = 1;
      intArray0[6] = (-1175);
      DiffBuilder<String> diffBuilder4 = diffBuilder3.append("&C'31^1],V9", intArray0, intArray0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertArrayEquals(new int[] {(-1), (-1175), (-1175), 1, (-1175), 1, (-1175)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>("M Q=", object0, (ToStringStyle) null, true);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("M Q=", (short)598, (short)0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("K`6DlSor62+lva", 'S', 'S');
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'S';
      floatArray0[1] = (float) (short)598;
      floatArray0[2] = (float) 'S';
      floatArray0[3] = (float) (short)598;
      floatArray0[4] = (float) 'S';
      floatArray0[5] = (float) (short)598;
      floatArray0[6] = (float) (short)598;
      floatArray0[7] = (float) 'S';
      DiffBuilder<Object> diffBuilder3 = diffBuilder2.append("K`6DlSor62+lva", floatArray0, floatArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertArrayEquals(new float[] {83.0F, 598.0F, 83.0F, 598.0F, 83.0F, 598.0F, 598.0F, 83.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      DiffBuilder<Object> diffBuilder4 = diffBuilder3.append("M Q=", (float) (short)598, 83.0F);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder2);
      assertArrayEquals(new float[] {83.0F, 598.0F, 83.0F, 598.0F, 83.0F, 598.0F, 598.0F, 83.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      DiffBuilder<Object> diffBuilder5 = diffBuilder4.append("Och{(\"t<", object1, (Object) diffBuilder3);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder1);
      assertNotSame(object0, object1);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder5);
      assertNotSame(object1, object0);
      assertArrayEquals(new float[] {83.0F, 598.0F, 83.0F, 598.0F, 83.0F, 598.0F, 598.0F, 83.0F}, floatArray0, 0.01F);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(8, floatArray0.length);
      
      DiffBuilder<Object> diffBuilder6 = diffBuilder5.append("", (-648L), 1523L);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder1);
      assertNotSame(object0, object1);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder5);
      assertNotSame(object1, object0);
      assertArrayEquals(new float[] {83.0F, 598.0F, 83.0F, 598.0F, 83.0F, 598.0F, 598.0F, 83.0F}, floatArray0, 0.01F);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("?%`[wnIu$-}F1", "rhs cannot be null", toStringStyle0, true);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("s.#Wbh", 517.94F, 517.94F);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(4520);
      assertNotNull(integer1);
      assertEquals(4520, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      DiffBuilder<Integer> diffBuilder2 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      assertNotNull(diffBuilder2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("?%`[wnIu$-}F1", (long) 4520, 861L);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      DiffBuilder<Integer> diffBuilder4 = diffBuilder3.append("rhs cannot be null", false, false);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("List of differences cannot be null", "List of differences cannot be null", toStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("List of differences cannot be null", (byte) (-123), (byte) (-123));
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      // Undeclared exception!
      try { 
        diffBuilder1.append((String) null, (byte) (-123), (byte) (-123));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>("CBQi7F}eN?", "CBQi7F}eN?", (ToStringStyle) null, false);
      assertNotNull(diffBuilder0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2787.1455F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1359.0F;
      floatArray0[4] = 314.3F;
      floatArray0[5] = 0.0F;
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("Field name cannot be null", floatArray0, floatArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new float[] {0.0F, 2787.1455F, 0.0F, 1359.0F, 314.3F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("WN'ogTt8K{<<", (double) 0.0F, (double) 0.0F);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertArrayEquals(new float[] {0.0F, 2787.1455F, 0.0F, 1359.0F, 314.3F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String string0 = "97VE)m{94!K\"LqS[k";
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1654;
      short short0 = (short)1336;
      shortArray0[1] = (short)1336;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)34;
      short short1 = (short) (-3064);
      shortArray0[4] = (short) (-3064);
      shortArray0[5] = (short)1080;
      short short2 = (short)891;
      shortArray0[6] = (short)891;
      shortArray0[7] = (short)826;
      shortArray0[8] = (short)41;
      DiffBuilder<Object> diffBuilder3 = diffBuilder2.append("97VE)m{94!K\"LqS[k", shortArray0, shortArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertArrayEquals(new float[] {0.0F, 2787.1455F, 0.0F, 1359.0F, 314.3F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new short[] {(short)1654, (short)1336, (short)0, (short)34, (short) (-3064), (short)1080, (short)891, (short)826, (short)41}, shortArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(9, shortArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '.';
      char char0 = 'Y';
      charArray0[2] = 'Y';
      char char1 = '~';
      charArray0[3] = '~';
      DiffBuilder<Object> diffBuilder4 = diffBuilder3.append("|-:e~Z", charArray0, charArray0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertArrayEquals(new float[] {0.0F, 2787.1455F, 0.0F, 1359.0F, 314.3F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {'2', '.', 'Y', '~'}, charArray0);
      assertArrayEquals(new short[] {(short)1654, (short)1336, (short)0, (short)34, (short) (-3064), (short)1080, (short)891, (short)826, (short)41}, shortArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(4, charArray0.length);
      assertEquals(9, shortArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        diffBuilder4.append((String) null, object0, (Object) "CBQi7F}eN?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<Integer>((Integer) null, (Integer) null, toStringStyle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lhs cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer(743);
      assertNotNull(integer0);
      assertEquals(743, (int)integer0);
      
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      assertNotNull(multilineRecursiveToStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      assertNotNull(diffBuilder0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = '3';
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("KNOo", charArray0, charArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new char[] {'B', '3'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Integer integer1 = new Integer(743);
      assertNotNull(integer1);
      assertEquals(743, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("KNOo", (Object) multilineRecursiveToStringStyle0, (Object) integer1);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertArrayEquals(new char[] {'B', '3'}, charArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2, charArray0.length);
      
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("KNOo", 743, 2049);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertArrayEquals(new char[] {'B', '3'}, charArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2, charArray0.length);
      
      DiffBuilder<Integer> diffBuilder4 = diffBuilder3.append("H}ZhrlKiU;'Wg4k`7 ", 955.7182F, (float) 2049);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertArrayEquals(new char[] {'B', '3'}, charArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1366);
      intArray0[1] = (int) '3';
      DiffBuilder<Integer> diffBuilder5 = diffBuilder4.append("H}ZhrlKiU;'Wg4k`7 ", intArray0, intArray0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder2);
      assertArrayEquals(new char[] {'B', '3'}, charArray0);
      assertArrayEquals(new int[] {(-1366), 51}, intArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2, charArray0.length);
      assertEquals(2, intArray0.length);
      
      DiffBuilder<Integer> diffBuilder6 = diffBuilder5.append("", (double[]) null, (double[]) null);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder2);
      assertArrayEquals(new char[] {'B', '3'}, charArray0);
      assertArrayEquals(new int[] {(-1366), 51}, intArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2, charArray0.length);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("D_EGAqzqYh", "D_EGAqzqYh", toStringStyle0, true);
      assertNotNull(diffBuilder0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) toStringStyle0;
      objectArray0[1] = (Object) "D_EGAqzqYh";
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("D_EGAqzqYh", (Object[]) null, objectArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>("", object0, toStringStyle0, true);
      assertNotNull(diffBuilder0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("IN6G J@F", charArray0, charArray1);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)1;
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("", byteArray0, byteArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new byte[] {(byte)88, (byte)1}, byteArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(2, byteArray0.length);
      
      DiffBuilder<Object> diffBuilder3 = diffBuilder2.append("IN6G J@F", 4007L, (long) (byte)88);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new byte[] {(byte)88, (byte)1}, byteArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(2, byteArray0.length);
      
      DiffBuilder<Object> diffBuilder4 = diffBuilder3.append("", false, false);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new byte[] {(byte)88, (byte)1}, byteArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(2, byteArray0.length);
      
      DiffBuilder<Object> diffBuilder5 = diffBuilder4.append("IN6G J@F", 'Q', 'Q');
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new byte[] {(byte)88, (byte)1}, byteArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(2, byteArray0.length);
      
      DiffBuilder<Object> diffBuilder6 = diffBuilder5.append("org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle", (short)0, (short)1300);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder6);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new byte[] {(byte)88, (byte)1}, byteArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>("", "", toStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("+%],[", 'o', '');
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'o';
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) '';
      doubleArray1[1] = (double) '';
      doubleArray1[2] = (double) '';
      doubleArray1[3] = (double) 'o';
      doubleArray1[4] = (double) 'o';
      doubleArray1[5] = (double) '';
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("o$Kr3lE|R5+_v", doubleArray0, doubleArray1);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertArrayEquals(new double[] {111.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {127.0, 127.0, 127.0, 111.0, 111.0, 127.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'o';
      DiffBuilder<Object> diffBuilder3 = diffBuilder2.append("o$Kr3lE|R5+_v", intArray0, intArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertArrayEquals(new double[] {111.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {127.0, 127.0, 127.0, 111.0, 111.0, 127.0}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {111}, intArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertNotNull(standardToStringStyle0);
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      
      DiffBuilder<String> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<String>("", (String) null, standardToStringStyle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rhs cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "xkPGXG*;";
      String string1 = "z?N\"Vh!A";
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      assertNotNull(toStringStyle0);
      
      boolean boolean0 = true;
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("xkPGXG*;", "z?N\"Vh!A", toStringStyle0, true);
      assertNotNull(diffBuilder0);
      
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (-2086.236F), 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertNotNull(standardToStringStyle0);
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      assertNotNull(diffBuilder0);
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (byte)14, (byte)14);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      
      short[] shortArray0 = new short[0];
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("", shortArray0, shortArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("Field name cannot be null", byteArray0, byteArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(7, byteArray0.length);
      
      DiffResult<Integer> diffResult0 = diffBuilder2.build();
      assertNotNull(diffResult0);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      DiffBuilder<Integer> diffBuilder4 = diffBuilder3.append("org.apache.commons.lang3.builder.DiffBuilder$14", diffResult0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(7, byteArray0.length);
      
      DiffBuilder<Integer> diffBuilder5 = diffBuilder4.append("Right hand object cannot be null", 'L', 'L');
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)14;
      floatArray0[1] = (float) (byte)14;
      floatArray0[2] = (float) (byte)14;
      floatArray0[3] = (float) 3;
      floatArray0[4] = (float) (byte)14;
      floatArray0[5] = (float) (byte)14;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) (byte)14;
      DiffBuilder<Integer> diffBuilder6 = diffBuilder5.append("b\"eMg=F0&j+R-X{", floatArray0, floatArray0);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder4);
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new float[] {14.0F, 14.0F, 14.0F, 3.0F, 14.0F, 14.0F, 1.0F, 0.0F, 14.0F}, floatArray0, 0.01F);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      assertNotNull(diffBuilder0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$15", (byte)1, (byte)0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("org.apache.commons.lang3.builder.DiffBuilder$15", true, false);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("org.apache.commons.lang3.builder.DiffBuilder$3", byteArray0, byteArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2, byteArray0.length);
      
      DiffBuilder<Integer> diffBuilder4 = diffBuilder3.append("", (double) (byte)1, 1297.3);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2, byteArray0.length);
      
      DiffBuilder<Integer> diffBuilder5 = diffBuilder4.append("k$vGJ.R w[/:(aPa{\"", 0L, (long) 0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2, byteArray0.length);
      
      DiffBuilder<Integer> diffBuilder6 = diffBuilder5.append("", (-1196L), (long) (byte)1);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder1);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer((-945));
      assertNotNull(integer0);
      assertEquals((-945), (int)integer0);
      
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-945);
      longArray0[1] = (long) (-945);
      longArray0[2] = (long) (-945);
      longArray0[3] = (long) (-945);
      longArray0[4] = (long) (-945);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", longArray0, longArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new long[] {(-945L), (-945L), (-945L), (-945L), (-945L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("2~nzTNHAN/[k^", '|', '|');
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertArrayEquals(new long[] {(-945L), (-945L), (-945L), (-945L), (-945L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("", (byte)43, (byte)0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertArrayEquals(new long[] {(-945L), (-945L), (-945L), (-945L), (-945L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      DiffBuilder<Integer> diffBuilder4 = diffBuilder3.append("2~nzTNHAN/[k^", (double[]) null, (double[]) null);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertArrayEquals(new long[] {(-945L), (-945L), (-945L), (-945L), (-945L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      byte[] byteArray0 = new byte[0];
      DiffBuilder<Integer> diffBuilder5 = diffBuilder4.append("jk<I;G)fn2]bH ", byteArray0, byteArray0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder1);
      assertArrayEquals(new long[] {(-945L), (-945L), (-945L), (-945L), (-945L)}, longArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, toStringStyle0, true);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", (short[]) null, (short[]) null);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("", (byte)0, (byte)0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      
      DiffBuilder<Object> diffBuilder3 = diffBuilder2.append("-^M9Xv*yP7", 'c', 'c');
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("Kr", "fA<{9@(!.%;/b", toStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("fA<{9@(!.%;/b", 1.0, 1.0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      // Undeclared exception!
      try { 
        diffBuilder1.append((String) null, 'a', '^');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("[AI46{5m*?;!&9]-`>f", "", toStringStyle0);
      assertNotNull(diffBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("[AI46{5m*?;!&9]-`>f", (Object) toStringStyle0, object0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", floatArray0, floatArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 2.0F;
      objectArray0[1] = (Object) diffBuilder0;
      objectArray0[2] = (Object) diffBuilder1;
      objectArray0[3] = (Object) 2.0F;
      objectArray0[4] = (Object) 2.0F;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) integer0;
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("zOp,>;h1z3c", objectArray0, objectArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(7, objectArray0.length);
      
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("", (short[]) null, (short[]) null);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer((-1459));
      assertNotNull(integer0);
      assertEquals((-1459), (int)integer0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle", (byte)111, (byte)111);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      float[] floatArray0 = new float[0];
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle", floatArray0, floatArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("<.(", "<.(", (ToStringStyle) null);
      assertNotNull(diffBuilder0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 860L;
      longArray0[1] = (-1780L);
      longArray0[2] = 1L;
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("", longArray0, longArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new long[] {860L, (-1780L), 1L}, longArray0);
      assertEquals(3, longArray0.length);
      
      DiffBuilder<String> diffBuilder2 = diffBuilder1.append("i2pN9]Vpy3", true, true);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertArrayEquals(new long[] {860L, (-1780L), 1L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      DiffBuilder<String> diffBuilder3 = diffBuilder2.append("&lsaquo;", doubleArray0, doubleArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertArrayEquals(new long[] {860L, (-1780L), 1L}, longArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3, longArray0.length);
      assertEquals(0, doubleArray0.length);
      
      DiffBuilder<String> diffBuilder4 = diffBuilder3.append("<.(", 2523.105F, (float) 860L);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertArrayEquals(new long[] {860L, (-1780L), 1L}, longArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3, longArray0.length);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        diffBuilder4.append((String) null, (short)61, (short)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer integer0 = new Integer(67);
      assertNotNull(integer0);
      assertEquals(67, (int)integer0);
      
      Integer integer1 = new Integer((-1624));
      assertNotNull(integer1);
      assertEquals((-1624), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, true);
      assertNotNull(diffBuilder0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      float[] floatArray0 = new float[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("&Yuml;", floatArray0, floatArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'H';
      charArray0[3] = 'i';
      charArray0[4] = 'C';
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'M';
      charArray1[1] = 'o';
      charArray1[2] = 'H';
      charArray1[3] = 'M';
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("&Yuml;", charArray0, charArray1);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {'M', 'M', 'H', 'i', 'C'}, charArray0);
      assertArrayEquals(new char[] {'M', 'o', 'H', 'M'}, charArray1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("&Yuml;", booleanArray0, booleanArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {'M', 'M', 'H', 'i', 'C'}, charArray0);
      assertArrayEquals(new char[] {'M', 'o', 'H', 'M'}, charArray1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      
      DiffBuilder<Integer> diffBuilder4 = diffBuilder3.append("&Yuml;", (Object) diffBuilder1, (Object) diffBuilder2);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {'M', 'M', 'H', 'i', 'C'}, charArray0);
      assertArrayEquals(new char[] {'M', 'o', 'H', 'M'}, charArray1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      
      DiffBuilder<Integer> diffBuilder5 = diffBuilder4.append("", (byte)24, (byte)24);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder5);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {'M', 'M', 'H', 'i', 'C'}, charArray0);
      assertArrayEquals(new char[] {'M', 'o', 'H', 'M'}, charArray1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      
      DiffBuilder<Integer> diffBuilder6 = diffBuilder5.append("", 885, 1);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder5);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder5);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {'M', 'M', 'H', 'i', 'C'}, charArray0);
      assertArrayEquals(new char[] {'M', 'o', 'H', 'M'}, charArray1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      Integer integer1 = new Integer(3);
      assertNotNull(integer1);
      assertEquals(3, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, (ToStringStyle) null);
      assertNotNull(diffBuilder0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (byte)1, (byte)1);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("", shortArray0, shortArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3, shortArray0.length);
      
      DiffBuilder<Integer> diffBuilder3 = diffBuilder2.append("", (short) (byte)1, (short)41);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3, shortArray0.length);
      
      int[] intArray0 = new int[0];
      DiffBuilder<Integer> diffBuilder4 = diffBuilder3.append("YAz{cE57eTDke.R>i", intArray0, intArray0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3, shortArray0.length);
      assertEquals(0, intArray0.length);
      
      DiffBuilder<Integer> diffBuilder5 = diffBuilder4.append("org.apache.commons.lang3.builder.DiffBuilder$15", 0, 2224);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder2);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3, shortArray0.length);
      assertEquals(0, intArray0.length);
      
      DiffResult<Integer> diffResult0 = diffBuilder5.build();
      assertNotNull(diffResult0);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder2);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3, shortArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>("=:p/W", "=:p/W", toStringStyle0, true);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("=:p/W", 0.0F, 4282.5015F);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 6;
      intArray0[2] = (-451);
      intArray0[3] = (-1337);
      intArray0[4] = 0;
      intArray0[5] = 59;
      intArray0[6] = (-1);
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("=:p/W", intArray0, intArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertArrayEquals(new int[] {(-1), 6, (-451), (-1337), 0, 59, (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      
      DiffBuilder<Object> diffBuilder3 = diffBuilder2.append("=:p/W", true, false);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertArrayEquals(new int[] {(-1), 6, (-451), (-1337), 0, 59, (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      
      DiffBuilder<Object> diffBuilder4 = diffBuilder3.append("=:p/W", (byte)0, (byte)0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertArrayEquals(new int[] {(-1), 6, (-451), (-1337), 0, 59, (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      
      DiffBuilder<Object> diffBuilder5 = diffBuilder4.append("=:p/W", (double) (-1337), (double) (-1));
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertArrayEquals(new int[] {(-1), 6, (-451), (-1337), 0, 59, (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        diffBuilder5.append((String) null, (float) 0, (float) 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertNotNull(standardToStringStyle0);
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("Hgm.4R,My-Av", "m\"2v5=P", standardToStringStyle0);
      assertNotNull(diffBuilder0);
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("m\"2v5=P", (byte) (-51), (byte) (-51));
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      
      DiffBuilder<String> diffBuilder2 = diffBuilder1.append("", (-293L), 759L);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-293L);
      DiffBuilder<String> diffBuilder3 = diffBuilder2.append("m\"2v5=P", floatArray0, (float[]) null);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertArrayEquals(new float[] {(-293.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      DiffBuilder<String> diffBuilder4 = diffBuilder3.append("", (double[]) null, (double[]) null);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertArrayEquals(new float[] {(-293.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) standardToStringStyle0;
      objectArray0[2] = (Object) diffBuilder0;
      objectArray0[3] = (Object) standardToStringStyle0;
      objectArray0[4] = (Object) diffBuilder2;
      objectArray0[5] = (Object) diffBuilder1;
      objectArray0[6] = (Object) diffBuilder3;
      objectArray0[7] = (Object) "";
      DiffBuilder<String> diffBuilder5 = diffBuilder4.append("Hgm.4R,My-Av", objectArray0, objectArray0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertArrayEquals(new float[] {(-293.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(8, objectArray0.length);
      
      DiffBuilder<String> diffBuilder6 = diffBuilder5.append("Hgm.4R,My-Av", (-1L), (-293L));
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder6);
      assertTrue(standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertTrue(standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertFalse(standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertTrue(standardToStringStyle0.isUseFieldNames());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertTrue(standardToStringStyle0.isUseIdentityHashCode());
      assertTrue(standardToStringStyle0.isUseClassName());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
      assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertArrayEquals(new float[] {(-293.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff0, toStringStyle0, false);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("\u00C7", (short)1, (short)1);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      DiffBuilder<Diff<Integer>> diffBuilder2 = diffBuilder1.append("\u00C7", 760.89807848, 760.89807848);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '^';
      charArray0[2] = '=';
      DiffBuilder<Diff<Integer>> diffBuilder3 = diffBuilder2.append("", charArray0, charArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertArrayEquals(new char[] {'&', '^', '='}, charArray0);
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) '=';
      DiffBuilder<Diff<Integer>> diffBuilder4 = diffBuilder3.append("", longArray0, (long[]) null);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertArrayEquals(new char[] {'&', '^', '='}, charArray0);
      assertArrayEquals(new long[] {1L, 61L}, longArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)5674;
      shortArray0[2] = (short)1;
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1;
      shortArray1[1] = (short)1;
      shortArray1[2] = (short)1;
      shortArray1[3] = (short)5674;
      shortArray1[4] = (short)5674;
      shortArray0[0] = (short)1;
      shortArray1[6] = (short)1;
      DiffBuilder<Diff<Integer>> diffBuilder5 = diffBuilder4.append("\u00C7", shortArray0, shortArray1);
      assertNotNull(diffBuilder5);
      assertNotSame(shortArray1, shortArray0);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)5674, (short)5674, (short)0, (short)1}, shortArray1);
      assertArrayEquals(new char[] {'&', '^', '='}, charArray0);
      assertArrayEquals(new long[] {1L, 61L}, longArray0);
      assertArrayEquals(new short[] {(short)1, (short)5674, (short)1}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(7, shortArray1.length);
      assertEquals(3, charArray0.length);
      assertEquals(2, longArray0.length);
      assertEquals(3, shortArray0.length);
      
      // Undeclared exception!
      try { 
        diffBuilder5.append((String) null, '4', '&');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer((-134));
      assertNotNull(integer0);
      assertEquals((-134), (int)integer0);
      
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, integer0, (ToStringStyle) null, false);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", false, false);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'j';
      charArray0[2] = '';
      charArray0[3] = 'B';
      charArray0[4] = '5';
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("", charArray0, charArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertArrayEquals(new char[] {'|', 'j', '', 'B', '5'}, charArray0);
      assertEquals(5, charArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-134);
      floatArray0[1] = (float) '';
      floatArray0[2] = (float) 'j';
      DiffBuilder<Object> diffBuilder3 = diffBuilder2.append("", floatArray0, floatArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertArrayEquals(new char[] {'|', 'j', '', 'B', '5'}, charArray0);
      assertArrayEquals(new float[] {(-134.0F), 127.0F, 106.0F}, floatArray0, 0.01F);
      assertEquals(5, charArray0.length);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '';
      intArray0[1] = 986;
      intArray0[2] = (int) '';
      intArray0[3] = (int) 'j';
      intArray0[4] = (int) '5';
      intArray0[5] = 0;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) '|';
      intArray1[1] = (int) '';
      intArray1[2] = (-134);
      intArray1[3] = (int) '5';
      intArray1[4] = (int) '|';
      intArray1[5] = (int) '|';
      DiffBuilder<Object> diffBuilder4 = diffBuilder3.append("", intArray0, intArray1);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertNotSame(intArray1, intArray0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new char[] {'|', 'j', '', 'B', '5'}, charArray0);
      assertArrayEquals(new int[] {124, 127, (-134), 53, 124, 124}, intArray1);
      assertArrayEquals(new float[] {(-134.0F), 127.0F, 106.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {127, 986, 127, 106, 53, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(5, charArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(3, floatArray0.length);
      assertEquals(6, intArray0.length);
      
      DiffBuilder<Object> diffBuilder5 = diffBuilder4.append("", (byte)0, (byte) (-122));
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertNotSame(intArray1, intArray0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new char[] {'|', 'j', '', 'B', '5'}, charArray0);
      assertArrayEquals(new int[] {124, 127, (-134), 53, 124, 124}, intArray1);
      assertArrayEquals(new float[] {(-134.0F), 127.0F, 106.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {127, 986, 127, 106, 53, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(5, charArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(3, floatArray0.length);
      assertEquals(6, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = 232L;
      longArray0[2] = (long) '|';
      DiffBuilder<Object> diffBuilder6 = diffBuilder5.append("PTfNmUBQJ]9\"zAx", longArray0, longArray0);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder5);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertArrayEquals(new char[] {'|', 'j', '', 'B', '5'}, charArray0);
      assertArrayEquals(new int[] {124, 127, (-134), 53, 124, 124}, intArray1);
      assertArrayEquals(new float[] {(-134.0F), 127.0F, 106.0F}, floatArray0, 0.01F);
      assertArrayEquals(new long[] {0L, 232L, 124L}, longArray0);
      assertArrayEquals(new int[] {127, 986, 127, 106, 53, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, charArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(3, floatArray0.length);
      assertEquals(3, longArray0.length);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff0, toStringStyle0);
      assertNotNull(diffBuilder0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3968.9595F);
      floatArray0[1] = 1716.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1511.7F);
      floatArray0[4] = 0.0F;
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("", floatArray0, floatArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new float[] {(-3968.9595F), 1716.0F, 0.0F, (-1511.7F), 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = 'c';
      charArray0[2] = '-';
      charArray0[3] = 'x';
      charArray0[4] = 'D';
      DiffBuilder<Diff<Integer>> diffBuilder2 = diffBuilder1.append("", charArray0, charArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertArrayEquals(new float[] {(-3968.9595F), 1716.0F, 0.0F, (-1511.7F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {'}', 'c', '-', 'x', 'D'}, charArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, charArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1955L);
      longArray0[1] = (long) 'D';
      longArray0[2] = (long) '-';
      longArray0[3] = (long) '}';
      longArray0[4] = (long) 'x';
      DiffBuilder<Diff<Integer>> diffBuilder3 = diffBuilder2.append("L iM^Iw|/SY~h6zvr", longArray0, longArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertArrayEquals(new long[] {(-1955L), 68L, 45L, 125L, 120L}, longArray0);
      assertArrayEquals(new float[] {(-3968.9595F), 1716.0F, 0.0F, (-1511.7F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {'}', 'c', '-', 'x', 'D'}, charArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, floatArray0.length);
      assertEquals(5, charArray0.length);
      
      DiffBuilder<Diff<Integer>> diffBuilder4 = diffBuilder3.append("", (short)9, (short)9);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertArrayEquals(new long[] {(-1955L), 68L, 45L, 125L, 120L}, longArray0);
      assertArrayEquals(new float[] {(-3968.9595F), 1716.0F, 0.0F, (-1511.7F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {'}', 'c', '-', 'x', 'D'}, charArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, floatArray0.length);
      assertEquals(5, charArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      DiffBuilder<Diff<Integer>> diffBuilder5 = diffBuilder4.append("~a|goe/F.LUl#hfN~%", byteArray0, byteArray0);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder0);
      assertArrayEquals(new long[] {(-1955L), 68L, 45L, 125L, 120L}, longArray0);
      assertArrayEquals(new float[] {(-3968.9595F), 1716.0F, 0.0F, (-1511.7F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new byte[] {(byte)94}, byteArray0);
      assertArrayEquals(new char[] {'}', 'c', '-', 'x', 'D'}, charArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, floatArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      DiffBuilder<Diff<Integer>> diffBuilder6 = diffBuilder5.append("~a|goe/F.LUl#hfN~%", booleanArray0, booleanArray0);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder0);
      assertArrayEquals(new long[] {(-1955L), 68L, 45L, 125L, 120L}, longArray0);
      assertArrayEquals(new float[] {(-3968.9595F), 1716.0F, 0.0F, (-1511.7F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new byte[] {(byte)94}, byteArray0);
      assertArrayEquals(new char[] {'}', 'c', '-', 'x', 'D'}, charArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, false, true, true}, booleanArray0));
      assertEquals(5, longArray0.length);
      assertEquals(5, floatArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals(5, charArray0.length);
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, (ToStringStyle) null, true);
      assertNotNull(diffBuilder0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 2732L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 889L;
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("RX._6>Zdj^Q^N2MI 3", longArray0, longArray0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertArrayEquals(new long[] {2732L, 0L, 0L, 889L}, longArray0);
      assertEquals(4, longArray0.length);
      
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("", (byte)120, (byte)120);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertArrayEquals(new long[] {2732L, 0L, 0L, 889L}, longArray0);
      assertEquals(4, longArray0.length);
      
      DiffBuilder<Object> diffBuilder3 = diffBuilder2.append("RX._6>Zdj^Q^N2MI 3", 0L, 586L);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertArrayEquals(new long[] {2732L, 0L, 0L, 889L}, longArray0);
      assertEquals(4, longArray0.length);
      
      DiffBuilder<Object> diffBuilder4 = diffBuilder3.append(" ", (int[]) null, (int[]) null);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertArrayEquals(new long[] {2732L, 0L, 0L, 889L}, longArray0);
      assertEquals(4, longArray0.length);
      
      DiffBuilder<Object> diffBuilder5 = diffBuilder4.append("NJErOS6bRp?`@OY4=K ", (Object) "RX._6>Zdj^Q^N2MI 3", (Object) null);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder5, diffBuilder0);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder1);
      assertArrayEquals(new long[] {2732L, 0L, 0L, 889L}, longArray0);
      assertEquals(4, longArray0.length);
      
      DiffBuilder<String> diffBuilder6 = new DiffBuilder<String>("wy", "RX._6>Zdj^Q^N2MI 3", (ToStringStyle) null);
      assertNotNull(diffBuilder6);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2732L;
      doubleArray0[1] = (double) 889L;
      DiffBuilder<String> diffBuilder7 = diffBuilder6.append("wy", doubleArray0, doubleArray0);
      assertNotNull(diffBuilder7);
      assertSame(diffBuilder7, diffBuilder6);
      assertSame(diffBuilder6, diffBuilder7);
      assertArrayEquals(new double[] {2732.0, 889.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      DiffBuilder<String> diffBuilder8 = diffBuilder7.append("wy", 512.9581F, 1.0F);
      assertNotNull(diffBuilder8);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder7, diffBuilder6);
      assertSame(diffBuilder8, diffBuilder6);
      assertSame(diffBuilder8, diffBuilder7);
      assertSame(diffBuilder6, diffBuilder8);
      assertSame(diffBuilder6, diffBuilder7);
      assertArrayEquals(new double[] {2732.0, 889.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      DiffBuilder<String> diffBuilder9 = diffBuilder8.append("", (short) (byte)120, (short) (byte)120);
      assertNotNull(diffBuilder9);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder7, diffBuilder9);
      assertSame(diffBuilder7, diffBuilder6);
      assertSame(diffBuilder8, diffBuilder6);
      assertSame(diffBuilder8, diffBuilder7);
      assertSame(diffBuilder8, diffBuilder9);
      assertSame(diffBuilder9, diffBuilder6);
      assertSame(diffBuilder9, diffBuilder8);
      assertSame(diffBuilder9, diffBuilder7);
      assertSame(diffBuilder6, diffBuilder8);
      assertSame(diffBuilder6, diffBuilder9);
      assertSame(diffBuilder6, diffBuilder7);
      assertArrayEquals(new double[] {2732.0, 889.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 2732L;
      objectArray0[1] = (Object) diffBuilder8;
      objectArray0[2] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "org.apache.commons.lang3.tuple.Pair";
      objectArray0[5] = (Object) diffBuilder9;
      objectArray0[6] = (Object) "org.apache.commons.lang3.tuple.Pair";
      DiffBuilder<String> diffBuilder10 = diffBuilder9.append("org.apache.commons.lang3.tuple.Pair", objectArray0, objectArray0);
      assertNotNull(diffBuilder10);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder7, diffBuilder9);
      assertSame(diffBuilder7, diffBuilder10);
      assertSame(diffBuilder7, diffBuilder6);
      assertSame(diffBuilder8, diffBuilder6);
      assertSame(diffBuilder8, diffBuilder7);
      assertSame(diffBuilder8, diffBuilder9);
      assertSame(diffBuilder8, diffBuilder10);
      assertSame(diffBuilder9, diffBuilder6);
      assertSame(diffBuilder9, diffBuilder10);
      assertSame(diffBuilder9, diffBuilder8);
      assertSame(diffBuilder9, diffBuilder7);
      assertSame(diffBuilder10, diffBuilder7);
      assertSame(diffBuilder10, diffBuilder6);
      assertSame(diffBuilder10, diffBuilder9);
      assertSame(diffBuilder10, diffBuilder8);
      assertSame(diffBuilder6, diffBuilder8);
      assertSame(diffBuilder6, diffBuilder9);
      assertSame(diffBuilder6, diffBuilder10);
      assertSame(diffBuilder6, diffBuilder7);
      assertArrayEquals(new double[] {2732.0, 889.0}, doubleArray0, 0.01);
      assertEquals(7, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      
      DiffBuilder<String> diffBuilder11 = diffBuilder10.append("", (int) (byte)120, (int) (byte)120);
      assertNotNull(diffBuilder11);
      assertSame(diffBuilder7, diffBuilder11);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder7, diffBuilder9);
      assertSame(diffBuilder7, diffBuilder10);
      assertSame(diffBuilder7, diffBuilder6);
      assertSame(diffBuilder8, diffBuilder6);
      assertSame(diffBuilder8, diffBuilder7);
      assertSame(diffBuilder8, diffBuilder9);
      assertSame(diffBuilder8, diffBuilder10);
      assertSame(diffBuilder8, diffBuilder11);
      assertSame(diffBuilder9, diffBuilder6);
      assertSame(diffBuilder9, diffBuilder10);
      assertSame(diffBuilder9, diffBuilder8);
      assertSame(diffBuilder9, diffBuilder7);
      assertSame(diffBuilder9, diffBuilder11);
      assertSame(diffBuilder10, diffBuilder7);
      assertSame(diffBuilder10, diffBuilder11);
      assertSame(diffBuilder10, diffBuilder6);
      assertSame(diffBuilder10, diffBuilder9);
      assertSame(diffBuilder10, diffBuilder8);
      assertSame(diffBuilder6, diffBuilder8);
      assertSame(diffBuilder6, diffBuilder9);
      assertSame(diffBuilder6, diffBuilder11);
      assertSame(diffBuilder6, diffBuilder10);
      assertSame(diffBuilder6, diffBuilder7);
      assertSame(diffBuilder11, diffBuilder7);
      assertSame(diffBuilder11, diffBuilder10);
      assertSame(diffBuilder11, diffBuilder9);
      assertSame(diffBuilder11, diffBuilder8);
      assertSame(diffBuilder11, diffBuilder6);
      assertArrayEquals(new double[] {2732.0, 889.0}, doubleArray0, 0.01);
      assertEquals(7, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        diffBuilder11.append("NJErOS6bRp?`@OY4=K ", (DiffResult<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Diff result cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff0, (ToStringStyle) null, false);
      assertNotNull(diffBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("?a3Xj)c>&", (Object) null, object0);
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      DiffBuilder<Diff<Integer>> diffBuilder2 = diffBuilder1.append("?a3Xj)c>&", (Object[]) diff0.EMPTY_ARRAY, (Object[]) diff0.EMPTY_ARRAY);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 814.67725F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1.0F);
      DiffBuilder<Diff<Integer>> diffBuilder3 = diffBuilder2.append("?a3Xj)c>&", floatArray0, floatArray0);
      assertNotNull(diffBuilder3);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder1);
      assertArrayEquals(new float[] {814.67725F, 0.0F, 0.0F, 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      DiffBuilder<Diff<Integer>> diffBuilder4 = diffBuilder3.append("V>|sz\"bB>z|fG%2M", 2963, 2963);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder2);
      assertArrayEquals(new float[] {814.67725F, 0.0F, 0.0F, 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      DiffBuilder<Diff<Integer>> diffBuilder5 = diffBuilder4.append("", false, false);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder0);
      assertArrayEquals(new float[] {814.67725F, 0.0F, 0.0F, 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'G';
      charArray0[2] = '*';
      DiffBuilder<Diff<Integer>> diffBuilder6 = diffBuilder5.append("org.apache.commons.lang3.builder.ToStringStyle", charArray0, charArray0);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder0);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder1);
      assertSame(diffBuilder6, diffBuilder2);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder0);
      assertArrayEquals(new float[] {814.67725F, 0.0F, 0.0F, 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {'3', 'G', '*'}, charArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(3, charArray0.length);
      
      DiffBuilder<Diff<Integer>> diffBuilder7 = diffBuilder5.append("", '3', 'Y');
      assertNotNull(diffBuilder7);
      assertSame(diffBuilder0, diffBuilder7);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder4);
      assertSame(diffBuilder0, diffBuilder5);
      assertSame(diffBuilder0, diffBuilder3);
      assertSame(diffBuilder0, diffBuilder6);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder7, diffBuilder1);
      assertSame(diffBuilder7, diffBuilder5);
      assertSame(diffBuilder7, diffBuilder3);
      assertSame(diffBuilder7, diffBuilder6);
      assertSame(diffBuilder7, diffBuilder2);
      assertSame(diffBuilder7, diffBuilder4);
      assertSame(diffBuilder7, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder3);
      assertSame(diffBuilder1, diffBuilder6);
      assertSame(diffBuilder1, diffBuilder7);
      assertSame(diffBuilder1, diffBuilder5);
      assertSame(diffBuilder1, diffBuilder4);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder4);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder7);
      assertSame(diffBuilder2, diffBuilder1);
      assertSame(diffBuilder2, diffBuilder3);
      assertSame(diffBuilder2, diffBuilder6);
      assertSame(diffBuilder2, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder7);
      assertSame(diffBuilder3, diffBuilder0);
      assertSame(diffBuilder3, diffBuilder2);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder0);
      assertSame(diffBuilder4, diffBuilder7);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder1);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder1);
      assertSame(diffBuilder5, diffBuilder2);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder7);
      assertSame(diffBuilder5, diffBuilder0);
      assertArrayEquals(new float[] {814.67725F, 0.0F, 0.0F, 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Integer integer0 = new Integer(2963);
      assertNotNull(integer0);
      assertEquals(2963, (int)integer0);
      
      Integer integer1 = new Integer(841);
      assertNotNull(integer1);
      assertEquals(841, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      DiffBuilder<Integer> diffBuilder8 = new DiffBuilder<Integer>(integer0, integer1, (ToStringStyle) null);
      assertNotNull(diffBuilder8);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      DiffResult<Integer> diffResult0 = diffBuilder8.build();
      assertNotNull(diffResult0);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      DiffBuilder<Object> diffBuilder9 = new DiffBuilder<Object>(object1, diffResult0, (ToStringStyle) null, false);
      assertNotNull(diffBuilder9);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertFalse(object1.equals((Object)object0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      DiffBuilder<Object> diffBuilder10 = diffBuilder9.append("", byteArray0, byteArray0);
      assertNotNull(diffBuilder10);
      assertNotSame(object1, object0);
      assertSame(diffBuilder9, diffBuilder10);
      assertSame(diffBuilder10, diffBuilder9);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new byte[] {(byte)121}, byteArray0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, byteArray0.length);
      
      DiffBuilder<Object> diffBuilder11 = diffBuilder10.append("", (short) (byte)121, (short) (byte)121);
      assertNotNull(diffBuilder11);
      assertNotSame(object1, object0);
      assertSame(diffBuilder9, diffBuilder11);
      assertSame(diffBuilder9, diffBuilder10);
      assertSame(diffBuilder10, diffBuilder11);
      assertSame(diffBuilder10, diffBuilder9);
      assertSame(diffBuilder11, diffBuilder10);
      assertSame(diffBuilder11, diffBuilder9);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new byte[] {(byte)121}, byteArray0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, byteArray0.length);
      
      DiffBuilder<Object> diffBuilder12 = diffBuilder11.append("V>|sz\"bB>z|fG%2M", 142, 1082);
      assertNotNull(diffBuilder12);
      assertNotSame(object1, object0);
      assertSame(diffBuilder9, diffBuilder11);
      assertSame(diffBuilder9, diffBuilder10);
      assertSame(diffBuilder9, diffBuilder12);
      assertSame(diffBuilder10, diffBuilder12);
      assertSame(diffBuilder10, diffBuilder11);
      assertSame(diffBuilder10, diffBuilder9);
      assertSame(diffBuilder11, diffBuilder12);
      assertSame(diffBuilder11, diffBuilder10);
      assertSame(diffBuilder11, diffBuilder9);
      assertSame(diffBuilder12, diffBuilder9);
      assertSame(diffBuilder12, diffBuilder10);
      assertSame(diffBuilder12, diffBuilder11);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new byte[] {(byte)121}, byteArray0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 142;
      doubleArray0[1] = (double) 841;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 841;
      doubleArray0[4] = (double) 2963;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 142;
      DiffBuilder<Object> diffBuilder13 = diffBuilder12.append("", doubleArray0, doubleArray0);
      assertNotNull(diffBuilder13);
      assertNotSame(object1, object0);
      assertSame(diffBuilder13, diffBuilder9);
      assertSame(diffBuilder13, diffBuilder11);
      assertSame(diffBuilder13, diffBuilder10);
      assertSame(diffBuilder13, diffBuilder12);
      assertSame(diffBuilder9, diffBuilder11);
      assertSame(diffBuilder9, diffBuilder10);
      assertSame(diffBuilder9, diffBuilder13);
      assertSame(diffBuilder9, diffBuilder12);
      assertSame(diffBuilder10, diffBuilder13);
      assertSame(diffBuilder10, diffBuilder12);
      assertSame(diffBuilder10, diffBuilder11);
      assertSame(diffBuilder10, diffBuilder9);
      assertSame(diffBuilder11, diffBuilder12);
      assertSame(diffBuilder11, diffBuilder10);
      assertSame(diffBuilder11, diffBuilder13);
      assertSame(diffBuilder11, diffBuilder9);
      assertSame(diffBuilder12, diffBuilder9);
      assertSame(diffBuilder12, diffBuilder10);
      assertSame(diffBuilder12, diffBuilder11);
      assertSame(diffBuilder12, diffBuilder13);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new byte[] {(byte)121}, byteArray0);
      assertArrayEquals(new double[] {142.0, 841.0, 1.0, 841.0, 2963.0, 0.0, 0.0, 142.0}, doubleArray0, 0.01);
      assertFalse(object1.equals((Object)object0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, byteArray0.length);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 'G';
      doubleArray1[1] = (-551.2);
      doubleArray1[2] = (double) '3';
      doubleArray1[3] = (double) 'G';
      doubleArray1[4] = (double) 2963;
      doubleArray1[5] = (-1099.207352273);
      doubleArray1[6] = (double) (-1.0F);
      doubleArray1[7] = 0.0;
      DiffBuilder<Object> diffBuilder14 = diffBuilder13.append("", doubleArray0, doubleArray1);
      assertNotNull(diffBuilder14);
      assertSame(diffBuilder13, diffBuilder14);
      assertSame(diffBuilder13, diffBuilder9);
      assertSame(diffBuilder13, diffBuilder11);
      assertSame(diffBuilder13, diffBuilder10);
      assertSame(diffBuilder13, diffBuilder12);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(diffBuilder14, diffBuilder10);
      assertSame(diffBuilder14, diffBuilder9);
      assertSame(diffBuilder14, diffBuilder11);
      assertSame(diffBuilder14, diffBuilder12);
      assertSame(diffBuilder14, diffBuilder13);
      assertNotSame(object1, object0);
      assertSame(diffBuilder9, diffBuilder11);
      assertSame(diffBuilder9, diffBuilder10);
      assertSame(diffBuilder9, diffBuilder14);
      assertSame(diffBuilder9, diffBuilder13);
      assertSame(diffBuilder9, diffBuilder12);
      assertSame(diffBuilder10, diffBuilder13);
      assertSame(diffBuilder10, diffBuilder12);
      assertSame(diffBuilder10, diffBuilder14);
      assertSame(diffBuilder10, diffBuilder11);
      assertSame(diffBuilder10, diffBuilder9);
      assertSame(diffBuilder11, diffBuilder12);
      assertSame(diffBuilder11, diffBuilder10);
      assertSame(diffBuilder11, diffBuilder14);
      assertSame(diffBuilder11, diffBuilder13);
      assertSame(diffBuilder11, diffBuilder9);
      assertSame(diffBuilder12, diffBuilder9);
      assertSame(diffBuilder12, diffBuilder10);
      assertSame(diffBuilder12, diffBuilder11);
      assertSame(diffBuilder12, diffBuilder13);
      assertSame(diffBuilder12, diffBuilder14);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, diffResult0.getNumberOfDiffs());
      assertArrayEquals(new double[] {71.0, (-551.2), 51.0, 71.0, 2963.0, (-1099.207352273), (-1.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new byte[] {(byte)121}, byteArray0);
      assertArrayEquals(new double[] {142.0, 841.0, 1.0, 841.0, 2963.0, 0.0, 0.0, 142.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(8, doubleArray1.length);
      assertEquals(1, byteArray0.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      assertNotNull(recursiveToStringStyle0);
      
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0, true);
      assertNotNull(diffBuilder0);
      
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$17", '4', '*');
      assertNotNull(diffBuilder1);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "org.apache.commons.lang3.builder.DiffBuilder$17";
      objectArray0[1] = (Object) "org.apache.commons.lang3.builder.DiffBuilder$17";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) recursiveToStringStyle0;
      objectArray0[4] = (Object) recursiveToStringStyle0;
      objectArray0[5] = (Object) diffBuilder0;
      objectArray0[6] = (Object) "org.apache.commons.lang3.builder.DiffBuilder$17";
      objectArray0[7] = (Object) recursiveToStringStyle0;
      DiffBuilder<Integer> diffBuilder2 = diffBuilder1.append("org.apache.commons.lang3.builder.DiffBuilder$17", (Object[]) null, objectArray0);
      assertNotNull(diffBuilder2);
      assertSame(diffBuilder0, diffBuilder2);
      assertSame(diffBuilder0, diffBuilder1);
      assertSame(diffBuilder1, diffBuilder0);
      assertSame(diffBuilder1, diffBuilder2);
      assertSame(diffBuilder2, diffBuilder0);
      assertSame(diffBuilder2, diffBuilder1);
      assertEquals(8, objectArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      DiffBuilder<Object> diffBuilder3 = new DiffBuilder<Object>(object1, recursiveToStringStyle0, recursiveToStringStyle0);
      assertNotNull(diffBuilder3);
      assertFalse(object1.equals((Object)object0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      DiffBuilder<Object> diffBuilder4 = diffBuilder3.append("?k1ASirc\"", booleanArray0, booleanArray0);
      assertNotNull(diffBuilder4);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder4, diffBuilder3);
      assertNotSame(object1, object0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, booleanArray0.length);
      
      DiffBuilder<Object> diffBuilder5 = diffBuilder4.append("C)`Q7Z&kSE-g.", (Object[]) null, (Object[]) null);
      assertNotNull(diffBuilder5);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder4);
      assertNotSame(object1, object0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, booleanArray0.length);
      
      DiffBuilder<Object> diffBuilder6 = diffBuilder5.append("?k1ASirc\"", false, true);
      assertNotNull(diffBuilder6);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder4);
      assertNotSame(object1, object0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, booleanArray0.length);
      
      DiffBuilder<Object> diffBuilder7 = diffBuilder6.append("org.apache.commons.lang3.builder.DiffBuilder$17", (float) 0, (-1.0F));
      assertNotNull(diffBuilder7);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder7);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder7);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder7);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder6, diffBuilder7);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder7, diffBuilder6);
      assertSame(diffBuilder7, diffBuilder4);
      assertSame(diffBuilder7, diffBuilder5);
      assertSame(diffBuilder7, diffBuilder3);
      assertNotSame(object1, object0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, booleanArray0.length);
      
      DiffBuilder<Object> diffBuilder8 = diffBuilder7.append("?k1ASirc\"", (long) 0, 0L);
      assertNotNull(diffBuilder8);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder8);
      assertSame(diffBuilder3, diffBuilder7);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder8);
      assertSame(diffBuilder4, diffBuilder7);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder7);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder8);
      assertSame(diffBuilder6, diffBuilder7);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder8);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder7, diffBuilder6);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder7, diffBuilder4);
      assertSame(diffBuilder7, diffBuilder5);
      assertSame(diffBuilder7, diffBuilder3);
      assertSame(diffBuilder8, diffBuilder3);
      assertSame(diffBuilder8, diffBuilder4);
      assertSame(diffBuilder8, diffBuilder6);
      assertSame(diffBuilder8, diffBuilder5);
      assertSame(diffBuilder8, diffBuilder7);
      assertNotSame(object1, object0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, booleanArray0.length);
      
      DiffBuilder<Object> diffBuilder9 = diffBuilder8.append("&f'@;VNIH}44UWYKW*J", (Object) diffBuilder5, objectArray0[7]);
      assertNotNull(diffBuilder9);
      assertSame(diffBuilder3, diffBuilder9);
      assertSame(diffBuilder3, diffBuilder6);
      assertSame(diffBuilder3, diffBuilder4);
      assertSame(diffBuilder3, diffBuilder5);
      assertSame(diffBuilder3, diffBuilder8);
      assertSame(diffBuilder3, diffBuilder7);
      assertSame(diffBuilder4, diffBuilder5);
      assertSame(diffBuilder4, diffBuilder7);
      assertSame(diffBuilder4, diffBuilder8);
      assertSame(diffBuilder4, diffBuilder6);
      assertSame(diffBuilder4, diffBuilder9);
      assertSame(diffBuilder4, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder3);
      assertSame(diffBuilder5, diffBuilder9);
      assertSame(diffBuilder5, diffBuilder6);
      assertSame(diffBuilder5, diffBuilder7);
      assertSame(diffBuilder5, diffBuilder4);
      assertSame(diffBuilder5, diffBuilder8);
      assertSame(diffBuilder6, diffBuilder7);
      assertSame(diffBuilder6, diffBuilder5);
      assertSame(diffBuilder6, diffBuilder9);
      assertSame(diffBuilder6, diffBuilder3);
      assertSame(diffBuilder6, diffBuilder8);
      assertSame(diffBuilder6, diffBuilder4);
      assertSame(diffBuilder7, diffBuilder6);
      assertSame(diffBuilder7, diffBuilder9);
      assertSame(diffBuilder7, diffBuilder8);
      assertSame(diffBuilder7, diffBuilder4);
      assertSame(diffBuilder7, diffBuilder5);
      assertSame(diffBuilder7, diffBuilder3);
      assertSame(diffBuilder8, diffBuilder3);
      assertSame(diffBuilder8, diffBuilder4);
      assertSame(diffBuilder8, diffBuilder9);
      assertSame(diffBuilder8, diffBuilder5);
      assertSame(diffBuilder8, diffBuilder6);
      assertSame(diffBuilder8, diffBuilder7);
      assertSame(diffBuilder9, diffBuilder3);
      assertSame(diffBuilder9, diffBuilder4);
      assertSame(diffBuilder9, diffBuilder5);
      assertSame(diffBuilder9, diffBuilder8);
      assertSame(diffBuilder9, diffBuilder7);
      assertSame(diffBuilder9, diffBuilder6);
      assertNotSame(object1, object0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, booleanArray0.length);
      assertEquals(8, objectArray0.length);
      
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      assertNotNull(toStringStyle0);
      
      DiffBuilder<Diff<Integer>> diffBuilder10 = new DiffBuilder<Diff<Integer>>(diff0, diff0, toStringStyle0, false);
      assertNotNull(diffBuilder10);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-49);
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-49);
      byteArray1[1] = (byte) (-49);
      byteArray1[2] = (byte) (-49);
      byteArray1[3] = (byte) (-49);
      byteArray1[4] = (byte) (-49);
      DiffBuilder<Diff<Integer>> diffBuilder11 = diffBuilder10.append("?k1ASirc\"", byteArray0, byteArray1);
      assertNotNull(diffBuilder11);
      assertSame(diffBuilder11, diffBuilder10);
      assertSame(diffBuilder10, diffBuilder11);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-49)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-49), (byte) (-49), (byte) (-49), (byte) (-49)}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      DiffBuilder<Diff<Integer>> diffBuilder12 = diffBuilder11.append("C)`Q7Z&kSE-g.", byteArray1, byteArray0);
      assertNotNull(diffBuilder12);
      assertSame(diffBuilder11, diffBuilder10);
      assertSame(diffBuilder11, diffBuilder12);
      assertSame(diffBuilder12, diffBuilder10);
      assertSame(diffBuilder12, diffBuilder11);
      assertSame(diffBuilder10, diffBuilder12);
      assertSame(diffBuilder10, diffBuilder11);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-49)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-49), (byte) (-49), (byte) (-49), (byte) (-49)}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1059.4277F);
      String string0 = null;
      boolean boolean0 = true;
      char char0 = 'Z';
      int int0 = (-136);
      double[] doubleArray0 = new double[0];
      String string1 = ")tuZL1Wp$\"_wA";
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      assertNotNull(recursiveToStringStyle0);
      
      DiffBuilder<String> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<String>(")tuZL1Wp$\"_wA", (String) null, recursiveToStringStyle0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rhs cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff0, toStringStyle0, true);
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("", 0.0, 1172.780040898);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      DiffBuilder<Diff<Integer>> diffBuilder2 = diffBuilder1.append("", booleanArray0, booleanArray0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1850);
      shortArray0[1] = (short) (-2126);
      shortArray0[2] = (short)545;
      DiffBuilder<Diff<Integer>> diffBuilder3 = diffBuilder2.append("", shortArray0, shortArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-2126);
      DiffBuilder<Diff<Integer>> diffBuilder4 = diffBuilder3.append("", longArray0, longArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      diffBuilder0.append("", byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        diffBuilder4.append((String) null, (long) (short) (-2126), (-3238L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff0, toStringStyle0, false);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-781.6636183073355);
      doubleArray0[1] = 528.1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1114.2452105139);
      doubleArray0[5] = 502.9;
      doubleArray0[6] = 381.39446;
      doubleArray0[7] = 1.0;
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("Z", doubleArray0, doubleArray0);
      DiffBuilder<Diff<Integer>> diffBuilder2 = diffBuilder1.append("Z", '>', 'I');
      DiffBuilder<Diff<Integer>> diffBuilder3 = diffBuilder2.append("Z", (-5716.3797188586), 0.0);
      DiffBuilder<Diff<Integer>> diffBuilder4 = diffBuilder3.append("Z", 1.0F, 1.0F);
      DiffBuilder<Diff<Integer>> diffBuilder5 = diffBuilder4.append("Z", 0, 0);
      diffBuilder5.append("=", (byte)7, (byte)0);
      Integer integer0 = new Integer(598);
      DiffBuilder<Integer> diffBuilder6 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder7 = diffBuilder6.append("Z", (short) (-775), (short)127);
      DiffBuilder<Integer> diffBuilder8 = diffBuilder7.append("=", (-1363.0F), 1.0F);
      DiffBuilder<Integer> diffBuilder9 = diffBuilder8.append("Z", (byte)0, (byte) (-71));
      DiffResult<Integer> diffResult0 = diffBuilder9.build();
      // Undeclared exception!
      try { 
        diffBuilder9.append("=", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      boolean boolean0 = false;
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff0, toStringStyle0, false);
      String string0 = "Z";
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-781.6636183073355);
      doubleArray0[1] = 528.1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[5] = 502.9;
      doubleArray0[6] = 502.9;
      doubleArray0[7] = 1.0;
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("Z", doubleArray0, doubleArray0);
      DiffBuilder<Diff<Integer>> diffBuilder2 = diffBuilder1.append("Z", 'I', 'I');
      DiffBuilder<Diff<Integer>> diffBuilder3 = diffBuilder2.append("Z", (-5716.3797188586), 0.0);
      float float0 = 1.0F;
      DiffBuilder<Diff<Integer>> diffBuilder4 = diffBuilder3.append("Z", 1.0F, 1.0F);
      // Undeclared exception!
      try { 
        diffBuilder4.append((String) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff0, toStringStyle0, false);
      String string0 = "Z";
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-781.6636183073355);
      doubleArray0[1] = 528.1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1114.2452105139);
      doubleArray0[5] = 502.9;
      doubleArray0[6] = 381.39446;
      doubleArray0[7] = 1.0;
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("Z", doubleArray0, doubleArray0);
      DiffBuilder<Diff<Integer>> diffBuilder2 = diffBuilder1.append("Z", '>', 'I');
      DiffBuilder<Diff<Integer>> diffBuilder3 = diffBuilder2.append("Z", (-5716.3797188586), 0.0);
      DiffBuilder<Diff<Integer>> diffBuilder4 = diffBuilder3.append("Z", 1.0F, 1.0F);
      DiffBuilder<Diff<Integer>> diffBuilder5 = diffBuilder4.append("Z", 0, 0);
      diffBuilder5.append("=", (byte)7, (byte)0);
      Integer integer0 = new Integer(598);
      DiffBuilder<Integer> diffBuilder6 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder7 = diffBuilder6.append("Z", (short) (-775), (short)127);
      DiffBuilder<Integer> diffBuilder8 = diffBuilder7.append("=", (-1363.0F), 1.0F);
      DiffBuilder<Integer> diffBuilder9 = diffBuilder8.append("Z", (byte)0, (byte) (-71));
      DiffResult<Integer> diffResult0 = diffBuilder9.build();
      // Undeclared exception!
      try { 
        diffBuilder9.append("=", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl", "Ud_Bx", toStringStyle0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2698);
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("Ud_Bx", shortArray0, shortArray0);
      DiffBuilder<String> diffBuilder2 = diffBuilder1.append("org.apache.commons.lang3.builder.DiffBuilder$18", false, false);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-2698);
      DiffBuilder<String> diffBuilder3 = diffBuilder2.append("org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl", floatArray0, floatArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = '';
      DiffBuilder<String> diffBuilder4 = diffBuilder3.append("org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl", (char[]) null, charArray0);
      DiffBuilder<String> diffBuilder5 = diffBuilder1.append("\u20AC", '', 'd');
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '';
      longArray0[1] = (long) 'P';
      longArray0[2] = (long) 'd';
      diffBuilder2.append("", longArray0, longArray0);
      DiffBuilder<String> diffBuilder6 = diffBuilder4.append("<Rp9", 0, (int) (short) (-2698));
      diffBuilder6.append("org.apache.commons.lang3.builder.DiffBuilder$18", (long) (short) (-2698), (-1L));
      DiffBuilder<Object> diffBuilder7 = new DiffBuilder<Object>("\u20AC", diffBuilder5, toStringStyle0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-2698.0F);
      objectArray0[1] = (Object) 127L;
      objectArray0[2] = (Object) "";
      Object[] objectArray1 = new Object[4];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "Ud_Bx";
      objectArray1[2] = (Object) "";
      Object object1 = new Object();
      objectArray1[3] = object1;
      DiffBuilder<Object> diffBuilder8 = diffBuilder7.append("", objectArray0, objectArray1);
      DiffBuilder<Object> diffBuilder9 = diffBuilder8.append("qY2p#|zrgpfCnT", (byte)36, (byte)36);
      DiffBuilder<Object> diffBuilder10 = diffBuilder9.append("<Rp9", false, false);
      DiffBuilder<Object> diffBuilder11 = diffBuilder10.append("qY2p#|zrgpfCnT", (double) (-2698.0F), (-1618.604341630542));
      int[] intArray0 = new int[0];
      DiffBuilder<Object> diffBuilder12 = diffBuilder11.append("e<@CyRI", intArray0, intArray0);
      DiffBuilder<Object> diffBuilder13 = diffBuilder12.append("\u20AC", 0.0F, 0.0F);
      assertSame(diffBuilder13, diffBuilder7);
  }
}
