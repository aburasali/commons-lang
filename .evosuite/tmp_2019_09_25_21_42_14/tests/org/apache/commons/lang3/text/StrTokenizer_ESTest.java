/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:38:41 GMT 2019
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrTokenizer_ESTest extends StrTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("StrTokenizer").when(strMatcher0).toString();
      doReturn(226).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(false);
      strTokenizer0.hasPrevious();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer1.forEachRemaining(consumer0);
      strTokenizer1.previousToken();
      // Undeclared exception!
      try { 
        strTokenizer0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer("q+:Pct~Yt'9e", strMatcher0, strMatcher1);
      strTokenizer0.setQuoteChar(']');
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      strTokenizer0.nextToken();
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('\"');
      StrTokenizer strTokenizer2 = strTokenizer0.reset();
      char[] charArray0 = new char[3];
      strTokenizer1.reset((char[]) null);
      charArray0[1] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      StrTokenizer strTokenizer3 = strTokenizer2.reset(charArray0);
      strTokenizer2.nextToken();
      strTokenizer0.previous();
      strTokenizer2.previousToken();
      strTokenizer1.nextToken();
      strTokenizer1.setIgnoredChar('\"');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StrTokenizer.getCSVInstance();
      strTokenizer0.forEachRemaining(consumer0);
      StrTokenizer strTokenizer4 = StrTokenizer.getTSVInstance("remove() is unsupported");
      strTokenizer4.previousToken();
      StrTokenizer strTokenizer5 = strTokenizer4.reset("");
      strTokenizer5.getTokenArray();
      StrTokenizer.getTSVInstance(charArray0);
      // Undeclared exception!
      try { 
        strTokenizer3.add("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      StrTokenizer strTokenizer1 = strTokenizer0.reset((String) null);
      StrTokenizer strTokenizer2 = strTokenizer0.setQuoteChar('8');
      strTokenizer2.setDelimiterString("");
      strTokenizer2.clone();
      strTokenizer2.previousIndex();
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[4] = '?';
      charArray0[5] = '8';
      strTokenizer0.clone();
      charArray0[6] = '8';
      StrTokenizer strTokenizer3 = strTokenizer1.reset(charArray0);
      strTokenizer3.size();
      // Undeclared exception!
      try { 
        strTokenizer3.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer("", strMatcher0, strMatcher0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.nextToken();
      strTokenizer0.forEachRemaining(consumer0);
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('d');
      strTokenizer1.setQuoteChar('6');
      StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredChar('d');
      strTokenizer2.previousToken();
      StrTokenizer strTokenizer3 = strTokenizer1.setDelimiterChar('d');
      StrTokenizer strTokenizer4 = strTokenizer3.setIgnoreEmptyTokens(false);
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      strTokenizer1.reset(charArray0);
      strTokenizer4.size();
      strTokenizer2.previousIndex();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("org.apache.commons.lang3.text.StrMatcher");
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('\\');
      StrTokenizer strTokenizer2 = strTokenizer1.setDelimiterString("l0");
      StrTokenizer strTokenizer3 = strTokenizer2.setIgnoreEmptyTokens(false);
      StrTokenizer strTokenizer4 = strTokenizer3.setIgnoredChar('\\');
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      strTokenizer2.getTokenList();
      strTokenizer3.next();
      charArray0[4] = '\\';
      strTokenizer4.reset();
      strTokenizer4.reset(charArray0);
      StrTokenizer strTokenizer5 = strTokenizer4.setIgnoredChar('\\');
      StrTokenizer strTokenizer6 = StrTokenizer.getCSVInstance(charArray0);
      StrTokenizer strTokenizer7 = strTokenizer5.setIgnoredChar('\\');
      String string0 = "StrTokenizer[not tokenized yet]";
      StrTokenizer strTokenizer8 = StrTokenizer.getTSVInstance("StrTokenizer[not tokenized yet]");
      strTokenizer6.setQuoteChar('\\');
      StrTokenizer strTokenizer9 = strTokenizer5.setDelimiterChar('\\');
      strTokenizer9.getTokenArray();
      StrTokenizer strTokenizer10 = strTokenizer6.setDelimiterString("StrTokenizer[not tokenized yet]");
      strTokenizer10.hasNext();
      strTokenizer8.nextIndex();
      strTokenizer0.hasNext();
      // Undeclared exception!
      try { 
        strTokenizer7.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '3';
      charArray0[1] = 'G';
      charArray0[2] = '!';
      charArray0[3] = '4';
      charArray0[4] = 'A';
      charArray0[5] = 'b';
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer(">y|CAQaLY", '!');
      strTokenizer0.next();
      strTokenizer0.getContent();
      StrTokenizer strTokenizer1 = new StrTokenizer();
      strTokenizer1.cloneReset();
      StrTokenizer strTokenizer2 = strTokenizer1.reset();
      strTokenizer2.reset();
      strTokenizer1.hasNext();
      StrTokenizer strTokenizer3 = strTokenizer0.setDelimiterChar('~');
      StrTokenizer.getTSVInstance("");
      strTokenizer1.cloneReset();
      strTokenizer3.isIgnoreEmptyTokens();
      strTokenizer1.getContent();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      strTokenizer0.nextToken();
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('\"');
      StrTokenizer strTokenizer2 = strTokenizer0.reset();
      char[] charArray0 = new char[3];
      strTokenizer1.reset((char[]) null);
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[0] = '\"';
      StrTokenizer strTokenizer3 = strTokenizer2.reset(charArray0);
      strTokenizer2.nextToken();
      strTokenizer0.previous();
      strTokenizer2.previousToken();
      strTokenizer1.nextToken();
      strTokenizer1.setIgnoredChar('\"');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StrTokenizer.getCSVInstance();
      strTokenizer0.forEachRemaining(consumer0);
      StrTokenizer strTokenizer4 = StrTokenizer.getTSVInstance("Index: ");
      strTokenizer4.previousToken();
      StrTokenizer strTokenizer5 = strTokenizer4.reset("");
      strTokenizer5.getTokenArray();
      StrTokenizer.getTSVInstance(charArray0);
      // Undeclared exception!
      try { 
        strTokenizer3.add("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = 'A';
      charArray0[2] = 'o';
      charArray0[3] = 'X';
      charArray0[2] = 'B';
      charArray0[5] = '4';
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      StrTokenizer.getTSVInstance("C;O|?k");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setIgnoreEmptyTokens(false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'L';
      charArray0[1] = 'Z';
      charArray0[2] = 's';
      charArray0[3] = 'k';
      charArray0[4] = 'R';
      charArray0[5] = '2';
      charArray0[6] = 'x';
      charArray0[7] = 'E';
      charArray0[8] = '/';
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      strTokenizer0.size();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.previousIndex();
      strTokenizer0.clone();
      strTokenizer0.setDelimiterString((String) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "The Array must not be null";
      StrTokenizer strTokenizer0 = new StrTokenizer("The Array must not be null");
      StrTokenizer strTokenizer1 = strTokenizer0.reset();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer1.setIgnoredChar('J');
      strTokenizer0.reset("The Array must not be null");
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("'\"", 'n', 'n');
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer1.setDelimiterString("'\"");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'W';
      charArray0[3] = 'X';
      charArray0[4] = 'B';
      charArray0[5] = 'e';
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      strTokenizer0.nextToken();
      strTokenizer0.setQuoteChar('^');
      strTokenizer0.cloneReset();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      strTokenizer0.nextToken();
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('\u0010');
      StrTokenizer strTokenizer2 = strTokenizer0.reset();
      char[] charArray0 = new char[3];
      strTokenizer1.reset((char[]) null);
      charArray0[0] = '\u0010';
      charArray0[1] = '\u0010';
      charArray0[2] = '\u0010';
      StrTokenizer strTokenizer3 = strTokenizer2.reset(charArray0);
      strTokenizer2.nextToken();
      strTokenizer0.previous();
      strTokenizer2.previousToken();
      strTokenizer2.nextToken();
      strTokenizer1.setIgnoredChar('\u0010');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StrTokenizer.getCSVInstance();
      strTokenizer0.forEachRemaining(consumer0);
      StrTokenizer strTokenizer4 = StrTokenizer.getTSVInstance("remove() is unsupported");
      strTokenizer4.previousToken();
      StrTokenizer strTokenizer5 = strTokenizer4.reset("");
      strTokenizer5.getTokenArray();
      StrTokenizer.getTSVInstance(charArray0);
      // Undeclared exception!
      try { 
        strTokenizer3.add("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'G';
      charArray0[2] = '!';
      charArray0[3] = '4';
      charArray0[4] = 'A';
      charArray0[5] = 'b';
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "'c/sK3;OM0^HWAg").when(strMatcher0).toString();
      doReturn((-905), 1907).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);
      // Undeclared exception!
      try { 
        strTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '!';
      charArray0[2] = '2';
      charArray0[3] = 'N';
      charArray0[4] = '=';
      charArray0[5] = 'F';
      charArray0[6] = 'e';
      charArray0[7] = 'R';
      charArray0[8] = 'h';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "_T$bdSV]iu");
      StrTokenizer strTokenizer1 = strTokenizer0.reset("_T$bdSV]iu");
      strTokenizer1.setIgnoreEmptyTokens(false);
      strTokenizer1.hasNext();
      strTokenizer0.nextToken();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = 'u';
      charArray0[2] = 'n';
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(strMatcher0).toString();
      doReturn((-1451), 14).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0);
      strTokenizer0.toString();
      strTokenizer0.getTokenList();
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "${ T}";
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("${ T}").when(strMatcher0).toString();
      doReturn(22).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer("${ T}", strMatcher0, strMatcher0);
      // Undeclared exception!
      try { 
        strTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      char char0 = 'G';
      strTokenizer0.reset("{");
      StrTokenizer.getTSVInstance((char[]) null);
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('G');
      StrTokenizer strTokenizer2 = strTokenizer1.reset();
      char[] charArray0 = new char[4];
      strTokenizer0.setEmptyTokenAsNull(true);
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      StrTokenizer strTokenizer3 = strTokenizer2.reset(charArray0);
      strTokenizer3.hasPrevious();
      strTokenizer2.setIgnoreEmptyTokens(true);
      strTokenizer0.previousToken();
      // Undeclared exception!
      try { 
        strTokenizer1.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '_';
      charArray0[2] = 'O';
      charArray0[3] = ';';
      charArray0[4] = '[';
      charArray0[5] = 'b';
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strMatcher1).toString();
      doReturn(0).when(strMatcher1).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher1);
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('');
      strTokenizer1.previousToken();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", '}');
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(true);
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '<';
      StrTokenizer strTokenizer2 = strTokenizer1.reset(charArray0);
      StrTokenizer strTokenizer3 = strTokenizer2.reset();
      strTokenizer3.getTokenArray();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = '@';
      charArray0[2] = 'k';
      charArray0[3] = 'y';
      strTokenizer0.reset(charArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.nextIndex();
      strTokenizer0.setDelimiterString("J4YUqBz");
      StrTokenizer strTokenizer1 = StrTokenizer.getTSVInstance(charArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = 'k';
      charArray1[1] = 'y';
      charArray1[2] = 'n';
      charArray1[3] = '*';
      charArray1[4] = 'n';
      charArray1[5] = '@';
      charArray1[6] = 'y';
      charArray1[7] = 'n';
      charArray1[8] = 'n';
      strTokenizer1.reset(charArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: ");
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer0.getTokenList();
      char char0 = 'q';
      StrTokenizer strTokenizer2 = strTokenizer0.setIgnoredChar('q');
      strTokenizer1.getContent();
      strTokenizer2.isEmptyTokenAsNull();
      StrTokenizer strTokenizer3 = StrTokenizer.getCSVInstance();
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      strTokenizer3.tokenize(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        strTokenizer3.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = 'j';
      charArray0[2] = 'g';
      charArray0[3] = 'D';
      charArray0[4] = 'U';
      charArray0[5] = '[';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "");
      StrTokenizer strTokenizer1 = strTokenizer0.reset("(<r+_;*`");
      strTokenizer1.setQuoteChar('D');
      StrTokenizer strTokenizer2 = strTokenizer0.setQuoteChar('g');
      StrTokenizer strTokenizer3 = strTokenizer2.setQuoteChar('U');
      strTokenizer3.hasPrevious();
      strTokenizer2.cloneReset();
      strTokenizer0.setIgnoredChar('[');
      strTokenizer3.reset(charArray0);
      strTokenizer0.hasNext();
      StrTokenizer.getTSVInstance();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("startIndex must be valid");
      strTokenizer0.getTokenArray();
      strTokenizer0.previousToken();
      strTokenizer0.setIgnoredChar('L');
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      strTokenizer0.setIgnoreEmptyTokens(true);
      strTokenizer0.hasNext();
      StrTokenizer.getCSVInstance();
      strTokenizer0.setIgnoreEmptyTokens(true);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("vZc2*lcFT3fcvB2V.", (String) null);
      strTokenizer0.next();
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString("");
      // Undeclared exception!
      try { 
        strTokenizer1.set("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      strTokenizer0.getTokenList();
      // Undeclared exception!
      try { 
        strTokenizer0.set("5;:9;bq");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer("org.apache.commons.lang3.text.StrMatcher$TrimMatcher", strMatcher0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '?';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "");
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('\'');
      strTokenizer0.getContent();
      StrTokenizer strTokenizer2 = StrTokenizer.getCSVInstance();
      strTokenizer2.cloneReset();
      strTokenizer0.nextToken();
      strTokenizer0.hasPrevious();
      StrTokenizer strTokenizer3 = strTokenizer2.reset();
      strTokenizer3.setEmptyTokenAsNull(false);
      strTokenizer1.isIgnoreEmptyTokens();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("");
      strTokenizer0.setDelimiterChar('>');
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer1 = strTokenizer0.reset("be>l:Yo\"OoH>pYH");
      strTokenizer1.setDelimiterChar('c');
      strTokenizer1.size();
      strTokenizer1.setIgnoreEmptyTokens(true);
      // Undeclared exception!
      try { 
        strTokenizer0.set("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 's';
      charArray0[2] = '?';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "'\"");
      strTokenizer0.toString();
      StrTokenizer strTokenizer1 = StrTokenizer.getCSVInstance(charArray0);
      // Undeclared exception!
      try { 
        strTokenizer1.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'L';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("Q*H4p\"i;ON", '_');
      strTokenizer0.toString();
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(false);
      strTokenizer1.getContent();
      strTokenizer1.reset();
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      StrTokenizer.getCSVInstance(charArray0);
      strTokenizer0.isEmptyTokenAsNull();
      StrTokenizer.getTSVInstance("Q*H4p\"i;ON");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'T', 'L');
      strTokenizer0.cloneReset();
      strTokenizer0.tokenize(charArray0, 39, 39);
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer0.reset();
      strTokenizer1.setIgnoredChar(')');
      strTokenizer0.cloneReset();
      StrTokenizer strTokenizer2 = StrTokenizer.getCSVInstance();
      strTokenizer2.setDelimiterChar('j');
      strTokenizer2.isIgnoreEmptyTokens();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported", strMatcher0, strMatcher0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer((char[]) null, strMatcher0);
      StrTokenizer strTokenizer1 = strTokenizer0.reset("");
      // Undeclared exception!
      try { 
        strTokenizer1.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("@T[=}kq1BHf:S(,;pR", "^<}jH;1dmXVZAWd");
      strTokenizer0.hasNext();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char char0 = '4';
      StrTokenizer strTokenizer0 = new StrTokenizer("", '4');
      boolean boolean0 = false;
      StrTokenizer strTokenizer1 = StrTokenizer.getTSVInstance("");
      // Undeclared exception!
      try { 
        strTokenizer1.add("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '[', '[');
      strTokenizer0.previousIndex();
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('U');
      strTokenizer1.setDelimiterString("rU^hA.b");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null);
      strTokenizer0.setEmptyTokenAsNull(false);
      StrTokenizer strTokenizer1 = strTokenizer0.reset((String) null);
      strTokenizer1.size();
      strTokenizer0.clone();
      strTokenizer1.nextIndex();
      strTokenizer1.getTokenList();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer2 = strTokenizer1.setQuoteChar(':');
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      // Undeclared exception!
      try { 
        strTokenizer2.tokenize(charArray0, 44, 2794);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("org.apache.commons.lang3.text.StrMatcher$TrimMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      strTokenizer0.clone();
      StrTokenizer strTokenizer1 = strTokenizer0.reset();
      strTokenizer1.reset("9*Ws$]D_f/42R6Hcjc");
      StrTokenizer strTokenizer2 = StrTokenizer.getTSVInstance();
      strTokenizer2.hasNext();
      strTokenizer2.hasPrevious();
      strTokenizer0.next();
      // Undeclared exception!
      try { 
        strTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      strTokenizer0.setDelimiterChar('N');
      charArray0[1] = '[';
      strTokenizer0.tokenize(charArray0, 44, 44);
      // Undeclared exception!
      try { 
        strTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[4];
      StrTokenizer.getTSVInstance(charArray0);
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      strTokenizer0.next();
      StrTokenizer strTokenizer1 = StrTokenizer.getTSVInstance();
      strTokenizer1.clone();
      StrTokenizer.getCSVInstance("");
      strTokenizer1.nextToken();
      StrTokenizer.getCSVInstance("");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported", "add() is unsupported");
      strTokenizer0.hasPrevious();
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      strTokenizer0.setIgnoredChar('b');
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", '=', '=');
      strTokenizer0.getContent();
      strTokenizer0.getTokenArray();
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      strTokenizer0.getTokenArray();
      StrTokenizer strTokenizer2 = strTokenizer1.setQuoteChar('J');
      strTokenizer2.tokenize(charArray0, (-1232), 0);
      strTokenizer0.getTokenArray();
      strTokenizer0.setIgnoreEmptyTokens(true);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = '\\';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'M');
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(false);
      // Undeclared exception!
      try { 
        strTokenizer1.set("StrTokenizer[not tokenized yet]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      strTokenizer0.cloneReset();
      strTokenizer0.setEmptyTokenAsNull(true);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("");
      strTokenizer0.previousToken();
      strTokenizer0.getTokenList();
      StrTokenizer strTokenizer1 = StrTokenizer.getTSVInstance((String) null);
      strTokenizer1.getContent();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("!Xi,WUxcKK$iwLQ");
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(false);
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      strTokenizer1.tokenize(charArray0, 0, (-1407));
      strTokenizer0.setDelimiterString("");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '<';
      charArray0[2] = 'a';
      charArray0[3] = '.';
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      strTokenizer0.clone();
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('O');
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      char[] charArray1 = new char[5];
      charArray1[0] = 'a';
      charArray1[1] = 'q';
      charArray1[2] = '.';
      charArray1[3] = '1';
      charArray1[4] = '(';
      StrTokenizer.getCSVInstance(charArray1);
      strTokenizer1.forEachRemaining(consumer0);
      strTokenizer1.previousToken();
      strTokenizer0.getTokenArray();
      strTokenizer0.hasNext();
      StrTokenizer.getCSVInstance((String) null);
      strTokenizer0.clone();
      // Undeclared exception!
      try { 
        strTokenizer0.set("(<a.");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("ECp02  VNvx");
      StrTokenizer.getTSVInstance();
      StrTokenizer strTokenizer1 = StrTokenizer.getTSVInstance("&cmQ@SQg%Q1;Yc");
      strTokenizer1.nextToken();
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = '';
      charArray0[2] = 'E';
      charArray0[3] = '\"';
      charArray0[4] = ' ';
      StrTokenizer.getTSVInstance(charArray0);
      char[] charArray1 = new char[2];
      charArray1[0] = 'X';
      charArray1[1] = 'J';
      strTokenizer0.tokenize(charArray1, 26, 26);
      strTokenizer0.cloneReset();
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      strTokenizer0.getTokenArray();
      // Undeclared exception!
      try { 
        strTokenizer0.set("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'y', '&');
      strTokenizer0.next();
      strTokenizer0.previousToken();
      strTokenizer0.reset((String) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("rL");
      StrTokenizer strTokenizer1 = StrTokenizer.getCSVInstance("rL");
      strTokenizer1.previousToken();
      strTokenizer0.reset();
      strTokenizer1.toString();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, 'O');
      strTokenizer0.setIgnoreEmptyTokens(true);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", '=', '%');
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("I Yp");
      // Undeclared exception!
      try { 
        strTokenizer0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = null;
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, (String) null);
      strTokenizer0.toString();
      strTokenizer0.cloneReset();
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('/');
      StrTokenizer strTokenizer2 = strTokenizer1.reset();
      strTokenizer2.nextIndex();
      strTokenizer0.setDelimiterChar('\'');
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = '6';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "u{G{FDw");
      strTokenizer0.hasNext();
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      strTokenizer1.setQuoteChar('I');
      // Undeclared exception!
      try { 
        strTokenizer1.add("Lu");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("org.apache.commons.lang3.ArrayUtils", "org.apache.commons.lang3.ArrayUtils");
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = '|';
      charArray0[2] = '_';
      charArray0[3] = '}';
      charArray0[4] = 'R';
      charArray0[5] = 'G';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      StrTokenizer strTokenizer2 = strTokenizer1.setIgnoreEmptyTokens(false);
      strTokenizer2.toString();
      StrTokenizer strTokenizer3 = strTokenizer2.setEmptyTokenAsNull(false);
      // Undeclared exception!
      try { 
        strTokenizer3.set("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(strMatcher0).toString();
      doReturn(0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(false);
      strTokenizer0.hasPrevious();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer1.forEachRemaining(consumer0);
      strTokenizer1.previousToken();
      // Undeclared exception!
      try { 
        strTokenizer0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = '%';
      charArray0[2] = 'I';
      charArray0[3] = 'm';
      charArray0[4] = 'U';
      charArray0[5] = '?';
      charArray0[6] = 'a';
      charArray0[7] = 'm';
      charArray0[8] = '9';
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      strTokenizer0.previousIndex();
      StrTokenizer.getTSVInstance("~");
      StrTokenizer.getCSVInstance(charArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, " w]@%qIe$dl~#ea}4U");
      strTokenizer0.clone();
      StrTokenizer strTokenizer1 = strTokenizer0.reset();
      strTokenizer0.nextToken();
      strTokenizer1.size();
      strTokenizer0.toString();
      strTokenizer1.getContent();
      strTokenizer0.cloneReset();
      // Undeclared exception!
      try { 
        strTokenizer1.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("StrTokenizer[not tokenized yeX]");
      strTokenizer0.next();
      StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.cloneReset();
      // Undeclared exception!
      try { 
        strTokenizer1.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, strMatcher0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = '&';
      charArray0[2] = 'i';
      charArray0[3] = 'M';
      charArray0[4] = 'm';
      charArray0[5] = 'c';
      charArray0[6] = 'g';
      charArray0[7] = 'E';
      charArray0[8] = '?';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      strTokenizer1.size();
      StrTokenizer.getCSVInstance();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      StrTokenizer strTokenizer1 = strTokenizer0.reset((String) null);
      StrTokenizer strTokenizer2 = strTokenizer0.setQuoteChar('8');
      strTokenizer2.setDelimiterString("");
      strTokenizer2.clone();
      strTokenizer2.previousIndex();
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '?';
      charArray0[5] = '8';
      strTokenizer0.clone();
      charArray0[6] = '8';
      StrTokenizer strTokenizer3 = strTokenizer1.reset(charArray0);
      strTokenizer3.setEmptyTokenAsNull(false);
      strTokenizer3.size();
      // Undeclared exception!
      try { 
        strTokenizer3.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'L';
      charArray0[1] = 'Z';
      charArray0[2] = 's';
      charArray0[3] = 'k';
      charArray0[4] = 'R';
      charArray0[5] = '2';
      charArray0[6] = 'x';
      charArray0[7] = 'E';
      charArray0[8] = '/';
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      strTokenizer0.size();
      strTokenizer0.previousIndex();
      strTokenizer0.clone();
      StrTokenizer strTokenizer1 = StrTokenizer.getCSVInstance("set() is unsupported");
      strTokenizer1.setDelimiterChar(')');
      strTokenizer0.setDelimiterString((String) null);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '(';
      charArray0[2] = 'B';
      charArray0[3] = 'z';
      charArray0[4] = '(';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'z', 'B');
      strTokenizer0.reset("!;{^-U0cv`M<;k=0");
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer("", strMatcher0, strMatcher0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.nextToken();
      strTokenizer0.forEachRemaining(consumer0);
      StrTokenizer strTokenizer1 = StrTokenizer.getTSVInstance();
      strTokenizer1.setQuoteChar('v');
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'd';
      charArray0[2] = 'v';
      StrTokenizer.getCSVInstance(charArray0);
      StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredChar('d');
      strTokenizer2.previousToken();
      StrTokenizer strTokenizer3 = strTokenizer1.setDelimiterChar('d');
      StrTokenizer strTokenizer4 = strTokenizer3.setIgnoreEmptyTokens(false);
      strTokenizer4.setIgnoredChar('v');
      char[] charArray1 = new char[1];
      charArray1[0] = 'd';
      strTokenizer1.reset(charArray1);
      strTokenizer1.getTokenArray();
      strTokenizer2.reset((String) null);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "A";
      char char0 = 'x';
      StrTokenizer strTokenizer0 = new StrTokenizer("A", 'x');
      strTokenizer0.setDelimiterString("A");
      // Undeclared exception!
      try { 
        strTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'G';
      charArray0[2] = '!';
      charArray0[3] = '4';
      charArray0[4] = 'A';
      charArray0[5] = 'b';
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);
      strTokenizer0.next();
      strTokenizer0.getContent();
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer1.cloneReset();
      StrTokenizer strTokenizer2 = strTokenizer1.reset();
      strTokenizer2.reset();
      strTokenizer1.hasNext();
      StrTokenizer strTokenizer3 = strTokenizer0.setDelimiterChar('~');
      StrTokenizer.getTSVInstance("");
      strTokenizer1.cloneReset();
      strTokenizer3.isIgnoreEmptyTokens();
      strTokenizer1.getContent();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = 'N';
      charArray0[2] = 'W';
      charArray0[3] = 'X';
      charArray0[4] = 'B';
      charArray0[5] = '4';
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      // Undeclared exception!
      try { 
        strTokenizer0.set("&|\"=l}*L!cqzl:m>_");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = 'S';
      charArray0[2] = 'W';
      charArray0[3] = 'X';
      charArray0[4] = 'B';
      charArray0[5] = 'x';
      StrTokenizer.getCSVInstance(charArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      strTokenizer0.nextToken();
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('\"');
      StrTokenizer strTokenizer2 = strTokenizer0.reset();
      char[] charArray0 = new char[3];
      strTokenizer1.reset((char[]) null);
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      StrTokenizer strTokenizer3 = strTokenizer2.reset(charArray0);
      strTokenizer2.nextToken();
      strTokenizer0.previous();
      strTokenizer2.previousToken();
      strTokenizer1.nextToken();
      strTokenizer1.setIgnoredChar('\"');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StrTokenizer.getCSVInstance();
      strTokenizer0.forEachRemaining(consumer0);
      StrTokenizer strTokenizer4 = StrTokenizer.getTSVInstance("remove() is unsupported");
      strTokenizer4.previousToken();
      StrTokenizer strTokenizer5 = strTokenizer4.reset("\"");
      strTokenizer5.getTokenArray();
      StrTokenizer.getTSVInstance(charArray0);
      // Undeclared exception!
      try { 
        strTokenizer3.add("\"");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[2] = ',';
      charArray0[2] = '(';
      charArray0[4] = 'g';
      charArray0[5] = ',';
      charArray0[6] = '@';
      charArray0[8] = 'i';
      StrTokenizer strTokenizer0 = new StrTokenizer("", ',', '@');
      strTokenizer0.setIgnoredChar('Y');
      StrTokenizer strTokenizer1 = strTokenizer0.reset("org.apache.commons.lang3.text.StrMatcher$NoMatcher");
      strTokenizer0.reset(charArray0);
      strTokenizer1.hasNext();
      strTokenizer0.toString();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(false);
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '6';
      charArray0[6] = '6';
      strTokenizer1.reset(charArray0);
      strTokenizer1.setIgnoredChar('6');
      StrTokenizer.getTSVInstance();
      StrTokenizer.getCSVInstance();
      strTokenizer1.size();
      strTokenizer0.getTokenList();
      strTokenizer0.nextIndex();
      StrTokenizer strTokenizer2 = StrTokenizer.getCSVInstance();
      assertNotSame(strTokenizer2, strTokenizer0);
  }
}
