/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 01:56:55 GMT 2019
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Formattable;
import java.util.Formatter;
import java.util.FormatterClosedException;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import org.apache.commons.lang3.text.FormattableUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FormattableUtils_ESTest extends FormattableUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Formatter formatter0 = new Formatter();
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = 'K';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = ':';
      charArray0[7] = 'N';
      charArray0[6] = 'g';
      charArray0[7] = '5';
      CharBuffer charBuffer1 = CharBuffer.allocate('}');
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 2663, 2663, 2663, '[', (CharSequence) charBuffer0);
      FormattableUtils.append((CharSequence) charBuffer0, formatter1, 1587, 0, (-453), '}', (CharSequence) charBuffer1);
      FormattableUtils.append((CharSequence) charBuffer0, formatter1, 9965, (-453), 2663, 'g', (CharSequence) "");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      FormattableUtils.append((CharSequence) stringBuffer0, formatter0, 1, 9965, (-32768), '5');
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3176);
      String string0 = ")Ec,c3MIbP\"!";
      Locale locale0 = new Locale(")Ec,c3MIbP\"!", "");
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) formatter0;
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) locale0;
      Formatter formatter1 = formatter0.format(locale0, "", objectArray0);
      formatter1.flush();
      int int0 = 1140;
      FormattableUtils.append((CharSequence) charBuffer0, formatter1, 3176, 1140, 3176, (CharSequence) charBuffer0);
      int int1 = (-885);
      char char0 = '+';
      // Undeclared exception!
      FormattableUtils.append((CharSequence) ")Ec,c3MIbP\"!", formatter0, 1094, 32767, 1103, (CharSequence) ")Ec,c3MIbP\"!");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      Formatter formatter0 = new Formatter();
      Formatter formatter1 = FormattableUtils.append((CharSequence) "", formatter0, 1527, 0, 1527, (CharSequence) "");
      int int0 = 247;
      char char0 = '!';
      FormattableUtils.append((CharSequence) "", formatter1, 0, 247, 0, '!');
      int int1 = 32767;
      // Undeclared exception!
      FormattableUtils.append((CharSequence) "", formatter0, 0, 32767, 247, ',', (CharSequence) "");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Locale locale0 = Locale.FRANCE;
      Formatter formatter0 = new Formatter(locale0);
      Locale locale1 = Locale.ROOT;
      locale0.getDisplayScript(locale1);
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, 0, (-231), ',');
      Formattable formattable0 = null;
      FormattableUtils.toString((Formattable) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Formatter formatter2 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, 1116, 0, ',');
      FormattableUtils.toString((Formattable) null);
      CharBuffer charBuffer1 = CharBuffer.allocate(0);
      charBuffer0.mark();
      FormattableUtils.append((CharSequence) "null", formatter2, 0, 1116, 0, '&');
      FormattableUtils.append((CharSequence) charBuffer1, formatter0, (-231), 1092, (-231), ',', (CharSequence) charBuffer0);
      FormattableUtils.append((CharSequence) charBuffer0, formatter1, 0, 0, 0, 'l');
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "null", formatter0, 0, (-3147), 1, ',', (CharSequence) "null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified ellipsis 'null' exceeds precision of 1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2432);
      MockPrintStream mockPrintStream0 = new MockPrintStream("1fDG(");
      Formatter formatter0 = new Formatter((OutputStream) mockPrintStream0);
      FormattableUtils.append((CharSequence) charBuffer0, formatter0, 849, 39, 594, '\'', (CharSequence) "1fDG(");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      FormattableUtils formattableUtils0 = new FormattableUtils();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "", 0, 0);
      Locale locale0 = Locale.ITALIAN;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      int int0 = 2;
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 2, 63, 2, '8', (CharSequence) charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Formatter formatter0 = new Formatter();
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = 'K';
      charArray0[2] = 'R';
      charArray0[3] = 'L';
      charArray0[4] = ':';
      charArray0[5] = 'N';
      charArray0[6] = 'g';
      charArray0[7] = '5';
      CharBuffer.wrap(charArray0, 0, 1);
      FormattableUtils.append((CharSequence) charBuffer0, formatter0, 2663, 2663, 2663, '[', (CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      char[] charArray0 = new char[9];
      char char0 = 'C';
      charArray0[0] = 'C';
      charArray0[1] = 'E';
      charArray0[2] = 'n';
      charArray0[3] = 'F';
      charArray0[4] = 'e';
      charArray0[5] = 'p';
      charArray0[6] = '`';
      charArray0[7] = 'L';
      charArray0[8] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Locale locale0 = Locale.FRANCE;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      int int0 = 1500;
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, 1500, (-824), (CharSequence) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Formatter formatter0 = new Formatter();
      formatter0.flush();
      formatter0.flush();
      int int0 = (-1061);
      formatter0.close();
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, (-1262), (-1061), (-2574));
        fail("Expecting exception: FormatterClosedException");
      
      } catch(FormatterClosedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.flush();
      Formatter formatter0 = new Formatter();
      formatter0.flush();
      formatter0.close();
      int int1 = 2088;
      int int2 = 1;
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) stringBuffer0, formatter0, 2088, 0, 1, (CharSequence) stringBuffer0);
        fail("Expecting exception: FormatterClosedException");
      
      } catch(FormatterClosedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      Formatter formatter0 = new Formatter((Appendable) null);
      int int0 = 212;
      formatter0.close();
      int int1 = (-2512);
      char char0 = '';
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", formatter0, 212, (-2512), (-2512), '', (CharSequence) "");
        fail("Expecting exception: FormatterClosedException");
      
      } catch(FormatterClosedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", (Formatter) null, (-1), (-1), (-1), '+');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.FormattableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      Formatter formatter0 = new Formatter((Appendable) null);
      Formatter formatter1 = FormattableUtils.append((CharSequence) "", formatter0, 212, (-2512), (-2512), '', (CharSequence) "");
      FormattableUtils formattableUtils0 = new FormattableUtils();
      FormattableUtils.append((CharSequence) "", formatter0, 212, 212, 212, '');
      Formatter formatter2 = FormattableUtils.append((CharSequence) "", formatter1, (-2512), 1, (-462), 'L');
      FormattableUtils.append((CharSequence) "", formatter2, 0, (-2512), 212, 'C', (CharSequence) "");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = 'B';
      charArray0[2] = 'A';
      charArray0[3] = 'x';
      charArray0[4] = '7';
      charArray0[5] = '/';
      charArray0[6] = 'y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Formatter formatter0 = new Formatter((Locale) null);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, 0, 0, (CharSequence) charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified ellipsis 'kBAx7/y' exceeds precision of 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'o';
      charArray0[2] = '(';
      charArray0[3] = '=';
      charArray0[4] = 'B';
      charArray0[5] = '2';
      charArray0[6] = '5';
      charArray0[7] = 'F';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Locale locale0 = Locale.TAIWAN;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 1665, 1665, 0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'z';
      charArray0[2] = 'M';
      charArray0[3] = 'U';
      charArray0[4] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Formatter formatter0 = null;
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, (Formatter) null, 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.FormattableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer.wrap((CharSequence) stringBuffer0, 0, 0);
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) stringBuffer0, (Formatter) null, 1678, 0, 0, (CharSequence) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.FormattableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      String string0 = "azr[ta;HGof8U%6x";
      Locale locale0 = new Locale("", "azr[ta;HGof8U%6x");
      Formatter formatter0 = new Formatter(locale0);
      Formatter formatter1 = FormattableUtils.append((CharSequence) "", formatter0, 0, 0, 0, '+');
      Locale.getISOCountries();
      int int0 = 809;
      FormattableUtils.append((CharSequence) "", formatter1, 809, 809, 809, (CharSequence) "");
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "azr[ta;HGof8U%6x", formatter0, 55, 368, 809, '+');
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%6x'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      char char0 = 'q';
      charArray0[1] = 'q';
      charArray0[2] = '\"';
      charArray0[3] = 'A';
      char char1 = 't';
      charArray0[4] = 't';
      char char2 = '3';
      charArray0[5] = '3';
      charArray0[6] = 'F';
      charArray0[7] = 'd';
      char char3 = ';';
      charArray0[8] = ';';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      charBuffer0.clear();
      charBuffer0.limit(0);
      charBuffer0.order();
      charBuffer0.compact();
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, (Formatter) null, (-1287), 0, (-1083));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.FormattableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = '|';
      charArray0[2] = 'b';
      charArray0[3] = 'p';
      charArray0[4] = '_';
      charArray0[5] = '';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Locale locale0 = Locale.PRC;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 1410, 1410, 1410, '@', (CharSequence) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharSequence charSequence0 = null;
      Formatter formatter0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) null, (Formatter) null, 0, 0, 0, '4', (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Formatter formatter0 = new Formatter((Locale) null);
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, 0, 1334, (CharSequence) charBuffer0);
      FormattableUtils.append((CharSequence) charBuffer0, formatter1, 2215, 2354, 32);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FormattableUtils.toString((Formattable) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      mockPrintStream0.println(3969.146F);
      Formatter formatter0 = null;
      try {
        formatter0 = new Formatter(mockPrintStream0, "null");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      Locale locale0 = Locale.ITALIAN;
      Formatter formatter0 = new Formatter(locale0);
      int int0 = 0;
      formatter0.close();
      int int1 = 0;
      char char0 = ':';
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", formatter0, 0, (-1), 0, ':');
        fail("Expecting exception: FormatterClosedException");
      
      } catch(FormatterClosedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringWriter stringWriter0 = new StringWriter(31);
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 31, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3176);
      Locale locale0 = new Locale(")Ec,c3MIbP\"!", "");
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) formatter0;
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) locale0;
      Formatter formatter1 = formatter0.format(locale0, "", objectArray0);
      FormattableUtils.append((CharSequence) charBuffer0, formatter1, 3176, 1140, 3176, (CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) ")Ec,c3MIbP\"!", formatter0, 1140, 1140, (-885), '+', (CharSequence) ")Ec,c3MIbP\"!");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      CharBuffer.wrap(charArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)119;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, (Formatter) null, 3383, 0, 0, 'e');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.FormattableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = 1;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) formattable0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "3O&8A03I/4eFq";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "3O&8A03I/4eFq";
      Locale locale0 = Locale.CANADA_FRENCH;
      objectArray0[8] = (Object) formattable0;
      int int1 = (-608);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Formatter formatter0 = new Formatter(locale0);
      char char0 = '\\';
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "3O&8A03I/4eFq", formatter0, (-608), (-2125), 1, '\\', (CharSequence) "3O&8A03I/4eFq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified ellipsis '3O&8A03I/4eFq' exceeds precision of 1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      Formatter formatter0 = new Formatter();
      Formatter formatter1 = FormattableUtils.append((CharSequence) "", formatter0, 1527, 0, 1527, (CharSequence) "");
      FormattableUtils.append((CharSequence) "", formatter1, 0, 247, 0, '!');
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = '$';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, (Formatter) null, 2260, 2260, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.FormattableUtils", e);
      }
  }
}
