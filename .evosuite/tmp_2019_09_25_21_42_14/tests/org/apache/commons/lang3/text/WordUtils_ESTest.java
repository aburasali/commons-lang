/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:41:30 GMT 2019
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.text.WordUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WordUtils_ESTest extends WordUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      WordUtils.initials("", charArray0);
      WordUtils.capitalize("", charArray0);
      WordUtils.initials("org.apache.commons.lang3.text.WordUtils", charArray0);
      WordUtils.initials("", charArray0);
      WordUtils.initials("", charArray0);
      WordUtils.swapCase("");
      String string0 = "=sydz^c |";
      int int0 = 1366;
      // Undeclared exception!
      WordUtils.wrap("=sydz^c |", 1366, "bTEWab", true, "|bn@Hoo^+_");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WordUtils.wrap(".*\b", (-1225), ".*\b", false, ".*\b");
      WordUtils.wrap(".*\b", 2997, "..*\b", false, "3LZuSQvEc!wu");
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = 'j';
      charArray0[2] = 'I';
      charArray0[3] = 'y';
      charArray0[4] = 'I';
      WordUtils.capitalizeFully("", charArray0);
      WordUtils.uncapitalize("");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ".*\b";
      WordUtils.containsAllWords(".*\b", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = '8';
      charArray0[2] = 'l';
      charArray0[3] = 'X';
      charArray0[4] = '>';
      charArray0[5] = '/';
      charArray0[6] = '3';
      charArray0[7] = 'A';
      WordUtils.uncapitalize(" 2fS%+bo4k,ao", charArray0);
      WordUtils.capitalizeFully(" 2fS%+bo4k,ao", charArray0);
      WordUtils.capitalizeFully(" 2fS%+bo4k,ao", charArray0);
      WordUtils.capitalizeFully("I(YI", charArray0);
      WordUtils.uncapitalize("I(yi", charArray0);
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "I(yi";
      charSequenceArray0[1] = (CharSequence) " 2fs%+bo4k,ao";
      charSequenceArray0[2] = (CharSequence) "i(yi";
      charSequenceArray0[3] = (CharSequence) " 2fs%+bo4k,ao";
      charSequenceArray0[4] = (CharSequence) "i(yi";
      charSequenceArray0[5] = (CharSequence) " 2fS%+bo4k,ao";
      charSequenceArray0[6] = (CharSequence) "I(yi";
      // Undeclared exception!
      try { 
        WordUtils.containsAllWords(" 2fs%+bo4k,ao", charSequenceArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 12
         // .*\\bI(yi\\b.*
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WordUtils.capitalize((String) null);
      WordUtils.capitalizeFully((String) null);
      WordUtils.capitalize((String) null, (char[]) null);
      WordUtils.capitalizeFully("[Fx(fE");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'L';
      charArray0[2] = 'Y';
      charArray0[3] = 'b';
      charArray0[4] = 'J';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      charSequenceArray0[1] = (CharSequence) charBuffer0;
      charSequenceArray0[2] = (CharSequence) charBuffer0;
      WordUtils.uncapitalize("");
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) charBuffer0;
      WordUtils.containsAllWords(charBuffer0, charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "mQS{r((,qq*\\,7";
      int int0 = (-2754);
      WordUtils.wrap("mQS{r((,qq*,7", (-2754));
      WordUtils.wrap("mQS{r((,qq*,7", (-2754));
      WordUtils.capitalizeFully("");
      String string1 = "sP(hkW";
      WordUtils.uncapitalize("sP(hkW");
      WordUtils.initials("mQS{r((,qq*,7");
      char[] charArray0 = null;
      WordUtils.initials("sP(hkW", (char[]) null);
      WordUtils.capitalizeFully("");
      // Undeclared exception!
      try { 
        WordUtils.wrap("", (-2754), "", true, "IX#i)lw\"L;:z:tV#");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 3
         // IX#i)lw\"L;:z:tV#
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WordUtils.initials("org.apache.commons.lang3.text.WordUtils");
      char[] charArray0 = new char[0];
      WordUtils.initials("org.apache.commons.lang3.text.WordUtils", charArray0);
      WordUtils.capitalize("");
      WordUtils.capitalize("org.apache.commons.lang3.text.WordUtils", charArray0);
      WordUtils.capitalize("6\"]v]7P", charArray0);
      WordUtils.capitalizeFully("");
      WordUtils.wrap("o", 32);
      WordUtils.capitalize("org.apache.commons.lang3.text.WordUtils", charArray0);
      WordUtils.uncapitalize("org.apache.commons.lang3.text.WordUtils", charArray0);
      WordUtils.capitalizeFully("%t7RLp'&Dm{5.NG");
      WordUtils.capitalize("", charArray0);
      WordUtils wordUtils0 = new WordUtils();
      WordUtils.capitalizeFully("mZ_", charArray0);
      WordUtils.initials("mZ_", charArray0);
      WordUtils.capitalize(">gl:XDC+w]Yw", charArray0);
      WordUtils.wrap("mZ_", 32, "", false, "");
      WordUtils.wrap("o", 32);
      WordUtils.capitalize((String) null);
      WordUtils.capitalizeFully(" z>");
      WordUtils.uncapitalize(" ");
      WordUtils.capitalize("?\u0003@rYHo/6");
      WordUtils.wrap("@k27ku[B%oD9sBUW", (-1774));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.capitalize("II(", charArray0);
      assertNotNull(string0);
      assertEquals("II(", string0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = WordUtils.initials("II(");
      assertNotNull(string1);
      assertEquals("I", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "I";
      charSequenceArray0[1] = (CharSequence) "II(";
      charSequenceArray0[2] = (CharSequence) "II(";
      charSequenceArray0[3] = (CharSequence) "II(";
      charSequenceArray0[4] = (CharSequence) "II(";
      boolean boolean0 = WordUtils.containsAllWords("II(", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = WordUtils.swapCase(" 5LR6a%Au,%V\"");
      assertNotNull(string2);
      assertEquals(" 5lr6A%aU,%v\"", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = WordUtils.uncapitalize(" 5lr6A%aU,%v\"");
      assertNotNull(string3);
      assertEquals(" 5lr6A%aU,%v\"", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ',';
      String string4 = WordUtils.initials("\b.*", charArray1);
      assertNotNull(string4);
      assertEquals("\b", string4);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {','}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = WordUtils.wrap("\b.*", 758, (String) null, true);
      assertNotNull(string5);
      assertEquals("\b.*", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = WordUtils.wrap("\b.*", 1003);
      assertNotNull(string1);
      assertEquals("\b.*", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'C';
      charArray0[2] = ']';
      String string2 = WordUtils.uncapitalize("3JsnkVi]Q", charArray0);
      assertNotNull(string2);
      assertEquals("3JsnkVi]q", string2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'', 'C', ']'}, charArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.initials("Wu7LG63zxo1hB", charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Wu7LG63zxo1hB";
      charSequenceArray0[1] = (CharSequence) "Wu7LG63zxo1hB";
      boolean boolean0 = WordUtils.containsAllWords("Wu7LG63zxo1hB", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = WordUtils.initials("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = WordUtils.capitalize("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = WordUtils.wrap("<w[", (-3536), "`bA<IXHa]7wE$RM", false, ".*\b");
      assertNotNull(string2);
      assertEquals("<w[", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = WordUtils.wrap("Fqc]l pXuPv", (-3801), "Fqc]l pXuPv", true, "");
      assertNotNull(string0);
      assertEquals("FFqc]l pXuPvqFqc]l pXuPvcFqc]l pXuPv]Fqc]l pXuPvlFqc]l pXuPvpFqc]l pXuPvXFqc]l pXuPvuFqc]l pXuPvPFqc]l pXuPvv", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = WordUtils.wrap((String) null, 996, (String) null, false, "\b.*");
      assertNull(string0);
      
      String string1 = WordUtils.wrap("L|}~_", (-679), "^wKE+aFiDn8sXd[B8n>", false);
      assertNotNull(string1);
      assertEquals("L|}~_", string1);
      
      String string2 = WordUtils.swapCase("B\u0006g></IZ");
      assertNotNull(string2);
      assertEquals("b\u0006G></iz", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = WordUtils.wrap("\b.*", 996);
      assertNotNull(string3);
      assertEquals("\b.*", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = WordUtils.wrap("^wKE+aFiDn8sXd[B8n>", 996, "", false);
      assertNotNull(string4);
      assertEquals("^wKE+aFiDn8sXd[B8n>", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
      
      String string5 = WordUtils.initials("\b.*");
      assertNotNull(string5);
      assertEquals("\b", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = WordUtils.initials("\b.*");
      assertNotNull(string6);
      assertEquals("\b", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      
      String string7 = WordUtils.initials((String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = WordUtils.wrap("", (-711));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = WordUtils.initials("8v+qI'rX!");
      assertNotNull(string1);
      assertEquals("8", string1);
      assertFalse(string1.equals((Object)string0));
      
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
      
      String string2 = WordUtils.wrap((String) null, 0);
      assertNull(string2);
      
      String string3 = WordUtils.wrap("", 2, (String) null, true, "%~");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = '_';
      charArray0[2] = '&';
      String string0 = WordUtils.capitalizeFully("L=ax)rf|/~aOcx", charArray0);
      assertNotNull(string0);
      assertEquals("L=ax)rf|/~aocx", string0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'9', '_', '&'}, charArray0);
      
      String string1 = WordUtils.capitalizeFully("vMb=c}e:");
      assertNotNull(string1);
      assertEquals("Vmb=c}e:", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = WordUtils.wrap("LREAhd", (-49));
      assertNotNull(string2);
      assertEquals("LREAhd", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = WordUtils.capitalize("F%B6LW`2n", charArray0);
      assertNotNull(string3);
      assertEquals("F%B6LW`2n", string3);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'9', '_', '&'}, charArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = '!';
      String string0 = WordUtils.initials("", charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'P', '!'}, charArray0);
      
      String string1 = WordUtils.capitalizeFully("", charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'P', '!'}, charArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = '6';
      charArray0[3] = '+';
      charArray0[4] = 'q';
      charArray0[5] = 'd';
      String string0 = WordUtils.capitalizeFully("&8C", charArray0);
      assertNotNull(string0);
      assertEquals("&8c", string0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {' ', ' ', '6', '+', 'q', 'd'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '&';
      charArray0[2] = '?';
      charArray0[3] = '4';
      String string0 = WordUtils.initials("A&O0pT Pb", charArray0);
      assertNotNull(string0);
      assertEquals("AO", string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'|', '&', '?', '4'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = WordUtils.capitalize(" C");
      assertNotNull(string0);
      assertEquals(" C", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      String string1 = WordUtils.capitalize(" C", charArray0);
      assertNotNull(string1);
      assertEquals(" C", string1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertTrue(string1.equals((Object)string0));
      
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
      
      boolean boolean0 = WordUtils.containsAllWords(" C", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = WordUtils.containsAllWords(" C", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = WordUtils.initials((String) null, (char[]) null);
      assertNull(string0);
      
      String string1 = WordUtils.uncapitalize((String) null, (char[]) null);
      assertNull(string1);
      
      String string2 = WordUtils.capitalizeFully((String) null, (char[]) null);
      assertNull(string2);
      
      char[] charArray0 = new char[0];
      String string3 = WordUtils.uncapitalize((String) null, charArray0);
      assertNull(string3);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string4 = WordUtils.uncapitalize((String) null, (char[]) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = WordUtils.wrap((String) null, 2469, (String) null, false);
      assertNull(string0);
      
      String string1 = WordUtils.uncapitalize((String) null);
      assertNull(string1);
      
      String string2 = WordUtils.swapCase((String) null);
      assertNull(string2);
      
      String string3 = WordUtils.wrap((String) null, 2469, (String) null, false);
      assertNull(string3);
      
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
      
      String string4 = WordUtils.uncapitalize((String) null);
      assertNull(string4);
      
      String string5 = WordUtils.swapCase((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = WordUtils.initials("T`ts!^-j");
      assertNotNull(string0);
      assertEquals("T", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = 'b';
      String string1 = WordUtils.uncapitalize("", charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'(', 'b'}, charArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = WordUtils.initials("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = WordUtils.containsAllWords("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = WordUtils.swapCase("g5");
      assertNotNull(string0);
      assertEquals("G5", string0);
      
      String string1 = "(NB0-:";
      // Undeclared exception!
      try { 
        WordUtils.wrap("g5", 0, "G5", false, "(NB0-:");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 7
         // (NB0-:
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = WordUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = '@';
      charArray0[2] = '(';
      charArray0[3] = 'W';
      charArray0[4] = '\"';
      String string0 = WordUtils.uncapitalize("yF?", charArray0);
      assertNotNull(string0);
      assertEquals("yF?", string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'{', '@', '(', 'W', '\"'}, charArray0);
      
      String string1 = WordUtils.initials("yF?", charArray0);
      assertNotNull(string1);
      assertEquals("y", string1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'{', '@', '(', 'W', '\"'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = WordUtils.initials("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = WordUtils.wrap("eAX\"VfN D[", (-2426));
      assertNotNull(string3);
      assertEquals("eAX\"VfN\nD[", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = WordUtils.uncapitalize("J>*");
      assertNotNull(string4);
      assertEquals("j>*", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = WordUtils.wrap("=oxt", (-1));
      assertNotNull(string0);
      assertEquals("=oxt", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = WordUtils.wrap("ZJBt+", 32, "ZJBt+", true);
      assertNotNull(string0);
      assertEquals("ZJBt+", string0);
      
      String string1 = WordUtils.wrap("ZJBt+", (-1), "", true, "");
      assertNotNull(string1);
      assertEquals("ZJBt+", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      String string0 = WordUtils.capitalize("hrndc=Ol$0DkNw[WBN:", charArray0);
      assertNotNull(string0);
      assertEquals("Hrndc=Ol$0DKNw[WBN:", string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'D'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = WordUtils.capitalize("!cA}<|X");
      assertNotNull(string0);
      assertEquals("!cA}<|X", string0);
      
      String string1 = WordUtils.initials("[.;|2rB]gEG3\"+hM");
      assertNotNull(string1);
      assertEquals("[", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = WordUtils.swapCase("1])au93@=>_^-UzV)d9");
      assertNotNull(string2);
      assertEquals("1])AU93@=>_^-uZv)D9", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.uncapitalize(".*\b", charArray0);
      assertNotNull(string0);
      assertEquals(".*\b", string0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = WordUtils.uncapitalize(".*\b", charArray0);
      assertNotNull(string1);
      assertEquals(".*\b", string1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(string1.equals((Object)string0));
      
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = WordUtils.uncapitalize(",");
      assertNotNull(string0);
      assertEquals(",", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) ",";
      charSequenceArray0[1] = (CharSequence) ",";
      charSequenceArray0[2] = (CharSequence) ",";
      boolean boolean0 = WordUtils.containsAllWords(",", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = WordUtils.wrap("", (-68), "", false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = 'F';
      String string0 = WordUtils.capitalize("", charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'G', 'F'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = WordUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
      
      String string1 = WordUtils.wrap("", 1, "", true, "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = WordUtils.capitalize("", (char[]) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = WordUtils.wrap("", 2470);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      String string0 = WordUtils.initials("B@=om!", charArray0);
      assertNotNull(string0);
      assertEquals("B", string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'/'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("<O=d'Zf J");
      assertNotNull(string0);
      assertEquals("<o=d'zf J", string0);
      
      char[] charArray0 = new char[0];
      String string1 = WordUtils.initials("N=kX|A5VGgoP^B", charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = WordUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = WordUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = WordUtils.wrap("2eS", 1400);
      assertNotNull(string1);
      assertEquals("2eS", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = WordUtils.capitalize("JHxGU");
      assertNotNull(string0);
      assertEquals("JHxGU", string0);
      
      String string1 = WordUtils.uncapitalize("JHxGU", (char[]) null);
      assertNotNull(string1);
      assertEquals("jHxGU", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = WordUtils.wrap("+", 0);
      assertNotNull(string0);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
      
      String string0 = WordUtils.capitalizeFully("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = 'Y';
      charArray0[2] = 'T';
      charArray0[4] = 'W';
      charArray0[5] = ']';
      String string0 = WordUtils.uncapitalize("bY5Jb", charArray0);
      assertNotNull(string0);
      assertEquals("bY5Jb", string0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {';', 'Y', 'T', '\u0000', 'W', ']'}, charArray0);
      
      String string1 = WordUtils.capitalizeFully("bY5Jb", charArray0);
      assertNotNull(string1);
      assertEquals("By5jb", string1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {';', 'Y', 'T', '\u0000', 'W', ']'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = WordUtils.containsAllWords("By5jb", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string2 = WordUtils.uncapitalize("IF9ag_:1]", charArray0);
      assertNotNull(string2);
      assertEquals("iF9ag_:1]", string2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {';', 'Y', 'T', '\u0000', 'W', ']'}, charArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = WordUtils.swapCase("IF9ag_:1]");
      assertNotNull(string3);
      assertEquals("if9AG_:1]", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = WordUtils.uncapitalize("if9AG_:1]", charArray0);
      assertNotNull(string4);
      assertEquals("if9AG_:1]", string4);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {';', 'Y', 'T', '\u0000', 'W', ']'}, charArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = WordUtils.capitalize("bY5Jb", charArray0);
      assertNotNull(string5);
      assertEquals("BY5Jb", string5);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {';', 'Y', 'T', '\u0000', 'W', ']'}, charArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = WordUtils.wrap(".*\b", (-1225), ".*\b", false, ".*\b");
      assertNotNull(string0);
      assertEquals("..*\b", string0);
      
      String string1 = WordUtils.wrap(".*\b", 2997, "..*\b", false, "3LZuSQvEc!wu");
      assertNotNull(string1);
      assertEquals(".*\b", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = WordUtils.uncapitalize("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ".*\b";
      boolean boolean0 = WordUtils.containsAllWords(".*\b", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = WordUtils.swapCase("<DRcK/s>LT3Es^4");
      assertNotNull(string0);
      assertEquals("<drCk/S>lt3eS^4", string0);
      
      String string1 = WordUtils.capitalize("<drCk/S>lt3eS^4");
      assertNotNull(string1);
      assertEquals("<drCk/S>lt3eS^4", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = WordUtils.wrap("32sCAblDuS", (-1));
      assertNotNull(string2);
      assertEquals("32sCAblDuS", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '?';
      String string3 = WordUtils.initials("<drCk/S>lt3eS^4", charArray0);
      assertNotNull(string3);
      assertEquals("<", string3);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '?'}, charArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = WordUtils.wrap("K ``.@J}!8,Fq`0xs", (-1), "", true, "");
      assertNotNull(string4);
      assertEquals("K``.@J}!8,Fq`0xs", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = WordUtils.swapCase("");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = WordUtils.swapCase("eH41aLfJX$]hZ");
      assertNotNull(string0);
      assertEquals("Eh41AlFjx$]Hz", string0);
      
      String string1 = WordUtils.wrap("F1s p6", 32, "F1s p6", false, "eH41aLfJX$]hZ");
      assertNotNull(string1);
      assertEquals("F1s p6", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "eH41aLfJX$]hZ";
      charSequenceArray0[1] = (CharSequence) "F1s p6";
      charSequenceArray0[2] = (CharSequence) "F1s p6";
      charSequenceArray0[3] = (CharSequence) "eH41aLfJX$]hZ";
      charSequenceArray0[4] = (CharSequence) "F1s p6";
      charSequenceArray0[5] = (CharSequence) "F1s p6";
      charSequenceArray0[6] = (CharSequence) "F1s p6";
      charSequenceArray0[7] = (CharSequence) "F1s p6";
      charSequenceArray0[8] = (CharSequence) "F1s p6";
      boolean boolean0 = WordUtils.containsAllWords("F1s p6", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string2 = WordUtils.wrap((String) null, (-1), (String) null, false);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = WordUtils.swapCase((String) null);
      assertNull(string0);
      
      String string1 = WordUtils.capitalize("Z=");
      assertNotNull(string1);
      assertEquals("Z=", string1);
      
      String string2 = WordUtils.wrap("", 2719, "Y5/I:L", false, "\b.*");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[0];
      String string3 = WordUtils.uncapitalize((String) null, charArray0);
      assertNull(string3);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string4 = WordUtils.uncapitalize("Y5/I:L", charArray0);
      assertNotNull(string4);
      assertEquals("Y5/I:L", string4);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = WordUtils.wrap((String) null, 2719, "Itd@", false);
      assertNull(string5);
      
      String string6 = WordUtils.capitalizeFully("Z=");
      assertNotNull(string6);
      assertEquals("Z=", string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = WordUtils.wrap("pmigrI+CaLr3, A`", 2719, (String) null, false, (String) null);
      assertNotNull(string7);
      assertEquals("pmigrI+CaLr3, A`", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = WordUtils.uncapitalize((String) null);
      assertNull(string8);
      
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
      
      String string9 = WordUtils.wrap("pmigrI+CaLr3, A`", 2719);
      assertNotNull(string9);
      assertEquals("pmigrI+CaLr3, A`", string9);
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      
      String string10 = WordUtils.capitalizeFully((String) null);
      assertNull(string10);
      
      String string11 = WordUtils.swapCase((String) null);
      assertNull(string11);
      
      String string12 = WordUtils.uncapitalize("\b.*", charArray0);
      assertNotNull(string12);
      assertEquals("\b.*", string12);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string7));
      
      String string13 = WordUtils.initials("pmigrI+CaLr3, A`");
      assertNotNull(string13);
      assertEquals("pA", string13);
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string7));
      
      String string14 = WordUtils.initials((String) null);
      assertNull(string14);
      
      String string15 = WordUtils.capitalize("Z=");
      assertNotNull(string15);
      assertEquals("Z=", string15);
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string13));
      assertTrue(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string2));
      assertTrue(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string7));
      
      String string16 = WordUtils.capitalize("7-yssJLT +", charArray0);
      assertNotNull(string16);
      assertEquals("7-yssJLT +", string16);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string4));
      assertFalse(string16.equals((Object)string6));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = 'Y';
      charArray0[2] = 'x';
      charArray0[3] = '5';
      String string0 = WordUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = WordUtils.capitalize("5WUlF7T", charArray0);
      assertNotNull(string1);
      assertEquals("5WUlF7T", string1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'5', 'Y', 'x', '5'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = WordUtils.containsAllWords(")[cRcQ8lO", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = WordUtils.wrap("bbFbb", 0, "", false, "5WUlF7T");
      assertNotNull(string2);
      assertEquals("bbFbb", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = WordUtils.containsAllWords("", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[0];
      WordUtils.capitalizeFully("P\"nbB=#$Z>1=D.NgsT", charArray0);
      String string0 = WordUtils.uncapitalize("P\"nbB=#$Z>1=D.NgsT");
      assertEquals("p\"nbB=#$Z>1=D.NgsT", string0);
      
      WordUtils.capitalize("P\"nbB=#$Z>1=D.NgsT");
      WordUtils.capitalize("RDoV3c![jdcFW5Uw");
      WordUtils.initials("RDoV3c![jdcFW5Uw", charArray0);
      String string1 = WordUtils.capitalize("P\"nbB=#$Z>1=D.NgsT");
      assertEquals("P\"nbB=#$Z>1=D.NgsT", string1);
      
      WordUtils.capitalize("");
      WordUtils.swapCase("");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Z4=\"TOb4x/9";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Z4=\"TOb4x/9";
      String string2 = WordUtils.initials("RDoV3c![jdcFW5Uw");
      assertEquals("R", string2);
      
      charSequenceArray0[5] = (CharSequence) "R";
      charSequenceArray0[6] = (CharSequence) "RDoV3c![jdcFW5Uw";
      boolean boolean0 = WordUtils.containsAllWords("Z4=\"TOb4x/9", charSequenceArray0);
      assertFalse(boolean0);
  }
}
