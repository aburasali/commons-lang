/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:05:52 GMT 2019
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.time.Clock;
import java.time.ZoneOffset;
import java.time.chrono.JapaneseDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalQuery;
import java.util.Locale;
import org.apache.commons.lang3.text.CompositeFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompositeFormat_ESTest extends CompositeFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      CompositeFormat compositeFormat0 = new CompositeFormat(dateFormat0, dateFormat0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = compositeFormat0.parseObject("", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompositeFormat compositeFormat0 = new CompositeFormat((Format) null, (Format) null);
      Format format0 = compositeFormat0.getParser();
      assertNull(format0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompositeFormat compositeFormat0 = new CompositeFormat((Format) null, (Format) null);
      Format format0 = compositeFormat0.getFormatter();
      assertNull(format0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofPattern("", locale0);
      TemporalQuery<Object> temporalQuery0 = (TemporalQuery<Object>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      Format format0 = dateTimeFormatter0.toFormat(temporalQuery0);
      CompositeFormat compositeFormat0 = new CompositeFormat(numberFormat0, format0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.system(zoneOffset0);
      JapaneseDate japaneseDate0 = MockJapaneseDate.now(clock0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      FieldPosition fieldPosition0 = new FieldPosition(0);
      StringBuffer stringBuffer1 = compositeFormat0.format((Object) japaneseDate0, stringBuffer0, fieldPosition0);
      assertEquals("", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("&}w");
      MessageFormat messageFormat0 = new MessageFormat("org.apache.commons.lang3.text.CompositeFormat", locale0);
      CompositeFormat compositeFormat0 = new CompositeFormat(messageFormat0, messageFormat0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-819));
      StringBuffer stringBuffer1 = compositeFormat0.format((Object) null, stringBuffer0, fieldPosition0);
      assertEquals(45, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = new Locale("0lCP[C<A", "0lCP[C<A");
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      CompositeFormat compositeFormat0 = new CompositeFormat(numberFormat0, numberFormat0);
      try { 
        compositeFormat0.reformat("hi:}E>`q)%a");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      CompositeFormat compositeFormat0 = new CompositeFormat(dateFormat0, dateFormat0);
      // Undeclared exception!
      try { 
        compositeFormat0.reformat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofPattern("", locale0);
      TemporalQuery<Object> temporalQuery0 = (TemporalQuery<Object>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      Format format0 = dateTimeFormatter0.toFormat(temporalQuery0);
      CompositeFormat compositeFormat0 = new CompositeFormat(numberFormat0, format0);
      // Undeclared exception!
      try { 
        compositeFormat0.reformat("8q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format target must implement TemporalAccessor
         //
         verifyException("java.time.format.DateTimeFormatter$ClassicFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("muM`~*qQ", decimalFormatSymbols0);
      CompositeFormat compositeFormat0 = new CompositeFormat(mockSimpleDateFormat0, decimalFormat0);
      ParsePosition parsePosition0 = new ParsePosition((-499));
      // Undeclared exception!
      try { 
        compositeFormat0.parseObject("muM`~*qQ", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompositeFormat compositeFormat0 = new CompositeFormat((Format) null, (Format) null);
      // Undeclared exception!
      try { 
        compositeFormat0.parseObject("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.CompositeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompositeFormat compositeFormat0 = new CompositeFormat((Format) null, (Format) null);
      StringBuffer stringBuffer0 = new StringBuffer("");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        compositeFormat0.format((Object) null, stringBuffer0, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.CompositeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("&}w");
      MessageFormat messageFormat0 = new MessageFormat("org.apache.commons.lang3.text.CompositeFormat", locale0);
      CompositeFormat compositeFormat0 = new CompositeFormat(messageFormat0, messageFormat0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-819));
      // Undeclared exception!
      try { 
        compositeFormat0.format((Object) decimalFormat0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.text.DecimalFormat cannot be cast to [Ljava.lang.Object;
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("30l~m1WE'toA9");
      CompositeFormat compositeFormat0 = new CompositeFormat(choiceFormat0, choiceFormat0);
      ParsePosition parsePosition0 = new ParsePosition(793);
      Object object0 = compositeFormat0.parseObject("Qvi", parsePosition0);
      StringWriter stringWriter0 = new StringWriter(793);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        compositeFormat0.format(object0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      CompositeFormat compositeFormat0 = new CompositeFormat(numberFormat0, numberFormat0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.system(zoneOffset0);
      JapaneseDate japaneseDate0 = MockJapaneseDate.now(clock0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      FieldPosition fieldPosition0 = new FieldPosition(0);
      // Undeclared exception!
      try { 
        compositeFormat0.format((Object) japaneseDate0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      CompositeFormat compositeFormat0 = new CompositeFormat(dateFormat0, dateFormat0);
      Format format0 = compositeFormat0.getFormatter();
      assertSame(dateFormat0, format0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      CompositeFormat compositeFormat0 = new CompositeFormat(dateFormat0, dateFormat0);
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)compositeFormat0.getParser();
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      CompositeFormat compositeFormat0 = new CompositeFormat(numberFormat0, numberFormat0);
      String string0 = compositeFormat0.reformat("8q");
      assertEquals("8", string0);
  }
}
