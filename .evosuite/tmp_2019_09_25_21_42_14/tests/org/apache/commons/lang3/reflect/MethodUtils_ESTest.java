/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:43:48 GMT 2019
 */

package org.apache.commons.lang3.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;
import org.apache.commons.lang3.ClassUtils;
import org.apache.commons.lang3.reflect.MethodUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodUtils_ESTest extends MethodUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = "notify";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class1;
      try { 
        MethodUtils.invokeExactMethod((Object) list0, "notify");
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<Method> class2 = Method.class;
      String string0 = "getGenericExceptionTypes";
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class2, "getGenericExceptionTypes", (Object[]) methodArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String string0 = "py6(h/y";
      String string1 = "getDeclaredMethods";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "py6(h/y";
      objectArray0[1] = (Object) "py6(h/y";
      objectArray0[2] = (Object) class0;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[1] = class2;
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getTypeParameters", (Class<?>[]) null);
      assertEquals("public java.lang.reflect.TypeVariable[] java.lang.reflect.Method.getTypeParameters()", method0.toString());
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isVarArgs());
      assertEquals("getTypeParameters", method0.getName());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertNotNull(method0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "2*%;r3~N*&~D7Y#A";
      String string1 = "isEmpty";
      Object[] objectArray0 = new Object[3];
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      try { 
        MethodUtils.invokeMethod((Object) "isEmpty", false, "isEmpty", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: isEmpty() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = "toHexString";
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 3);
      Class<Method> class1 = Method.class;
      classArray0[0] = class1;
      Class<Method> class2 = Method.class;
      classArray0[1] = class2;
      Class<Method> class3 = Method.class;
      classArray0[2] = class3;
      Method method0 = MethodUtils.getMatchingMethod(class0, "toHexString", classArray0);
      assertEquals(3, classArray0.length);
      assertNull(method0);
      
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, false, "toHexString");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String string0 = "org.apache.commons.lang3.reflect.MethodUtils";
      Class<Integer>[] classArray0 = null;
      Class<Method> class1 = Method.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(class0, "toString", (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<Annotation> class2 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsListWithAnnotation(class1, (Class<? extends Annotation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The annotation class must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsWithAnnotation((Class<?>) null, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The class must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 4);
      classArray0[0] = class1;
      classArray0[1] = class1;
      classArray0[3] = class1;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) classArray0[2], "j}Y:ZGj", (Object[]) methodArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = null;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<Object> class2 = Object.class;
      Method method0 = MethodUtils.getMatchingMethod(class2, "Expected type: %s, actual: %s", classArray0);
      assertEquals(2, classArray0.length);
      assertNull(method0);
      assertSame(class2, class0);
      assertSame(class2, class1);
      
      boolean boolean0 = true;
      try { 
        MethodUtils.invokeMethod(object0, true, "() on class: ", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such method: () on class: () on object: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      assertNotNull(methodUtils0);
      
      String string0 = "";
      Class<Annotation> class0 = Annotation.class;
      String string1 = "";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      try { 
        MethodUtils.invokeMethod(objectArray0[1], false, "", objectArray0, classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = null;
      String string0 = "TM%8-m|.Qqp=";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, "TM%8-m|.Qqp=", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ".gb\"";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ".gb\"";
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) ".gb\"";
      objectArray0[4] = (Object) class0;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      classArray0[1] = class0;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      classArray0[3] = class0;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "getParameters", classArray0);
      assertEquals(4, classArray0.length);
      assertNull(method0);
      assertSame(class0, class1);
      assertSame(class0, class2);
      
      Method method1 = MethodUtils.getAccessibleMethod((Method) null);
      assertNull(method1);
      
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      assertNotNull(methodUtils0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) methodUtils0;
      objectArray0[1] = (Object) methodUtils0;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(objectArray0, classArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<Annotation> class2 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class2, class1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(class1, class2);
      assertSame(class2, class1);
      
      Class<String> class3 = String.class;
      Class<Annotation> class4 = Annotation.class;
      List<Method> list1 = MethodUtils.getMethodsListWithAnnotation(class3, class4);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertSame(class4, class1);
      assertSame(class4, class2);
      assertNotSame(list1, list0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class5 = Object.class;
      classArray0[0] = class5;
      Class<Object> class6 = Object.class;
      classArray0[1] = class6;
      Class<Object> class7 = Object.class;
      classArray0[2] = class7;
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(methodArray0, classArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = "";
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "", classArray0);
      assertEquals(0, classArray0.length);
      assertNull(method0);
      
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(classArray0, classArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class2 = Integer.class;
      classArray0[0] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[1] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[2] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[3] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[4] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[5] = class7;
      Class<Integer> class8 = Integer.class;
      classArray0[6] = class8;
      Class<Integer> class9 = Integer.class;
      classArray0[7] = class9;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class1, "[", classArray0);
      assertEquals(8, classArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 9);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      classArray0[4] = class0;
      classArray0[5] = class0;
      classArray0[6] = class0;
      classArray0[7] = class0;
      classArray0[8] = class0;
      Method method0 = MethodUtils.getMatchingMethod(class0, "`TP/s:SIrp\"kSC", classArray0);
      assertEquals(9, classArray0.length);
      assertNull(method0);
      
      Method method1 = MethodUtils.getAccessibleMethod((Method) null);
      assertNull(method1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1, false, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      
      Class<Integer> class2 = Integer.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 8);
      Class<String> class3 = String.class;
      classArray0[0] = class3;
      Class<String> class4 = String.class;
      classArray0[1] = class4;
      Class<String> class5 = String.class;
      classArray0[2] = class5;
      Class<String> class6 = String.class;
      classArray0[3] = class6;
      Class<String> class7 = String.class;
      classArray0[4] = class7;
      Class<String> class8 = String.class;
      classArray0[5] = class8;
      Class<String> class9 = String.class;
      classArray0[6] = class9;
      Class<String> class10 = String.class;
      classArray0[7] = class10;
      Method method0 = MethodUtils.getAccessibleMethod(class2, "ewv^n<D!EF)", classArray0);
      assertEquals(8, classArray0.length);
      assertNull(method0);
      
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "ewv^n<D!EF)", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<Object> class2 = Object.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class2, class1, false, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(class2, class0);
      
      Class<Object> class3 = Object.class;
      Method[] methodArray1 = MethodUtils.getMethodsWithAnnotation(class3, class1, false, false);
      assertFalse(methodArray1.equals((Object)methodArray0));
      assertEquals(0, methodArray1.length);
      assertNotNull(methodArray1);
      assertSame(class3, class0);
      assertSame(class3, class2);
      assertNotSame(methodArray1, methodArray0);
      
      Class<Object> class4 = Object.class;
      String string0 = null;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class4, (String) null, (Object[]) methodArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, true, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Class<Annotation> class1 = Annotation.class;
      classArray0[0] = class1;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "", classArray0);
      assertEquals(1, classArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, false, true);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      Class<Object> class1 = Object.class;
      classArray0[3] = class1;
      classArray0[4] = class0;
      classArray0[5] = class0;
      classArray0[6] = class0;
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingAccessibleMethod(class0, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "Z";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Z";
      objectArray0[1] = (Object) "Z";
      objectArray0[2] = (Object) "Z";
      objectArray0[3] = (Object) "Z";
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      try { 
        MethodUtils.invokeMethod((Object) "Z", "Z", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: Z() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Object> class2 = Object.class;
      String string0 = null;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(class2, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "", classArray0);
      assertEquals(3, classArray0.length);
      assertNull(method0);
      
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, false, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "[bD";
      Object[] objectArray0 = new Object[1];
      String string1 = "Array element ";
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      Class<Object> class1 = Object.class;
      classArray0[4] = class1;
      classArray0[5] = class0;
      try { 
        MethodUtils.invokeExactMethod((Object) "[bD", "Array element ", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: Array element () on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "INCLUDE", classArray0);
      assertEquals(2, classArray0.length);
      assertNull(method0);
      
      Method method1 = MethodUtils.getAccessibleMethod((Method) null);
      assertNull(method1);
      
      Class<Method>[] classArray1 = (Class<Method>[]) Array.newInstance(Class.class, 3);
      Class<Method> class1 = Method.class;
      classArray1[0] = class1;
      Class<Method> class2 = Method.class;
      classArray1[1] = class2;
      Class<Method> class3 = Method.class;
      classArray1[2] = class3;
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, "INCLUDE", (Object[]) classArray0, (Class<?>[]) classArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<Object> class2 = Object.class;
      String string0 = "j}Y:ZGj";
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class2, "j}Y:ZGj", classArray0);
      assertEquals(0, classArray0.length);
      assertNull(method0);
      
      Class<Annotation>[] classArray1 = (Class<Annotation>[]) Array.newInstance(Class.class, 4);
      classArray1[0] = class1;
      classArray1[1] = class1;
      classArray1[2] = class1;
      classArray1[3] = class1;
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, true, "j}Y:ZGj", (Object[]) methodArray0, (Class<?>[]) classArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = "py6(h/y";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class1;
      try { 
        MethodUtils.invokeExactMethod((Object) class1, "py6(h/y", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: py6(h/y() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "boolean";
      try { 
        MethodUtils.invokeExactMethod((Object) "boolean", "$8=g Q~c0|kg{K");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: $8=g Q~c0|kg{K() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      Class<String> class2 = String.class;
      classArray0[1] = class2;
      Class<String> class3 = String.class;
      classArray0[2] = class3;
      Class<String> class4 = String.class;
      classArray0[3] = class4;
      Class<String> class5 = String.class;
      classArray0[4] = class5;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "", classArray0);
      assertEquals(5, classArray0.length);
      assertNull(method0);
      
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "", (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      String string0 = null;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[1] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[2] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[3] = class4;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod(class0, (String) null, objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1, false, true);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      MethodUtils methodUtils0 = new MethodUtils();
      assertNotNull(methodUtils0);
      
      Class<Object> class2 = Object.class;
      Class<Annotation> class3 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class2, class3);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      assertSame(class3, class1);
      
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 9);
      Class<Method> class4 = Method.class;
      classArray0[0] = class4;
      Class<Method> class5 = Method.class;
      classArray0[1] = class5;
      Class<Method> class6 = Method.class;
      classArray0[2] = class6;
      Class<Method> class7 = Method.class;
      classArray0[3] = class7;
      Class<Method> class8 = Method.class;
      classArray0[4] = class8;
      Class<Method> class9 = Method.class;
      classArray0[5] = class9;
      Class<Method> class10 = Method.class;
      classArray0[6] = class10;
      Class<Method> class11 = Method.class;
      classArray0[7] = class11;
      Class<Method> class12 = Method.class;
      classArray0[8] = class12;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class3, (String) null, (Object[]) methodArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class1, "Pg, _Q^tGiTw", (Object[]) methodArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: Pg, _Q^tGiTw() on class: java.lang.annotation.Annotation
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<Object> class2 = Object.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class3 = Integer.class;
      classArray0[0] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[1] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[2] = class5;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class2, "", classArray0);
      assertEquals(3, classArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1, true, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class class2 = (Class)MethodUtils.invokeMethod((Object) class0, true, "getClass");
      assertEquals("class java.lang.Class", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertNotNull(class2);
      
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 7);
      Class<Method> class3 = Method.class;
      classArray0[0] = class3;
      Class<Method> class4 = Method.class;
      classArray0[1] = class4;
      Class<Method> class5 = Method.class;
      classArray0[2] = class5;
      Class<Method> class6 = Method.class;
      classArray0[3] = class6;
      Class<Method> class7 = Method.class;
      classArray0[4] = class7;
      Class<Method> class8 = Method.class;
      classArray0[5] = class8;
      Class<Method> class9 = Method.class;
      classArray0[6] = class9;
      Method method0 = MethodUtils.getMatchingMethod(class1, "getClass", classArray0);
      assertEquals(7, classArray0.length);
      assertNull(method0);
      
      try { 
        MethodUtils.invokeMethod((Object) class6, ")<mD7!|#[", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: )<mD7!|#[() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 8);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      Class<Object> class4 = Object.class;
      classArray0[3] = class4;
      Class<Object> class5 = Object.class;
      classArray0[4] = class5;
      Class<Object> class6 = Object.class;
      classArray0[5] = class6;
      Class<Object> class7 = Object.class;
      classArray0[6] = class7;
      Class<Object> class8 = Object.class;
      classArray0[7] = class8;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "<)7J{Y", classArray0);
      assertEquals(8, classArray0.length);
      assertNull(method0);
      
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, false, "The method must not be null", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      Class<String> class2 = String.class;
      classArray0[1] = class2;
      Class<String> class3 = String.class;
      classArray0[2] = class3;
      Class<String> class4 = String.class;
      classArray0[3] = class4;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "long", classArray0);
      assertEquals(4, classArray0.length);
      assertNull(method0);
      
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.EXCLUDE;
      // Undeclared exception!
      try { 
        MethodUtils.getOverrideHierarchy((Method) null, classUtils_Interfaces0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      // Undeclared exception!
      try { 
        MethodUtils.getOverrideHierarchy((Method) null, classUtils_Interfaces0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, false, false);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      Class<Object> class2 = Object.class;
      classArray0[0] = class2;
      Class<Object> class3 = Object.class;
      classArray0[1] = class3;
      Class<Object> class4 = Object.class;
      classArray0[2] = class4;
      Class<Object> class5 = Object.class;
      classArray0[3] = class5;
      Class<Object> class6 = Object.class;
      classArray0[4] = class6;
      Class<Object> class7 = Object.class;
      classArray0[5] = class7;
      Class<Object> class8 = Object.class;
      classArray0[6] = class8;
      Class<Object> class9 = Object.class;
      classArray0[7] = class9;
      Class<Object> class10 = Object.class;
      classArray0[8] = class10;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "ks-o~%Q!8F@", classArray0);
      assertEquals(9, classArray0.length);
      assertNull(method0);
      assertSame(class0, class1);
      
      Method method1 = MethodUtils.getAccessibleMethod((Method) null);
      assertNull(method1);
      
      Class<Annotation> class11 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getAnnotation((Method) null, class11, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = null;
      String string0 = "oGg>h4hfOF_ZwM";
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "oGg>h4hfOF_ZwM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 2);
      Class<Method> class1 = Method.class;
      classArray0[0] = class1;
      Class<Method> class2 = Method.class;
      classArray0[1] = class2;
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(class0, "", classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      String string0 = "9Rb|nl}Yp#<LF#w";
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "9Rb|nl}Yp#<LF#w", classArray0);
      assertEquals(0, classArray0.length);
      assertNull(method0);
      
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on class: java.lang.annotation.Annotation
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Class<Annotation> class1 = Annotation.class;
      classArray0[0] = class1;
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "", (Object[]) null, classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      Class<String> class2 = String.class;
      classArray0[1] = class2;
      Class<String> class3 = String.class;
      classArray0[2] = class3;
      Class<String> class4 = String.class;
      classArray0[3] = class4;
      Method method0 = MethodUtils.getMatchingMethod(class0, "]A q-v(Tu=FR')Mp=a%", classArray0);
      assertEquals(4, classArray0.length);
      assertNull(method0);
      
      Class<Annotation> class5 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getAnnotation((Method) null, class5, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingMethod(class0, "getDeclaredAnnotationsByType", classArray0);
      assertEquals(0, classArray0.length);
      assertNull(method0);
      
      Method method1 = MethodUtils.getAccessibleMethod((Method) null);
      assertNull(method1);
      
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "getDeclaredAnnotationsByType", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "";
      try { 
        MethodUtils.invokeExactMethod((Object) "", "");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      Method method0 = MethodUtils.getMatchingMethod(class0, "+r0", classArray0);
      assertEquals(4, classArray0.length);
      assertNull(method0);
      
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, "+r0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      Method method0 = MethodUtils.getMatchingMethod(class0, "BuC6e>V%eFv0/", classArray0);
      assertEquals(4, classArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String string0 = null;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      // Undeclared exception!
      try { 
        MethodUtils.getAccessibleMethod(class0, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "wO?I5b>!,$MpQ>J";
      try { 
        MethodUtils.invokeMethod(object0, "wO?I5b>!,$MpQ>J");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: wO?I5b>!,$MpQ>J() on object: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      assertNotNull(methodUtils0);
      
      Class<Integer> class0 = Integer.class;
      String string0 = "F";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "F";
      objectArray0[1] = (Object) "F";
      try { 
        MethodUtils.invokeMethod(objectArray0[0], true, "F");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such method: F() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "'S*\\w*z*A/QZGaHK!Hr";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "(d4IBLF v/yg%IF6!Y";
      objectArray0[1] = (Object) "(d4IBLF v/yg%IF6!Y";
      objectArray0[2] = (Object) "'S*w*z*A/QZGaHK!Hr";
      objectArray0[3] = (Object) "(d4IBLF v/yg%IF6!Y";
      objectArray0[4] = (Object) "'S*w*z*A/QZGaHK!Hr";
      objectArray0[5] = (Object) "'S*w*z*A/QZGaHK!Hr";
      objectArray0[6] = (Object) "(d4IBLF v/yg%IF6!Y";
      objectArray0[7] = (Object) "'S*w*z*A/QZGaHK!Hr";
      try { 
        MethodUtils.invokeMethod((Object) "(d4IBLF v/yg%IF6!Y", false, "'S*w*z*A/QZGaHK!Hr", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: 'S*w*z*A/QZGaHK!Hr() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = null;
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1, false, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = "className must not be null.";
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 7);
      classArray0[0] = class1;
      classArray0[1] = class1;
      classArray0[2] = class1;
      classArray0[3] = class1;
      classArray0[4] = class1;
      classArray0[5] = class1;
      classArray0[6] = class1;
      try { 
        MethodUtils.invokeStaticMethod(class0, "className must not be null.", (Object[]) null, classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: className must not be null.() on class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs((Object[]) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      assertNotNull(methodUtils0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) methodUtils0;
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      assertNotNull(methodUtils0);
      
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) methodUtils0;
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 3);
      Class<Method> class1 = Method.class;
      classArray0[0] = class1;
      Class<Method> class2 = Method.class;
      classArray0[1] = class2;
      Class<Method> class3 = Method.class;
      classArray0[2] = class3;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "~{", classArray0);
      assertEquals(3, classArray0.length);
      assertNull(method0);
      
      Class<Annotation> class4 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class3, class4, false, false);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      assertSame(class3, class1);
      assertSame(class3, class2);
      
      try { 
        MethodUtils.invokeMethod((Object) class1, "getTypeParameters", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: getTypeParameters() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = "ap>o-4\\pJikiOL";
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<String> class1 = String.class;
      classArray0[2] = class1;
      classArray0[3] = class0;
      Class<String> class2 = String.class;
      classArray0[4] = class2;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "ap>o-4pJikiOL", classArray0);
      assertEquals(5, classArray0.length);
      assertNull(method0);
      assertSame(class0, class1);
      assertSame(class0, class2);
      
      Method method1 = MethodUtils.getAccessibleMethod((Method) null);
      assertNull(method1);
      
      Class<Annotation> class3 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getAnnotation((Method) null, class3, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class2 = Integer.class;
      classArray0[0] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[1] = class3;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "NoLs", (Object[]) methodArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      String string0 = "getParameters";
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getParameters", classArray0);
      assertEquals(0, classArray0.length);
      assertNull(method0);
      
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      // Undeclared exception!
      try { 
        MethodUtils.getOverrideHierarchy((Method) null, classUtils_Interfaces0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = "#_*";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) "#_*";
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) "#_*";
      objectArray0[4] = (Object) "#_*";
      objectArray0[5] = (Object) class0;
      String string1 = "sum";
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "sum", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: sum() on class: java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "Null class not allowed.", classArray0);
      assertEquals(1, classArray0.length);
      assertNull(method0);
      
      Method method1 = MethodUtils.getAccessibleMethod((Method) null);
      assertNull(method1);
      
      Class<Object> class1 = Object.class;
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class1, ".,", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: .,() on class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      Class<String> class2 = String.class;
      classArray0[1] = class2;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "The method must not be null", classArray0);
      assertEquals(2, classArray0.length);
      assertNull(method0);
      
      Class<Annotation> class3 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class3);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(classArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "The method must not be null", classArray0);
      assertEquals(2, classArray0.length);
      assertNull(method0);
      
      Class<Annotation> class2 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class2);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(classArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      Class<Object> class0 = Object.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      Class<Integer> class2 = Integer.class;
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) class1;
      objectArray1[1] = (Object) class2;
      objectArray1[2] = (Object) "";
      objectArray1[3] = (Object) "";
      objectArray1[4] = (Object) class2;
      objectArray1[5] = (Object) class1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[6] = object0;
      try { 
        MethodUtils.invokeExactStaticMethod(class2, "", objectArray1, classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on class: java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = "py6(h/y";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class1;
      try { 
        MethodUtils.invokeExactMethod((Object) list0, "py6(h/y");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: py6(h/y() on object: java.util.ArrayList
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "org.junitpioneer.jupiter.DefaultLocaleExtension";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "org.junitpioneer.jupiter.DefaultLocaleExtension";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) "org.junitpioneer.jupiter.DefaultLocaleExtension";
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) class0;
      objectArray0[7] = (Object) class0;
      objectArray0[8] = (Object) class0;
      try { 
        MethodUtils.invokeStaticMethod(class0, "org.junitpioneer.jupiter.DefaultLocaleExtension", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: org.junitpioneer.jupiter.DefaultLocaleExtension() on class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = "";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) "";
      boolean boolean0 = false;
      String string1 = "() on object: ";
      try { 
        MethodUtils.invokeMethod(objectArray0[1], false, "() on object: ", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on object: () on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<Object> class1 = Object.class;
      Method method0 = MethodUtils.getMatchingMethod(class1, "Expected type: %s, actual: %s", classArray0);
      assertEquals(2, classArray0.length);
      assertNull(method0);
      assertSame(class1, class0);
      
      try { 
        MethodUtils.invokeMethod(object0, true, "() on class: ", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such method: () on class: () on object: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      boolean boolean0 = true;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      Class<Annotation> class2 = Annotation.class;
      MethodUtils.getMethodsListWithAnnotation(class2, class1);
      String string0 = "ppY0";
      try { 
        MethodUtils.invokeExactMethod((Object) class2, "ppY0", (Object[]) methodArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: ppY0() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
}
