/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:15:47 GMT 2019
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.tuple.ImmutableTriple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImmutableTriple_ESTest extends ImmutableTriple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ImmutableTriple<Object, ImmutableTriple<Object, Object, Object>, String> immutableTriple0 = ImmutableTriple.nullTriple();
      ImmutableTriple<Object, Object, Object> immutableTriple1 = ImmutableTriple.of((Object) null, (Object) immutableTriple0, (Object) immutableTriple0);
      Object object0 = immutableTriple1.getRight();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ImmutableTriple<Integer, Object, String> immutableTriple0 = ImmutableTriple.nullTriple();
      ImmutableTriple<String, ImmutableTriple<Integer, Object, String>, Object> immutableTriple1 = ImmutableTriple.of("<}xDSL%_-2Vv2JBohL", immutableTriple0, (Object) "<}xDSL%_-2Vv2JBohL");
      Object object0 = immutableTriple1.getRight();
      assertEquals("<}xDSL%_-2Vv2JBohL", object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutableTriple<Integer, String, Integer> immutableTriple0 = new ImmutableTriple<Integer, String, Integer>(integer0, "", integer0);
      ImmutableTriple<Object, String, String> immutableTriple1 = ImmutableTriple.nullTriple();
      ImmutableTriple<ImmutableTriple<Integer, String, Integer>, Object, ImmutableTriple<Object, String, String>> immutableTriple2 = ImmutableTriple.of(immutableTriple0, (Object) "", immutableTriple1);
      Object object0 = immutableTriple2.getMiddle();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ImmutableTriple<Object, ImmutableTriple<String, String, String>, Object> immutableTriple0 = ImmutableTriple.nullTriple();
      Object object0 = immutableTriple0.getLeft();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ImmutableTriple<Object, Object, Object> immutableTriple0 = ImmutableTriple.nullTriple();
      ImmutableTriple<ImmutableTriple<Object, Object, Object>, String, String> immutableTriple1 = new ImmutableTriple<ImmutableTriple<Object, Object, Object>, String, String>(immutableTriple0, "GWcGj?_33H", "fP+DIp#,e7_65hxKl");
      ImmutableTriple<Object, Object, Object> immutableTriple2 = immutableTriple1.getLeft();
      assertSame(immutableTriple2, immutableTriple0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ImmutableTriple<Object, ImmutableTriple<Object, Object, Object>, String> immutableTriple0 = ImmutableTriple.nullTriple();
      String string0 = immutableTriple0.getRight();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ImmutableTriple<Object, Object, ImmutableTriple<Integer, Integer, String>> immutableTriple0 = ImmutableTriple.nullTriple();
      Object object0 = immutableTriple0.getMiddle();
      assertNull(object0);
  }
}
