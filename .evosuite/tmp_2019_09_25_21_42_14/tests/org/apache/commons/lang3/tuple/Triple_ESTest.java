/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 01:58:52 GMT 2019
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.tuple.ImmutableTriple;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.apache.commons.lang3.tuple.Triple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Triple_ESTest extends Triple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImmutableTriple<Object, String, String> immutableTriple0 = new ImmutableTriple<Object, String, String>("c>9=l HV!*Ox<'", "c>9=l HV!*Ox<'", "");
      Integer integer0 = new Integer(0);
      MutableTriple<String, Object, Object> mutableTriple0 = MutableTriple.of("KUgn", (Object) integer0, (Object) immutableTriple0);
      Triple<Object, Triple<String, Object, Object>, Integer> triple0 = Triple.of((Object) "c>9=l HV!*Ox<'", (Triple<String, Object, Object>) mutableTriple0, integer0);
      triple0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImmutableTriple<Object, String, Object> immutableTriple0 = ImmutableTriple.nullTriple();
      ImmutableTriple<Object, String, Object> immutableTriple1 = ImmutableTriple.of((Object) "}", "}", (Object) immutableTriple0);
      Object object0 = immutableTriple1.getRight();
      boolean boolean0 = immutableTriple0.equals(object0);
      assertTrue(boolean0);
      assertFalse(immutableTriple1.equals((Object)immutableTriple0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImmutableTriple<Integer, Triple<Integer, Integer, String>, MutableTriple<Integer, Object, Object>> immutableTriple0 = ImmutableTriple.nullTriple();
      String string0 = immutableTriple0.toString(")");
      assertEquals(")", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableTriple<Object, String, MutableTriple<String, Integer, Object>> mutableTriple0 = new MutableTriple<Object, String, MutableTriple<String, Integer, Object>>();
      String string0 = mutableTriple0.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImmutableTriple<ImmutableTriple<String, String, String>, Object, Object> immutableTriple0 = ImmutableTriple.nullTriple();
      Object object0 = immutableTriple0.getRight();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImmutableTriple<Integer, Object, String> immutableTriple0 = ImmutableTriple.nullTriple();
      MutableTriple<Object, Object, Object> mutableTriple0 = MutableTriple.of((Object) immutableTriple0, (Object) null, (Object) immutableTriple0);
      Triple<Object, ImmutableTriple<Integer, Object, String>, MutableTriple<Object, Object, Object>> triple0 = Triple.of((Object) "(null,null,null)", immutableTriple0, mutableTriple0);
      MutableTriple<Object, Object, Object> mutableTriple1 = triple0.getRight();
      assertSame(mutableTriple1, mutableTriple0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImmutableTriple<MutableTriple<Integer, String, Object>, Integer, Integer> immutableTriple0 = ImmutableTriple.nullTriple();
      Integer integer0 = immutableTriple0.getMiddle();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImmutableTriple<Object, String, String> immutableTriple0 = ImmutableTriple.of((Object) null, "euNJJyDTT@J?2", "euNJJyDTT@J?2");
      Object object0 = immutableTriple0.getMiddle();
      assertEquals("euNJJyDTT@J?2", object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableTriple<Object, Integer, Object> mutableTriple0 = new MutableTriple<Object, Integer, Object>();
      Object object0 = mutableTriple0.getLeft();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableTriple<Integer, Integer, Integer> mutableTriple0 = new MutableTriple<Integer, Integer, Integer>();
      ImmutableTriple<Object, String, String> immutableTriple0 = new ImmutableTriple<Object, String, String>(mutableTriple0, "", "");
      MutableTriple<String, Object, Object> mutableTriple1 = MutableTriple.of("2e#Q,;Hs}2W}H", (Object) "2e#Q,;Hs}2W}H", (Object) "");
      Triple<Triple<Integer, Integer, Integer>, ImmutableTriple<Object, String, String>, MutableTriple<String, Object, Object>> triple0 = Triple.of((Triple<Integer, Integer, Integer>) mutableTriple0, immutableTriple0, mutableTriple1);
      Triple<Integer, Integer, Integer> triple1 = triple0.getLeft();
      assertNotNull(triple1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImmutableTriple<MutableTriple<String, Object, Object>, MutableTriple<String, Object, String>, String> immutableTriple0 = ImmutableTriple.nullTriple();
      int int0 = immutableTriple0.compareTo((Triple<MutableTriple<String, Object, Object>, MutableTriple<String, Object, String>, String>) immutableTriple0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImmutableTriple<String, Integer, Object> immutableTriple0 = ImmutableTriple.nullTriple();
      ImmutableTriple<Object, String, ImmutableTriple<String, Object, Object>> immutableTriple1 = ImmutableTriple.of((Object) immutableTriple0, (String) null, (ImmutableTriple<String, Object, Object>) null);
      MutableTriple<Object, String, ImmutableTriple<String, Object, Object>> mutableTriple0 = new MutableTriple<Object, String, ImmutableTriple<String, Object, Object>>();
      int int0 = immutableTriple1.compareTo((Triple<Object, String, ImmutableTriple<String, Object, Object>>) mutableTriple0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImmutableTriple<MutableTriple<String, Integer, Object>, String, Integer> immutableTriple0 = ImmutableTriple.nullTriple();
      Integer integer0 = new Integer(0);
      MutableTriple<String, Integer, Object> mutableTriple0 = new MutableTriple<String, Integer, Object>("org.apache.commons.lang3.tuple.ImmutableTriple", integer0, "/R");
      MutableTriple<MutableTriple<String, Integer, Object>, String, Integer> mutableTriple1 = MutableTriple.of(mutableTriple0, "/R", integer0);
      int int0 = immutableTriple0.compareTo((Triple<MutableTriple<String, Integer, Object>, String, Integer>) mutableTriple1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(528);
      ImmutableTriple<Integer, Integer, String> immutableTriple0 = new ImmutableTriple<Integer, Integer, String>(integer0, integer0, "");
      // Undeclared exception!
      try { 
        immutableTriple0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImmutableTriple<String, Object, String> immutableTriple0 = ImmutableTriple.of("", (Object) "", "");
      Integer integer0 = new Integer(0);
      ImmutableTriple<Object, Integer, String> immutableTriple1 = ImmutableTriple.nullTriple();
      MutableTriple<ImmutableTriple<String, Object, String>, Object, ImmutableTriple<Object, Integer, String>> mutableTriple0 = MutableTriple.of(immutableTriple0, (Object) integer0, immutableTriple1);
      MutableTriple<ImmutableTriple<String, Object, String>, Object, ImmutableTriple<Object, Integer, String>> mutableTriple1 = MutableTriple.of(immutableTriple0, (Object) mutableTriple0, immutableTriple1);
      // Undeclared exception!
      try { 
        mutableTriple0.compareTo((Triple<ImmutableTriple<String, Object, String>, Object, ImmutableTriple<Object, Integer, String>>) mutableTriple1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.tuple.MutableTriple cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImmutableTriple<Object, Object, Object> immutableTriple0 = ImmutableTriple.nullTriple();
      Integer integer0 = new Integer(4072);
      boolean boolean0 = immutableTriple0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableTriple<MutableTriple<String, String, String>, String, Triple<String, String, String>> mutableTriple0 = new MutableTriple<MutableTriple<String, String, String>, String, Triple<String, String, String>>();
      mutableTriple0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImmutableTriple<String, Object, Integer> immutableTriple0 = ImmutableTriple.nullTriple();
      Integer integer0 = new Integer(855);
      ImmutableTriple<String, ImmutableTriple<String, Object, Integer>, Integer> immutableTriple1 = ImmutableTriple.of("bhUK1|", immutableTriple0, integer0);
      immutableTriple1.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImmutableTriple<MutableTriple<String, Object, Object>, MutableTriple<String, Object, String>, String> immutableTriple0 = ImmutableTriple.nullTriple();
      Integer integer0 = new Integer(733);
      MutableTriple<Integer, Object, String> mutableTriple0 = new MutableTriple<Integer, Object, String>(integer0, (Object) null, "org.apache.commons.lang3.tuple.ImmutableTriple");
      boolean boolean0 = immutableTriple0.equals(mutableTriple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImmutableTriple<String, Object, Integer> immutableTriple0 = ImmutableTriple.nullTriple();
      Integer integer0 = new Integer(855);
      MutableTriple<Object, Object, Object> mutableTriple0 = new MutableTriple<Object, Object, Object>();
      ImmutableTriple<Object, Integer, MutableTriple<Object, Object, Object>> immutableTriple1 = new ImmutableTriple<Object, Integer, MutableTriple<Object, Object, Object>>(immutableTriple0, integer0, mutableTriple0);
      ImmutableTriple<Triple<String, Integer, String>, Integer, Integer> immutableTriple2 = ImmutableTriple.nullTriple();
      MutableTriple<Object, Object, String> mutableTriple1 = MutableTriple.of((Object) immutableTriple2, (Object) immutableTriple0, ";Nusu@Cqp~jg.wa");
      boolean boolean0 = mutableTriple1.equals(immutableTriple1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableTriple<MutableTriple<String, String, String>, String, Triple<String, String, String>> mutableTriple0 = new MutableTriple<MutableTriple<String, String, String>, String, Triple<String, String, String>>();
      ImmutableTriple<Triple<MutableTriple<String, String, String>, String, Triple<String, String, String>>, String, String> immutableTriple0 = ImmutableTriple.nullTriple();
      boolean boolean0 = immutableTriple0.equals(mutableTriple0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableTriple<MutableTriple<String, String, String>, String, Triple<String, String, String>> mutableTriple0 = new MutableTriple<MutableTriple<String, String, String>, String, Triple<String, String, String>>();
      MutableTriple<String, String, String> mutableTriple1 = new MutableTriple<String, String, String>();
      mutableTriple0.setRight(mutableTriple1);
      ImmutableTriple<Triple<MutableTriple<String, String, String>, String, Triple<String, String, String>>, String, String> immutableTriple0 = ImmutableTriple.nullTriple();
      boolean boolean0 = immutableTriple0.equals(mutableTriple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableTriple<Object, Integer, Object> mutableTriple0 = new MutableTriple<Object, Integer, Object>();
      Integer integer0 = new Integer(1);
      Triple<MutableTriple<Object, Integer, Object>, String, Integer> triple0 = Triple.of(mutableTriple0, "|7p;I1olh_T&0y=;Nw", integer0);
      // Undeclared exception!
      try { 
        triple0.toString("/>O%V7V9<[i");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'V'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImmutableTriple<Triple<MutableTriple<String, String, String>, String, Triple<String, String, String>>, String, String> immutableTriple0 = ImmutableTriple.nullTriple();
      String string0 = immutableTriple0.toString();
      assertEquals("(null,null,null)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ImmutableTriple<Object, String, Integer> immutableTriple0 = ImmutableTriple.of((Object) null, (String) null, integer0);
      ImmutableTriple<ImmutableTriple<Object, String, Integer>, String, String> immutableTriple1 = ImmutableTriple.of(immutableTriple0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        immutableTriple1.compareTo((Triple<ImmutableTriple<Object, String, Integer>, String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.tuple.Triple", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Triple<String, Integer, ImmutableTriple<Object, ImmutableTriple, Object>>[] tripleArray0 = Triple.emptyArray();
      assertEquals(0, tripleArray0.length);
  }
}
