/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:12:46 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.ServiceLoader;
import org.apache.commons.lang3.ClassUtils;
import org.apache.commons.lang3.EnumUtils;
import org.apache.commons.lang3.JavaVersion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnumUtils_ESTest extends EnumUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      ClassUtils.Interfaces[] classUtils_InterfacesArray0 = new ClassUtils.Interfaces[7];
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      classUtils_InterfacesArray0[0] = classUtils_Interfaces0;
      classUtils_InterfacesArray0[1] = classUtils_InterfacesArray0[0];
      ClassUtils.Interfaces classUtils_Interfaces1 = ClassUtils.Interfaces.EXCLUDE;
      ClassUtils.Interfaces[] classUtils_InterfacesArray1 = new ClassUtils.Interfaces[9];
      classUtils_InterfacesArray1[0] = classUtils_InterfacesArray0[1];
      classUtils_InterfacesArray1[1] = classUtils_InterfacesArray0[1];
      classUtils_InterfacesArray1[2] = classUtils_InterfacesArray1[1];
      classUtils_InterfacesArray1[3] = classUtils_Interfaces1;
      classUtils_InterfacesArray1[4] = classUtils_Interfaces0;
      classUtils_InterfacesArray1[5] = classUtils_Interfaces1;
      classUtils_InterfacesArray1[6] = classUtils_Interfaces1;
      classUtils_InterfacesArray1[7] = classUtils_Interfaces0;
      classUtils_InterfacesArray1[8] = classUtils_InterfacesArray0[0];
      long[] longArray0 = EnumUtils.generateBitVectors(class0, classUtils_InterfacesArray1);
      assertArrayEquals(new long[] {3L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      EnumUtils.getEnum(class0, "p4n d^2}MFZ");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      JavaVersion[] javaVersionArray0 = new JavaVersion[0];
      long long0 = EnumUtils.generateBitVector(class0, javaVersionArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      // Undeclared exception!
      try { 
        EnumUtils.processBitVectors(class0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumUtils.processBitVector((Class<ClassUtils.Interfaces>) null, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // EnumClass must be defined.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumUtils.isValidEnumIgnoreCase((Class<ClassUtils.Interfaces>) null, "float");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.EnumUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumUtils.getEnumMap((Class<ClassUtils.Interfaces>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.EnumUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumUtils.getEnumList((Class<JavaVersion>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.EnumUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVectors(class0, (JavaVersion[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      ClassUtils.Interfaces[] classUtils_InterfacesArray0 = new ClassUtils.Interfaces[7];
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVectors(class0, classUtils_InterfacesArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVectors(class0, (Iterable<? extends ClassUtils.Interfaces>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVector(class0, (JavaVersion[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVector(class0, (Iterable<? extends ClassUtils.Interfaces>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      long[] longArray0 = new long[1];
      longArray0[0] = 3182L;
      EnumSet<JavaVersion> enumSet0 = EnumUtils.processBitVectors(class0, longArray0);
      assertEquals(7, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      ArrayDeque<JavaVersion> arrayDeque0 = new ArrayDeque<JavaVersion>();
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_2;
      arrayDeque0.add(javaVersion0);
      long long0 = EnumUtils.generateBitVector(class0, (Iterable<? extends JavaVersion>) arrayDeque0);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      JavaVersion javaVersion0 = EnumUtils.getEnumIgnoreCase(class0, "JAVA_9");
      assertEquals(JavaVersion.JAVA_9, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      EnumUtils.getEnumIgnoreCase(class0, (String) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      EnumUtils.getEnumIgnoreCase(class0, "Cannot store %s %s values in %s bits");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      EnumUtils.getEnum(class0, (String) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      JavaVersion javaVersion0 = EnumUtils.getEnum(class0, "JAVA_1_2");
      assertEquals(JavaVersion.JAVA_1_2, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      EnumSet<JavaVersion> enumSet0 = EnumUtils.processBitVector(class0, (-757L));
      assertEquals(10, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      long[] longArray0 = new long[0];
      EnumSet<ClassUtils.Interfaces> enumSet0 = EnumUtils.processBitVectors(class0, longArray0);
      assertEquals(0, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      ArrayList<ClassUtils.Interfaces> arrayList0 = new ArrayList<ClassUtils.Interfaces>();
      arrayList0.add((ClassUtils.Interfaces) null);
      HashSet<ClassUtils.Interfaces> hashSet0 = new HashSet<ClassUtils.Interfaces>(arrayList0);
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVectors(class0, (Iterable<? extends ClassUtils.Interfaces>) hashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null elements not permitted
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_6;
      EnumSet<JavaVersion> enumSet0 = EnumSet.of(javaVersion0, javaVersion0, javaVersion0, javaVersion0);
      long[] longArray0 = EnumUtils.generateBitVectors(class0, (Iterable<? extends JavaVersion>) enumSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {64L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      ClassUtils.Interfaces[] classUtils_InterfacesArray0 = new ClassUtils.Interfaces[7];
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      classUtils_InterfacesArray0[0] = classUtils_Interfaces0;
      classUtils_InterfacesArray0[1] = classUtils_Interfaces0;
      classUtils_InterfacesArray0[2] = classUtils_Interfaces0;
      classUtils_InterfacesArray0[3] = classUtils_InterfacesArray0[1];
      classUtils_InterfacesArray0[4] = classUtils_Interfaces0;
      classUtils_InterfacesArray0[5] = classUtils_InterfacesArray0[4];
      classUtils_InterfacesArray0[6] = classUtils_InterfacesArray0[0];
      long long0 = EnumUtils.generateBitVector(class0, classUtils_InterfacesArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      LinkedList<ClassUtils.Interfaces> linkedList0 = new LinkedList<ClassUtils.Interfaces>();
      linkedList0.add((ClassUtils.Interfaces) null);
      HashSet<ClassUtils.Interfaces> hashSet0 = new HashSet<ClassUtils.Interfaces>(linkedList0);
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVector(class0, (Iterable<? extends ClassUtils.Interfaces>) hashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null elements not permitted
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<ClassUtils.Interfaces> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      long long0 = EnumUtils.generateBitVector(class0, (Iterable<? extends ClassUtils.Interfaces>) serviceLoader0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      boolean boolean0 = EnumUtils.isValidEnumIgnoreCase(class0, "'(SHd_v 1v[jIR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      boolean boolean0 = EnumUtils.isValidEnumIgnoreCase(class0, "JAVA_1_4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      boolean boolean0 = EnumUtils.isValidEnum(class0, "INCLUDE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      boolean boolean0 = EnumUtils.isValidEnum(class0, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      Map<String, JavaVersion> map0 = EnumUtils.getEnumMap(class0);
      assertEquals(16, map0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      List<JavaVersion> list0 = EnumUtils.getEnumList(class0);
      assertEquals(16, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<ClassUtils.Interfaces> class0 = ClassUtils.Interfaces.class;
      ClassUtils.Interfaces[] classUtils_InterfacesArray0 = new ClassUtils.Interfaces[7];
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVector(class0, classUtils_InterfacesArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EnumUtils enumUtils0 = new EnumUtils();
  }
}
