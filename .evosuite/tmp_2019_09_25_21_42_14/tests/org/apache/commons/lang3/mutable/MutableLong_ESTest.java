/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 01:53:26 GMT 2019
 */

package org.apache.commons.lang3.mutable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.mutable.MutableLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableLong_ESTest extends MutableLong_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong((-1837L));
      mutableLong0.hashCode();
      assertEquals((byte) (-45), mutableLong0.byteValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(1L);
      MutableLong mutableLong1 = new MutableLong(mutableLong0);
      mutableLong0.addAndGet((-3238L));
      boolean boolean0 = mutableLong0.equals(mutableLong1);
      assertEquals((-3237L), (long)mutableLong0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong((-1269L));
      mutableLong0.getAndIncrement();
      long long0 = mutableLong0.getAndAdd((-1269L));
      assertEquals((-2537L), (long)mutableLong0.toLong());
      assertEquals((-1268L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      Float float0 = new Float((-2464.9574152));
      mutableLong0.subtract((Number) float0);
      assertEquals(2464.0, mutableLong0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      Double double0 = new Double((-1843.23648263));
      mutableLong0.add((Number) double0);
      assertEquals((-1843), mutableLong0.intValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      Long long0 = new Long(0L);
      mutableLong0.setValue((Number) long0);
      assertEquals(0L, (long)mutableLong0.getValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      mutableLong0.incrementAndGet();
      mutableLong0.toLong();
      assertEquals((byte)1, mutableLong0.byteValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      mutableLong0.decrement();
      mutableLong0.toLong();
      assertEquals((-1L), (long)mutableLong0.toLong());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      Double double0 = new Double((-1843.23648263));
      mutableLong0.addAndGet((Number) double0);
      long long0 = mutableLong0.longValue();
      assertEquals("-1843", mutableLong0.toString());
      assertEquals((-1843L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      mutableLong0.incrementAndGet();
      int int0 = mutableLong0.intValue();
      assertEquals((byte)1, mutableLong0.byteValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      mutableLong0.getAndDecrement();
      int int0 = mutableLong0.intValue();
      assertEquals((-1L), (long)mutableLong0.toLong());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double((-2310.3864079));
      MutableLong mutableLong0 = new MutableLong(double0);
      long long0 = mutableLong0.incrementAndGet();
      assertEquals((-2309L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(1L);
      Long long0 = mutableLong0.getValue();
      assertEquals(1L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double((-2310.3864079));
      MutableLong mutableLong0 = new MutableLong(double0);
      Long long0 = mutableLong0.getValue();
      assertEquals((-2310L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Float float0 = new Float(1.0);
      MutableLong mutableLong0 = new MutableLong(float0);
      long long0 = mutableLong0.getAndIncrement();
      assertEquals((byte)2, mutableLong0.byteValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Float float0 = new Float(0.0);
      MutableLong mutableLong0 = new MutableLong(float0);
      mutableLong0.increment();
      long long0 = mutableLong0.getAndDecrement();
      assertEquals(0L, (long)mutableLong0.getValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double((-2310.3864079));
      MutableLong mutableLong0 = new MutableLong(double0);
      long long0 = mutableLong0.getAndDecrement();
      assertEquals((-2311.0F), mutableLong0.floatValue(), 0.01F);
      assertEquals((-2310L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      mutableLong0.add(469L);
      long long0 = mutableLong0.getAndAdd((Number) mutableLong0);
      assertEquals((byte) (-86), mutableLong0.byteValue());
      assertEquals(469L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double((-2310.3864079));
      MutableLong mutableLong0 = new MutableLong(double0);
      long long0 = mutableLong0.getAndAdd((Number) double0);
      assertEquals("-4620", mutableLong0.toString());
      assertEquals((-2310L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Short short0 = new Short((short)470);
      MutableLong mutableLong0 = new MutableLong((Number) short0);
      long long0 = mutableLong0.getAndAdd((long) (short)470);
      assertEquals(940, mutableLong0.intValue());
      assertEquals(470L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(1L);
      float float0 = mutableLong0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Double double0 = new Double((-2310.3864079));
      MutableLong mutableLong0 = new MutableLong(double0);
      float float0 = mutableLong0.floatValue();
      assertEquals((-2310.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      mutableLong0.incrementAndGet();
      double double0 = mutableLong0.doubleValue();
      assertEquals(1, mutableLong0.intValue());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      mutableLong0.incrementAndGet();
      long long0 = mutableLong0.decrementAndGet();
      assertEquals(0L, (long)mutableLong0.getValue());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong((-1269L));
      mutableLong0.subtract((-3950L));
      long long0 = mutableLong0.decrementAndGet();
      assertEquals(2680L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(1L);
      MutableLong mutableLong1 = new MutableLong(mutableLong0);
      mutableLong1.decrement();
      int int0 = mutableLong0.compareTo(mutableLong1);
      assertFalse(mutableLong1.equals((Object)mutableLong0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      Double double0 = new Double((-1843.23648263));
      mutableLong0.addAndGet((Number) double0);
      MutableLong mutableLong1 = new MutableLong();
      int int0 = mutableLong0.compareTo(mutableLong1);
      assertEquals("-1843", mutableLong0.toString());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      Long long0 = new Long(0L);
      long long1 = mutableLong0.addAndGet((Number) long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      MutableLong mutableLong1 = new MutableLong(1436L);
      long long0 = mutableLong0.addAndGet((Number) mutableLong1);
      assertTrue(mutableLong1.equals((Object)mutableLong0));
      assertEquals(1436L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      long long0 = mutableLong0.addAndGet(1L);
      assertEquals(1.0F, mutableLong0.floatValue(), 0.01F);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableLong mutableLong0 = new MutableLong((Number) integer0);
      // Undeclared exception!
      try { 
        mutableLong0.subtract((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(2558L);
      // Undeclared exception!
      try { 
        mutableLong0.compareTo((MutableLong) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      // Undeclared exception!
      try { 
        mutableLong0.add((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableLong mutableLong0 = null;
      try {
        mutableLong0 = new MutableLong("3T2awT6X]]]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3T2awT6X]]]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutableLong mutableLong0 = null;
      try {
        mutableLong0 = new MutableLong((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      long long0 = mutableLong0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      MutableLong mutableLong1 = new MutableLong();
      mutableLong0.getAndIncrement();
      boolean boolean0 = mutableLong0.equals(mutableLong1);
      assertEquals((short)1, mutableLong0.shortValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      boolean boolean0 = mutableLong0.equals(mutableLong0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      Float float0 = new Float((float) 0L);
      boolean boolean0 = mutableLong0.equals(float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      long long0 = mutableLong0.addAndGet(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      // Undeclared exception!
      try { 
        mutableLong0.getAndAdd((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      long long0 = mutableLong0.decrementAndGet();
      assertEquals((-1.0F), mutableLong0.floatValue(), 0.01F);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      mutableLong0.getAndDecrement();
      long long0 = mutableLong0.incrementAndGet();
      assertEquals(0.0, mutableLong0.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      float float0 = mutableLong0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      // Undeclared exception!
      try { 
        mutableLong0.setValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      mutableLong0.setValue(0L);
      assertEquals(0.0, mutableLong0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      int int0 = mutableLong0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      mutableLong0.decrement();
      double double0 = mutableLong0.doubleValue();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      double double0 = mutableLong0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      mutableLong0.incrementAndGet();
      long long0 = mutableLong0.longValue();
      assertEquals((short)1, mutableLong0.shortValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong("0");
      assertEquals(0L, (long)mutableLong0.getValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      String string0 = mutableLong0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      // Undeclared exception!
      try { 
        mutableLong0.addAndGet((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      int int0 = mutableLong0.compareTo(mutableLong0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableLong mutableLong0 = new MutableLong((Number) integer0);
      Long long0 = mutableLong0.getValue();
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      Long long0 = mutableLong0.toLong();
      long long1 = mutableLong0.getAndAdd((Number) long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      long long0 = mutableLong0.getAndAdd(0L);
      assertEquals(0L, long0);
  }
}
