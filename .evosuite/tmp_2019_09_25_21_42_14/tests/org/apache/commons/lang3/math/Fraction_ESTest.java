/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:05:15 GMT 2019
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      int int0 = 4671158;
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1716), 4671158, 4671158);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.TWO_THIRDS.reduce();
      fraction0.ZERO.reduce();
      Object object0 = new Object();
      Fraction fraction2 = fraction0.ONE_FIFTH.add(fraction1);
      fraction0.TWO_FIFTHS.divideBy(fraction1);
      int int0 = 1471;
      int int1 = 1560;
      Fraction fraction3 = Fraction.getFraction(1471, 1471, 1560);
      Fraction fraction4 = fraction0.THREE_QUARTERS.invert();
      fraction4.ONE_HALF.toString();
      fraction0.TWO_THIRDS.multiplyBy(fraction1);
      fraction0.equals(object0);
      Fraction fraction5 = fraction0.negate();
      Fraction.getFraction((double) 1471);
      fraction5.ONE_FIFTH.toString();
      fraction0.toProperString();
      fraction2.ZERO.toString();
      fraction3.TWO_THIRDS.toString();
      fraction0.toString();
      fraction2.getDenominator();
      Fraction fraction6 = fraction3.negate();
      fraction4.add(fraction1);
      // Undeclared exception!
      try { 
        fraction6.multiplyBy(fraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-3252), 3029, 3029);
      Fraction fraction1 = Fraction.getFraction((double) (-3252));
      Fraction fraction2 = fraction1.ZERO.negate();
      Fraction fraction3 = fraction1.abs();
      Fraction fraction4 = Fraction.ONE_FIFTH;
      fraction0.hashCode();
      Fraction.getFraction(3029, 596);
      fraction2.toString();
      fraction2.getProperNumerator();
      // Undeclared exception!
      try { 
        fraction0.multiplyBy(fraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-8.528598925491668));
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      fraction0.hashCode();
      Fraction fraction2 = fraction1.TWO_THIRDS.add(fraction0);
      fraction1.compareTo(fraction0);
      Fraction fraction3 = Fraction.getFraction(1, 1, 1);
      Fraction fraction4 = fraction3.ONE_QUARTER.pow(0);
      fraction4.FOUR_FIFTHS.pow(0);
      Fraction fraction5 = fraction0.subtract(fraction1);
      fraction5.toString();
      Fraction fraction6 = fraction5.reduce();
      Fraction fraction7 = Fraction.getFraction((-8.528598925491668));
      fraction7.THREE_QUARTERS.hashCode();
      fraction6.compareTo(fraction7);
      fraction2.doubleValue();
      fraction6.subtract(fraction3);
      fraction7.floatValue();
      // Undeclared exception!
      try { 
        fraction7.pow((-2173));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      Fraction fraction1 = fraction0.TWO_QUARTERS.negate();
      fraction1.ONE_FIFTH.hashCode();
      fraction0.toProperString();
      fraction0.toProperString();
      fraction1.add(fraction0);
      Fraction.getFraction("0");
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1), (-1686));
      Fraction fraction1 = fraction0.pow((-1));
      Fraction fraction2 = fraction1.ZERO.subtract(fraction0);
      fraction2.THREE_FIFTHS.hashCode();
      fraction1.ONE.compareTo(fraction0);
      fraction1.ZERO.toString();
      fraction0.hashCode();
      fraction1.toProperString();
      Fraction fraction3 = Fraction.TWO_THIRDS;
      fraction1.ONE_THIRD.toString();
      fraction0.invert();
      fraction1.TWO_THIRDS.compareTo(fraction0);
      fraction1.subtract(fraction3);
      fraction0.hashCode();
      Fraction fraction4 = fraction2.ONE.pow((-1));
      // Undeclared exception!
      try { 
        fraction4.ONE_THIRD.pow((-6448));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = (-995.55);
      Fraction fraction0 = Fraction.getFraction((-995.55));
      fraction0.invert();
      int int0 = 0;
      Fraction fraction1 = Fraction.getFraction(0, (-1425));
      fraction1.ONE_HALF.add(fraction0);
      int int1 = 1327;
      Fraction.getFraction((-1004), 1327);
      fraction0.TWO_FIFTHS.negate();
      fraction0.getProperWhole();
      // Undeclared exception!
      try { 
        Fraction.getFraction("*1F!?9%*O(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*1F!?9%*O(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      fraction0.ZERO.hashCode();
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.ZERO.reduce();
      Fraction fraction3 = fraction0.add(fraction1);
      fraction3.ONE_QUARTER.compareTo(fraction2);
      fraction3.intValue();
      Fraction.getFraction("-1");
      // Undeclared exception!
      try { 
        Fraction.getFraction(1, 2358, (-2468));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      fraction0.ZERO.compareTo(fraction1);
      Fraction fraction2 = Fraction.getFraction((double) (-1));
      fraction0.getDenominator();
      fraction0.negate();
      fraction1.equals("");
      fraction0.ONE_THIRD.pow((-1));
      fraction1.invert();
      fraction2.toProperString();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.negate();
      Fraction fraction2 = fraction0.ONE_FIFTH.negate();
      fraction1.THREE_FIFTHS.multiplyBy(fraction0);
      fraction0.ONE.pow((-546));
      Fraction fraction3 = Fraction.getFraction(4531.93699);
      fraction3.reduce();
      fraction3.ONE_THIRD.subtract(fraction2);
      Fraction fraction4 = fraction0.invert();
      fraction4.equals(fraction0);
      fraction0.hashCode();
      fraction0.divideBy(fraction4);
      int int0 = 0;
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, (-546), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      fraction0.THREE_FIFTHS.hashCode();
      Fraction fraction1 = fraction0.negate();
      fraction1.TWO_THIRDS.negate();
      fraction1.toString();
      Fraction.getFraction("-1/2");
      fraction1.getProperNumerator();
      fraction0.abs();
      Fraction.getFraction((-2031), 1);
      Fraction.getFraction("-1/2");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-1));
      Fraction fraction1 = fraction0.invert();
      fraction1.getProperNumerator();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        Fraction.getFraction("/L^!c)FE\"S)zV");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = Fraction.getFraction(0.0);
      int int0 = 0;
      fraction1.ZERO.toString();
      Fraction.getReducedFraction(0, 308);
      Fraction fraction3 = fraction0.multiplyBy(fraction1);
      fraction3.TWO_FIFTHS.hashCode();
      fraction3.FOUR_FIFTHS.toString();
      fraction3.getNumerator();
      fraction2.ONE_THIRD.toProperString();
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(1, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.getReducedFraction(3, 3);
      fraction1.THREE_FIFTHS.negate();
      Fraction.getFraction(0.0);
      int int0 = (-1803);
      Fraction fraction2 = fraction0.ZERO.abs();
      fraction2.ZERO.compareTo(fraction1);
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1803), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      fraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      int int0 = (-1252);
      int int1 = (-496);
      // Undeclared exception!
      try { 
        Fraction.getFraction(1.7976931348623157E308);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      // Undeclared exception!
      try { 
        Fraction.getFraction(1.7976931348623157E308);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.getFraction((-2550), 612);
      Fraction fraction2 = fraction0.abs();
      Fraction fraction3 = fraction2.multiplyBy(fraction1);
      Fraction fraction4 = fraction3.TWO_QUARTERS.reduce();
      Fraction fraction5 = fraction2.ONE_HALF.reduce();
      fraction4.ONE_FIFTH.toProperString();
      Fraction fraction6 = fraction3.THREE_QUARTERS.invert();
      Fraction fraction7 = fraction6.ZERO.reduce();
      fraction3.THREE_FIFTHS.compareTo(fraction7);
      Fraction fraction8 = fraction6.THREE_FIFTHS.multiplyBy(fraction1);
      fraction3.getProperNumerator();
      fraction3.longValue();
      Fraction fraction9 = Fraction.getFraction((double) 1);
      Fraction fraction10 = fraction8.negate();
      fraction8.intValue();
      fraction10.doubleValue();
      Fraction fraction11 = fraction1.negate();
      Fraction fraction12 = Fraction.getFraction(612, 1, 1);
      fraction8.ONE.compareTo(fraction5);
      Fraction.getFraction(0, 1);
      fraction3.equals(fraction9);
      fraction11.pow((-2));
      fraction0.hashCode();
      fraction10.compareTo(fraction11);
      Fraction fraction13 = Fraction.THREE_FIFTHS;
      fraction12.equals(fraction13);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.ONE_HALF.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      Fraction fraction1 = fraction0.ZERO.negate();
      Fraction fraction2 = fraction0.ONE_FIFTH.add(fraction1);
      fraction2.THREE_QUARTERS.toProperString();
      Fraction fraction3 = Fraction.getFraction(680, 680, 680);
      fraction1.TWO_THIRDS.toString();
      fraction3.ONE_THIRD.toString();
      Fraction fraction4 = fraction0.negate();
      Fraction fraction5 = fraction4.THREE_FIFTHS.negate();
      fraction5.ONE.reduce();
      Fraction fraction6 = Fraction.getFraction(680, 680, 680);
      Fraction fraction7 = fraction3.abs();
      fraction7.ONE_HALF.compareTo(fraction1);
      Fraction fraction8 = fraction0.add(fraction1);
      fraction0.floatValue();
      fraction3.toProperString();
      Fraction fraction9 = Fraction.getFraction((-1.0));
      fraction1.doubleValue();
      Fraction fraction10 = fraction4.subtract(fraction9);
      fraction10.TWO_FIFTHS.abs();
      fraction6.THREE_FIFTHS.toProperString();
      Fraction fraction11 = fraction1.reduce();
      Fraction fraction12 = fraction6.abs();
      fraction11.equals(fraction12);
      fraction3.getProperNumerator();
      Object object0 = new Object();
      fraction8.equals(object0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.negate();
      Fraction fraction2 = fraction0.ONE_FIFTH.negate();
      fraction1.THREE_FIFTHS.multiplyBy(fraction0);
      fraction0.ONE.pow((-546));
      Fraction fraction3 = Fraction.getFraction(4531.93699);
      fraction3.ONE_THIRD.subtract(fraction2);
      Fraction fraction4 = fraction0.invert();
      fraction4.equals(fraction0);
      fraction0.hashCode();
      fraction0.divideBy(fraction4);
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, (-546), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      fraction0.THREE_FIFTHS.reduce();
      Fraction fraction1 = fraction0.negate();
      fraction0.toString();
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      Fraction.getFraction(696, 1, 696);
      fraction2.ONE_QUARTER.negate();
      Fraction fraction3 = Fraction.getFraction(2199, (-1499));
      fraction3.ONE_HALF.hashCode();
      fraction3.TWO_FIFTHS.divideBy(fraction2);
      fraction1.toProperString();
      fraction0.hashCode();
      // Undeclared exception!
      try { 
        fraction1.pow((-1499));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      fraction0.getDenominator();
      Fraction fraction2 = Fraction.TWO_QUARTERS;
      fraction2.ONE.compareTo(fraction0);
      Fraction fraction3 = fraction2.THREE_FIFTHS.negate();
      fraction0.TWO_QUARTERS.invert();
      fraction3.ONE.toString();
      fraction0.ONE_HALF.subtract(fraction1);
      Fraction.getReducedFraction(1, (-2181));
      Fraction fraction4 = fraction2.ZERO.negate();
      fraction0.FOUR_FIFTHS.subtract(fraction4);
      fraction0.compareTo(fraction2);
      fraction0.floatValue();
      fraction0.intValue();
      Fraction.getFraction((-378), 3165);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.negate();
      Fraction fraction2 = fraction1.ONE.abs();
      fraction0.toProperString();
      fraction1.THREE_QUARTERS.compareTo(fraction0);
      Fraction fraction3 = fraction0.TWO_FIFTHS.add(fraction1);
      fraction3.ONE_HALF.toProperString();
      Fraction fraction4 = fraction3.ONE_QUARTER.invert();
      fraction3.ONE_QUARTER.negate();
      Fraction.getFraction(1.0);
      Fraction fraction5 = fraction0.invert();
      fraction5.ONE.reduce();
      fraction0.floatValue();
      fraction5.getProperNumerator();
      Fraction fraction6 = fraction0.pow(0);
      Fraction fraction7 = fraction6.abs();
      fraction5.ZERO.reduce();
      fraction6.TWO_QUARTERS.pow(1);
      fraction6.equals((Object) null);
      Object object0 = new Object();
      fraction0.equals(object0);
      Fraction fraction8 = fraction3.pow(1);
      fraction8.ONE_QUARTER.compareTo(fraction2);
      Fraction fraction9 = fraction0.add(fraction6);
      fraction9.getProperNumerator();
      fraction6.getProperNumerator();
      fraction1.compareTo(fraction9);
      fraction5.divideBy(fraction4);
      fraction5.reduce();
      fraction7.intValue();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 1498;
      Fraction.getFraction(1498, 1498);
      int int1 = 697;
      Fraction.getFraction(697, 697);
      // Undeclared exception!
      try { 
        Fraction.getFraction(" ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 780;
      Fraction fraction0 = Fraction.getFraction(1, 780, 780);
      fraction0.ZERO.toString();
      Fraction fraction1 = fraction0.THREE_FIFTHS.abs();
      Fraction fraction2 = Fraction.getFraction((double) 780);
      fraction2.ONE_FIFTH.add(fraction1);
      fraction0.reduce();
      // Undeclared exception!
      try { 
        Fraction.getFraction("dkz(}CAdIP*r 9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"dkz(}CAdIP*r\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      Fraction fraction1 = fraction0.ONE.reduce();
      fraction1.ONE_QUARTER.hashCode();
      fraction1.ONE_FIFTH.add(fraction0);
      Fraction.getReducedFraction(1316, 1316);
      fraction1.THREE_QUARTERS.hashCode();
      Fraction fraction2 = Fraction.THREE_QUARTERS;
      fraction2.THREE_QUARTERS.divideBy(fraction1);
      Fraction fraction3 = Fraction.getFraction(0.0);
      fraction3.ONE_FIFTH.divideBy(fraction2);
      fraction0.TWO_THIRDS.add(fraction2);
      Fraction fraction4 = Fraction.TWO_FIFTHS;
      fraction4.ONE_QUARTER.abs();
      Fraction.getFraction(0.0);
      // Undeclared exception!
      try { 
        fraction4.ONE_FIFTH.divideBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.ONE_HALF;
      fraction1.TWO_FIFTHS.toProperString();
      Fraction.getFraction(291, 291);
      Fraction fraction2 = fraction0.subtract(fraction1);
      fraction2.doubleValue();
      fraction1.floatValue();
      Fraction fraction3 = Fraction.ONE_FIFTH;
      Fraction fraction4 = fraction2.add(fraction3);
      // Undeclared exception!
      try { 
        fraction4.divideBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        fraction0.ZERO.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      fraction0.ONE_THIRD.toString();
      Fraction fraction1 = Fraction.getFraction(2.147483647E9);
      fraction0.TWO_THIRDS.compareTo(fraction1);
      // Undeclared exception!
      try { 
        fraction1.ONE_FIFTH.pow((-1499));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.ONE_QUARTER.invert();
      // Undeclared exception!
      try { 
        fraction1.ONE_THIRD.divideBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-419), (-419));
      // Undeclared exception!
      try { 
        fraction0.TWO_QUARTERS.divideBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      Fraction fraction2 = fraction1.abs();
      Fraction.getFraction(0, (-2074));
      fraction2.ONE_HALF.toProperString();
      Fraction fraction3 = fraction0.TWO_THIRDS.add(fraction1);
      fraction3.TWO_THIRDS.invert();
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = null;
      // Undeclared exception!
      try { 
        fraction0.ZERO.multiplyBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(3074, 3074);
      // Undeclared exception!
      try { 
        fraction0.multiplyBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      fraction0.equals("Pi<;y_[{");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = Fraction.TWO_FIFTHS;
      int int0 = 0;
      Fraction.getFraction(0, 0, 765);
      Fraction fraction3 = fraction1.ONE_HALF.divideBy(fraction2);
      fraction2.THREE_FIFTHS.negate();
      fraction3.THREE_QUARTERS.toString();
      fraction3.ONE_FIFTH.subtract(fraction1);
      Fraction.getReducedFraction(765, (-5791));
      Fraction fraction4 = fraction0.divideBy(fraction1);
      fraction4.TWO_FIFTHS.subtract(fraction1);
      fraction1.intValue();
      fraction4.reduce();
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.getReducedFraction(126, 126);
      Fraction fraction2 = fraction1.ONE_THIRD.abs();
      Fraction fraction3 = Fraction.getFraction(0, 126, 126);
      Fraction fraction4 = fraction2.TWO_THIRDS.negate();
      Fraction fraction5 = fraction4.FOUR_FIFTHS.reduce();
      fraction5.ONE_QUARTER.divideBy(fraction0);
      Fraction.getFraction(10000, 0, 126);
      Fraction fraction6 = Fraction.THREE_QUARTERS;
      fraction5.ONE_QUARTER.add(fraction6);
      Fraction fraction7 = fraction0.ONE.add(fraction1);
      Fraction fraction8 = fraction7.ONE_HALF.invert();
      fraction8.ONE_FIFTH.multiplyBy(fraction1);
      Fraction fraction9 = fraction0.abs();
      Fraction fraction10 = fraction9.ONE_HALF.reduce();
      fraction0.longValue();
      Fraction fraction11 = fraction0.reduce();
      fraction0.hashCode();
      fraction3.toProperString();
      fraction8.intValue();
      fraction7.hashCode();
      fraction9.subtract(fraction10);
      fraction8.toProperString();
      fraction11.getProperNumerator();
      fraction1.add(fraction2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(".\"]`^e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("{z(X{&.,ZDy$bK");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction0.FOUR_FIFTHS.abs();
      fraction2.ONE_FIFTH.divideBy(fraction0);
      fraction2.multiplyBy(fraction1);
      Fraction fraction3 = fraction0.FOUR_FIFTHS.divideBy(fraction1);
      Fraction fraction4 = fraction0.abs();
      fraction4.TWO_FIFTHS.toString();
      fraction0.getDenominator();
      Fraction fraction5 = fraction4.negate();
      fraction0.intValue();
      fraction0.getProperNumerator();
      fraction3.getProperNumerator();
      fraction5.divideBy(fraction4);
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1662), 0, (-186));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      fraction0.ZERO.reduce();
      fraction0.FOUR_FIFTHS.hashCode();
      fraction0.ONE.compareTo(fraction1);
      Fraction fraction2 = fraction0.FOUR_FIFTHS.abs();
      fraction0.THREE_FIFTHS.multiplyBy(fraction1);
      fraction0.getNumerator();
      fraction2.THREE_FIFTHS.toString();
      Fraction fraction3 = Fraction.getFraction((-506), (-1642));
      fraction3.TWO_FIFTHS.add(fraction0);
      fraction2.subtract(fraction1);
      fraction2.compareTo(fraction0);
      Fraction.getFraction((-2282.47404));
      Fraction.getFraction((-2282.47404));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.ONE_HALF.reduce();
      Fraction fraction2 = fraction0.ONE.multiplyBy(fraction1);
      Fraction fraction3 = fraction2.TWO_QUARTERS.subtract(fraction1);
      Fraction fraction4 = Fraction.getFraction(0.0);
      fraction4.ONE_THIRD.reduce();
      fraction3.THREE_FIFTHS.compareTo(fraction0);
      Fraction fraction5 = Fraction.TWO_FIFTHS;
      fraction3.TWO_FIFTHS.invert();
      fraction0.ONE.divideBy(fraction5);
      fraction0.ONE_FIFTH.hashCode();
      Fraction fraction6 = fraction0.invert();
      fraction6.compareTo(fraction3);
      Fraction fraction7 = fraction0.invert();
      fraction2.compareTo(fraction1);
      Fraction fraction8 = fraction7.negate();
      Fraction fraction9 = Fraction.getFraction((double) 0);
      fraction9.ONE_THIRD.negate();
      Fraction fraction10 = fraction8.FOUR_FIFTHS.invert();
      fraction0.longValue();
      fraction7.getDenominator();
      fraction7.getProperWhole();
      fraction10.multiplyBy(fraction0);
      fraction2.toProperString();
      Fraction fraction11 = Fraction.getFraction(1, 2);
      fraction11.ONE_FIFTH.hashCode();
      fraction6.getProperNumerator();
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(3126.6792169255);
      Fraction fraction1 = Fraction.getFraction(4, 4);
      Fraction fraction2 = fraction0.subtract(fraction1);
      fraction2.ONE_HALF.negate();
      Fraction fraction3 = fraction2.THREE_QUARTERS.invert();
      fraction2.equals(fraction0);
      fraction3.toProperString();
      fraction3.add(fraction1);
      Fraction.getFraction(4, 1, 1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1023.333152609);
      Fraction fraction1 = Fraction.getFraction(4004, 0, 4004);
      Fraction fraction2 = fraction1.ONE_QUARTER.invert();
      fraction1.ONE_QUARTER.hashCode();
      fraction0.longValue();
      Fraction fraction3 = fraction0.abs();
      fraction3.ONE_QUARTER.toString();
      fraction0.getProperNumerator();
      fraction3.longValue();
      fraction0.longValue();
      fraction2.divideBy(fraction1);
      // Undeclared exception!
      try { 
        Fraction.getFraction(1, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.ZERO.pow(295);
      fraction0.getDenominator();
      fraction0.longValue();
      Fraction fraction2 = fraction1.divideBy(fraction0);
      fraction2.toProperString();
      Fraction fraction3 = fraction2.reduce();
      Fraction fraction4 = fraction3.ONE_HALF.pow(4);
      fraction1.ONE.divideBy(fraction4);
      fraction3.ONE_QUARTER.toString();
      fraction2.ONE_FIFTH.invert();
      Fraction fraction5 = fraction2.add(fraction0);
      fraction5.FOUR_FIFTHS.hashCode();
      Fraction fraction6 = fraction5.negate();
      Fraction fraction7 = fraction6.TWO_FIFTHS.reduce();
      fraction0.intValue();
      fraction7.multiplyBy(fraction2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      fraction0.ONE_THIRD.toProperString();
      fraction0.ONE_QUARTER.pow(1);
      // Undeclared exception!
      try { 
        fraction0.ONE_FIFTH.pow(2503);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE_THIRD.abs();
      fraction0.longValue();
      fraction0.reduce();
      fraction1.invert();
      Fraction fraction2 = Fraction.getFraction((-3179), 1);
      fraction0.FOUR_FIFTHS.add(fraction2);
      // Undeclared exception!
      try { 
        fraction2.ONE_THIRD.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-3252), 3029, 3029);
      Fraction fraction1 = Fraction.getFraction(2129.310164071);
      Fraction fraction2 = fraction1.ZERO.negate();
      fraction1.abs();
      fraction2.equals(fraction0);
      Fraction fraction3 = Fraction.ONE_FIFTH;
      fraction2.equals(fraction3);
      fraction0.hashCode();
      Fraction.getFraction(3029, 596);
      fraction2.toString();
      Fraction.getFraction(0.0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      fraction0.abs();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      fraction0.invert();
      int int0 = 0;
      fraction0.ONE_THIRD.invert();
      int int1 = (-1);
      // Undeclared exception!
      try { 
        fraction0.ZERO.pow((-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      double double0 = 2288.1;
      Fraction fraction1 = Fraction.getFraction(2288.1);
      fraction0.subtract(fraction1);
      String string0 = ";z,8";
      // Undeclared exception!
      try { 
        Fraction.getFraction(";z,8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";z,8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      fraction0.hashCode();
      Fraction fraction2 = fraction1.TWO_THIRDS.add(fraction0);
      fraction1.compareTo(fraction0);
      Fraction fraction3 = Fraction.getFraction("2");
      Fraction fraction4 = fraction3.ONE_QUARTER.pow(0);
      fraction4.FOUR_FIFTHS.pow(0);
      Fraction fraction5 = fraction0.subtract(fraction1);
      fraction5.toString();
      Fraction fraction6 = fraction5.reduce();
      Fraction fraction7 = Fraction.getFraction(0.0);
      fraction6.compareTo(fraction7);
      fraction2.doubleValue();
      fraction6.subtract(fraction3);
      fraction7.floatValue();
      // Undeclared exception!
      try { 
        fraction7.pow((-2171));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      fraction0.ZERO.toProperString();
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      Fraction fraction2 = fraction0.ONE_QUARTER.subtract(fraction1);
      fraction1.TWO_FIFTHS.hashCode();
      fraction2.FOUR_FIFTHS.pow(0);
      fraction1.FOUR_FIFTHS.invert();
      Fraction fraction3 = fraction0.multiplyBy(fraction1);
      fraction2.abs();
      fraction2.negate();
      fraction3.getDenominator();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      fraction0.ONE_HALF.toString();
      fraction0.doubleValue();
      Fraction fraction1 = Fraction.ONE_FIFTH;
      fraction0.compareTo(fraction1);
      fraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      fraction0.ONE_HALF.hashCode();
      fraction0.toString();
      Fraction.getFraction("1/5");
      int int0 = 0;
      int int1 = (-1667);
      Fraction fraction1 = Fraction.getFraction(0, (-1667));
      fraction1.THREE_QUARTERS.pow(0);
      fraction0.floatValue();
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.ONE_HALF.negate();
      Fraction fraction2 = Fraction.getFraction((-1918), (-930));
      fraction0.divideBy(fraction2);
      Fraction fraction3 = Fraction.getFraction(0, 2554);
      Fraction.getFraction((-183.6621646));
      Fraction fraction4 = fraction0.abs();
      Fraction fraction5 = Fraction.getFraction(0, 25);
      fraction5.ZERO.compareTo(fraction2);
      fraction4.getProperNumerator();
      Fraction fraction6 = fraction1.multiplyBy(fraction4);
      fraction3.negate();
      fraction6.getNumerator();
      fraction1.floatValue();
      // Undeclared exception!
      try { 
        Fraction.getFraction("B+!O]KVURjA/_-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"B+!O]KVURjA\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-393.61770578031));
      fraction0.floatValue();
      Fraction fraction1 = Fraction.ONE_THIRD;
      fraction0.ONE_FIFTH.compareTo(fraction1);
      Fraction fraction2 = Fraction.ONE_QUARTER;
      Fraction fraction3 = fraction0.multiplyBy(fraction2);
      fraction1.FOUR_FIFTHS.divideBy(fraction3);
      fraction3.ONE_QUARTER.divideBy(fraction1);
      fraction0.getNumerator();
      Fraction fraction4 = Fraction.getFraction((-1774035), (-1774035));
      fraction4.ONE_FIFTH.hashCode();
      Fraction fraction5 = fraction2.negate();
      fraction5.compareTo(fraction1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      fraction0.THREE_QUARTERS.abs();
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction1.THREE_QUARTERS.negate();
      fraction2.FOUR_FIFTHS.negate();
      fraction0.reduce();
      Fraction.getFraction((-1), 1, 1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.negate();
      fraction0.ZERO.negate();
      Fraction fraction2 = fraction0.THREE_QUARTERS.negate();
      fraction2.ONE_QUARTER.toString();
      fraction0.getNumerator();
      fraction0.compareTo(fraction1);
      Fraction.getFraction(1.0);
      // Undeclared exception!
      try { 
        Fraction.getFraction("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.getFraction((-324.51));
      Fraction.getFraction(1.0);
      Fraction fraction2 = Fraction.getFraction(254, 254);
      fraction2.ZERO.multiplyBy(fraction1);
      fraction0.toString();
      fraction2.multiplyBy(fraction0);
      Fraction.getFraction(254, (-4325));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.getFraction((-1931.46));
      Fraction fraction2 = Fraction.TWO_THIRDS;
      Fraction fraction3 = fraction0.FOUR_FIFTHS.divideBy(fraction2);
      fraction3.ONE_THIRD.hashCode();
      Fraction fraction4 = fraction0.ONE_THIRD.abs();
      Fraction.getFraction(128, 128, 1746);
      fraction4.TWO_QUARTERS.multiplyBy(fraction2);
      Fraction fraction5 = fraction0.negate();
      Fraction fraction6 = Fraction.FOUR_FIFTHS;
      fraction6.ONE_QUARTER.toString();
      fraction4.subtract(fraction6);
      fraction5.add(fraction1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.getFraction(799.5398288088534);
      Fraction fraction2 = fraction1.THREE_FIFTHS.negate();
      Fraction fraction3 = fraction1.TWO_FIFTHS.reduce();
      fraction2.TWO_QUARTERS.invert();
      fraction0.getProperNumerator();
      Fraction fraction4 = fraction2.subtract(fraction0);
      fraction2.doubleValue();
      fraction3.negate();
      fraction3.reduce();
      fraction4.getNumerator();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction.getReducedFraction(3, 3);
      fraction0.divideBy(fraction1);
      fraction1.getProperNumerator();
      Fraction.getFraction(3, 1366, 1107);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction.getReducedFraction(25, 25);
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction0.TWO_QUARTERS.multiplyBy(fraction1);
      fraction2.ZERO.hashCode();
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      fraction0.TWO_QUARTERS.toString();
      // Undeclared exception!
      try { 
        fraction0.ZERO.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.ZERO;
      fraction0.multiplyBy(fraction1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.ONE;
      fraction0.FOUR_FIFTHS.reduce();
      Fraction fraction2 = fraction1.TWO_FIFTHS.divideBy(fraction0);
      fraction0.add(fraction1);
      fraction2.getNumerator();
      fraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE_THIRD;
      fraction0.subtract(fraction1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 1, 1);
      Fraction fraction1 = fraction0.abs();
      Fraction fraction2 = Fraction.getFraction(1, 810);
      fraction2.ONE_QUARTER.divideBy(fraction0);
      fraction1.doubleValue();
      fraction1.negate();
      fraction0.divideBy(fraction1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      fraction0.ONE_THIRD.toString();
      Fraction fraction1 = Fraction.getFraction(1.0);
      fraction0.ONE_THIRD.pow(0);
      fraction0.compareTo(fraction1);
      fraction0.doubleValue();
      fraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2597), (-2420));
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.TWO_QUARTERS.divideBy(fraction1);
      fraction1.ONE_QUARTER.toString();
      fraction0.hashCode();
      Fraction fraction3 = fraction2.THREE_FIFTHS.invert();
      fraction1.floatValue();
      Fraction.getReducedFraction((-2597), 3552);
      fraction2.intValue();
      fraction2.multiplyBy(fraction3);
      fraction0.add(fraction2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      fraction0.ONE.invert();
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      fraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 0;
      Fraction fraction0 = Fraction.getFraction(0, 1688);
      fraction0.ONE_HALF.toProperString();
      // Undeclared exception!
      try { 
        Fraction.getFraction("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2621), (-2621));
      fraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      fraction0.subtract(fraction1);
      fraction1.getProperNumerator();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1.0);
      fraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      fraction0.intValue();
      fraction0.getProperWhole();
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1), (-3626), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      int int0 = 0;
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      int int0 = (-1);
      Fraction fraction1 = fraction0.TWO_FIFTHS.pow((-1));
      String string0 = "";
      fraction1.ONE_QUARTER.add(fraction0);
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.pow((-2190));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(5, 5);
      fraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-144.305));
      fraction0.getProperNumerator();
      fraction0.invert();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1762), (-1762));
      fraction0.hashCode();
      // Undeclared exception!
      try { 
        Fraction.getFraction(1, (-1138), (-2470));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0, (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      fraction0.intValue();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1), (-1), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.getFraction(0, 1265);
      Fraction fraction2 = Fraction.getFraction(0.1491495622999537);
      Fraction fraction3 = Fraction.ONE_HALF;
      fraction0.equals(fraction3);
      Fraction fraction4 = fraction2.invert();
      fraction4.TWO_FIFTHS.abs();
      fraction4.hashCode();
      Fraction fraction5 = Fraction.getFraction(1265, 1265);
      fraction2.multiplyBy(fraction1);
      fraction2.getDenominator();
      Fraction fraction6 = fraction3.abs();
      fraction6.ONE_THIRD.compareTo(fraction0);
      Fraction fraction7 = fraction5.add(fraction4);
      fraction7.ONE_HALF.subtract(fraction3);
      fraction6.toString();
      fraction0.reduce();
      fraction1.toProperString();
      fraction1.negate();
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 312, (-988));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1), (-1));
      Fraction fraction1 = fraction0.pow((-1));
      Fraction fraction2 = fraction1.ZERO.subtract(fraction0);
      fraction1.ONE.compareTo(fraction0);
      fraction1.ZERO.toString();
      fraction0.hashCode();
      fraction1.toProperString();
      fraction2.pow((-6448));
      fraction1.ONE_THIRD.toString();
      fraction0.invert();
      fraction1.TWO_THIRDS.compareTo(fraction0);
      fraction0.hashCode();
      Fraction fraction3 = fraction2.ONE.pow((-1));
      // Undeclared exception!
      try { 
        fraction3.ONE_THIRD.pow((-6448));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2407.3508504377));
      fraction0.getDenominator();
      Fraction fraction1 = Fraction.getFraction(787, 8525);
      fraction0.equals(fraction1);
      Fraction fraction2 = fraction0.ONE_THIRD.reduce();
      fraction2.THREE_QUARTERS.invert();
      fraction2.ONE.toProperString();
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      fraction0.toProperString();
      Fraction fraction1 = Fraction.getFraction(2406, 2406, 1);
      Fraction fraction2 = fraction1.ZERO.abs();
      fraction2.TWO_QUARTERS.reduce();
      fraction0.multiplyBy(fraction1);
      Fraction fraction3 = Fraction.getReducedFraction((-1823), (-2251));
      fraction3.TWO_FIFTHS.compareTo(fraction1);
      Fraction fraction4 = fraction0.pow(0);
      Fraction fraction5 = Fraction.getReducedFraction(2406, 1);
      fraction4.ONE.negate();
      Fraction.getReducedFraction(253, 1);
      fraction4.hashCode();
      Fraction fraction6 = fraction4.reduce();
      fraction6.TWO_THIRDS.subtract(fraction5);
      fraction5.toString();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.ONE_QUARTER.abs();
      Fraction fraction2 = fraction0.abs();
      Fraction fraction3 = fraction2.abs();
      Fraction fraction4 = Fraction.THREE_FIFTHS;
      Fraction fraction5 = fraction3.FOUR_FIFTHS.divideBy(fraction4);
      Fraction fraction6 = fraction5.TWO_QUARTERS.invert();
      Fraction fraction7 = fraction3.ONE_HALF.invert();
      fraction6.ONE_THIRD.subtract(fraction0);
      fraction7.THREE_QUARTERS.toProperString();
      Fraction fraction8 = fraction7.add(fraction0);
      Fraction fraction9 = fraction8.ONE.divideBy(fraction3);
      fraction9.TWO_THIRDS.compareTo(fraction6);
      fraction3.ONE_FIFTH.toProperString();
      Fraction fraction10 = fraction2.reduce();
      Object object0 = new Object();
      int int0 = 1;
      fraction10.FOUR_FIFTHS.pow(1);
      fraction3.equals(object0);
      Fraction fraction11 = fraction10.add(fraction1);
      fraction11.THREE_QUARTERS.negate();
      fraction3.reduce();
      // Undeclared exception!
      try { 
        Fraction.getFraction("The validated collection contains null element at index: %d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"The\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        fraction0.FOUR_FIFTHS.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      fraction0.hashCode();
      Fraction fraction2 = fraction1.TWO_THIRDS.add(fraction0);
      fraction1.compareTo(fraction0);
      Fraction fraction3 = Fraction.getFraction("2");
      fraction2.FOUR_FIFTHS.pow(0);
      Fraction fraction4 = Fraction.getFraction((double) 0);
      fraction4.toString();
      Fraction fraction5 = fraction4.reduce();
      Fraction fraction6 = Fraction.getFraction(0.0);
      fraction5.compareTo(fraction6);
      fraction2.doubleValue();
      fraction5.subtract(fraction3);
      fraction6.floatValue();
      // Undeclared exception!
      try { 
        fraction6.pow((-2171));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = Fraction.TWO_FIFTHS;
      int int0 = 2;
      Fraction.getFraction(2, 2, 765);
      Fraction fraction3 = fraction1.ONE_HALF.divideBy(fraction2);
      fraction2.THREE_FIFTHS.negate();
      fraction3.THREE_QUARTERS.toString();
      fraction3.ONE_FIFTH.subtract(fraction1);
      Fraction.getReducedFraction(765, (-5791));
      Fraction fraction4 = Fraction.THREE_FIFTHS;
      fraction1.intValue();
      fraction4.reduce();
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2156.3334));
      Fraction fraction1 = fraction0.TWO_FIFTHS.reduce();
      fraction1.THREE_QUARTERS.toProperString();
      Fraction fraction2 = fraction0.TWO_THIRDS.multiplyBy(fraction1);
      fraction0.doubleValue();
      fraction0.toString();
      Fraction fraction3 = fraction0.abs();
      Fraction fraction4 = fraction3.abs();
      fraction4.ONE.invert();
      fraction2.doubleValue();
      Fraction.getFraction((-2346), (-174));
      // Undeclared exception!
      try { 
        Fraction.getFraction((-940), 0, (-940));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      Fraction fraction1 = fraction0.ZERO.negate();
      Fraction fraction2 = fraction0.ONE_FIFTH.add(fraction1);
      fraction2.THREE_QUARTERS.toProperString();
      Fraction fraction3 = Fraction.getFraction(680, 680, 680);
      fraction1.TWO_THIRDS.toString();
      fraction3.ONE_THIRD.toString();
      Fraction fraction4 = fraction0.negate();
      Fraction fraction5 = fraction4.THREE_FIFTHS.negate();
      fraction5.ONE.reduce();
      Fraction fraction6 = Fraction.getFraction(680, 680, 680);
      Fraction fraction7 = fraction3.abs();
      Fraction.getFraction(5, 680);
      fraction7.ONE_HALF.compareTo(fraction1);
      Fraction fraction8 = fraction0.add(fraction1);
      fraction0.floatValue();
      fraction3.toProperString();
      Fraction fraction9 = Fraction.getFraction((-1.0));
      fraction1.doubleValue();
      Fraction fraction10 = fraction4.subtract(fraction9);
      fraction10.TWO_FIFTHS.abs();
      fraction6.THREE_FIFTHS.toProperString();
      Fraction fraction11 = fraction1.reduce();
      Fraction fraction12 = fraction6.abs();
      fraction11.equals(fraction12);
      fraction3.getProperNumerator();
      Object object0 = new Object();
      fraction8.equals(object0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      int int0 = 37;
      fraction0.TWO_FIFTHS.hashCode();
      // Undeclared exception!
      try { 
        Fraction.getFraction(37, (-2930), 37);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      fraction0.THREE_FIFTHS.reduce();
      Fraction fraction1 = fraction0.negate();
      fraction0.toString();
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      fraction2.ONE_QUARTER.negate();
      fraction0.ONE_HALF.hashCode();
      fraction2.TWO_FIFTHS.divideBy(fraction2);
      fraction1.toProperString();
      fraction0.hashCode();
      // Undeclared exception!
      try { 
        fraction1.pow((-1499));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-3252), 3029, 3029);
      Fraction fraction1 = Fraction.getFraction(2129.310164071);
      Fraction fraction2 = fraction1.ZERO.negate();
      Fraction fraction3 = fraction1.abs();
      fraction3.THREE_FIFTHS.abs();
      fraction2.equals(fraction0);
      Fraction fraction4 = Fraction.ONE_FIFTH;
      fraction2.equals(fraction4);
      fraction0.hashCode();
      Fraction fraction5 = Fraction.getFraction(3029, 596);
      fraction2.toString();
      fraction5.ZERO.divideBy(fraction1);
      Fraction.getFraction(0.0);
      fraction5.toProperString();
      fraction2.getProperNumerator();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(32, 32);
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.ONE_FIFTH.divideBy(fraction1);
      Fraction fraction3 = fraction2.ONE.add(fraction0);
      Fraction.getFraction(32, 1935);
      fraction0.longValue();
      fraction1.toString();
      Fraction fraction4 = Fraction.getReducedFraction(0, (-1));
      Fraction fraction5 = fraction2.ONE_THIRD.subtract(fraction4);
      Fraction fraction6 = fraction5.ONE_QUARTER.abs();
      Fraction fraction7 = fraction6.ONE_QUARTER.divideBy(fraction5);
      assertEquals(4, fraction7.getDenominator());
      
      Fraction fraction8 = Fraction.getReducedFraction((-1), 1);
      Fraction fraction9 = fraction0.multiplyBy(fraction1);
      int int0 = fraction9.compareTo(fraction3);
      assertEquals(2.0, fraction3.doubleValue(), 0.01);
      assertEquals((-1), int0);
      
      fraction5.equals(fraction0);
      String string0 = fraction6.toString();
      assertFalse(fraction4.equals((Object)fraction0));
      assertFalse(fraction4.equals((Object)fraction8));
      assertNotSame(fraction4, fraction2);
      assertEquals(1, fraction0.getNumerator());
      assertTrue(fraction1.equals((Object)fraction9));
      assertEquals("1/4", string0);
  }
}
