/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:20:47 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IllegalFormatConversionException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingFormatArgumentException;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.Validate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Validate_ESTest extends Validate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-1062.3701), (-1.0), (-1.0), ":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // :
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Arguments cannotboth be nul";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Arguments cannotboth be nul";
      objectArray0[3] = (Object) "Arguments cannotboth be nul";
      objectArray0[4] = (Object) "Arguments cannotboth be nul";
      objectArray0[5] = (Object) "Arguments cannotboth be nul";
      Validate.finite(1.0, "Arguments cannotboth be nul", objectArray0);
      assertEquals(6, objectArray0.length);
      
      // Undeclared exception!
      try { 
        Validate.validIndex("Arguments cannotboth be nul", (-720), (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      String string0 = "\\wx";
      int int0 = 2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("wx", "wx", 2);
      assertEquals(2, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: wx", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("wx", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("wx", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      assertEquals(2, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: wx", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("wx", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("wx", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: wx", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLInvalidAuthorizationSpecException: wx", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals(2, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: wx", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("wx", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("wx", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: wx", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLInvalidAuthorizationSpecException: wx", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTimeoutException: java.sql.SQLInvalidAuthorizationSpecException: wx", sQLTimeoutException1.toString());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLInvalidAuthorizationSpecException: wx", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNotNull(sQLTimeoutException1);
      
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("{Zgh");
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("{Zgh", sQLTimeoutException2.getMessage());
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: {Zgh", sQLTimeoutException2.toString());
      assertNotNull(sQLTimeoutException2);
      
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException(sQLTimeoutException2);
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("{Zgh", sQLTimeoutException2.getMessage());
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: {Zgh", sQLTimeoutException2.toString());
      assertEquals("java.sql.SQLTimeoutException: {Zgh", sQLTimeoutException3.getMessage());
      assertNull(sQLTimeoutException3.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTimeoutException: {Zgh", sQLTimeoutException3.toString());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertNotNull(sQLTimeoutException3);
      
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      String string1 = "p";
      String string2 = "car%? ?\\";
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("p", "car%? ?", 4445);
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException0));
      assertEquals("java.sql.SQLTimeoutException: p", sQLTimeoutException4.toString());
      assertEquals("car%? ?", sQLTimeoutException4.getSQLState());
      assertEquals("p", sQLTimeoutException4.getMessage());
      assertEquals(4445, sQLTimeoutException4.getErrorCode());
      assertNotNull(sQLTimeoutException4);
      
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException(sQLTimeoutException3);
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertNull(sQLTimeoutException5.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTimeoutException: java.sql.SQLTimeoutException: {Zgh", sQLTimeoutException5.toString());
      assertEquals(0, sQLTimeoutException5.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTimeoutException: {Zgh", sQLTimeoutException5.getMessage());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("{Zgh", sQLTimeoutException2.getMessage());
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: {Zgh", sQLTimeoutException2.toString());
      assertEquals("java.sql.SQLTimeoutException: {Zgh", sQLTimeoutException3.getMessage());
      assertNull(sQLTimeoutException3.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTimeoutException: {Zgh", sQLTimeoutException3.toString());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertNotNull(sQLTimeoutException5);
      
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "p";
      objectArray0[1] = (Object) sQLTimeoutException4;
      objectArray0[2] = (Object) "{Zgh";
      // Undeclared exception!
      try { 
        Validate.notNull((Object) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "y;XrS)[0g,j*";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "y;XrS)[0g,j*";
      objectArray0[1] = (Object) "y;XrS)[0g,j*";
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        Validate.notEmpty((CharSequence) null, "y;XrS)[0g,j*", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // y;XrS)[0g,j*
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("t<}p", (Throwable) null);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("t<}p", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: t<}p", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      sQLExceptionArray0[0] = (SQLException) sQLRecoverableException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("U'v#Xl(Xe`I>,Io");
      assertEquals("U'v#Xl(Xe`I>,Io", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: U'v#Xl(Xe`I>,Io", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      sQLIntegrityConstraintViolationException0.setNextException(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("t<}p", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: t<}p", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("U'v#Xl(Xe`I>,Io", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: U'v#Xl(Xe`I>,Io", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      sQLExceptionArray0[1] = (SQLException) sQLIntegrityConstraintViolationException0;
      DataTruncation dataTruncation0 = new DataTruncation(2143614308, false, false, 2143614308, 4572);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      Spliterator<Throwable> spliterator0 = dataTruncation0.spliterator();
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(spliterator0);
      
      sQLExceptionArray0[2] = (SQLException) dataTruncation0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLExceptionArray0[2]);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals(4, sQLExceptionArray0.length);
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.DataTruncation: Data truncation", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", sQLRecoverableException1.getMessage());
      assertNotNull(sQLRecoverableException1);
      
      sQLExceptionArray0[3] = (SQLException) sQLRecoverableException1;
      sQLRecoverableException0.printStackTrace();
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("t<}p", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: t<}p", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      
      boolean boolean0 = dataTruncation0.getParameter();
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertFalse(boolean0);
      
      String string0 = null;
      StackTraceElement[] stackTraceElementArray0 = sQLRecoverableException1.getStackTrace();
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertNotSame(sQLRecoverableException1, sQLRecoverableException0);
      assertEquals(4, sQLExceptionArray0.length);
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.DataTruncation: Data truncation", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", sQLRecoverableException1.getMessage());
      assertNotNull(stackTraceElementArray0);
      
      // Undeclared exception!
      try { 
        Validate.validIndex(sQLExceptionArray0, 2143614308, (String) null, (Object[]) sQLExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = (-424);
      String string0 = "kS;9z>jY'zu}Wn;iB%";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.validIndex((CharBuffer) null, (-424), "kS;9z>jY'zu}Wn;iB%", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray1 = Validate.validIndex(sQLFeatureNotSupportedExceptionArray0, 0);
      assertSame(sQLFeatureNotSupportedExceptionArray0, sQLFeatureNotSupportedExceptionArray1);
      assertSame(sQLFeatureNotSupportedExceptionArray1, sQLFeatureNotSupportedExceptionArray0);
      assertEquals(4, sQLFeatureNotSupportedExceptionArray0.length);
      assertEquals(4, sQLFeatureNotSupportedExceptionArray1.length);
      assertNotNull(sQLFeatureNotSupportedExceptionArray1);
      
      Object[] objectArray0 = new Object[8];
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      
      objectArray0[1] = (Object) sQLFeatureNotSupportedExceptionArray0[1];
      objectArray0[2] = (Object) sQLFeatureNotSupportedException0;
      objectArray0[3] = (Object) sQLFeatureNotSupportedException0;
      objectArray0[4] = (Object) sQLFeatureNotSupportedExceptionArray0[0];
      objectArray0[5] = (Object) sQLFeatureNotSupportedException0;
      objectArray0[7] = (Object) sQLFeatureNotSupportedException0;
      Validate.matchesPattern((CharSequence) "", "", "RjN@E#+q", (Object[]) sQLFeatureNotSupportedExceptionArray0);
      assertSame(sQLFeatureNotSupportedExceptionArray0, sQLFeatureNotSupportedExceptionArray1);
      assertEquals(4, sQLFeatureNotSupportedExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<SQLTransactionRollbackException, SQLClientInfoException> hashMap0 = new HashMap<SQLTransactionRollbackException, SQLClientInfoException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j4$ rpd");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      printWriter0.println("kS;9z>jY'zu}Wn;iB%");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      sQLClientInfoException0.printStackTrace(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put((SQLTransactionRollbackException) null, sQLClientInfoException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException1);
      
      HashMap<SQLTransactionRollbackException, SQLClientInfoException> hashMap1 = new HashMap<SQLTransactionRollbackException, SQLClientInfoException>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("j4$ rpd");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "j4$ rpd");
      assertTrue(boolean0);
      
      HashMap<SQLTransactionRollbackException, SQLClientInfoException> hashMap2 = Validate.notEmpty(hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap2.equals((Object)hashMap0));
      assertNotSame(hashMap0, hashMap2);
      assertNotSame(hashMap0, hashMap1);
      assertSame(hashMap1, hashMap2);
      assertNotSame(hashMap1, hashMap0);
      assertNotSame(hashMap2, hashMap0);
      assertSame(hashMap2, hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap2.size());
      assertFalse(hashMap2.isEmpty());
      assertNotNull(hashMap2);
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        Validate.validIndex((ArrayList<SQLDataException>) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)46;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)46}, byteArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        Validate.notBlank((String) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)22;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-122), (byte)15, (byte)22}, byteArray0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains((byte)22));
      assertNotNull(arrayDeque0);
      
      Comparable<SQLNonTransientException> comparable0 = (Comparable<SQLNonTransientException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparable0).compareTo(anyIterable());
      Validate.inclusiveBetween((ArrayDeque<EnumSet>) arrayDeque0, (ArrayDeque<EnumSet>) arrayDeque0, (Comparable<ArrayDeque<EnumSet>>) comparable0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains((byte)22));
      
      Object object0 = arrayDeque0.poll();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains((byte)22));
      assertNull(object0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(0));
      assertNotNull(hashSet0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray1.length);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = hashSet0.add(integer0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(0));
      assertTrue(boolean2);
      
      String string0 = null;
      int int0 = Integer.compareUnsigned(0, 0);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[1];
      boolean boolean3 = hashSet0.add(integer0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(0));
      assertFalse(boolean3);
      
      objectArray0[0] = (Object) arrayDeque0;
      HashSet<Integer> hashSet1 = Validate.notEmpty(hashSet0, (String) null, objectArray0);
      assertSame(hashSet1, hashSet0);
      assertSame(hashSet0, hashSet1);
      assertEquals(1, objectArray0.length);
      assertFalse(hashSet1.isEmpty());
      assertEquals(1, hashSet1.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet1.contains(0));
      assertTrue(hashSet0.contains(0));
      assertNotNull(hashSet1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("F", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = Validate.notEmpty(charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("F", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("F", charBuffer1.toString());
      assertEquals(1, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.limit());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.length());
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertNotNull(charBuffer1);
      
      // Undeclared exception!
      try { 
        Validate.notEmpty((TreeSet<SQLTransientConnectionException>) null, "ONHNi", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ONHNi
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashSet<SQLNonTransientException>[] hashSetArray0 = (HashSet<SQLNonTransientException>[]) Array.newInstance(HashSet.class, 6);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>(259);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      hashSetArray0[0] = (HashSet<SQLNonTransientException>) linkedHashSet0;
      LinkedHashSet<SQLNonTransientException> linkedHashSet1 = new LinkedHashSet<SQLNonTransientException>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      
      hashSetArray0[1] = (HashSet<SQLNonTransientException>) linkedHashSet1;
      LinkedHashSet<SQLNonTransientException> linkedHashSet2 = new LinkedHashSet<SQLNonTransientException>(hashSetArray0[1]);
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet0));
      assertEquals(6, hashSetArray0.length);
      assertTrue(linkedHashSet2.isEmpty());
      assertEquals(0, linkedHashSet2.size());
      assertNotNull(linkedHashSet2);
      
      hashSetArray0[2] = (HashSet<SQLNonTransientException>) linkedHashSet2;
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      hashSetArray0[3] = hashSet0;
      HashSet<SQLNonTransientException> hashSet1 = new HashSet<SQLNonTransientException>();
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertNotNull(hashSet1);
      
      hashSetArray0[4] = hashSet1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = hashSet1.add(sQLFeatureNotSupportedException0);
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertNotSame(hashSet1, hashSet0);
      assertFalse(hashSet1.isEmpty());
      assertEquals(1, hashSet1.size());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertTrue(boolean0);
      
      HashSet<SQLNonTransientException> hashSet2 = new HashSet<SQLNonTransientException>();
      assertFalse(hashSet2.equals((Object)hashSet1));
      assertTrue(hashSet2.equals((Object)hashSet0));
      assertTrue(hashSet2.isEmpty());
      assertEquals(0, hashSet2.size());
      assertNotNull(hashSet2);
      
      hashSetArray0[5] = hashSet2;
      HashSet<SQLNonTransientException>[] hashSetArray1 = Validate.noNullElements(hashSetArray0);
      assertSame(hashSetArray0, hashSetArray1);
      assertSame(hashSetArray1, hashSetArray0);
      assertEquals(6, hashSetArray0.length);
      assertEquals(6, hashSetArray1.length);
      assertNotNull(hashSetArray1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The validated state is false", "", 259, (Throwable) null);
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.printStackTrace();
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      
      sQLRecoverableException0.forEach(consumer0);
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("A-A-T{mVe:U", sQLRecoverableException0);
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = Validate.noNullElements(sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException1.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("A-A-T{mVe:U", (Throwable) null);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Comparable<SQLIntegrityConstraintViolationException> comparable0 = (Comparable<SQLIntegrityConstraintViolationException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(259, (-305)).when(comparable0).compareTo(anyIterable());
      Validate.inclusiveBetween(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException0, comparable0, "L&m", (Object[]) hashSetArray1);
      assertSame(hashSetArray0, hashSetArray1);
      assertSame(hashSetArray1, hashSetArray0);
      assertEquals(6, hashSetArray0.length);
      assertEquals(6, hashSetArray1.length);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation(259, false, false, (-1), 259);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      Comparable<DataTruncation> comparable1 = (Comparable<DataTruncation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(2146560792, (-1)).when(comparable1).compareTo(anyIterable());
      Validate.exclusiveBetween(dataTruncation0, dataTruncation0, comparable1, "L&m", (Object[]) hashSetArray1);
      assertSame(hashSetArray0, hashSetArray1);
      assertSame(hashSetArray1, hashSetArray0);
      assertEquals(6, hashSetArray0.length);
      assertEquals(6, hashSetArray1.length);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      Validate.isAssignableFrom(class0, class1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      
      Validate.isTrue(true, "", (-1.0));
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        Validate.notEmpty(charBuffer0, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "hy?;";
      objectArray0[1] = (Object) "hy?;";
      String string0 = Validate.notBlank("hy?;", "hy?;", objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals("hy?;", string0);
      assertNotNull(string0);
      
      Validate validate0 = new Validate();
      assertNotNull(validate0);
      
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("hy?;", "hy?;", 10);
      assertEquals("hy?;", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("hy?;", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(10, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: hy?;", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      boolean boolean0 = linkedHashSet0.add(sQLInvalidAuthorizationSpecException0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals("hy?;", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("hy?;", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(10, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: hy?;", sQLInvalidAuthorizationSpecException0.toString());
      assertTrue(linkedHashSet0.contains(sQLInvalidAuthorizationSpecException0));
      assertTrue(boolean0);
      
      objectArray1[0] = object0;
      objectArray1[1] = (Object) linkedHashSet0;
      Validate.notNaN(2226.766367, "hy?;", objectArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotSame(objectArray0, objectArray1);
      assertEquals(2, objectArray0.length);
      
      objectArray1[2] = (Object) "hy?;";
      Object object1 = Validate.notNull(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      objectArray1[3] = object1;
      Validate.notNaN((-2097.0), "hy?;", objectArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotSame(objectArray0, objectArray1);
      assertEquals(2, objectArray0.length);
      
      objectArray1[4] = (Object) validate0;
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet1 = Validate.validIndex(linkedHashSet0, 0, "hy?;", objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertSame(linkedHashSet1, linkedHashSet0);
      assertSame(linkedHashSet0, linkedHashSet1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(5, objectArray1.length);
      assertFalse(linkedHashSet1.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet1.contains(sQLInvalidAuthorizationSpecException0));
      assertTrue(linkedHashSet0.contains(sQLInvalidAuthorizationSpecException0));
      assertNotNull(linkedHashSet1);
      
      HashMap<SQLTimeoutException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<SQLTimeoutException, SQLFeatureNotSupportedException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "hy?;", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hy?;
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.validIndex("Expected type: %s, actual: %s", (-2589), "Expected type: %s, actual: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "Y0C`sL!>av";
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Y0C`sL!>av", (int[]) null);
      assertEquals("java.sql.BatchUpdateException: Y0C`sL!>av", batchUpdateException0.toString());
      assertEquals("Y0C`sL!>av", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      Comparable<SQLException> comparable0 = null;
      String string1 = "c/[5jqxp~\\!8";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) batchUpdateException0;
      objectArray0[2] = (Object) "c/[5jqxp~!8";
      objectArray0[3] = (Object) batchUpdateException0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) batchUpdateException0;
      objectArray0[6] = (Object) "c/[5jqxp~!8";
      objectArray0[7] = (Object) null;
      String string2 = "kS;9z>jY'zu}Wn;iB%";
      int int0 = (-2146820638);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("kS;9z>jY'zu}Wn;iB%", "kS;9z>jY'zu}Wn;iB%", (-2146820638));
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: kS;9z>jY'zu}Wn;iB%", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("kS;9z>jY'zu}Wn;iB%", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("kS;9z>jY'zu}Wn;iB%", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-2146820638), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      batchUpdateException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.BatchUpdateException: Y0C`sL!>av", batchUpdateException0.toString());
      assertEquals("Y0C`sL!>av", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: kS;9z>jY'zu}Wn;iB%", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("kS;9z>jY'zu}Wn;iB%", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("kS;9z>jY'zu}Wn;iB%", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-2146820638), sQLIntegrityConstraintViolationException0.getErrorCode());
      
      Object[] objectArray1 = null;
      // Undeclared exception!
      try { 
        Validate.notNull(objectArray0[0], "kS;9z>jY'zu}Wn;iB%", (Object[]) null);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Comparable<SQLNonTransientException> comparable0 = (Comparable<SQLNonTransientException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparable0).compareTo(anyIterable());
      Validate.inclusiveBetween((ArrayDeque<EnumSet>) arrayDeque0, (ArrayDeque<EnumSet>) arrayDeque0, (Comparable<ArrayDeque<EnumSet>>) comparable0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(0));
      
      Object object0 = arrayDeque0.poll();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(0));
      assertNull(object0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(0));
      assertNotNull(hashSet0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string0 = null;
      int int0 = Integer.compareUnsigned((-1230), (-1230));
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) arrayDeque0;
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashSet0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = null;
      Validate.isTrue(true, (String) null, 0L);
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(0L, 0L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 1 is not in the specified exclusive range of 0 to 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = null;
      long long0 = 0L;
      // Undeclared exception!
      try { 
        Validate.isTrue(false, (String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals("j", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertArrayEquals(new char[] {'j'}, charArray0);
      assertNotNull(charBuffer0);
      
      int int0 = (-10);
      String string0 = "The value is invalid: %f";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) "The value is invalid: %f";
      Object object0 = Validate.notNull(objectArray0[2], "The value is invalid: %f", objectArray0);
      assertTrue(object0.equals((Object)string0));
      assertEquals(8, objectArray0.length);
      assertEquals("The value is invalid: %f", object0);
      assertNotNull(object0);
      
      objectArray0[3] = (Object) "The value is invalid: %f";
      objectArray0[4] = (Object) "The value is invalid: %f";
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[5] = object1;
      objectArray0[6] = (Object) 'j';
      objectArray0[7] = (Object) "The value is invalid: %f";
      // Undeclared exception!
      try { 
        Validate.validIndex((CharSequence) charBuffer0, (-10), "The value is invalid: %f", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != java.lang.Character
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = "The validated object is null";
      String string1 = "Expected type: %s, actual: %s";
      int[] intArray0 = new int[7];
      intArray0[0] = 2145078851;
      intArray0[1] = 2145078851;
      intArray0[2] = 2145078851;
      intArray0[3] = 2145078851;
      intArray0[4] = 2145078851;
      intArray0[5] = 2145078851;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      intArray0[6] = 2145078851;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("The validated object is null", "Expected type: %s, actual: %s", 2145078851, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: The validated object is null", batchUpdateException0.toString());
      assertEquals(2145078851, batchUpdateException0.getErrorCode());
      assertEquals("The validated object is null", batchUpdateException0.getMessage());
      assertEquals("Expected type: %s, actual: %s", batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {2145078851, 2145078851, 2145078851, 2145078851, 2145078851, 2145078851, 2145078851}, intArray0);
      assertNotNull(batchUpdateException0);
      
      long[] longArray0 = batchUpdateException0.getLargeUpdateCounts();
      assertEquals(7, intArray0.length);
      assertEquals(7, longArray0.length);
      assertEquals("java.sql.BatchUpdateException: The validated object is null", batchUpdateException0.toString());
      assertEquals(2145078851, batchUpdateException0.getErrorCode());
      assertEquals("The validated object is null", batchUpdateException0.getMessage());
      assertEquals("Expected type: %s, actual: %s", batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {2145078851, 2145078851, 2145078851, 2145078851, 2145078851, 2145078851, 2145078851}, intArray0);
      assertArrayEquals(new long[] {2145078851L, 2145078851L, 2145078851L, 2145078851L, 2145078851L, 2145078851L, 2145078851L}, longArray0);
      assertNotNull(longArray0);
      
      linkedList0.addLast(batchUpdateException0);
      assertEquals(7, intArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals("java.sql.BatchUpdateException: The validated object is null", batchUpdateException0.toString());
      assertEquals(2145078851, batchUpdateException0.getErrorCode());
      assertEquals("The validated object is null", batchUpdateException0.getMessage());
      assertEquals("Expected type: %s, actual: %s", batchUpdateException0.getSQLState());
      assertTrue(linkedList0.contains(batchUpdateException0));
      assertArrayEquals(new int[] {2145078851, 2145078851, 2145078851, 2145078851, 2145078851, 2145078851, 2145078851}, intArray0);
      
      String string2 = "L<7wB/6P42rl5r~";
      Object[] objectArray0 = new Object[2];
      boolean boolean1 = linkedList0.add((BatchUpdateException) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(batchUpdateException0));
      assertTrue(boolean1);
      
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) linkedList0;
      // Undeclared exception!
      try { 
        Validate.noNullElements(linkedList0, "L<7wB/6P42rl5r~", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // L<7wB/6P42rl5r~
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", (-4966));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException1.toString());
      assertEquals((-4966), sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException1.getMessage());
      assertNotNull(sQLFeatureNotSupportedException1);
      
      Comparable<SQLFeatureNotSupportedException> comparable0 = (Comparable<SQLFeatureNotSupportedException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-1366)).when(comparable0).compareTo(anyIterable());
      doReturn("Ei|").when(comparable0).toString();
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value Ei| is not in the specified exclusive range of java.sql.SQLFeatureNotSupportedException:  to java.sql.SQLFeatureNotSupportedException: 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Comparable<SQLNonTransientException> comparable0 = (Comparable<SQLNonTransientException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((ArrayDeque<EnumSet>) arrayDeque0, (ArrayDeque<EnumSet>) null, (Comparable<ArrayDeque<EnumSet>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "CCs+}kPyJ(+t<4*c}&";
      int int0 = 0;
      String string1 = Validate.validIndex("CCs+}kPyJ(+t<4*c}&", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("CCs+}kPyJ(+t<4*c}&", string1);
      assertNotNull(string1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("CCs+}kPyJ(+t<4*c}&", "CCs+}kPyJ(+t<4*c}&", 0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.toString());
      assertEquals("CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.toString());
      assertEquals("CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.getSQLState());
      
      StackTraceElement[] stackTraceElementArray0 = sQLRecoverableException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.toString());
      assertEquals("CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.getSQLState());
      assertNotNull(stackTraceElementArray0);
      
      StackTraceElement[] stackTraceElementArray1 = sQLRecoverableException0.getStackTrace();
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray1.length);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.toString());
      assertEquals("CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.getSQLState());
      assertNotNull(stackTraceElementArray1);
      
      Comparable<SQLRecoverableException> comparable0 = (Comparable<SQLRecoverableException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(5, (-1)).when(comparable0).compareTo(anyIterable());
      Validate.exclusiveBetween(sQLRecoverableException0, sQLRecoverableException0, comparable0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.toString());
      assertEquals("CCs+}kPyJ(+t<4*c}&", sQLRecoverableException0.getSQLState());
      
      Validate.inclusiveBetween((long) 0, 0L, (long) 0);
      Validate.inclusiveBetween((double) 0L, 0.0, (double) 0L);
      Validate.inclusiveBetween(0L, 0L, (long) 0, "CCs+}kPyJ(+t<4*c}&");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray1 = Validate.noNullElements(sQLSyntaxErrorExceptionArray0);
      assertSame(sQLSyntaxErrorExceptionArray0, sQLSyntaxErrorExceptionArray1);
      assertSame(sQLSyntaxErrorExceptionArray1, sQLSyntaxErrorExceptionArray0);
      assertEquals(0, sQLSyntaxErrorExceptionArray0.length);
      assertEquals(0, sQLSyntaxErrorExceptionArray1.length);
      assertNotNull(sQLSyntaxErrorExceptionArray1);
      
      Validate.validState(true);
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLIntegrityConstraintViolationException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Comparable<SQLNonTransientException> comparable0 = (Comparable<SQLNonTransientException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(1166, (-1494)).when(comparable0).compareTo(anyIterable());
      Validate.inclusiveBetween((ArrayDeque<EnumSet>) arrayDeque0, (ArrayDeque<EnumSet>) arrayDeque0, (Comparable<ArrayDeque<EnumSet>>) comparable0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(1166));
      
      Object object0 = arrayDeque0.poll();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(1166));
      assertNull(object0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(1166));
      assertNotNull(hashSet0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = hashSet0.add(integer0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(1166));
      assertTrue(hashSet0.contains(0));
      assertTrue(boolean0);
      
      String string0 = null;
      int int0 = Integer.compareUnsigned((-1230), (-1230));
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[1];
      boolean boolean1 = hashSet0.add(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(1166));
      assertTrue(hashSet0.contains(0));
      assertFalse(boolean1);
      
      objectArray0[0] = (Object) arrayDeque0;
      HashSet<Integer> hashSet1 = Validate.notEmpty(hashSet0, (String) null, objectArray0);
      assertSame(hashSet0, hashSet1);
      assertSame(hashSet1, hashSet0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet1.size());
      assertFalse(hashSet1.isEmpty());
      assertFalse(hashSet0.contains(1166));
      assertTrue(hashSet0.contains(0));
      assertFalse(hashSet1.contains(1166));
      assertTrue(hashSet1.contains(0));
      assertNotNull(hashSet1);
      
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((-1L), (-1L), 2262L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 2262 is not in the specified inclusive range of -1 to -1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/N)h", (Throwable) null);
      assertEquals("/N)h", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: /N)h", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/N)h", "VK`YWo%e?agV).#7", (-2146820639), (int[]) null);
      assertEquals("java.sql.BatchUpdateException: /N)h", batchUpdateException0.toString());
      assertEquals("/N)h", batchUpdateException0.getMessage());
      assertEquals((-2146820639), batchUpdateException0.getErrorCode());
      assertEquals("VK`YWo%e?agV).#7", batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("/N)h", "Aborting to protect against StackOverflowError - output of one loop is the input of another", batchUpdateException0);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals("java.sql.BatchUpdateException: /N)h", batchUpdateException0.toString());
      assertEquals("/N)h", batchUpdateException0.getMessage());
      assertEquals((-2146820639), batchUpdateException0.getErrorCode());
      assertEquals("VK`YWo%e?agV).#7", batchUpdateException0.getSQLState());
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("/N)h", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: /N)h", sQLInvalidAuthorizationSpecException1.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      batchUpdateException0.setNextException(sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertEquals("/N)h", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: /N)h", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.BatchUpdateException: /N)h", batchUpdateException0.toString());
      assertEquals("/N)h", batchUpdateException0.getMessage());
      assertEquals((-2146820639), batchUpdateException0.getErrorCode());
      assertEquals("VK`YWo%e?agV).#7", batchUpdateException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("VK`YWo%e?agV).#7");
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertNull(sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: VK`YWo%e?agV).#7", sQLInvalidAuthorizationSpecException2.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertEquals("VK`YWo%e?agV).#7", sQLInvalidAuthorizationSpecException2.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException2);
      
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      String string0 = sQLInvalidAuthorizationSpecException2.getLocalizedMessage();
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertNotSame(sQLInvalidAuthorizationSpecException2, sQLInvalidAuthorizationSpecException0);
      assertNotSame(sQLInvalidAuthorizationSpecException2, sQLInvalidAuthorizationSpecException1);
      assertNull(sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: VK`YWo%e?agV).#7", sQLInvalidAuthorizationSpecException2.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertEquals("VK`YWo%e?agV).#7", sQLInvalidAuthorizationSpecException2.getMessage());
      assertEquals("VK`YWo%e?agV).#7", string0);
      assertNotNull(string0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-2146820639), sQLInvalidAuthorizationSpecException2);
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertNull(sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: VK`YWo%e?agV).#7", sQLInvalidAuthorizationSpecException2.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertEquals("VK`YWo%e?agV).#7", sQLInvalidAuthorizationSpecException2.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException3.toString());
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", sQLInvalidAuthorizationSpecException3.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException3.getMessage());
      assertEquals((-2146820639), sQLInvalidAuthorizationSpecException3.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException3);
      
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray1 = Validate.noNullElements(sQLInvalidAuthorizationSpecExceptionArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another", (Object[]) sQLInvalidAuthorizationSpecExceptionArray0);
      assertSame(sQLInvalidAuthorizationSpecExceptionArray0, sQLInvalidAuthorizationSpecExceptionArray1);
      assertSame(sQLInvalidAuthorizationSpecExceptionArray1, sQLInvalidAuthorizationSpecExceptionArray0);
      assertEquals(4, sQLInvalidAuthorizationSpecExceptionArray0.length);
      assertEquals(4, sQLInvalidAuthorizationSpecExceptionArray1.length);
      assertNotNull(sQLInvalidAuthorizationSpecExceptionArray1);
      
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{@Z^iKi9Z", sQLInvalidAuthorizationSpecException1);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertEquals("java.sql.BatchUpdateException: /N)h", batchUpdateException0.toString());
      assertEquals("/N)h", batchUpdateException0.getMessage());
      assertEquals((-2146820639), batchUpdateException0.getErrorCode());
      assertEquals("VK`YWo%e?agV).#7", batchUpdateException0.getSQLState());
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("/N)h", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: /N)h", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("{@Z^iKi9Z", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: {@Z^iKi9Z", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      // Undeclared exception!
      try { 
        Validate.validIndex(sQLSyntaxErrorExceptionArray0, (-2144710472), "Aborting to protect against StackOverflowError - output of one loop is the input of another", (Object[]) sQLSyntaxErrorExceptionArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = (-1L);
      long long1 = 0L;
      String string0 = "[N.&/L=Ev_Lq^Pb:Q";
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-1L), 0L, 892L, "[N.&/L=Ev_Lq^Pb:Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [N.&/L=Ev_Lq^Pb:Q
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      Validate.inclusiveBetween((-1939.8004), (-1939.8004), (-1939.8004), "?Q|\"E[xUZ&0@{4Bl`eJ");
      // Undeclared exception!
      try { 
        Validate.notBlank("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "The value is invalid: %f";
      Validate.inclusiveBetween(2866L, 2866L, 2866L, "The value is invalid: %f");
      // Undeclared exception!
      try { 
        Validate.noNullElements((Vector<Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)sQLFeatureNotSupportedException0.fillInStackTrace();
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException1.toString());
      assertNull(sQLFeatureNotSupportedException1.getMessage());
      assertNotNull(sQLFeatureNotSupportedException1);
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("_UVs&}4*rB5", "_UVs&}4*rB5");
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("_UVs&}4*rB5", sQLFeatureNotSupportedException2.getMessage());
      assertEquals("_UVs&}4*rB5", sQLFeatureNotSupportedException2.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: _UVs&}4*rB5", sQLFeatureNotSupportedException2.toString());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException2);
      
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("_UVs&}4*rB5", "_UVs&}4*rB5", sQLFeatureNotSupportedException2);
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("_UVs&}4*rB5", sQLFeatureNotSupportedException2.getMessage());
      assertEquals("_UVs&}4*rB5", sQLFeatureNotSupportedException2.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: _UVs&}4*rB5", sQLFeatureNotSupportedException2.toString());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: _UVs&}4*rB5", sQLFeatureNotSupportedException3.toString());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("_UVs&}4*rB5", sQLFeatureNotSupportedException3.getMessage());
      assertEquals("_UVs&}4*rB5", sQLFeatureNotSupportedException3.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException3);
      
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("", "");
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException4.toString());
      assertEquals(0, sQLFeatureNotSupportedException4.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException4.getMessage());
      assertEquals("", sQLFeatureNotSupportedException4.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException4);
      
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray1 = Validate.validIndex(sQLFeatureNotSupportedExceptionArray0, 0);
      assertSame(sQLFeatureNotSupportedExceptionArray0, sQLFeatureNotSupportedExceptionArray1);
      assertSame(sQLFeatureNotSupportedExceptionArray1, sQLFeatureNotSupportedExceptionArray0);
      assertEquals(4, sQLFeatureNotSupportedExceptionArray0.length);
      assertEquals(4, sQLFeatureNotSupportedExceptionArray1.length);
      assertNotNull(sQLFeatureNotSupportedExceptionArray1);
      
      Object[] objectArray0 = new Object[8];
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException4.forEach(consumer0);
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException0));
      assertNotSame(sQLFeatureNotSupportedException4, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException4, sQLFeatureNotSupportedException3);
      assertNotSame(sQLFeatureNotSupportedException4, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException4, sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException4.toString());
      assertEquals(0, sQLFeatureNotSupportedException4.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException4.getMessage());
      assertEquals("", sQLFeatureNotSupportedException4.getSQLState());
      
      objectArray0[0] = (Object) sQLFeatureNotSupportedException2;
      objectArray0[1] = (Object) sQLFeatureNotSupportedException2;
      objectArray0[2] = (Object) sQLFeatureNotSupportedException4;
      objectArray0[3] = (Object) sQLFeatureNotSupportedException4;
      objectArray0[4] = (Object) sQLFeatureNotSupportedException0;
      objectArray0[5] = (Object) sQLFeatureNotSupportedException4;
      objectArray0[6] = (Object) sQLFeatureNotSupportedException3;
      objectArray0[7] = (Object) sQLFeatureNotSupportedException4;
      Validate.isTrue(true, "_UVs&}4*rB5", objectArray0);
      assertEquals(8, objectArray0.length);
      
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "_UVs&}4*rB5", "The validated character sequence is blank", "kS;9z>jY'zu}Wn;iB%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = (-1.0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Comparable<SQLNonTransientException> comparable0 = (Comparable<SQLNonTransientException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-646)).when(comparable0).compareTo(anyIterable());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((ArrayDeque<EnumSet>) arrayDeque0, (ArrayDeque<EnumSet>) arrayDeque0, (Comparable<ArrayDeque<EnumSet>>) comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value null is not in the specified inclusive range of [] to []
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Comparable<SQLNonTransientException> comparable0 = (Comparable<SQLNonTransientException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-870)).when(comparable0).compareTo(anyIterable());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((ArrayDeque<EnumSet>) arrayDeque0, (ArrayDeque<EnumSet>) arrayDeque0, (Comparable<ArrayDeque<EnumSet>>) comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value null is not in the specified inclusive range of [] to []
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashSet<SQLNonTransientException>[] hashSetArray0 = (HashSet<SQLNonTransientException>[]) Array.newInstance(HashSet.class, 6);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>(259);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      hashSetArray0[0] = (HashSet<SQLNonTransientException>) linkedHashSet0;
      LinkedHashSet<SQLNonTransientException> linkedHashSet1 = new LinkedHashSet<SQLNonTransientException>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      
      hashSetArray0[1] = (HashSet<SQLNonTransientException>) linkedHashSet1;
      LinkedHashSet<SQLNonTransientException> linkedHashSet2 = new LinkedHashSet<SQLNonTransientException>(hashSetArray0[1]);
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet0));
      assertEquals(6, hashSetArray0.length);
      assertTrue(linkedHashSet2.isEmpty());
      assertEquals(0, linkedHashSet2.size());
      assertNotNull(linkedHashSet2);
      
      hashSetArray0[2] = (HashSet<SQLNonTransientException>) linkedHashSet2;
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      hashSetArray0[3] = hashSet0;
      HashSet<SQLNonTransientException> hashSet1 = new HashSet<SQLNonTransientException>();
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertNotNull(hashSet1);
      
      hashSetArray0[4] = hashSet1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = hashSet1.add(sQLFeatureNotSupportedException0);
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertNotSame(hashSet1, hashSet0);
      assertFalse(hashSet1.isEmpty());
      assertEquals(1, hashSet1.size());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertTrue(boolean0);
      
      HashSet<SQLNonTransientException> hashSet2 = new HashSet<SQLNonTransientException>();
      assertTrue(hashSet2.equals((Object)hashSet0));
      assertFalse(hashSet2.equals((Object)hashSet1));
      assertEquals(0, hashSet2.size());
      assertTrue(hashSet2.isEmpty());
      assertNotNull(hashSet2);
      
      hashSetArray0[5] = hashSet2;
      HashSet<SQLNonTransientException>[] hashSetArray1 = Validate.noNullElements(hashSetArray0);
      assertSame(hashSetArray0, hashSetArray1);
      assertSame(hashSetArray1, hashSetArray0);
      assertEquals(6, hashSetArray0.length);
      assertEquals(6, hashSetArray1.length);
      assertNotNull(hashSetArray1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The validated state is false", "", 259, (Throwable) null);
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.printStackTrace();
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      
      sQLRecoverableException0.forEach(consumer0);
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("A-A-T{mVe:U", sQLRecoverableException0);
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = Validate.noNullElements(sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("A-A-T{mVe:U", (Throwable) null);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      int int0 = (-921);
      Comparable<SQLIntegrityConstraintViolationException> comparable0 = (Comparable<SQLIntegrityConstraintViolationException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(2976, (-921)).when(comparable0).compareTo(anyIterable());
      String string0 = "L&m";
      Validate.inclusiveBetween(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException0, comparable0, "L&m", (Object[]) hashSetArray1);
      assertSame(hashSetArray0, hashSetArray1);
      assertSame(hashSetArray1, hashSetArray0);
      assertEquals(6, hashSetArray0.length);
      assertEquals(6, hashSetArray1.length);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      DataTruncation dataTruncation0 = new DataTruncation(259, false, false, (-1), 259);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashSet<SQLNonTransientException>[] hashSetArray0 = (HashSet<SQLNonTransientException>[]) Array.newInstance(HashSet.class, 6);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>(259);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      hashSetArray0[0] = (HashSet<SQLNonTransientException>) linkedHashSet0;
      LinkedHashSet<SQLNonTransientException> linkedHashSet1 = new LinkedHashSet<SQLNonTransientException>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      
      hashSetArray0[1] = (HashSet<SQLNonTransientException>) linkedHashSet1;
      LinkedHashSet<SQLNonTransientException> linkedHashSet2 = new LinkedHashSet<SQLNonTransientException>(hashSetArray0[1]);
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet0));
      assertEquals(6, hashSetArray0.length);
      assertTrue(linkedHashSet2.isEmpty());
      assertEquals(0, linkedHashSet2.size());
      assertNotNull(linkedHashSet2);
      
      hashSetArray0[2] = (HashSet<SQLNonTransientException>) linkedHashSet2;
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      hashSetArray0[3] = hashSet0;
      HashSet<SQLNonTransientException> hashSet1 = new HashSet<SQLNonTransientException>();
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertNotNull(hashSet1);
      
      hashSetArray0[4] = hashSet1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = hashSet1.add(sQLFeatureNotSupportedException0);
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertNotSame(hashSet1, hashSet0);
      assertFalse(hashSet1.isEmpty());
      assertEquals(1, hashSet1.size());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertTrue(boolean0);
      
      HashSet<SQLNonTransientException> hashSet2 = new HashSet<SQLNonTransientException>();
      assertFalse(hashSet2.equals((Object)hashSet1));
      assertTrue(hashSet2.equals((Object)hashSet0));
      assertEquals(0, hashSet2.size());
      assertTrue(hashSet2.isEmpty());
      assertNotNull(hashSet2);
      
      hashSetArray0[5] = hashSet2;
      HashSet<SQLNonTransientException>[] hashSetArray1 = Validate.noNullElements(hashSetArray0);
      assertSame(hashSetArray0, hashSetArray1);
      assertSame(hashSetArray1, hashSetArray0);
      assertEquals(6, hashSetArray0.length);
      assertEquals(6, hashSetArray1.length);
      assertNotNull(hashSetArray1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The validated state is false", "", 259, (Throwable) null);
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.printStackTrace();
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      
      sQLRecoverableException0.forEach(consumer0);
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("A-A-T{mVe:U", sQLRecoverableException0);
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = Validate.noNullElements(sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException1.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("A-A-T{mVe:U", (Throwable) null);
      assertEquals("A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Comparable<SQLIntegrityConstraintViolationException> comparable0 = (Comparable<SQLIntegrityConstraintViolationException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(259, (-138)).when(comparable0).compareTo(anyIterable());
      Validate.inclusiveBetween(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException0, comparable0, "L&m", (Object[]) hashSetArray1);
      assertSame(hashSetArray0, hashSetArray1);
      assertSame(hashSetArray1, hashSetArray0);
      assertEquals(6, hashSetArray0.length);
      assertEquals(6, hashSetArray1.length);
      assertEquals("A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation(259, false, false, (-1), 259);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      Comparable<DataTruncation> comparable1 = (Comparable<DataTruncation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(110, 0).when(comparable1).compareTo(anyIterable());
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(dataTruncation0, dataTruncation0, comparable1, "L&m", (Object[]) hashSetArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // L&m
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashSet<SQLNonTransientException>[] hashSetArray0 = (HashSet<SQLNonTransientException>[]) Array.newInstance(HashSet.class, 6);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>(259);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      hashSetArray0[0] = (HashSet<SQLNonTransientException>) linkedHashSet0;
      LinkedHashSet<SQLNonTransientException> linkedHashSet1 = new LinkedHashSet<SQLNonTransientException>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      
      hashSetArray0[1] = (HashSet<SQLNonTransientException>) linkedHashSet1;
      LinkedHashSet<SQLNonTransientException> linkedHashSet2 = new LinkedHashSet<SQLNonTransientException>(hashSetArray0[1]);
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet1));
      assertEquals(6, hashSetArray0.length);
      assertEquals(0, linkedHashSet2.size());
      assertTrue(linkedHashSet2.isEmpty());
      assertNotNull(linkedHashSet2);
      
      hashSetArray0[2] = (HashSet<SQLNonTransientException>) linkedHashSet2;
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      hashSetArray0[3] = hashSet0;
      HashSet<SQLNonTransientException> hashSet1 = new HashSet<SQLNonTransientException>();
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertNotNull(hashSet1);
      
      hashSetArray0[4] = hashSet1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      HashSet<SQLNonTransientException> hashSet2 = new HashSet<SQLNonTransientException>();
      assertTrue(hashSet2.equals((Object)hashSet1));
      assertTrue(hashSet2.equals((Object)hashSet0));
      assertTrue(hashSet2.isEmpty());
      assertEquals(0, hashSet2.size());
      assertNotNull(hashSet2);
      
      hashSetArray0[5] = hashSet2;
      HashSet<SQLNonTransientException>[] hashSetArray1 = Validate.noNullElements(hashSetArray0);
      assertSame(hashSetArray0, hashSetArray1);
      assertSame(hashSetArray1, hashSetArray0);
      assertEquals(6, hashSetArray0.length);
      assertEquals(6, hashSetArray1.length);
      assertNotNull(hashSetArray1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The validated state is false", "", 259, (Throwable) null);
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.printStackTrace();
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      
      sQLRecoverableException0.forEach(consumer0);
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("A-A-T{mVe:U", sQLRecoverableException0);
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = Validate.noNullElements(sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("A-A-T{mVe:U", (Throwable) null);
      assertEquals("A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Comparable<SQLIntegrityConstraintViolationException> comparable0 = (Comparable<SQLIntegrityConstraintViolationException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(259, (-305)).when(comparable0).compareTo(anyIterable());
      Validate.inclusiveBetween(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException0, comparable0, "The validated state is false", (Object[]) hashSetArray1);
      assertSame(hashSetArray0, hashSetArray1);
      assertSame(hashSetArray1, hashSetArray0);
      assertEquals(6, hashSetArray0.length);
      assertEquals(6, hashSetArray1.length);
      assertEquals("A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation(259, false, false, (-1), 259);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      Comparable<DataTruncation> comparable1 = (Comparable<DataTruncation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(2146560792, 259).when(comparable1).compareTo(anyIterable());
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(dataTruncation0, dataTruncation0, comparable1, "The validated state is false", (Object[]) hashSetArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated state is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Validate.finite(0.0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Z]KaHJO=%O<", "");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Z]KaHJO=%O<", sQLTimeoutException0.getMessage());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Z]KaHJO=%O<", sQLTimeoutException0.getMessage());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLTimeoutException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLException sQLException0 = new SQLException(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Z]KaHJO=%O<", sQLTimeoutException0.getMessage());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLTimeoutException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: java.sql.SQLFeatureNotSupportedException: java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Z]KaHJO=%O<", sQLTimeoutException0.getMessage());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLTimeoutException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: java.sql.SQLFeatureNotSupportedException: java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLException: java.sql.SQLFeatureNotSupportedException: java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLException: java.sql.SQLFeatureNotSupportedException: java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", sQLFeatureNotSupportedException0);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Z]KaHJO=%O<", sQLTimeoutException0.getMessage());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLTimeoutException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNotNull(sQLTransactionRollbackException1);
      
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("Z]KaHJO=%O<", "", (-1108), sQLFeatureNotSupportedException0);
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Z]KaHJO=%O<", sQLTimeoutException0.getMessage());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLTimeoutException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTimeoutException: Z]KaHJO=%O<", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1108), sQLTransactionRollbackException2.getErrorCode());
      assertEquals("", sQLTransactionRollbackException2.getSQLState());
      assertEquals("Z]KaHJO=%O<", sQLTransactionRollbackException2.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Z]KaHJO=%O<", sQLTransactionRollbackException2.toString());
      assertNotNull(sQLTransactionRollbackException2);
      
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("The validated state is false", "");
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException2));
      assertEquals(0, sQLTransactionRollbackException3.getErrorCode());
      assertEquals("The validated state is false", sQLTransactionRollbackException3.getMessage());
      assertEquals("", sQLTransactionRollbackException3.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: The validated state is false", sQLTransactionRollbackException3.toString());
      assertNotNull(sQLTransactionRollbackException3);
      
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("");
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException1));
      assertEquals(0, sQLTransactionRollbackException4.getErrorCode());
      assertNull(sQLTransactionRollbackException4.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException4.toString());
      assertEquals("", sQLTransactionRollbackException4.getMessage());
      assertNotNull(sQLTransactionRollbackException4);
      
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException();
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException3));
      assertEquals(0, sQLTransactionRollbackException5.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException5.toString());
      assertNull(sQLTransactionRollbackException5.getSQLState());
      assertNull(sQLTransactionRollbackException5.getMessage());
      assertNotNull(sQLTransactionRollbackException5);
      
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("The validated state is false", sQLTransactionRollbackException3);
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException2));
      assertEquals("java.sql.SQLTransactionRollbackException: The validated state is false", sQLTransactionRollbackException6.toString());
      assertEquals("The validated state is false", sQLTransactionRollbackException6.getMessage());
      assertNull(sQLTransactionRollbackException6.getSQLState());
      assertEquals(0, sQLTransactionRollbackException6.getErrorCode());
      assertEquals(0, sQLTransactionRollbackException3.getErrorCode());
      assertEquals("The validated state is false", sQLTransactionRollbackException3.getMessage());
      assertEquals("", sQLTransactionRollbackException3.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: The validated state is false", sQLTransactionRollbackException3.toString());
      assertNotNull(sQLTransactionRollbackException6);
      
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("Z]KaHJO=%O<", "The validated state is false");
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException6));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException4));
      assertEquals(0, sQLTransactionRollbackException7.getErrorCode());
      assertEquals("Z]KaHJO=%O<", sQLTransactionRollbackException7.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Z]KaHJO=%O<", sQLTransactionRollbackException7.toString());
      assertEquals("The validated state is false", sQLTransactionRollbackException7.getSQLState());
      assertNotNull(sQLTransactionRollbackException7);
      
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray1 = Validate.noNullElements(sQLTransactionRollbackExceptionArray0, "Z]KaHJO=%O<", (Object[]) sQLTransactionRollbackExceptionArray0);
      assertSame(sQLTransactionRollbackExceptionArray0, sQLTransactionRollbackExceptionArray1);
      assertSame(sQLTransactionRollbackExceptionArray1, sQLTransactionRollbackExceptionArray0);
      assertEquals(8, sQLTransactionRollbackExceptionArray0.length);
      assertEquals(8, sQLTransactionRollbackExceptionArray1.length);
      assertNotNull(sQLTransactionRollbackExceptionArray1);
      
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween("The value %s is not in the specified inclusive range of %s to %s", "", (Comparable<String>) "The value %s is not in the specified inclusive range of %s to %s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value The value %s is not in the specified inclusive range of %s to %s is not in the specified inclusive range of The value %s is not in the specified inclusive range of %s to %s to 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Hhr;+e @=h(pM(q";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Hhr;+e @=h(pM(q");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains("Hhr;+e @=h(pM(q"));
      assertNotNull(vector0);
      
      int int0 = (-1369);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Hhr;+e @=h(pM(q";
      objectArray0[1] = (Object) vector0;
      // Undeclared exception!
      try { 
        Validate.validIndex((Collection<Object>) vector0, (-1369), "The validated collection contains null element at index: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "$-69";
      int int0 = 0;
      SQLDataException sQLDataException0 = new SQLDataException("_{xR!", "$-69", 0);
      assertEquals("$-69", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: _{xR!", sQLDataException0.toString());
      assertEquals("_{xR!", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("_{xR!", "_{xR!", sQLDataException0);
      assertEquals("$-69", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: _{xR!", sQLDataException0.toString());
      assertEquals("_{xR!", sQLDataException0.getMessage());
      assertEquals("_{xR!", sQLRecoverableException0.getMessage());
      assertEquals("_{xR!", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: _{xR!", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      sQLRecoverableException0.printStackTrace();
      assertEquals("$-69", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: _{xR!", sQLDataException0.toString());
      assertEquals("_{xR!", sQLDataException0.getMessage());
      assertEquals("_{xR!", sQLRecoverableException0.getMessage());
      assertEquals("_{xR!", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: _{xR!", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Comparable<SQLRecoverableException> comparable0 = (Comparable<SQLRecoverableException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-2549)).when(comparable0).compareTo(anyIterable());
      String string1 = "W";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(sQLRecoverableException0, sQLRecoverableException0, comparable0, "W", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // W
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashSet<SQLNonTransientException>[] hashSetArray0 = (HashSet<SQLNonTransientException>[]) Array.newInstance(HashSet.class, 6);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>(259);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      hashSetArray0[0] = (HashSet<SQLNonTransientException>) linkedHashSet0;
      LinkedHashSet<SQLNonTransientException> linkedHashSet1 = new LinkedHashSet<SQLNonTransientException>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      
      hashSetArray0[1] = (HashSet<SQLNonTransientException>) linkedHashSet1;
      LinkedHashSet<SQLNonTransientException> linkedHashSet2 = new LinkedHashSet<SQLNonTransientException>(hashSetArray0[1]);
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet0));
      assertEquals(6, hashSetArray0.length);
      assertEquals(0, linkedHashSet2.size());
      assertTrue(linkedHashSet2.isEmpty());
      assertNotNull(linkedHashSet2);
      
      hashSetArray0[2] = (HashSet<SQLNonTransientException>) linkedHashSet2;
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      hashSetArray0[3] = hashSet0;
      HashSet<SQLNonTransientException> hashSet1 = new HashSet<SQLNonTransientException>();
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertNotNull(hashSet1);
      
      hashSetArray0[4] = hashSet1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = hashSet1.add(sQLFeatureNotSupportedException0);
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertNotSame(hashSet1, hashSet0);
      assertFalse(hashSet1.isEmpty());
      assertEquals(1, hashSet1.size());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertTrue(boolean0);
      
      HashSet<SQLNonTransientException> hashSet2 = new HashSet<SQLNonTransientException>();
      assertFalse(hashSet2.equals((Object)hashSet1));
      assertTrue(hashSet2.equals((Object)hashSet0));
      assertEquals(0, hashSet2.size());
      assertTrue(hashSet2.isEmpty());
      assertNotNull(hashSet2);
      
      hashSetArray0[5] = hashSet2;
      HashSet<SQLNonTransientException>[] hashSetArray1 = Validate.noNullElements(hashSetArray0);
      assertSame(hashSetArray0, hashSetArray1);
      assertSame(hashSetArray1, hashSetArray0);
      assertEquals(6, hashSetArray0.length);
      assertEquals(6, hashSetArray1.length);
      assertNotNull(hashSetArray1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The validated state is false", "", 259, (Throwable) null);
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.printStackTrace();
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      
      sQLRecoverableException0.forEach(consumer0);
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("A-A-T{mVe:U", sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = Validate.noNullElements(sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLRecoverableException: The validated state is false", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("The validated state is false", sQLRecoverableException0.getMessage());
      assertEquals(259, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: A-A-T{mVe:U", sQLInvalidAuthorizationSpecException1.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("A-A-T{mVe:U", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("A-A-T{mVe:U", (Throwable) null);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Comparable<SQLIntegrityConstraintViolationException> comparable0 = (Comparable<SQLIntegrityConstraintViolationException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(259, (-99)).when(comparable0).compareTo(anyIterable());
      Validate.inclusiveBetween(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException0, comparable0, "L&m", (Object[]) hashSetArray1);
      assertSame(hashSetArray0, hashSetArray1);
      assertSame(hashSetArray1, hashSetArray0);
      assertEquals(6, hashSetArray0.length);
      assertEquals(6, hashSetArray1.length);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: A-A-T{mVe:U", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation(259, false, false, (-1), 259);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      Comparable<DataTruncation> comparable1 = (Comparable<DataTruncation>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-99)).when(comparable1).compareTo(anyIterable());
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(dataTruncation0, dataTruncation0, comparable1, "L&m", (Object[]) hashSetArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // L&m
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((SQLNonTransientException) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.offer((SQLNonTransientException) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        Validate.noNullElements(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated collection contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "AktNcl*epJec";
      Validate.notNaN((-2246.771142), "AktNcl*epJec", objectArray0);
      assertEquals(1, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(2905);
      assertEquals(2905, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(531);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(531, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(9, integerArray0.length);
      assertEquals(2905, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2130);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals(2130, (int)integer5);
      assertNotNull(integer5);
      
      Integer integer6 = new Integer(0);
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertEquals(0, (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1);
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertEquals(1, (int)integer7);
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer3));
      assertTrue(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer5));
      assertEquals(0, (int)integer8);
      assertNotNull(integer8);
      
      integerArray0[8] = integer8;
      // Undeclared exception!
      try { 
        Validate.noNullElements(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 5
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<SQLException, Integer> hashMap0 = new HashMap<SQLException, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "The value is invalid: %f";
      objectArray0[1] = (Object) hashMap0;
      objectArray0[2] = (Object) "The value is invalid: %f";
      objectArray0[3] = (Object) hashMap0;
      Object object0 = Validate.notNull(objectArray0[2]);
      assertEquals(8, objectArray0.length);
      assertEquals("The value is invalid: %f", object0);
      assertNotNull(object0);
      
      objectArray0[4] = (Object) "The value is invalid: %f";
      objectArray0[5] = (Object) "The value is invalid: %f";
      objectArray0[6] = (Object) "The value is invalid: %f";
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[7] = object1;
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "The value is invalid: %f", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Validate.finite(0.0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("The validated state is false", "Strings must not be null");
      assertEquals("Strings must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: The validated state is false", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("The validated state is false", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("CoBpxeI&6?%'H*;");
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("CoBpxeI&6?%'H*;", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: CoBpxeI&6?%'H*;", sQLTransactionRollbackException1.toString());
      assertNotNull(sQLTransactionRollbackException1);
      
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertNull(sQLTransactionRollbackException2.getMessage());
      assertNull(sQLTransactionRollbackException2.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException2.toString());
      assertEquals(0, sQLTransactionRollbackException2.getErrorCode());
      assertNotNull(sQLTransactionRollbackException2);
      
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("Strings must not be null", sQLTransactionRollbackException0);
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException2));
      assertEquals("Strings must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: The validated state is false", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("The validated state is false", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException3.getSQLState());
      assertEquals("Strings must not be null", sQLTransactionRollbackException3.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Strings must not be null", sQLTransactionRollbackException3.toString());
      assertEquals(0, sQLTransactionRollbackException3.getErrorCode());
      assertNotNull(sQLTransactionRollbackException3);
      
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("Z]KaHJO=%O<", "The validated state is false");
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException3));
      assertEquals(0, sQLTransactionRollbackException4.getErrorCode());
      assertEquals("The validated state is false", sQLTransactionRollbackException4.getSQLState());
      assertEquals("Z]KaHJO=%O<", sQLTransactionRollbackException4.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Z]KaHJO=%O<", sQLTransactionRollbackException4.toString());
      assertNotNull(sQLTransactionRollbackException4);
      
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException4;
      // Undeclared exception!
      try { 
        Validate.noNullElements(sQLTransactionRollbackExceptionArray0, "Z]KaHJO=%O<", (Object[]) sQLTransactionRollbackExceptionArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "{r(N3eb?:f!DB2*YF'";
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "o.PDtdB4#iN$4Dz", "{r(N3eb?:f!DB2*YF'");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {r(N3eb?:f!DB2*YF'
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "-}NPbglM0r!1";
      int int0 = 0;
      String string1 = Validate.validIndex("-}NPbglM0r!1", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("-}NPbglM0r!1", string1);
      assertNotNull(string1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-}NPbglM0r!1", "-}NPbglM0r!1", 0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("-}NPbglM0r!1", sQLRecoverableException0.getMessage());
      assertEquals("-}NPbglM0r!1", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: -}NPbglM0r!1", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("-}NPbglM0r!1", sQLRecoverableException0.getMessage());
      assertEquals("-}NPbglM0r!1", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: -}NPbglM0r!1", sQLRecoverableException0.toString());
      
      StackTraceElement[] stackTraceElementArray0 = sQLRecoverableException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("-}NPbglM0r!1", sQLRecoverableException0.getMessage());
      assertEquals("-}NPbglM0r!1", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: -}NPbglM0r!1", sQLRecoverableException0.toString());
      assertNotNull(stackTraceElementArray0);
      
      Comparable<SQLRecoverableException> comparable0 = (Comparable<SQLRecoverableException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(160, 0).when(comparable0).compareTo(anyIterable());
      doReturn("-}NPbglM0r!1").when(comparable0).toString();
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(sQLRecoverableException0, sQLRecoverableException0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value -}NPbglM0r!1 is not in the specified exclusive range of java.sql.SQLRecoverableException: -}NPbglM0r!1 to java.sql.SQLRecoverableException: -}NPbglM0r!1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween("The validated character sequence is empty", "mypg", (Comparable<String>) "mypg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value mypg is not in the specified exclusive range of The validated character sequence is empty to mypg
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "";
      int[] intArray0 = new int[3];
      intArray0[0] = (-2610);
      intArray0[1] = 2;
      intArray0[2] = 2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 2, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals(2, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertArrayEquals(new int[] {(-2610), 2, 2}, intArray0);
      assertNotNull(batchUpdateException0);
      
      Comparable<BatchUpdateException> comparable0 = (Comparable<BatchUpdateException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(comparable0).compareTo(anyIterable());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(batchUpdateException0, batchUpdateException0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value null is not in the specified inclusive range of java.sql.BatchUpdateException:  to java.sql.BatchUpdateException: 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5003);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = 'l';
      charArray0[2] = '`';
      charArray0[3] = 'Q';
      charArray0[4] = '\"';
      charArray0[5] = '4';
      charArray0[6] = '@';
      charArray0[7] = 'E';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertEquals("l", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertArrayEquals(new char[] {'s', 'l', '`', 'Q', '\"', '4', '@', 'E'}, charArray0);
      assertNotNull(charBuffer0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(8, charArray0.length);
      assertEquals("", stringWriter0.toString());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertEquals("l", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("", stringWriter1.toString());
      assertArrayEquals(new char[] {'s', 'l', '`', 'Q', '\"', '4', '@', 'E'}, charArray0);
      assertNotNull(stringWriter1);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(8, charArray0.length);
      assertEquals("", stringWriter0.toString());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertEquals("l", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertArrayEquals(new char[] {'s', 'l', '`', 'Q', '\"', '4', '@', 'E'}, charArray0);
      assertNotNull(stringBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) stringBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(8, charArray0.length);
      assertEquals("", stringWriter0.toString());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertEquals("l", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertArrayEquals(new char[] {'s', 'l', '`', 'Q', '\"', '4', '@', 'E'}, charArray0);
      assertNotNull(charBuffer1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 'l';
      objectArray0[1] = (Object) stringBuffer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringBuffer0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) stringBuffer0;
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(charBuffer1, charBuffer1, (Comparable<CharBuffer>) charBuffer0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(28L, 81L, 0L, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "^6N4#;";
      String string1 = Validate.validIndex("^6N4#;", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("^6N4#;", string1);
      assertNotNull(string1);
      
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        Validate.notEmpty(treeSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated collection is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Validate.isTrue(false, (String) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "Expected type: %s, actual: %s";
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "Expected type: %s, actual: %s", 2413.5760021);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      String string0 = "";
      // Undeclared exception!
      try { 
        Validate.notEmpty(sQLTransactionRollbackExceptionArray0, "", (Object[]) sQLTransactionRollbackExceptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      String string0 = "";
      Object[] objectArray0 = new Object[0];
      Validate.isAssignableFrom(class0, class0, "", objectArray0);
      assertEquals(0, objectArray0.length);
      
      double double0 = 498.4;
      Validate.notNaN(498.4);
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((SQLIntegrityConstraintViolationException) null, (SQLIntegrityConstraintViolationException) null, (Comparable<SQLIntegrityConstraintViolationException>) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertNotNull(enumSet0);
      
      EnumSet<Locale.Category> enumSet1 = Validate.notEmpty(enumSet0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(enumSet0, enumSet1);
      assertSame(enumSet1, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category0));
      assertNotNull(enumSet1);
      
      CharBuffer charBuffer0 = null;
      String string0 = "";
      Object[] objectArray0 = new Object[8];
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(locale_Category0));
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        EnumSet.copyOf((Collection<Locale.Category>) vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is empty
         //
         verifyException("java.util.EnumSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("5h/X76*@+9$3", "5h/X76*@+9$3");
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)Validate.notNull((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 5h/X76*@+9$3", sQLInvalidAuthorizationSpecException1.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.toString());
      
      sQLInvalidAuthorizationSpecException1.setNextException(sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 5h/X76*@+9$3", sQLInvalidAuthorizationSpecException1.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(";<Z(l[D2|G,DZAb[}", "", 1603);
      assertEquals(1603, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals(";<Z(l[D2|G,DZAb[}", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ;<Z(l[D2|G,DZAb[}", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, sQLInvalidAuthorizationSpecException1);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 5h/X76*@+9$3", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("5h/X76*@+9$3", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 5h/X76*@+9$3", sQLInvalidAuthorizationSpecException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNotNull(sQLTransactionRollbackException1);
      
      Comparable<SQLTransactionRollbackException> comparable0 = (Comparable<SQLTransactionRollbackException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(anyIterable());
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(sQLTransactionRollbackException0, sQLTransactionRollbackException1, comparable0, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "42p;r~9.4=L%`i";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "42p;r~9.4=L%`i";
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "42p;r~9.4=L%`i", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '`'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Validate validate0 = new Validate();
      assertNotNull(validate0);
      
      int int0 = (-3002);
      Object[] objectArray0 = new Object[3];
      Object object0 = Validate.notNull((Object) "");
      assertEquals("", object0);
      assertNotNull(object0);
      
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) validate0;
      objectArray0[2] = (Object) "";
      // Undeclared exception!
      try { 
        Validate.validIndex("", (-3002), "", objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Validate.finite(0.0);
      boolean boolean0 = false;
      String string0 = "";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Validate validate0 = new Validate();
      assertNotNull(validate0);
      
      // Undeclared exception!
      try { 
        Validate.validIndex("The value is invalid: %f", (-234));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated character sequence index is invalid: -234
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      Locale.Category[] locale_CategoryArray1 = Validate.noNullElements(locale_CategoryArray0);
      assertSame(locale_CategoryArray0, locale_CategoryArray1);
      assertSame(locale_CategoryArray1, locale_CategoryArray0);
      assertEquals(0, locale_CategoryArray0.length);
      assertEquals(0, locale_CategoryArray1.length);
      assertNotNull(locale_CategoryArray1);
      
      String string0 = "The value %s is not in the specified inclusive range of %s to %s";
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((-1856L), (-1856L), 0L, "The value %s is not in the specified inclusive range of %s to %s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value %s is not in the specified inclusive range of %s to %s
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(1469L, 1469L, 1469L, "The validated character sequence is blank");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notBlank((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated character sequence is blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = null;
      int int0 = 3;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        Validate.notNull(objectArray0[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(2490.3297787, 1465.9098349996084, 1465.9098349996084, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = (-499L);
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-1869L), (-499L), (-1869L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value -1869 is not in the specified exclusive range of -1869 to -499
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      String string0 = "The validated value is not a number";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(map0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) hashSet0;
      objectArray0[1] = (Object) "$M4,";
      objectArray0[2] = (Object) "$M4,";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "$M4,";
      // Undeclared exception!
      try { 
        Validate.notEmpty((Map<String, ClientInfoStatus>) null, "$M4,", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // $M4,
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validState(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The validated state is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 1523;
      CharBuffer charBuffer0 = CharBuffer.allocate(1523);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1523, charBuffer0.limit());
      assertEquals(1523, charBuffer0.capacity());
      assertEquals(1523, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1523, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      int int1 = 0;
      CharBuffer charBuffer1 = Validate.validIndex(charBuffer0, 0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1523, charBuffer0.limit());
      assertEquals(1523, charBuffer0.capacity());
      assertEquals(1523, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1523, charBuffer0.remaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(1523, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1523, charBuffer1.limit());
      assertEquals(1523, charBuffer1.length());
      assertEquals(1523, charBuffer1.capacity());
      assertNotNull(charBuffer1);
      
      Object[] objectArray0 = new Object[8];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("ik", (Throwable) null);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("ik", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ik", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("?s$z:iw!n>D", "ik", 0, sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("ik", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ik", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("ik", sQLWarning0.getSQLState());
      assertEquals("?s$z:iw!n>D", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ?s$z:iw!n>D", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLDataException sQLDataException0 = new SQLDataException("?s$z:iw!n>D", sQLWarning0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("ik", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ik", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("ik", sQLWarning0.getSQLState());
      assertEquals("?s$z:iw!n>D", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ?s$z:iw!n>D", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("?s$z:iw!n>D", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ?s$z:iw!n>D", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      SQLDataException sQLDataException1 = (SQLDataException)Validate.notNull((Object) sQLDataException0, (String) null, objectArray0);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertEquals(8, objectArray0.length);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("ik", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ik", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("ik", sQLWarning0.getSQLState());
      assertEquals("?s$z:iw!n>D", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ?s$z:iw!n>D", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("?s$z:iw!n>D", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ?s$z:iw!n>D", sQLDataException0.toString());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("?s$z:iw!n>D", sQLDataException1.getMessage());
      assertEquals("java.sql.SQLDataException: ?s$z:iw!n>D", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNotNull(sQLDataException1);
      
      objectArray0[0] = (Object) sQLDataException1;
      sQLDataException0.setNextException(sQLWarning0);
      assertSame(sQLDataException0, sQLDataException1);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("ik", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ik", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("ik", sQLWarning0.getSQLState());
      assertEquals("?s$z:iw!n>D", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ?s$z:iw!n>D", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("?s$z:iw!n>D", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ?s$z:iw!n>D", sQLDataException0.toString());
      
      SQLWarning sQLWarning1 = new SQLWarning("The validated map is empty");
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertNull(sQLWarning1.getSQLState());
      assertEquals("The validated map is empty", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning: The validated map is empty", sQLWarning1.toString());
      assertNotNull(sQLWarning1);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertNotSame(sQLWarning0, sQLWarning1);
      assertSame(sQLDataException0, sQLDataException1);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("ik", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ik", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("ik", sQLWarning0.getSQLState());
      assertEquals("?s$z:iw!n>D", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ?s$z:iw!n>D", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("?s$z:iw!n>D", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ?s$z:iw!n>D", sQLDataException0.toString());
      
      CharBuffer charBuffer2 = charBuffer0.put(0, 'Z');
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer0, charBuffer2);
      assertSame(charBuffer2, charBuffer1);
      assertSame(charBuffer2, charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1523, charBuffer0.limit());
      assertEquals(1523, charBuffer0.capacity());
      assertEquals(1523, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1523, charBuffer0.remaining());
      assertEquals(1523, charBuffer2.limit());
      assertTrue(charBuffer2.hasArray());
      assertFalse(charBuffer2.isDirect());
      assertEquals(1523, charBuffer2.remaining());
      assertEquals(1523, charBuffer2.capacity());
      assertEquals(0, charBuffer2.arrayOffset());
      assertTrue(charBuffer2.hasRemaining());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(1523, charBuffer2.length());
      assertEquals(0, charBuffer2.position());
      assertNotNull(charBuffer2);
      
      SQLWarning sQLWarning2 = (SQLWarning)Validate.notNull((Object) sQLWarning1);
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertFalse(sQLWarning2.equals((Object)sQLWarning0));
      assertSame(sQLWarning1, sQLWarning2);
      assertNotSame(sQLWarning1, sQLWarning0);
      assertSame(sQLWarning2, sQLWarning1);
      assertNotSame(sQLWarning2, sQLWarning0);
      assertNull(sQLWarning1.getSQLState());
      assertEquals("The validated map is empty", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning: The validated map is empty", sQLWarning1.toString());
      assertNull(sQLWarning2.getSQLState());
      assertEquals("The validated map is empty", sQLWarning2.getMessage());
      assertEquals(0, sQLWarning2.getErrorCode());
      assertEquals("java.sql.SQLWarning: The validated map is empty", sQLWarning2.toString());
      assertNotNull(sQLWarning2);
      
      sQLWarning0.printStackTrace();
      assertFalse(sQLWarning0.equals((Object)sQLWarning2));
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertNotSame(sQLWarning0, sQLWarning2);
      assertNotSame(sQLWarning0, sQLWarning1);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("ik", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ik", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("ik", sQLWarning0.getSQLState());
      assertEquals("?s$z:iw!n>D", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ?s$z:iw!n>D", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      objectArray0[1] = (Object) sQLWarning2;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) charBuffer1;
      objectArray0[6] = (Object) charBuffer0;
      SQLDataException sQLDataException2 = (SQLDataException)Validate.notNull(objectArray0[0], "The validated map is empty", objectArray0);
      assertSame(sQLDataException2, sQLDataException0);
      assertSame(sQLDataException2, sQLDataException1);
      assertEquals(8, objectArray0.length);
      assertEquals(0, sQLDataException2.getErrorCode());
      assertEquals("?s$z:iw!n>D", sQLDataException2.getMessage());
      assertEquals("java.sql.SQLDataException: ?s$z:iw!n>D", sQLDataException2.toString());
      assertNull(sQLDataException2.getSQLState());
      assertNotNull(sQLDataException2);
      
      objectArray0[7] = (Object) sQLDataException2;
      // Undeclared exception!
      try { 
        Validate.notBlank((String) null, ">?zVyCPfy)jK.l0kz", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // >?zVyCPfy)jK.l0kz
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = null;
      Validate.inclusiveBetween((-1.0), (-1.0), (-1.0), (String) null);
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(0.0, 0.0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value -1.0 is not in the specified exclusive range of 0.0 to 0.0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((EnumSet<Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Validate.notNaN(771.63);
      double double0 = (-1.0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(771.63, (-1.0), (-1.0), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(3023.34591956087, 0.0, (-1.0), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(1488.2315245150664, 1488.2315245150664, 1488.2315245150664);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 1488.2315245150664 is not in the specified exclusive range of 1488.2315245150664 to 1488.2315245150664
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Validate.finite((-573.519));
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("jkvnI", "", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("jkvnI", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: jkvnI", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = arrayDeque0.add(sQLClientInfoException0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("jkvnI", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: jkvnI", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(arrayDeque0.contains(sQLClientInfoException0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Validate.validIndex(arrayDeque0, (-968));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated collection index is invalid: -968
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = 3484L;
      long long1 = 1L;
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(3484L, 1L, 0L, "4=Zn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4=Zn
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      String string0 = "";
      int int0 = (-1601);
      String string1 = "xK0jV]b@]# ";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("xK0jV]b@]# ");
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: xK0jV]b@]# ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("xK0jV]b@]# ", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      String string2 = "The validated array contains null element at index: %d";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("The validated array contains null element at index: %d", sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: xK0jV]b@]# ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("xK0jV]b@]# ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("The validated array contains null element at index: %d", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: The validated array contains null element at index: %d", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLSyntaxErrorException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: xK0jV]b@]# ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("xK0jV]b@]# ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("The validated array contains null element at index: %d", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: The validated array contains null element at index: %d", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-1601), sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: xK0jV]b@]# ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("xK0jV]b@]# ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals((-1601), sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      boolean boolean0 = linkedList0.add(sQLTimeoutException0);
      assertEquals(1, linkedList0.size());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: xK0jV]b@]# ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("xK0jV]b@]# ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals((-1601), sQLTimeoutException0.getErrorCode());
      assertTrue(linkedList0.contains(sQLTimeoutException0));
      assertTrue(boolean0);
      
      ArrayDeque<SQLTimeoutException> arrayDeque1 = new ArrayDeque<SQLTimeoutException>();
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(arrayDeque1.contains(sQLTimeoutException0));
      assertNotNull(arrayDeque1);
      
      Comparable<ArrayDeque<SQLTimeoutException>> comparable0 = (Comparable<ArrayDeque<SQLTimeoutException>>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(anyCollection());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(arrayDeque0, arrayDeque1, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value null is not in the specified exclusive range of [] to []
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLInvalidAuthorizationSpecException0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTransientConnectionException: ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      Comparable<SQLTimeoutException> comparable0 = (Comparable<SQLTimeoutException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(anyIterable());
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) sQLInvalidAuthorizationSpecException0;
      Object object0 = Validate.notNull((Object) "", "]\t", objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) sQLTransientConnectionException0;
      objectArray0[4] = (Object) "]\t";
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(sQLTimeoutException0, sQLTimeoutException0, comparable0, "]\t", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ]\t
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "R]e*jxyw2Fjm";
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween("R]e*jxyw2Fjm", "R]e*jxyw2Fjm", (Comparable<String>) "R]e*jxyw2Fjm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value R]e*jxyw2Fjm is not in the specified exclusive range of R]e*jxyw2Fjm to R]e*jxyw2Fjm
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(sQLNonTransientException0, sQLNonTransientException0, (Comparable<SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Comparable<Stack<SQLNonTransientException>> comparable0 = (Comparable<Stack<SQLNonTransientException>>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(anyList());
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "*r*|?-y^%\"i_qoVG";
      objectArray0[1] = (Object) "*r*|?-y^%\"i_qoVG";
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((Stack<SQLNonTransientException>) null, (Stack<SQLNonTransientException>) null, comparable0, "*r*|?-y^%\"i_qoVG", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '\"'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "";
      Validate.isTrue(true, "", 249L);
      Validate.matchesPattern((CharSequence) "", "");
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      String string1 = "D[c7jhV4|4K_j+>I";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        Validate.notEmpty((Map<String, ClientInfoStatus>) hashMap0, "", (Object[]) sQLClientInfoExceptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Object[] objectArray0 = new Object[7];
      Object object0 = Validate.notNull((Object) locale_Category0, "]DpD)exn]:s+", objectArray0);
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(object0.equals((Object)locale_Category2));
      assertNotSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, object0);
      assertSame(locale_Category0, locale_Category3);
      assertSame(object0, locale_Category0);
      assertSame(object0, locale_Category3);
      assertSame(object0, locale_Category1);
      assertNotSame(object0, locale_Category2);
      assertEquals(7, objectArray0.length);
      assertEquals(Locale.Category.DISPLAY, object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale_Category0;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) locale_Category1;
      objectArray0[4] = (Object) locale_Category0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) locale_Category0;
      Locale.Category[] locale_CategoryArray1 = Validate.validIndex(locale_CategoryArray0, 0, "", objectArray0);
      assertSame(locale_CategoryArray0, locale_CategoryArray1);
      assertSame(locale_CategoryArray1, locale_CategoryArray0);
      assertEquals(4, locale_CategoryArray0.length);
      assertEquals(4, locale_CategoryArray1.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(locale_CategoryArray1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = '#';
      charArray0[2] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("v#-", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'v', '#', '-'}, charArray0);
      assertNotNull(charBuffer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '-';
      objectArray0[1] = (Object) "";
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) charBuffer0, "kS;9z>jY'zu}Wn;iB%", "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("The validated character sequence index is invalid: %d", "", "", 1);
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals("The validated character sequence index is invalid: %d.(:1)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("", stackTraceElement0.getFileName());
      assertEquals(1, stackTraceElement0.getLineNumber());
      assertEquals("The validated character sequence index is invalid: %d", stackTraceElement0.getClassName());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "fm\"VI;m&\"P", "The validated character sequence index is invalid: %d", 2059);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals(".fm\"VI;m&\"P(The validated character sequence index is invalid: %d:2059)", stackTraceElement1.toString());
      assertEquals("", stackTraceElement1.getClassName());
      assertEquals(2059, stackTraceElement1.getLineNumber());
      assertEquals("The validated character sequence index is invalid: %d", stackTraceElement1.getFileName());
      assertEquals("fm\"VI;m&\"P", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "tpY[!?Ie`Atpzf5Y", "", 2059);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertEquals("tpY[!?Ie`Atpzf5Y", stackTraceElement2.getMethodName());
      assertEquals("", stackTraceElement2.getClassName());
      assertEquals(".tpY[!?Ie`Atpzf5Y(:2059)", stackTraceElement2.toString());
      assertEquals(2059, stackTraceElement2.getLineNumber());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("", stackTraceElement2.getFileName());
      assertNotNull(stackTraceElement2);
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "", "", 0);
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertEquals(".(:0)", stackTraceElement3.toString());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals(0, stackTraceElement3.getLineNumber());
      assertEquals("", stackTraceElement3.getFileName());
      assertEquals("", stackTraceElement3.getMethodName());
      assertEquals("", stackTraceElement3.getClassName());
      assertNotNull(stackTraceElement3);
      
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      assertEquals(4, stackTraceElementArray0.length);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = Validate.noNullElements(sQLFeatureNotSupportedException0);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException1.toString());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertNull(sQLFeatureNotSupportedException1.getMessage());
      assertNotNull(sQLFeatureNotSupportedException1);
      
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-739.863020480397), (-1.0), (-739.863020480397), "='");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ='
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TreeSet<SQLWarning>[] treeSetArray0 = (TreeSet<SQLWarning>[]) Array.newInstance(TreeSet.class, 9);
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      assertNotNull(treeSet0);
      
      treeSetArray0[0] = treeSet0;
      TreeSet<SQLWarning> treeSet1 = new TreeSet<SQLWarning>();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      
      treeSetArray0[1] = treeSet1;
      TreeSet<SQLWarning> treeSet2 = new TreeSet<SQLWarning>();
      assertTrue(treeSet2.equals((Object)treeSet0));
      assertTrue(treeSet2.equals((Object)treeSet1));
      assertNotNull(treeSet2);
      
      treeSetArray0[2] = treeSet2;
      TreeSet<SQLWarning> treeSet3 = new TreeSet<SQLWarning>();
      assertTrue(treeSet3.equals((Object)treeSet0));
      assertTrue(treeSet3.equals((Object)treeSet2));
      assertTrue(treeSet3.equals((Object)treeSet1));
      assertNotNull(treeSet3);
      
      treeSetArray0[3] = treeSet3;
      TreeSet<SQLWarning> treeSet4 = new TreeSet<SQLWarning>();
      assertTrue(treeSet4.equals((Object)treeSet1));
      assertTrue(treeSet4.equals((Object)treeSet3));
      assertTrue(treeSet4.equals((Object)treeSet2));
      assertTrue(treeSet4.equals((Object)treeSet0));
      assertNotNull(treeSet4);
      
      treeSetArray0[4] = treeSet4;
      TreeSet<SQLWarning> treeSet5 = new TreeSet<SQLWarning>();
      assertTrue(treeSet5.equals((Object)treeSet4));
      assertTrue(treeSet5.equals((Object)treeSet0));
      assertTrue(treeSet5.equals((Object)treeSet1));
      assertTrue(treeSet5.equals((Object)treeSet3));
      assertTrue(treeSet5.equals((Object)treeSet2));
      assertNotNull(treeSet5);
      
      treeSetArray0[5] = treeSet5;
      TreeSet<SQLWarning> treeSet6 = new TreeSet<SQLWarning>();
      assertTrue(treeSet6.equals((Object)treeSet1));
      assertTrue(treeSet6.equals((Object)treeSet0));
      assertTrue(treeSet6.equals((Object)treeSet4));
      assertTrue(treeSet6.equals((Object)treeSet5));
      assertTrue(treeSet6.equals((Object)treeSet2));
      assertTrue(treeSet6.equals((Object)treeSet3));
      assertNotNull(treeSet6);
      
      treeSetArray0[6] = treeSet6;
      TreeSet<SQLWarning> treeSet7 = new TreeSet<SQLWarning>();
      assertTrue(treeSet7.equals((Object)treeSet4));
      assertTrue(treeSet7.equals((Object)treeSet0));
      assertTrue(treeSet7.equals((Object)treeSet2));
      assertTrue(treeSet7.equals((Object)treeSet6));
      assertTrue(treeSet7.equals((Object)treeSet3));
      assertTrue(treeSet7.equals((Object)treeSet5));
      assertTrue(treeSet7.equals((Object)treeSet1));
      assertNotNull(treeSet7);
      
      treeSetArray0[7] = treeSet7;
      TreeSet<SQLWarning> treeSet8 = new TreeSet<SQLWarning>();
      assertTrue(treeSet8.equals((Object)treeSet7));
      assertTrue(treeSet8.equals((Object)treeSet3));
      assertTrue(treeSet8.equals((Object)treeSet6));
      assertTrue(treeSet8.equals((Object)treeSet2));
      assertTrue(treeSet8.equals((Object)treeSet5));
      assertTrue(treeSet8.equals((Object)treeSet4));
      assertTrue(treeSet8.equals((Object)treeSet0));
      assertTrue(treeSet8.equals((Object)treeSet1));
      assertNotNull(treeSet8);
      
      treeSetArray0[8] = treeSet8;
      TreeSet<SQLWarning>[] treeSetArray1 = Validate.validIndex(treeSetArray0, 0);
      assertSame(treeSetArray0, treeSetArray1);
      assertSame(treeSetArray1, treeSetArray0);
      assertEquals(9, treeSetArray0.length);
      assertEquals(9, treeSetArray1.length);
      assertNotNull(treeSetArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<SQLNonTransientException, SQLTransientException>[] hashMapArray0 = (HashMap<SQLNonTransientException, SQLTransientException>[]) Array.newInstance(HashMap.class, 3);
      HashMap<SQLFeatureNotSupportedException, SQLTimeoutException> hashMap0 = new HashMap<SQLFeatureNotSupportedException, SQLTimeoutException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Validate.notEmpty((Map<SQLFeatureNotSupportedException, SQLTimeoutException>) hashMap0, (String) null, (Object[]) hashMapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "", 4707L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 587;
      String string0 = "null";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "null";
      objectArray0[1] = (Object) "null";
      objectArray0[2] = (Object) "null";
      objectArray0[3] = (Object) "null";
      objectArray0[4] = (Object) "The validated character sequence is blank";
      // Undeclared exception!
      try { 
        Validate.validIndex("The validated character sequence is blank", 587, "null", objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, ",DjTHaUA7h*", 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ,DjTHaUA7h*
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Cannot assign a %s to a %s";
      objectArray0[1] = (Object) "Cannot assign a %s to a %s";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      String string0 = "0vsB{A`_Oqwj&[p&";
      SQLWarning sQLWarning0 = new SQLWarning("The validated array index is invalid: %d", "0vsB{A`_Oqwj&[p&");
      assertEquals("0vsB{A`_Oqwj&[p&", sQLWarning0.getSQLState());
      assertEquals("The validated array index is invalid: %d", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLWarning0);
      assertEquals("0vsB{A`_Oqwj&[p&", sQLWarning0.getSQLState());
      assertEquals("The validated array index is invalid: %d", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: The validated array index is invalid: %d", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Throwable[] throwableArray0 = sQLWarning0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertEquals("0vsB{A`_Oqwj&[p&", sQLWarning0.getSQLState());
      assertEquals("The validated array index is invalid: %d", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(throwableArray0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string1 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertFalse(string1.equals((Object)string0));
      assertEquals("0vsB{A`_Oqwj&[p&", sQLWarning0.getSQLState());
      assertEquals("The validated array index is invalid: %d", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: The validated array index is invalid: %d", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", string1);
      assertNotNull(string1);
      
      sQLFeatureNotSupportedException0.forEach(consumer1);
      assertEquals("0vsB{A`_Oqwj&[p&", sQLWarning0.getSQLState());
      assertEquals("The validated array index is invalid: %d", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: The validated array index is invalid: %d", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLFeatureNotSupportedException0.getMessage());
      
      sQLWarning0.forEach(consumer0);
      assertEquals("0vsB{A`_Oqwj&[p&", sQLWarning0.getSQLState());
      assertEquals("The validated array index is invalid: %d", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      Throwable[] throwableArray1 = sQLWarning0.getSuppressed();
      assertSame(throwableArray1, throwableArray0);
      assertEquals(0, throwableArray1.length);
      assertEquals("0vsB{A`_Oqwj&[p&", sQLWarning0.getSQLState());
      assertEquals("The validated array index is invalid: %d", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(throwableArray1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)Validate.notNull((Object) sQLFeatureNotSupportedException0, "Cannot assign a %s to a %s", objectArray0);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertEquals(4, objectArray0.length);
      assertEquals("0vsB{A`_Oqwj&[p&", sQLWarning0.getSQLState());
      assertEquals("The validated array index is invalid: %d", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: The validated array index is invalid: %d", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: The validated array index is invalid: %d", sQLFeatureNotSupportedException1.toString());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLFeatureNotSupportedException1.getMessage());
      assertNotNull(sQLFeatureNotSupportedException1);
      
      StackTraceElement[] stackTraceElementArray0 = sQLFeatureNotSupportedException0.getStackTrace();
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals("0vsB{A`_Oqwj&[p&", sQLWarning0.getSQLState());
      assertEquals("The validated array index is invalid: %d", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: The validated array index is invalid: %d", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: The validated array index is invalid: %d", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(stackTraceElementArray0);
      
      objectArray0[3] = (Object) sQLFeatureNotSupportedException1;
      // Undeclared exception!
      try { 
        Validate.validState(false, "Cannot assign a %s to a %s", objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot assign a Cannot assign a %s to a %s to a Cannot assign a %s to a %s
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "@3Y'K>", sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("@3Y'K>", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException1;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "@3Y'K>", 55);
      assertEquals(55, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("@3Y'K>", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("^Y(JMB!ml$H[;{", "^Y(JMB!ml$H[;{", sQLNonTransientExceptionArray0[0]);
      assertEquals(6, sQLNonTransientExceptionArray0.length);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: ^Y(JMB!ml$H[;{", sQLNonTransientException0.toString());
      assertEquals("^Y(JMB!ml$H[;{", sQLNonTransientException0.getMessage());
      assertEquals("^Y(JMB!ml$H[;{", sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      sQLNonTransientExceptionArray0[3] = sQLNonTransientException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLNonTransientExceptionArray0[0]);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertEquals(6, sQLNonTransientExceptionArray0.length);
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLSyntaxErrorException1.getMessage());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLInvalidAuthorizationSpecException", sQLSyntaxErrorException1.toString());
      assertNotNull(sQLSyntaxErrorException1);
      
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLSyntaxErrorException1;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", "", 3949, sQLNonTransientExceptionArray0[0]);
      assertFalse(sQLNonTransientException1.equals((Object)sQLNonTransientException0));
      assertEquals(6, sQLNonTransientExceptionArray0.length);
      assertEquals("", sQLNonTransientException1.getMessage());
      assertEquals(3949, sQLNonTransientException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException1.toString());
      assertEquals("", sQLNonTransientException1.getSQLState());
      assertNotNull(sQLNonTransientException1);
      
      sQLNonTransientExceptionArray0[5] = sQLNonTransientException1;
      // Undeclared exception!
      try { 
        Validate.validIndex(sQLNonTransientExceptionArray0, 55, "^Y(JMB!ml$H[;{", (Object[]) sQLNonTransientExceptionArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // ^Y(JMB!ml$H[;{
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Validate validate0 = new Validate();
      assertNotNull(validate0);
      
      LinkedHashSet<Integer>[] linkedHashSetArray0 = (LinkedHashSet<Integer>[]) Array.newInstance(LinkedHashSet.class, 1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      linkedHashSetArray0[0] = linkedHashSet0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Validate.validIndex(linkedHashSetArray0, 2, "F", (Object[]) linkedHashSetArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // F
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        Validate.notEmpty(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated collection is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Validate.inclusiveBetween(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Validate.finite((-343.26351));
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {0, 1, 0}, intArray0);
      assertNotNull(batchUpdateException0);
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", 0, intArray0, batchUpdateException0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertEquals(3, intArray0.length);
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException1.getSQLState());
      assertEquals("", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertArrayEquals(new int[] {0, 1, 0}, intArray0);
      assertNotNull(batchUpdateException1);
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(batchUpdateException1);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertEquals(3, intArray0.length);
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException1.getSQLState());
      assertEquals("", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException2.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: ", batchUpdateException2.toString());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertNull(batchUpdateException2.getSQLState());
      assertArrayEquals(new int[] {0, 1, 0}, intArray0);
      assertNotNull(batchUpdateException2);
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("The validated character sequence is blank", (String) null, 0, intArray0, batchUpdateException1);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertEquals(3, intArray0.length);
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException1.getSQLState());
      assertEquals("", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: The validated character sequence is blank", batchUpdateException3.toString());
      assertEquals("The validated character sequence is blank", batchUpdateException3.getMessage());
      assertNull(batchUpdateException3.getSQLState());
      assertArrayEquals(new int[] {0, 1, 0}, intArray0);
      assertNotNull(batchUpdateException3);
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      // Undeclared exception!
      try { 
        Validate.validIndex(batchUpdateExceptionArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated array index is invalid: -1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Validate validate0 = new Validate();
      assertNotNull(validate0);
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(dataTruncationArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashSet<SQLTransientException>[] hashSetArray0 = (HashSet<SQLTransientException>[]) Array.newInstance(HashSet.class, 8);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      hashSetArray0[0] = (HashSet<SQLTransientException>) linkedHashSet0;
      LinkedHashSet<SQLTransientException> linkedHashSet1 = new LinkedHashSet<SQLTransientException>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertNotNull(linkedHashSet1);
      
      hashSetArray0[1] = (HashSet<SQLTransientException>) linkedHashSet1;
      LinkedHashSet<SQLTransientException> linkedHashSet2 = new LinkedHashSet<SQLTransientException>();
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet1));
      assertEquals(0, linkedHashSet2.size());
      assertTrue(linkedHashSet2.isEmpty());
      assertNotNull(linkedHashSet2);
      
      hashSetArray0[2] = (HashSet<SQLTransientException>) linkedHashSet2;
      LinkedHashSet<SQLTransientException> linkedHashSet3 = new LinkedHashSet<SQLTransientException>();
      assertTrue(linkedHashSet3.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet3.equals((Object)linkedHashSet2));
      assertTrue(linkedHashSet3.equals((Object)linkedHashSet1));
      assertEquals(0, linkedHashSet3.size());
      assertTrue(linkedHashSet3.isEmpty());
      assertNotNull(linkedHashSet3);
      
      hashSetArray0[3] = (HashSet<SQLTransientException>) linkedHashSet3;
      LinkedHashSet<SQLTransientException> linkedHashSet4 = new LinkedHashSet<SQLTransientException>();
      assertTrue(linkedHashSet4.equals((Object)linkedHashSet3));
      assertTrue(linkedHashSet4.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet4.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet4.equals((Object)linkedHashSet2));
      assertEquals(0, linkedHashSet4.size());
      assertTrue(linkedHashSet4.isEmpty());
      assertNotNull(linkedHashSet4);
      
      hashSetArray0[4] = (HashSet<SQLTransientException>) linkedHashSet4;
      LinkedHashSet<SQLTransientException> linkedHashSet5 = new LinkedHashSet<SQLTransientException>();
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet4));
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet2));
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet3));
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet5.isEmpty());
      assertEquals(0, linkedHashSet5.size());
      assertNotNull(linkedHashSet5);
      
      hashSetArray0[5] = (HashSet<SQLTransientException>) linkedHashSet5;
      HashSet<SQLTransientException> hashSet0 = new HashSet<SQLTransientException>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      hashSetArray0[6] = hashSet0;
      LinkedHashSet<SQLTransientException> linkedHashSet6 = new LinkedHashSet<SQLTransientException>();
      assertTrue(linkedHashSet6.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet6.equals((Object)linkedHashSet3));
      assertTrue(linkedHashSet6.equals((Object)linkedHashSet5));
      assertTrue(linkedHashSet6.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet6.equals((Object)linkedHashSet4));
      assertTrue(linkedHashSet6.equals((Object)linkedHashSet2));
      assertEquals(0, linkedHashSet6.size());
      assertTrue(linkedHashSet6.isEmpty());
      assertNotNull(linkedHashSet6);
      
      hashSetArray0[7] = (HashSet<SQLTransientException>) linkedHashSet6;
      // Undeclared exception!
      try { 
        Validate.validIndex(hashSetArray0, (-4343));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated array index is invalid: -4343
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.remove((Object) "The validated character sequence index is invalid: %d");
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.validIndex(linkedList0, 1251, "The validated character sequence index is invalid: %d", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%d'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = arrayDeque0.add(sQLFeatureNotSupportedException0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertTrue(arrayDeque0.contains(sQLFeatureNotSupportedException0));
      assertTrue(boolean0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("");
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException1.toString());
      assertNotNull(sQLFeatureNotSupportedException1);
      
      SQLException sQLException0 = new SQLException("The validated collection contains null element at index: %d", "OLn2", sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("The validated collection contains null element at index: %d", sQLException0.getMessage());
      assertEquals("OLn2", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: The validated collection contains null element at index: %d", sQLException0.toString());
      assertNotNull(sQLException0);
      
      sQLFeatureNotSupportedException1.setNextException(sQLException0);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("The validated collection contains null element at index: %d", sQLException0.getMessage());
      assertEquals("OLn2", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: The validated collection contains null element at index: %d", sQLException0.toString());
      
      boolean boolean1 = arrayDeque0.add(sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException1.toString());
      assertTrue(arrayDeque0.contains(sQLFeatureNotSupportedException0));
      assertTrue(boolean1);
      
      boolean boolean2 = arrayDeque0.add(sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, arrayDeque0.size());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException1.toString());
      assertTrue(arrayDeque0.contains(sQLFeatureNotSupportedException0));
      assertTrue(boolean2);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = arrayDeque0.pop();
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertNotSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertNull(sQLFeatureNotSupportedException2.getSQLState());
      assertNull(sQLFeatureNotSupportedException2.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException2.toString());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertFalse(arrayDeque0.contains(sQLFeatureNotSupportedException2));
      assertTrue(arrayDeque0.contains(sQLFeatureNotSupportedException1));
      assertNotNull(sQLFeatureNotSupportedException2);
      
      int int0 = 0;
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque1 = Validate.validIndex(arrayDeque0, 0);
      assertSame(arrayDeque0, arrayDeque1);
      assertSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque1.isEmpty());
      assertEquals(2, arrayDeque1.size());
      assertFalse(arrayDeque0.contains(sQLFeatureNotSupportedException2));
      assertTrue(arrayDeque0.contains(sQLFeatureNotSupportedException1));
      assertTrue(arrayDeque1.contains(sQLFeatureNotSupportedException1));
      assertFalse(arrayDeque1.contains(sQLFeatureNotSupportedException2));
      assertNotNull(arrayDeque1);
      
      Class<Integer> class0 = Integer.class;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot assign a java.sql.SQLIntegrityConstraintViolationException to a java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) " eChY";
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) " eChY";
      objectArray0[6] = (Object) " eChY";
      LinkedList linkedList1 = (LinkedList)Validate.notNull(objectArray0[4]);
      assertEquals(9, objectArray0.length);
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      objectArray0[7] = (Object) linkedList1;
      LinkedList linkedList2 = (LinkedList)Validate.notNull((Object) linkedList1);
      assertSame(linkedList1, linkedList2);
      assertSame(linkedList2, linkedList1);
      assertEquals(9, objectArray0.length);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      objectArray0[8] = (Object) linkedList2;
      // Undeclared exception!
      try { 
        Validate.notEmpty(linkedList0, " eChY", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  eChY
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot assign a java.sql.SQLSyntaxErrorException to a java.sql.SQLRecoverableException
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(0.0, 0.0, 0.0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "hy?;";
      objectArray0[1] = (Object) "hy?;";
      String string0 = Validate.notBlank("hy?;", "hy?;", objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals("hy?;", string0);
      assertNotNull(string0);
      
      Validate validate0 = new Validate();
      assertNotNull(validate0);
      
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[0] = object0;
      objectArray1[1] = (Object) linkedHashSet0;
      objectArray1[2] = (Object) "hy?;";
      Object object1 = Validate.notNull(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      objectArray1[3] = object1;
      Validate.notNaN((-2097.0), "oIi&gHU", objectArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotSame(objectArray0, objectArray1);
      assertEquals(2, objectArray0.length);
      
      objectArray1[4] = (Object) validate0;
      // Undeclared exception!
      try { 
        Validate.validIndex(linkedHashSet0, 0, "hy?;", objectArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // hy?;
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Object> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = "";
      String string1 = "RKjX@f";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "");
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "RKjX@f", 1750, sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(1750, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLRecoverableException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(1750, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Function<SQLNonTransientException, SQLInvalidAuthorizationSpecException> function0 = (Function<SQLNonTransientException, SQLInvalidAuthorizationSpecException>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyIterable());
      Object object0 = hashMap0.computeIfAbsent(sQLFeatureNotSupportedException0, function0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(1750, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated map is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "0=cc.uXW%k+9Hn";
      Validate.validState(true, "0=cc.uXW%k+9Hn", objectArray0);
      assertEquals(1, objectArray0.length);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        Validate.notEmpty("", "0=cc.uXW%k+9Hn", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'k'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = Validate.notEmpty("Z<G/2:w:t&oMI");
      assertEquals("Z<G/2:w:t&oMI", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(3238.0, 884.616591467, (-836.5653706239027), "The validated collection is empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated collection is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Validate.inclusiveBetween((-3399.89231), 0.0, (-3399.89231), "");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      String string0 = Validate.notNull("", "", objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      Validate.isAssignableFrom(class0, class0, "AZ!To", objectArray0);
      assertEquals(4, objectArray0.length);
      
      Validate.validState(true, "", objectArray0);
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(0.0, 0.0, 1.0, "AZ!To");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // AZ!To
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Za=;&vAn-B%iu";
      objectArray0[1] = (Object) "Za=;&vAn-B%iu";
      objectArray0[2] = (Object) "Za=;&vAn-B%iu";
      objectArray0[3] = (Object) "Za=;&vAn-B%iu";
      objectArray0[4] = (Object) "Za=;&vAn-B%iu";
      // Undeclared exception!
      try { 
        Validate.validState(false, "Za=;&vAn-B%iu", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'i'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2610);
      intArray0[1] = 2;
      intArray0[2] = 2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 2, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("", batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {(-2610), 2, 2}, intArray0);
      assertNotNull(batchUpdateException0);
      
      Comparable<BatchUpdateException> comparable0 = (Comparable<BatchUpdateException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparable0).compareTo(anyIterable());
      Validate.inclusiveBetween(batchUpdateException0, batchUpdateException0, comparable0);
      assertEquals(3, intArray0.length);
      assertEquals(2, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("", batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {(-2610), 2, 2}, intArray0);
      
      Validate.notNaN((double) (-2610));
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(batchUpdateException0));
      assertNotNull(linkedList0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) (-2610);
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) comparable0;
      objectArray0[5] = (Object) 2;
      objectArray0[6] = (Object) (-2610);
      // Undeclared exception!
      try { 
        Validate.notEmpty(linkedList0, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long long0 = (-2618L);
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((-1270L), (-2618L), (-1270L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value -1270 is not in the specified inclusive range of -1270 to -2618
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected type: java.lang.String, actual: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object[] objectArray0 = null;
      String string0 = Validate.notNull("?#6Ds82##1c{", "", (Object[]) null);
      assertEquals("?#6Ds82##1c{", string0);
      assertNotNull(string0);
      
      Validate.notNaN(2304.3930534584892);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = null;
      int int0 = 3684;
      // Undeclared exception!
      try { 
        Validate.validIndex((SQLSyntaxErrorException[]) null, 3684);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(1581L, 1581L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 1 is not in the specified inclusive range of 1581 to 1581
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected type: java.sql.SQLNonTransientException, actual: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((CharBuffer[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "C{,mVT";
      objectArray0[1] = (Object) "jNI56~M+3";
      String string0 = Validate.notEmpty("C{,mVT", "jNI56~M+3", objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals("C{,mVT", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = ']';
      charArray0[2] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charBuffer0.limit());
      assertEquals("P]1", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertArrayEquals(new char[] {'P', ']', '1'}, charArray0);
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        Validate.validIndex(charBuffer0, 985, "jNI56~M+3", objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // jNI56~M+3
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = '.';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.remaining());
      assertEquals("f.", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertArrayEquals(new char[] {'f', '.'}, charArray0);
      assertNotNull(charBuffer0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) 'f';
      objectArray0[2] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) charBuffer0, "", (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Validate.notBlank("{`kff~I{3eL");
      assertEquals("{`kff~I{3eL", string0);
      assertNotNull(string0);
      
      String string1 = Validate.notEmpty("9&OW");
      assertFalse(string1.equals((Object)string0));
      assertEquals("9&OW", string1);
      assertNotNull(string1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertNotNull(enumSet0);
      
      EnumSet<Locale.Category> enumSet1 = Validate.notEmpty(enumSet0, "{`kff~I{3eL", (Object[]) null);
      assertSame(enumSet0, enumSet1);
      assertSame(enumSet1, enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category0));
      assertNotNull(enumSet1);
      
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "{`kff~I{3eL", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {`kff~I{3eL
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'd';
      charArray0[2] = 'b';
      charArray0[3] = 'H';
      charArray0[4] = '1';
      charArray0[5] = 'O';
      charArray0[6] = 'y';
      charArray0[7] = '_';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      String string0 = "The validated character sequence is empty";
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) charBuffer0, "The validated character sequence is empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string 2dbH1Oy_ does not match the pattern The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Stack<SQLSyntaxErrorException>[] stackArray0 = (Stack<SQLSyntaxErrorException>[]) Array.newInstance(Stack.class, 1);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      stackArray0[0] = stack0;
      String string0 = null;
      int int0 = (-322);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, (-322));
      sQLSyntaxErrorException0.fillInStackTrace();
      int[] intArray0 = new int[3];
      intArray0[0] = (-322);
      intArray0[1] = (-322);
      intArray0[2] = (-322);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLSyntaxErrorException0);
      batchUpdateException0.fillInStackTrace();
      sQLSyntaxErrorException0.getSuppressed();
      sQLSyntaxErrorException0.addSuppressed(batchUpdateException0);
      stack0.add(sQLSyntaxErrorException0);
      Validate.notEmpty(stackArray0, "", (Object[]) stackArray0);
      // Undeclared exception!
      try { 
        Validate.validIndex((CharSequence) null, (-1905));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Validate.isTrue(true, "", objectArray0);
      Class<DataTruncation> class0 = DataTruncation.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) class0, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = (-3155.6449778);
      double double1 = 1.0;
      String string0 = "Q=}3dPt:<ZM<";
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-3155.6449778), (-3155.6449778), 1.0, "Q=}3dPt:<ZM<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Q=}3dPt:<ZM<
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(1588.66, 1163.4276645763673, 1588.66);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 1588.66 is not in the specified inclusive range of 1588.66 to 1163.4276645763673
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(',');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) stringBuffer0, "mypg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string , does not match the pattern mypg
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.printStackTrace();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) sQLTransactionRollbackException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", (-715));
      sQLTransactionRollbackException0.addSuppressed(sQLNonTransientConnectionException0);
      objectArray0[1] = (Object) sQLTransactionRollbackException0;
      objectArray0[2] = (Object) "";
      Validate.noNullElements(sQLTransactionRollbackException0, "", objectArray0);
      // Undeclared exception!
      try { 
        Validate.validIndex("", 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated character sequence index is invalid: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) class0;
      Integer integer0 = new Integer(0);
      Object object0 = Validate.notNull((Object) integer0, (String) null, objectArray0);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) class0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Validate.notNaN(0.0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Validate.isTrue(true, "", objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Validate.finite(1.0);
      Validate.validState(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        Validate.notEmpty((String) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validState(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The validated state is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException[] sQLRecoverableExceptionArray1 = Validate.notEmpty(sQLRecoverableExceptionArray0);
      assertEquals(1, sQLRecoverableExceptionArray1.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-1.0), (-6402.7668771205), 0.0, "}S5RJ/0]h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // }S5RJ/0]h
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<DataTruncation, SQLSyntaxErrorException> hashMap0 = new HashMap<DataTruncation, SQLSyntaxErrorException>();
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, 957, (-1));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      hashMap0.put(dataTruncation0, sQLSyntaxErrorException0);
      Validate.notEmpty(hashMap0);
      LinkedList<SQLTransientConnectionException>[] linkedListArray0 = (LinkedList<SQLTransientConnectionException>[]) Array.newInstance(LinkedList.class, 7);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLTransientConnectionException> linkedList1 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLTransientConnectionException> linkedList2 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[2] = linkedList2;
      LinkedList<SQLTransientConnectionException> linkedList3 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[3] = linkedList3;
      LinkedList<SQLTransientConnectionException> linkedList4 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[4] = linkedList4;
      LinkedList<SQLTransientConnectionException> linkedList5 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[5] = linkedList5;
      LinkedList<SQLTransientConnectionException> linkedList6 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[6] = linkedList6;
      LinkedList<SQLTransientConnectionException>[] linkedListArray1 = Validate.noNullElements(linkedListArray0, "", (Object[]) linkedListArray0);
      assertEquals(7, linkedListArray1.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "37E^bT~_Vkp";
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "37E^bT~_Vkp";
      Validate.finite(0.0, "37E^bT~_Vkp", objectArray0);
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(1001.0, (-1.0), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 0.0 is not in the specified inclusive range of 1001.0 to -1.0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      String string0 = "e*3AX8YI.NOZ+a!Z\"\"";
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 3443;
      intArray0[2] = 0;
      intArray0[3] = (-1208);
      intArray0[4] = (-2056);
      intArray0[5] = 1160;
      intArray0[6] = (-1363);
      intArray0[7] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("e*3AX8YI.NOZ+a!Z\"\"", intArray0);
      Object object0 = Validate.notNull((Object) batchUpdateException0, "", objectArray0);
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      batchUpdateException0.getNextException();
      String string1 = "";
      // Undeclared exception!
      try { 
        Validate.notNull((Object) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-1106.851), (-1141.1), 860.7624981);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 860.7624981 is not in the specified exclusive range of -1106.851 to -1141.1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Validate.isTrue(true, "", (-1L));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Loz&");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("The value %s is not in the specified inclusive range of %s to %s", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-949), true, true, 440, (-949), sQLIntegrityConstraintViolationException0);
      Object object1 = Validate.notNull((Object) dataTruncation0, "Loz&", objectArray0);
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "The value %s is not in the specified inclusive range of %s to %s";
      objectArray0[6] = (Object) "";
      // Undeclared exception!
      try { 
        Validate.notBlank("", "The value %s is not in the specified inclusive range of %s to %s", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value  is not in the specified inclusive range of java.lang.Object@179451bd to 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Validate.finite((-1.0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "";
      Validate.inclusiveBetween(0L, 3238L, 0L, "");
      Validate.inclusiveBetween((-2326L), 0L, 0L);
      Validate.inclusiveBetween((double) (-2326L), (double) 3238L, (double) 0L);
      // Undeclared exception!
      try { 
        Validate.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated expression is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "u>9bvm?hVc$q";
      Validate.notNull((Object) "u>9bvm?hVc$q", "uU=d", objectArray0);
      objectArray0[1] = (Object) "u>9bvm?hVc$q";
      objectArray0[2] = (Object) "u>9bvm?hVc$q";
      Validate.notNaN(0.0, "u>9bvm?hVc$q", objectArray0);
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(0L, 0L, 1028L, "uU=d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // uU=d
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated expression is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      enumSet0.add(locale_Category1);
      Validate.validIndex(enumSet1, 0);
      Validate.isTrue(true);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, DataTruncation> hashMap0 = new HashMap<SQLNonTransientConnectionException, DataTruncation>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("M77Vh7vR2ag8aZ", "z5o!/", 1009);
      hashMap0.put(sQLNonTransientConnectionException0, (DataTruncation) null);
      hashMap0.clone();
      Validate.notEmpty(hashMap0);
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      // Undeclared exception!
      try { 
        Validate.validIndex(linkedList0, (-287));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated collection index is invalid: -287
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(3110.5143470563, 2022.1818526392453, (-4066.78));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value -4066.78 is not in the specified exclusive range of 3110.5143470563 to 2022.1818526392453
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        Validate.notEmpty((SQLIntegrityConstraintViolationException[]) null, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(sQLNonTransientExceptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      // Undeclared exception!
      try { 
        Validate.notBlank("", "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Validate.notBlank("$}");
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "$}", (String) null, "5Dlwg0q\u0001yD?4!^", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Validate validate0 = new Validate();
      // Undeclared exception!
      try { 
        Validate.notBlank((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated character sequence is blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(0L, 1117L, 1117L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 1117 is not in the specified exclusive range of 0 to 1117
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(1129L, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 0 is not in the specified exclusive range of 1129 to 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException>[] arrayDequeArray0 = (ArrayDeque<SQLTransactionRollbackException>[]) Array.newInstance(ArrayDeque.class, 7);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = new ArrayDeque<SQLTransactionRollbackException>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLTransactionRollbackException> arrayDeque2 = new ArrayDeque<SQLTransactionRollbackException>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLTransactionRollbackException> arrayDeque3 = new ArrayDeque<SQLTransactionRollbackException>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<SQLTransactionRollbackException> arrayDeque4 = new ArrayDeque<SQLTransactionRollbackException>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<SQLTransactionRollbackException> arrayDeque5 = new ArrayDeque<SQLTransactionRollbackException>();
      arrayDequeArray0[5] = arrayDeque5;
      ArrayDeque<SQLTransactionRollbackException> arrayDeque6 = new ArrayDeque<SQLTransactionRollbackException>();
      arrayDequeArray0[6] = arrayDeque6;
      ArrayDeque<SQLTransactionRollbackException>[] arrayDequeArray1 = Validate.noNullElements(arrayDequeArray0);
      assertEquals(7, arrayDequeArray1.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      ServiceLoader<SQLClientInfoException> serviceLoader0 = ServiceLoader.load(class0);
      Comparable<ServiceLoader<SQLClientInfoException>> comparable0 = (Comparable<ServiceLoader<SQLClientInfoException>>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparable0).compareTo(anyIterable());
      Consumer<SQLException> consumer0 = (Consumer<SQLException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.spliterator();
      serviceLoader0.forEach(consumer0);
      serviceLoader0.iterator();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Validate.inclusiveBetween(serviceLoader0, (ServiceLoader<SQLClientInfoException>) null, comparable0, (String) null, objectArray0);
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      String string0 = "The value %s is not in the specified exclusive range of %s to %s";
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1, "The value %s is not in the specified exclusive range of %s to %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = null;
      String string0 = "H-=CfLS@B]E1ojn0J@K";
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLNonTransientConnectionException[]) null, "H-=CfLS@B]E1ojn0J@K", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 0;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "rS<8`Ni@";
      objectArray0[1] = (Object) "rS<8`Ni@";
      objectArray0[2] = (Object) "rS<8`Ni@";
      objectArray0[3] = (Object) "rS<8`Ni@";
      objectArray0[4] = (Object) "rS<8`Ni@";
      Validate.validIndex("rS<8`Ni@", 0, "rS<8`Ni@", objectArray0);
      Class<String> class0 = String.class;
      Class<DataTruncation> class1 = DataTruncation.class;
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Validate validate0 = new Validate();
      Class<CharBuffer> class0 = CharBuffer.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "fs9&mcY'E)*}$sMtU";
      objectArray0[1] = (Object) "fs9&mcY'E)*}$sMtU";
      objectArray0[2] = (Object) "fs9&mcY'E)*}$sMtU";
      objectArray0[3] = (Object) validate0;
      objectArray0[4] = (Object) "fs9&mcY'E)*}$sMtU";
      Validate.isAssignableFrom(class0, class0, "fs9&mcY'E)*}$sMtU", objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Validate.isTrue(true, "+<oZ$", 0.0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      Comparable<SQLNonTransientConnectionException> comparable0 = (Comparable<SQLNonTransientConnectionException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparable0).compareTo(anyIterable());
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) sQLNonTransientConnectionException0;
      Validate.inclusiveBetween(sQLNonTransientConnectionException0, sQLNonTransientConnectionException0, comparable0, "", objectArray0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      String string0 = "gACN";
      SQLException sQLException0 = new SQLException("The validated character sequence is blank", "The validated character sequence is blank", (-3842));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("gACN", "gACN", 0, sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("gACN", "gACN", 0, sQLTransactionRollbackException0);
      sQLTransientConnectionException0.printStackTrace();
      Validate.isInstanceOf((Class<?>) class0, (Object) sQLTransientConnectionException0);
      long long0 = 1711L;
      long long1 = 0L;
      Validate.inclusiveBetween((long) (-3842), 1711L, 0L);
      String string1 = "";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) sQLException0;
      objectArray0[1] = (Object) sQLTransactionRollbackException0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) class0;
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween("gACN", "", (Comparable<String>) "gACN", "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLException[]) null, "(*l'xOss.]>V,P~ayrm", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Validate validate0 = new Validate();
      String string0 = "Yc";
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "Yc", 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Yc
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<BatchUpdateException, Integer> hashMap0 = null;
      // Undeclared exception!
      try { 
        Validate.notEmpty((HashMap<BatchUpdateException, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated map is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<SQLIntegrityConstraintViolationException, SQLClientInfoException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLClientInfoException>();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) hashMap0;
      Object object0 = Validate.notNull((Object) hashMap0);
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "o.PDtdB4#iN$4Dz", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // o.PDtdB4#iN$4Dz
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "0";
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "0", (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Arguments cannot both be null";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Arguments cannot both be null";
      objectArray0[3] = (Object) "Arguments cannot both be null";
      objectArray0[4] = (Object) "Arguments cannot both be null";
      objectArray0[5] = (Object) "Arguments cannot both be null";
      Validate.finite(1.0, "Arguments cannot both be null", objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, (String) null, hashMap0, sQLClientInfoException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLClientInfoException1);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashMap0, sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLClientInfoException2);
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected type: java.nio.CharBuffer, actual: java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "\"Luz";
      objectArray0[1] = (Object) "\"Luz";
      objectArray0[2] = (Object) "\"Luz";
      objectArray0[3] = (Object) "\"Luz";
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) "\"Luz";
      objectArray0[6] = (Object) charBuffer0;
      String string0 = "The validated character sequence is blank";
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "The validatecharacter sTquence is blank";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "The validatecharacter sTquence is blank", 2);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("The validated character sequence is blank", (String) null, 2, intArray0, sQLNonTransientConnectionException0);
      Object object0 = Validate.notNull((Object) batchUpdateException0, "The type must not be null", objectArray0);
      objectArray0[7] = object0;
      Object object1 = Validate.notNull(objectArray0[4], "The value is invalid: %f", objectArray0);
      objectArray0[8] = object1;
      CharSequence charSequence0 = Validate.notEmpty((CharSequence) charBuffer0, "\"Luz", objectArray0);
      // Undeclared exception!
      try { 
        Validate.matchesPattern(charSequence0, "<p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string \u0000\u0000 does not match the pattern <p
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[2];
      Validate.notEmpty(sQLWarningArray0);
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(3287L, 3287L, 3287L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 3287 is not in the specified exclusive range of 3287 to 3287
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "M*kL$7R)W'fo1|)zo";
      Object[] objectArray0 = new Object[0];
      Validate.notNaN((-5943.9), "M*kL$7R)W'fo1|)zo", objectArray0);
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(1L, 10L, 10L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 10 is not in the specified exclusive range of 1 to 10
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "M('x#!-o>xT'=X";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M('x#!-o>xT'=X");
      objectArray0[1] = (Object) "M('x#!-o>xT'=X";
      objectArray0[2] = (Object) "M('x#!-o>xT'=X";
      objectArray0[3] = (Object) "M('x#!-o>xT'=X";
      objectArray0[4] = (Object) "M('x#!-o>xT'=X";
      Validate.notBlank("M('x#!-o>xT'=X", "M('x#!-o>xT'=X", objectArray0);
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-1.0), 1.0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 1.0 is not in the specified exclusive range of -1.0 to 1.0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Validate.notEmpty("LAF<P|Y]");
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-1856L), (-1302L), (-3842L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value -3842 is not in the specified exclusive range of -1856 to -1302
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Validate.isTrue(true, (String) null, 0L);
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((double) 0L, 0.0, 330.34, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HashMap<SQLTransactionRollbackException, SQLClientInfoException> hashMap0 = new HashMap<SQLTransactionRollbackException, SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j4$ rpd");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      sQLClientInfoException0.printStackTrace(printWriter0);
      hashMap0.put((SQLTransactionRollbackException) null, sQLClientInfoException0);
      hashMap0.put((SQLTransactionRollbackException) null, sQLClientInfoException0);
      HashMap<SQLTransactionRollbackException, SQLClientInfoException> hashMap1 = new HashMap<SQLTransactionRollbackException, SQLClientInfoException>(hashMap0);
      Validate.notEmpty(hashMap1);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot assign a java.lang.String to a java.sql.SQLNonTransientConnectionException
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      Validate.isAssignableFrom(class0, class1);
      Validate.isTrue(true, "", (-1.0));
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(2299.9172626839, (-460.7), (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value -1.0 is not in the specified inclusive range of 2299.9172626839 to -460.7
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      Validate.isAssignableFrom(class0, class1);
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(2299.9172626839, (-460.7), (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value -1.0 is not in the specified inclusive range of 2299.9172626839 to -460.7
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) treeSet0;
      linkedList0.removeAll(treeSet0);
      // Undeclared exception!
      try { 
        Validate.validIndex(linkedList0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated collection index is invalid: 3
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = 0;
      Validate.validIndex("-}NPbglM0r!1", 0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparable<SQLRecoverableException> comparable0 = (Comparable<SQLRecoverableException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Validate.inclusiveBetween((long) 0, 0L, (long) 0);
      Validate.inclusiveBetween((double) 0L, 0.0, (double) 0L);
      Validate.inclusiveBetween(0L, 0L, (long) 0, "-}NPbglM0r!1");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      Validate.noNullElements(sQLSyntaxErrorExceptionArray0);
      Validate.validState(true);
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLIntegrityConstraintViolationException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-1664.296672), (-1664.296672), 0.0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("The validated collection index is invalid: %d", "The validated collection index is invalid: %d");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("The validated collection index is invalid: %d", "The validated collection index is invalid: %d", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      Validate.validIndex(sQLFeatureNotSupportedExceptionArray0, 0);
      Object[] objectArray0 = new Object[8];
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException3.forEach(consumer0);
      objectArray0[0] = (Object) sQLFeatureNotSupportedException1;
      objectArray0[1] = (Object) sQLFeatureNotSupportedException1;
      objectArray0[2] = (Object) sQLFeatureNotSupportedException3;
      objectArray0[3] = (Object) sQLFeatureNotSupportedException3;
      objectArray0[4] = (Object) sQLFeatureNotSupportedException0;
      objectArray0[5] = (Object) sQLFeatureNotSupportedException3;
      objectArray0[6] = (Object) sQLFeatureNotSupportedException2;
      objectArray0[7] = (Object) sQLFeatureNotSupportedException3;
      Validate.isTrue(true, "The validated collection index is invalid: %d", objectArray0);
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "The validated collection index is invalid: %d", "The validated character sequence is blank", "kS;9z>jY'zu}Wn;iB%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }
}
