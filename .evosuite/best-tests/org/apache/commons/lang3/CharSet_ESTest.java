/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 01:48:30 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.CharRange;
import org.apache.commons.lang3.CharSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharSet_ESTest extends CharSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CharSet charSet0 = CharSet.getInstance(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(charSet0);
      
      CharSet charSet1 = CharSet.getInstance(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(charSet1);
      assertSame(charSet1, charSet0);
      
      CharRange[] charRangeArray0 = charSet0.ASCII_ALPHA_LOWER.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(1, charRangeArray0.length);
      assertNotNull(charRangeArray0);
      assertSame(charSet0, charSet1);
      
      boolean boolean0 = charSet1.ASCII_ALPHA.contains('}');
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      assertSame(charSet1, charSet0);
      
      CharRange[] charRangeArray1 = charSet1.ASCII_NUMERIC.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(1, charRangeArray1.length);
      assertFalse(charRangeArray1.equals((Object)charRangeArray0));
      assertNotNull(charRangeArray1);
      assertSame(charSet1, charSet0);
      assertNotSame(charRangeArray1, charRangeArray0);
      
      boolean boolean1 = charSet1.contains('}');
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertSame(charSet1, charSet0);
      
      CharRange[] charRangeArray2 = charSet1.ASCII_ALPHA.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(2, charRangeArray2.length);
      assertFalse(charRangeArray2.equals((Object)charRangeArray1));
      assertFalse(charRangeArray2.equals((Object)charRangeArray0));
      assertNotNull(charRangeArray2);
      assertSame(charSet1, charSet0);
      assertNotSame(charRangeArray2, charRangeArray1);
      assertNotSame(charRangeArray2, charRangeArray0);
      
      CharRange[] charRangeArray3 = charSet0.ASCII_ALPHA_LOWER.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(1, charRangeArray3.length);
      assertFalse(charRangeArray3.equals((Object)charRangeArray1));
      assertFalse(charRangeArray3.equals((Object)charRangeArray2));
      assertFalse(charRangeArray3.equals((Object)charRangeArray0));
      assertNotNull(charRangeArray3);
      assertSame(charSet0, charSet1);
      assertNotSame(charRangeArray3, charRangeArray1);
      assertNotSame(charRangeArray3, charRangeArray2);
      assertNotSame(charRangeArray3, charRangeArray0);
      
      CharRange[] charRangeArray4 = charSet0.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(0, charRangeArray4.length);
      assertFalse(charRangeArray4.equals((Object)charRangeArray3));
      assertFalse(charRangeArray4.equals((Object)charRangeArray2));
      assertFalse(charRangeArray4.equals((Object)charRangeArray0));
      assertFalse(charRangeArray4.equals((Object)charRangeArray1));
      assertNotNull(charRangeArray4);
      assertSame(charSet0, charSet1);
      assertNotSame(charRangeArray4, charRangeArray3);
      assertNotSame(charRangeArray4, charRangeArray2);
      assertNotSame(charRangeArray4, charRangeArray0);
      assertNotSame(charRangeArray4, charRangeArray1);
      
      String string0 = charSet1.toString();
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertSame(charSet1, charSet0);
      
      CharSet charSet2 = CharSet.getInstance(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(charSet2);
      assertSame(charSet2, charSet1);
      assertSame(charSet2, charSet0);
      
      CharRange[] charRangeArray5 = charSet2.EMPTY.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(0, charRangeArray5.length);
      assertFalse(charRangeArray5.equals((Object)charRangeArray4));
      assertFalse(charRangeArray5.equals((Object)charRangeArray1));
      assertFalse(charRangeArray5.equals((Object)charRangeArray0));
      assertFalse(charRangeArray5.equals((Object)charRangeArray2));
      assertFalse(charRangeArray5.equals((Object)charRangeArray3));
      assertNotNull(charRangeArray5);
      assertSame(charSet2, charSet1);
      assertSame(charSet2, charSet0);
      assertNotSame(charRangeArray5, charRangeArray4);
      assertNotSame(charRangeArray5, charRangeArray1);
      assertNotSame(charRangeArray5, charRangeArray0);
      assertNotSame(charRangeArray5, charRangeArray2);
      assertNotSame(charRangeArray5, charRangeArray3);
      
      boolean boolean2 = charSet1.contains('}');
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(charSet1, charSet0);
      assertSame(charSet1, charSet2);
      
      boolean boolean3 = charSet0.contains('}');
      assertFalse(boolean3);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertSame(charSet0, charSet2);
      assertSame(charSet0, charSet1);
      
      boolean boolean4 = charSet1.EMPTY.contains('}');
      assertFalse(boolean4);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertSame(charSet1, charSet0);
      assertSame(charSet1, charSet2);
      
      boolean boolean5 = charSet1.contains('P');
      assertFalse(boolean5);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertSame(charSet1, charSet0);
      assertSame(charSet1, charSet2);
      
      charSet1.add("");
      assertEquals(1, stringArray0.length);
      assertSame(charSet1, charSet0);
      assertSame(charSet1, charSet2);
      
      CharRange[] charRangeArray6 = charSet2.ASCII_ALPHA_LOWER.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(1, charRangeArray6.length);
      assertFalse(charRangeArray6.equals((Object)charRangeArray3));
      assertFalse(charRangeArray6.equals((Object)charRangeArray4));
      assertFalse(charRangeArray6.equals((Object)charRangeArray1));
      assertFalse(charRangeArray6.equals((Object)charRangeArray2));
      assertFalse(charRangeArray6.equals((Object)charRangeArray5));
      assertFalse(charRangeArray6.equals((Object)charRangeArray0));
      assertNotNull(charRangeArray6);
      assertNotSame(charRangeArray6, charRangeArray3);
      assertNotSame(charRangeArray6, charRangeArray4);
      assertNotSame(charRangeArray6, charRangeArray1);
      assertNotSame(charRangeArray6, charRangeArray2);
      assertNotSame(charRangeArray6, charRangeArray5);
      assertNotSame(charRangeArray6, charRangeArray0);
      assertSame(charSet2, charSet1);
      assertSame(charSet2, charSet0);
      
      boolean boolean6 = charSet0.equals(charSet1);
      assertTrue(boolean6);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertSame(charSet0, charSet2);
      assertSame(charSet0, charSet1);
      assertSame(charSet1, charSet0);
      assertSame(charSet1, charSet2);
      
      CharRange[] charRangeArray7 = charSet1.ASCII_ALPHA_LOWER.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(1, charRangeArray7.length);
      assertFalse(charRangeArray7.equals((Object)charRangeArray0));
      assertFalse(charRangeArray7.equals((Object)charRangeArray6));
      assertFalse(charRangeArray7.equals((Object)charRangeArray2));
      assertFalse(charRangeArray7.equals((Object)charRangeArray5));
      assertFalse(charRangeArray7.equals((Object)charRangeArray1));
      assertFalse(charRangeArray7.equals((Object)charRangeArray4));
      assertFalse(charRangeArray7.equals((Object)charRangeArray3));
      assertNotNull(charRangeArray7);
      assertSame(charSet1, charSet0);
      assertSame(charSet1, charSet2);
      assertNotSame(charRangeArray7, charRangeArray0);
      assertNotSame(charRangeArray7, charRangeArray6);
      assertNotSame(charRangeArray7, charRangeArray2);
      assertNotSame(charRangeArray7, charRangeArray5);
      assertNotSame(charRangeArray7, charRangeArray1);
      assertNotSame(charRangeArray7, charRangeArray4);
      assertNotSame(charRangeArray7, charRangeArray3);
      
      String string1 = charSet0.toString();
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(charSet0, charSet2);
      assertSame(charSet0, charSet1);
      
      CharRange[] charRangeArray8 = charSet1.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(0, charRangeArray8.length);
      assertFalse(charRangeArray8.equals((Object)charRangeArray7));
      assertFalse(charRangeArray8.equals((Object)charRangeArray3));
      assertFalse(charRangeArray8.equals((Object)charRangeArray2));
      assertFalse(charRangeArray8.equals((Object)charRangeArray0));
      assertFalse(charRangeArray8.equals((Object)charRangeArray1));
      assertFalse(charRangeArray8.equals((Object)charRangeArray5));
      assertFalse(charRangeArray8.equals((Object)charRangeArray4));
      assertFalse(charRangeArray8.equals((Object)charRangeArray6));
      assertNotNull(charRangeArray8);
      assertSame(charSet1, charSet0);
      assertSame(charSet1, charSet2);
      assertNotSame(charRangeArray8, charRangeArray7);
      assertNotSame(charRangeArray8, charRangeArray3);
      assertNotSame(charRangeArray8, charRangeArray2);
      assertNotSame(charRangeArray8, charRangeArray0);
      assertNotSame(charRangeArray8, charRangeArray1);
      assertNotSame(charRangeArray8, charRangeArray5);
      assertNotSame(charRangeArray8, charRangeArray4);
      assertNotSame(charRangeArray8, charRangeArray6);
      
      charSet0.hashCode();
      assertEquals(1, stringArray0.length);
      assertSame(charSet0, charSet2);
      assertSame(charSet0, charSet1);
      
      CharRange[] charRangeArray9 = charSet1.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(0, charRangeArray9.length);
      assertFalse(charRangeArray9.equals((Object)charRangeArray7));
      assertFalse(charRangeArray9.equals((Object)charRangeArray0));
      assertFalse(charRangeArray9.equals((Object)charRangeArray2));
      assertFalse(charRangeArray9.equals((Object)charRangeArray5));
      assertFalse(charRangeArray9.equals((Object)charRangeArray1));
      assertFalse(charRangeArray9.equals((Object)charRangeArray4));
      assertFalse(charRangeArray9.equals((Object)charRangeArray6));
      assertFalse(charRangeArray9.equals((Object)charRangeArray8));
      assertFalse(charRangeArray9.equals((Object)charRangeArray3));
      assertNotNull(charRangeArray9);
      assertSame(charSet1, charSet0);
      assertSame(charSet1, charSet2);
      assertNotSame(charRangeArray9, charRangeArray7);
      assertNotSame(charRangeArray9, charRangeArray0);
      assertNotSame(charRangeArray9, charRangeArray2);
      assertNotSame(charRangeArray9, charRangeArray5);
      assertNotSame(charRangeArray9, charRangeArray1);
      assertNotSame(charRangeArray9, charRangeArray4);
      assertNotSame(charRangeArray9, charRangeArray6);
      assertNotSame(charRangeArray9, charRangeArray8);
      assertNotSame(charRangeArray9, charRangeArray3);
      
      boolean boolean7 = charSet0.contains('}');
      assertFalse(boolean7);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean6);
      assertSame(charSet0, charSet2);
      assertSame(charSet0, charSet1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharSet charSet0 = CharSet.ASCII_ALPHA_UPPER;
      assertNotNull(charSet0);
      
      CharSet charSet1 = CharSet.getInstance((String[]) null);
      assertNull(charSet1);
      
      boolean boolean0 = charSet0.contains('f');
      assertFalse(boolean0);
      
      charSet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "a-z";
      CharSet charSet0 = CharSet.getInstance(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(charSet0);
      
      charSet0.ASCII_ALPHA_UPPER.add("");
      assertEquals(1, stringArray0.length);
      
      String string0 = charSet0.toString();
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      CharSet charSet1 = CharSet.getInstance(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(charSet1);
      assertSame(charSet1, charSet0);
      
      charSet0.ASCII_NUMERIC.add("a-z");
      assertEquals(1, stringArray0.length);
      assertSame(charSet0, charSet1);
      
      CharSet charSet2 = CharSet.getInstance(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(charSet2);
      assertSame(charSet2, charSet0);
      assertSame(charSet2, charSet1);
      
      boolean boolean0 = charSet2.ASCII_NUMERIC.contains('o');
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      assertSame(charSet2, charSet0);
      assertSame(charSet2, charSet1);
      
      CharRange[] charRangeArray0 = charSet2.ASCII_ALPHA_UPPER.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(1, charRangeArray0.length);
      assertNotNull(charRangeArray0);
      assertSame(charSet2, charSet0);
      assertSame(charSet2, charSet1);
      
      CharRange[] charRangeArray1 = charSet0.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(1, charRangeArray1.length);
      assertFalse(charRangeArray1.equals((Object)charRangeArray0));
      assertNotNull(charRangeArray1);
      assertSame(charSet0, charSet2);
      assertSame(charSet0, charSet1);
      assertNotSame(charRangeArray1, charRangeArray0);
      
      charSet2.ASCII_ALPHA_LOWER.add("");
      assertEquals(1, stringArray0.length);
      assertSame(charSet2, charSet0);
      assertSame(charSet2, charSet1);
      
      CharSet charSet3 = CharSet.getInstance(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(charSet3);
      assertSame(charSet3, charSet1);
      assertSame(charSet3, charSet0);
      assertSame(charSet3, charSet2);
      
      CharRange[] charRangeArray2 = charSet3.ASCII_ALPHA.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(2, charRangeArray2.length);
      assertFalse(charRangeArray2.equals((Object)charRangeArray1));
      assertFalse(charRangeArray2.equals((Object)charRangeArray0));
      assertNotNull(charRangeArray2);
      assertSame(charSet3, charSet1);
      assertSame(charSet3, charSet0);
      assertSame(charSet3, charSet2);
      assertNotSame(charRangeArray2, charRangeArray1);
      assertNotSame(charRangeArray2, charRangeArray0);
      
      charSet1.add("G;3b9~{I4!&/b");
      assertEquals(1, stringArray0.length);
      assertSame(charSet1, charSet3);
      assertSame(charSet1, charSet0);
      assertSame(charSet1, charSet2);
      
      String string1 = charSet2.toString();
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(charSet2, charSet0);
      assertSame(charSet2, charSet3);
      assertSame(charSet2, charSet1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = charSet2.equals(object0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertSame(charSet2, charSet0);
      assertSame(charSet2, charSet3);
      assertSame(charSet2, charSet1);
      
      boolean boolean2 = charSet2.contains('1');
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertSame(charSet2, charSet0);
      assertSame(charSet2, charSet3);
      assertSame(charSet2, charSet1);
      
      boolean boolean3 = charSet1.contains('1');
      assertFalse(boolean3);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertSame(charSet1, charSet3);
      assertSame(charSet1, charSet0);
      assertSame(charSet1, charSet2);
      
      charSet0.add("g?u");
      assertEquals(1, stringArray0.length);
      assertSame(charSet0, charSet2);
      assertSame(charSet0, charSet3);
      assertSame(charSet0, charSet1);
      
      String string2 = charSet1.toString();
      assertEquals(1, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertSame(charSet1, charSet3);
      assertSame(charSet1, charSet0);
      assertSame(charSet1, charSet2);
      
      boolean boolean4 = charSet2.contains('1');
      assertFalse(boolean4);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertSame(charSet2, charSet0);
      assertSame(charSet2, charSet3);
      assertSame(charSet2, charSet1);
      
      CharRange[] charRangeArray3 = charSet1.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(16, charRangeArray3.length);
      assertFalse(charRangeArray3.equals((Object)charRangeArray1));
      assertFalse(charRangeArray3.equals((Object)charRangeArray0));
      assertFalse(charRangeArray3.equals((Object)charRangeArray2));
      assertNotNull(charRangeArray3);
      assertSame(charSet1, charSet3);
      assertSame(charSet1, charSet0);
      assertSame(charSet1, charSet2);
      assertNotSame(charRangeArray3, charRangeArray1);
      assertNotSame(charRangeArray3, charRangeArray0);
      assertNotSame(charRangeArray3, charRangeArray2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "jF dFgG";
      CharSet charSet0 = CharSet.getInstance(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(charSet0);
      
      CharSet charSet1 = CharSet.getInstance(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(charSet1.equals((Object)charSet0));
      assertNotNull(charSet1);
      assertNotSame(charSet1, charSet0);
      
      boolean boolean0 = charSet0.contains('r');
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      assertTrue(charSet0.equals((Object)charSet1));
      assertNotSame(charSet0, charSet1);
      
      CharSet charSet2 = CharSet.getInstance(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(charSet2.equals((Object)charSet0));
      assertTrue(charSet2.equals((Object)charSet1));
      assertNotNull(charSet2);
      assertNotSame(charSet2, charSet0);
      assertNotSame(charSet2, charSet1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = null;
      CharSet charSet0 = null;
      try {
        charSet0 = new CharSet((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharSet charSet0 = CharSet.ASCII_ALPHA_LOWER;
      assertNotNull(charSet0);
      
      boolean boolean0 = charSet0.contains('8');
      assertFalse(boolean0);
      
      CharRange[] charRangeArray0 = charSet0.EMPTY.getCharRanges();
      assertEquals(0, charRangeArray0.length);
      assertNotNull(charRangeArray0);
      
      charSet0.ASCII_ALPHA_UPPER.add("");
      CharRange[] charRangeArray1 = charSet0.getCharRanges();
      assertEquals(1, charRangeArray1.length);
      assertFalse(charRangeArray1.equals((Object)charRangeArray0));
      assertNotNull(charRangeArray1);
      assertNotSame(charRangeArray1, charRangeArray0);
      
      charSet0.hashCode();
      String string0 = charSet0.toString();
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      CharRange[] charRangeArray2 = charSet0.ASCII_ALPHA_LOWER.getCharRanges();
      assertEquals(1, charRangeArray2.length);
      assertFalse(charRangeArray2.equals((Object)charRangeArray0));
      assertFalse(charRangeArray2.equals((Object)charRangeArray1));
      assertNotNull(charRangeArray2);
      assertNotSame(charRangeArray2, charRangeArray0);
      assertNotSame(charRangeArray2, charRangeArray1);
      
      stringArray0[1] = "java.util.Collections$SynchronizedSet@0000000001";
      CharSet charSet1 = CharSet.getInstance(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(charSet1.equals((Object)charSet0));
      assertNotNull(charSet1);
      assertNotSame(charSet1, charSet0);
      
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "java.util.Collections$SynchronizedSet@0000000001";
      CharSet charSet2 = CharSet.getInstance(stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(charSet2.equals((Object)charSet1));
      assertFalse(charSet2.equals((Object)charSet0));
      assertNotNull(charSet2);
      assertNotSame(charSet2, charSet0);
      assertNotSame(charSet2, charSet1);
      
      CharSet charSet3 = CharSet.getInstance(stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(charSet3.equals((Object)charSet1));
      assertFalse(charSet3.equals((Object)charSet0));
      assertTrue(charSet3.equals((Object)charSet2));
      assertNotNull(charSet3);
      assertNotSame(charSet3, charSet2);
      assertNotSame(charSet3, charSet0);
      assertNotSame(charSet3, charSet1);
      
      CharRange[] charRangeArray3 = charSet3.getCharRanges();
      assertEquals(24, charRangeArray3.length);
      assertEquals(6, stringArray0.length);
      assertTrue(charSet3.equals((Object)charSet1));
      assertFalse(charSet3.equals((Object)charSet0));
      assertTrue(charSet3.equals((Object)charSet2));
      assertFalse(charRangeArray3.equals((Object)charRangeArray0));
      assertFalse(charRangeArray3.equals((Object)charRangeArray1));
      assertFalse(charRangeArray3.equals((Object)charRangeArray2));
      assertNotNull(charRangeArray3);
      assertNotSame(charSet3, charSet2);
      assertNotSame(charSet3, charSet0);
      assertNotSame(charSet3, charSet1);
      assertNotSame(charRangeArray3, charRangeArray0);
      assertNotSame(charRangeArray3, charRangeArray1);
      assertNotSame(charRangeArray3, charRangeArray2);
      
      CharSet charSet4 = CharSet.getInstance(stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(charSet4.equals((Object)charSet3));
      assertTrue(charSet4.equals((Object)charSet2));
      assertFalse(charSet4.equals((Object)charSet0));
      assertTrue(charSet4.equals((Object)charSet1));
      assertNotNull(charSet4);
      assertNotSame(charSet4, charSet1);
      assertNotSame(charSet4, charSet3);
      assertNotSame(charSet4, charSet0);
      assertNotSame(charSet4, charSet2);
      
      CharRange[] charRangeArray4 = charSet2.EMPTY.getCharRanges();
      assertEquals(0, charRangeArray4.length);
      assertEquals(6, stringArray0.length);
      assertTrue(charSet2.equals((Object)charSet4));
      assertTrue(charSet2.equals((Object)charSet1));
      assertTrue(charSet2.equals((Object)charSet3));
      assertFalse(charSet2.equals((Object)charSet0));
      assertFalse(charRangeArray4.equals((Object)charRangeArray2));
      assertFalse(charRangeArray4.equals((Object)charRangeArray0));
      assertFalse(charRangeArray4.equals((Object)charRangeArray3));
      assertFalse(charRangeArray4.equals((Object)charRangeArray1));
      assertNotNull(charRangeArray4);
      assertNotSame(charSet2, charSet3);
      assertNotSame(charSet2, charSet4);
      assertNotSame(charSet2, charSet0);
      assertNotSame(charSet2, charSet1);
      assertNotSame(charRangeArray4, charRangeArray2);
      assertNotSame(charRangeArray4, charRangeArray0);
      assertNotSame(charRangeArray4, charRangeArray3);
      assertNotSame(charRangeArray4, charRangeArray1);
      
      boolean boolean1 = charSet0.contains('2');
      assertFalse(boolean1);
      assertFalse(charSet0.equals((Object)charSet2));
      assertFalse(charSet0.equals((Object)charSet4));
      assertFalse(charSet0.equals((Object)charSet3));
      assertFalse(charSet0.equals((Object)charSet1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(charSet0, charSet2);
      assertNotSame(charSet0, charSet4);
      assertNotSame(charSet0, charSet3);
      assertNotSame(charSet0, charSet1);
      
      charSet2.hashCode();
      assertEquals(6, stringArray0.length);
      assertTrue(charSet2.equals((Object)charSet4));
      assertTrue(charSet2.equals((Object)charSet1));
      assertTrue(charSet2.equals((Object)charSet3));
      assertFalse(charSet2.equals((Object)charSet0));
      assertNotSame(charSet2, charSet3);
      assertNotSame(charSet2, charSet4);
      assertNotSame(charSet2, charSet0);
      assertNotSame(charSet2, charSet1);
      
      charSet0.hashCode();
      assertFalse(charSet0.equals((Object)charSet2));
      assertFalse(charSet0.equals((Object)charSet4));
      assertFalse(charSet0.equals((Object)charSet3));
      assertFalse(charSet0.equals((Object)charSet1));
      assertNotSame(charSet0, charSet2);
      assertNotSame(charSet0, charSet4);
      assertNotSame(charSet0, charSet3);
      assertNotSame(charSet0, charSet1);
      
      boolean boolean2 = charSet2.equals(charSet3);
      assertTrue(boolean2);
      assertEquals(6, stringArray0.length);
      assertTrue(charSet2.equals((Object)charSet4));
      assertTrue(charSet2.equals((Object)charSet1));
      assertTrue(charSet2.equals((Object)charSet3));
      assertFalse(charSet2.equals((Object)charSet0));
      assertTrue(charSet3.equals((Object)charSet1));
      assertFalse(charSet3.equals((Object)charSet0));
      assertTrue(charSet3.equals((Object)charSet2));
      assertTrue(charSet3.equals((Object)charSet4));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(charSet2, charSet3);
      assertNotSame(charSet2, charSet4);
      assertNotSame(charSet2, charSet0);
      assertNotSame(charSet2, charSet1);
      assertNotSame(charSet3, charSet2);
      assertNotSame(charSet3, charSet4);
      assertNotSame(charSet3, charSet0);
      assertNotSame(charSet3, charSet1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CharSet charSet0 = new CharSet(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(charSet0);
      
      CharRange[] charRangeArray0 = charSet0.getCharRanges();
      assertEquals(0, stringArray0.length);
      assertEquals(0, charRangeArray0.length);
      assertNotNull(charRangeArray0);
      
      boolean boolean0 = charSet0.ASCII_ALPHA.contains('n');
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      
      String string0 = charSet0.toString();
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      
      charSet0.hashCode();
      assertEquals(0, stringArray0.length);
      
      charSet0.hashCode();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharSet charSet0 = CharSet.ASCII_NUMERIC;
      assertNotNull(charSet0);
      
      charSet0.ASCII_NUMERIC.add("dlmiBY392N");
      CharRange[] charRangeArray0 = charSet0.getCharRanges();
      assertEquals(11, charRangeArray0.length);
      assertNotNull(charRangeArray0);
      
      charSet0.ASCII_ALPHA_LOWER.add("");
      charSet0.add("TPA8:*/B8!6");
      charSet0.add("TPA8:*/B8!6");
      String string0 = charSet0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Wc]xVk'$Xg";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Orw.p";
      stringArray0[4] = "?>2wFe^";
      CharSet charSet0 = CharSet.getInstance(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(charSet0);
      
      boolean boolean0 = charSet0.equals("");
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      CharSet charSet1 = CharSet.ASCII_NUMERIC;
      assertFalse(charSet1.equals((Object)charSet0));
      assertNotNull(charSet1);
      assertNotSame(charSet1, charSet0);
      
      boolean boolean1 = charSet0.equals(charSet1);
      assertFalse(boolean1);
      assertEquals(5, stringArray0.length);
      assertFalse(charSet0.equals((Object)charSet1));
      assertFalse(charSet1.equals((Object)charSet0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(charSet0, charSet1);
      assertNotSame(charSet1, charSet0);
      
      boolean boolean2 = charSet0.contains('o');
      assertFalse(boolean2);
      assertEquals(5, stringArray0.length);
      assertFalse(charSet0.equals((Object)charSet1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(charSet0, charSet1);
      
      boolean boolean3 = charSet0.contains(':');
      assertFalse(boolean3);
      assertEquals(5, stringArray0.length);
      assertFalse(charSet0.equals((Object)charSet1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertNotSame(charSet0, charSet1);
      
      charSet0.add("");
      assertEquals(5, stringArray0.length);
      assertFalse(charSet0.equals((Object)charSet1));
      assertNotSame(charSet0, charSet1);
      
      charSet0.hashCode();
      assertEquals(5, stringArray0.length);
      assertFalse(charSet0.equals((Object)charSet1));
      assertNotSame(charSet0, charSet1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "a-z";
      stringArray0[2] = "%M ^~@|O";
      stringArray0[3] = "The Range must not be null";
      CharSet charSet0 = new CharSet(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(charSet0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharSet charSet0 = CharSet.ASCII_ALPHA_LOWER;
      assertNotNull(charSet0);
      
      charSet0.hashCode();
      CharSet charSet1 = CharSet.getInstance((String[]) null);
      assertNull(charSet1);
      
      CharSet charSet2 = CharSet.EMPTY;
      assertFalse(charSet2.equals((Object)charSet0));
      assertNotNull(charSet2);
      assertNotSame(charSet2, charSet0);
      
      boolean boolean0 = charSet0.equals(charSet2);
      assertFalse(boolean0);
      assertFalse(charSet0.equals((Object)charSet2));
      assertFalse(charSet2.equals((Object)charSet0));
      assertNotSame(charSet0, charSet2);
      assertNotSame(charSet2, charSet0);
      
      CharRange[] charRangeArray0 = charSet2.getCharRanges();
      assertEquals(0, charRangeArray0.length);
      assertFalse(charSet2.equals((Object)charSet0));
      assertNotNull(charRangeArray0);
      assertNotSame(charSet2, charSet0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharSet charSet0 = CharSet.ASCII_ALPHA_LOWER;
      assertNotNull(charSet0);
      
      charSet0.add((String) null);
      boolean boolean0 = charSet0.ASCII_ALPHA.contains('.');
      assertFalse(boolean0);
      
      charSet0.add("bhZ}{o'3f,t");
      charSet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CharSet charSet0 = CharSet.getInstance(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(charSet0);
      
      charSet0.hashCode();
      assertEquals(0, stringArray0.length);
      
      charSet0.add("-&XIg");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharSet charSet0 = CharSet.ASCII_NUMERIC;
      assertNotNull(charSet0);
      
      CharRange charRange0 = CharRange.isIn('w', 'w');
      assertNotNull(charRange0);
      assertEquals('w', charRange0.getEnd());
      assertEquals('w', charRange0.getStart());
      assertFalse(charRange0.isNegated());
      
      boolean boolean0 = charSet0.equals(charRange0);
      assertFalse(boolean0);
      assertEquals('w', charRange0.getEnd());
      assertEquals('w', charRange0.getStart());
      assertFalse(charRange0.isNegated());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharSet charSet0 = CharSet.ASCII_ALPHA_LOWER;
      assertNotNull(charSet0);
      
      boolean boolean0 = charSet0.contains('{');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharSet charSet0 = CharSet.ASCII_ALPHA_LOWER;
      assertNotNull(charSet0);
      
      boolean boolean0 = charSet0.contains('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharSet charSet0 = CharSet.EMPTY;
      assertNotNull(charSet0);
      
      boolean boolean0 = charSet0.contains('Q');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharSet charSet0 = CharSet.ASCII_ALPHA;
      assertNotNull(charSet0);
      
      CharRange[] charRangeArray0 = charSet0.getCharRanges();
      assertEquals(2, charRangeArray0.length);
      assertNotNull(charRangeArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharSet charSet0 = CharSet.ASCII_ALPHA_UPPER;
      assertNotNull(charSet0);
      
      CharRange[] charRangeArray0 = charSet0.getCharRanges();
      assertEquals(1, charRangeArray0.length);
      assertNotNull(charRangeArray0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "?@__R8";
      stringArray0[1] = "Jwu^71\"";
      stringArray0[2] = "";
      stringArray0[3] = "a-zA-Z";
      stringArray0[4] = " X[Ok%I|#*_y4p35";
      CharSet charSet1 = CharSet.getInstance(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(charSet1.equals((Object)charSet0));
      assertNotNull(charSet1);
      assertNotSame(charSet1, charSet0);
      
      CharRange[] charRangeArray1 = charSet0.getCharRanges();
      assertEquals(1, charRangeArray1.length);
      assertFalse(charSet0.equals((Object)charSet1));
      assertFalse(charRangeArray1.equals((Object)charRangeArray0));
      assertNotNull(charRangeArray1);
      assertNotSame(charSet0, charSet1);
      assertNotSame(charRangeArray1, charRangeArray0);
      
      charSet0.add("org.apache.commons.lang3.CharRange");
      assertFalse(charSet0.equals((Object)charSet1));
      assertNotSame(charSet0, charSet1);
      
      String string0 = charSet0.toString();
      assertFalse(charSet0.equals((Object)charSet1));
      assertNotNull(string0);
      assertNotSame(charSet0, charSet1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharSet charSet0 = CharSet.EMPTY;
      assertNotNull(charSet0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "~i4cY)l6vG";
      stringArray0[1] = "M-";
      stringArray0[2] = "~i4cY)l6vG";
      stringArray0[3] = "";
      stringArray0[5] = "52Wo# \" dVFMQ5{";
      stringArray0[6] = "";
      stringArray0[7] = "~i4cY)l6vG";
      CharSet charSet1 = CharSet.getInstance(stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(charSet1.equals((Object)charSet0));
      assertNotNull(charSet1);
      assertNotSame(charSet1, charSet0);
      
      boolean boolean0 = charSet0.ASCII_ALPHA_LOWER.contains('j');
      assertTrue(boolean0);
      assertFalse(charSet0.equals((Object)charSet1));
      assertNotSame(charSet0, charSet1);
      
      charSet0.hashCode();
      assertFalse(charSet0.equals((Object)charSet1));
      assertNotSame(charSet0, charSet1);
      
      CharSet charSet2 = CharSet.getInstance((String[]) null);
      assertNull(charSet2);
      
      CharRange[] charRangeArray0 = charSet0.getCharRanges();
      assertEquals(0, charRangeArray0.length);
      assertFalse(charSet0.equals((Object)charSet1));
      assertNotNull(charRangeArray0);
      assertNotSame(charSet0, charSet1);
      
      CharRange[] charRangeArray1 = charSet0.getCharRanges();
      assertEquals(0, charRangeArray1.length);
      assertFalse(charSet0.equals((Object)charSet1));
      assertFalse(charRangeArray1.equals((Object)charRangeArray0));
      assertNotNull(charRangeArray1);
      assertNotSame(charSet0, charSet1);
      assertNotSame(charRangeArray1, charRangeArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharSet charSet0 = CharSet.ASCII_NUMERIC;
      assertNotNull(charSet0);
      
      boolean boolean0 = charSet0.equals((Object) null);
      assertFalse(boolean0);
      
      String string0 = charSet0.toString();
      assertNotNull(string0);
      
      boolean boolean1 = charSet0.contains(']');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CharSet charSet0 = CharSet.getInstance(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(charSet0);
      
      CharSet charSet1 = CharSet.getInstance(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(charSet1);
      assertSame(charSet1, charSet0);
      
      CharRange[] charRangeArray0 = charSet0.ASCII_ALPHA_LOWER.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(1, charRangeArray0.length);
      assertNotNull(charRangeArray0);
      assertSame(charSet0, charSet1);
      
      boolean boolean0 = charSet1.ASCII_ALPHA.contains('}');
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      assertSame(charSet1, charSet0);
      
      CharRange[] charRangeArray1 = charSet1.ASCII_NUMERIC.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(1, charRangeArray1.length);
      assertFalse(charRangeArray1.equals((Object)charRangeArray0));
      assertNotNull(charRangeArray1);
      assertSame(charSet1, charSet0);
      assertNotSame(charRangeArray1, charRangeArray0);
      
      boolean boolean1 = charSet1.contains('}');
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertSame(charSet1, charSet0);
      
      CharRange[] charRangeArray2 = charSet1.ASCII_ALPHA.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(2, charRangeArray2.length);
      assertFalse(charRangeArray2.equals((Object)charRangeArray1));
      assertFalse(charRangeArray2.equals((Object)charRangeArray0));
      assertNotNull(charRangeArray2);
      assertSame(charSet1, charSet0);
      assertNotSame(charRangeArray2, charRangeArray1);
      assertNotSame(charRangeArray2, charRangeArray0);
      
      CharRange[] charRangeArray3 = charSet0.ASCII_ALPHA_LOWER.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(1, charRangeArray3.length);
      assertFalse(charRangeArray3.equals((Object)charRangeArray0));
      assertFalse(charRangeArray3.equals((Object)charRangeArray2));
      assertFalse(charRangeArray3.equals((Object)charRangeArray1));
      assertNotNull(charRangeArray3);
      assertSame(charSet0, charSet1);
      assertNotSame(charRangeArray3, charRangeArray0);
      assertNotSame(charRangeArray3, charRangeArray2);
      assertNotSame(charRangeArray3, charRangeArray1);
      
      CharRange[] charRangeArray4 = charSet1.ASCII_ALPHA_LOWER.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(1, charRangeArray4.length);
      assertFalse(charRangeArray4.equals((Object)charRangeArray2));
      assertFalse(charRangeArray4.equals((Object)charRangeArray1));
      assertFalse(charRangeArray4.equals((Object)charRangeArray3));
      assertFalse(charRangeArray4.equals((Object)charRangeArray0));
      assertNotNull(charRangeArray4);
      assertSame(charSet1, charSet0);
      assertNotSame(charRangeArray4, charRangeArray2);
      assertNotSame(charRangeArray4, charRangeArray1);
      assertNotSame(charRangeArray4, charRangeArray3);
      assertNotSame(charRangeArray4, charRangeArray0);
      
      CharRange[] charRangeArray5 = charSet0.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(0, charRangeArray5.length);
      assertFalse(charRangeArray5.equals((Object)charRangeArray4));
      assertFalse(charRangeArray5.equals((Object)charRangeArray2));
      assertFalse(charRangeArray5.equals((Object)charRangeArray1));
      assertFalse(charRangeArray5.equals((Object)charRangeArray0));
      assertFalse(charRangeArray5.equals((Object)charRangeArray3));
      assertNotNull(charRangeArray5);
      assertSame(charSet0, charSet1);
      assertNotSame(charRangeArray5, charRangeArray4);
      assertNotSame(charRangeArray5, charRangeArray2);
      assertNotSame(charRangeArray5, charRangeArray1);
      assertNotSame(charRangeArray5, charRangeArray0);
      assertNotSame(charRangeArray5, charRangeArray3);
      
      String string0 = charSet1.toString();
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertSame(charSet1, charSet0);
      
      CharSet charSet2 = CharSet.getInstance(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(charSet2);
      assertSame(charSet2, charSet1);
      assertSame(charSet2, charSet0);
      
      CharRange[] charRangeArray6 = charSet2.EMPTY.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(0, charRangeArray6.length);
      assertFalse(charRangeArray6.equals((Object)charRangeArray4));
      assertFalse(charRangeArray6.equals((Object)charRangeArray3));
      assertFalse(charRangeArray6.equals((Object)charRangeArray2));
      assertFalse(charRangeArray6.equals((Object)charRangeArray5));
      assertFalse(charRangeArray6.equals((Object)charRangeArray1));
      assertFalse(charRangeArray6.equals((Object)charRangeArray0));
      assertNotNull(charRangeArray6);
      assertSame(charSet2, charSet1);
      assertSame(charSet2, charSet0);
      assertNotSame(charRangeArray6, charRangeArray4);
      assertNotSame(charRangeArray6, charRangeArray3);
      assertNotSame(charRangeArray6, charRangeArray2);
      assertNotSame(charRangeArray6, charRangeArray5);
      assertNotSame(charRangeArray6, charRangeArray1);
      assertNotSame(charRangeArray6, charRangeArray0);
      
      boolean boolean2 = charSet1.contains('}');
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(charSet1, charSet2);
      assertSame(charSet1, charSet0);
      
      boolean boolean3 = charSet0.contains('}');
      assertFalse(boolean3);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertSame(charSet0, charSet2);
      assertSame(charSet0, charSet1);
      
      boolean boolean4 = charSet1.EMPTY.contains('}');
      assertFalse(boolean4);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertSame(charSet1, charSet2);
      assertSame(charSet1, charSet0);
      
      boolean boolean5 = charSet1.contains('P');
      assertFalse(boolean5);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertSame(charSet1, charSet2);
      assertSame(charSet1, charSet0);
      
      charSet1.add("");
      assertEquals(1, stringArray0.length);
      assertSame(charSet1, charSet2);
      assertSame(charSet1, charSet0);
      
      boolean boolean6 = charSet0.equals(charSet1);
      assertTrue(boolean6);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertSame(charSet0, charSet2);
      assertSame(charSet0, charSet1);
      assertSame(charSet1, charSet2);
      assertSame(charSet1, charSet0);
      
      CharRange[] charRangeArray7 = charSet0.ASCII_ALPHA_LOWER.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(1, charRangeArray7.length);
      assertFalse(charRangeArray7.equals((Object)charRangeArray3));
      assertFalse(charRangeArray7.equals((Object)charRangeArray4));
      assertFalse(charRangeArray7.equals((Object)charRangeArray0));
      assertFalse(charRangeArray7.equals((Object)charRangeArray2));
      assertFalse(charRangeArray7.equals((Object)charRangeArray1));
      assertFalse(charRangeArray7.equals((Object)charRangeArray5));
      assertFalse(charRangeArray7.equals((Object)charRangeArray6));
      assertNotNull(charRangeArray7);
      assertSame(charSet0, charSet2);
      assertSame(charSet0, charSet1);
      assertNotSame(charRangeArray7, charRangeArray3);
      assertNotSame(charRangeArray7, charRangeArray4);
      assertNotSame(charRangeArray7, charRangeArray0);
      assertNotSame(charRangeArray7, charRangeArray2);
      assertNotSame(charRangeArray7, charRangeArray1);
      assertNotSame(charRangeArray7, charRangeArray5);
      assertNotSame(charRangeArray7, charRangeArray6);
      
      CharRange[] charRangeArray8 = charSet0.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(0, charRangeArray8.length);
      assertFalse(charRangeArray8.equals((Object)charRangeArray5));
      assertFalse(charRangeArray8.equals((Object)charRangeArray1));
      assertFalse(charRangeArray8.equals((Object)charRangeArray2));
      assertFalse(charRangeArray8.equals((Object)charRangeArray4));
      assertFalse(charRangeArray8.equals((Object)charRangeArray3));
      assertFalse(charRangeArray8.equals((Object)charRangeArray0));
      assertFalse(charRangeArray8.equals((Object)charRangeArray6));
      assertFalse(charRangeArray8.equals((Object)charRangeArray7));
      assertNotNull(charRangeArray8);
      assertSame(charSet0, charSet2);
      assertSame(charSet0, charSet1);
      assertNotSame(charRangeArray8, charRangeArray5);
      assertNotSame(charRangeArray8, charRangeArray1);
      assertNotSame(charRangeArray8, charRangeArray2);
      assertNotSame(charRangeArray8, charRangeArray4);
      assertNotSame(charRangeArray8, charRangeArray3);
      assertNotSame(charRangeArray8, charRangeArray0);
      assertNotSame(charRangeArray8, charRangeArray6);
      assertNotSame(charRangeArray8, charRangeArray7);
      
      charSet0.hashCode();
      assertEquals(1, stringArray0.length);
      assertSame(charSet0, charSet2);
      assertSame(charSet0, charSet1);
      
      CharRange[] charRangeArray9 = charSet0.getCharRanges();
      assertEquals(1, stringArray0.length);
      assertEquals(0, charRangeArray9.length);
      assertFalse(charRangeArray9.equals((Object)charRangeArray6));
      assertFalse(charRangeArray9.equals((Object)charRangeArray7));
      assertFalse(charRangeArray9.equals((Object)charRangeArray2));
      assertFalse(charRangeArray9.equals((Object)charRangeArray1));
      assertFalse(charRangeArray9.equals((Object)charRangeArray0));
      assertFalse(charRangeArray9.equals((Object)charRangeArray8));
      assertFalse(charRangeArray9.equals((Object)charRangeArray4));
      assertFalse(charRangeArray9.equals((Object)charRangeArray3));
      assertFalse(charRangeArray9.equals((Object)charRangeArray5));
      assertNotNull(charRangeArray9);
      assertSame(charSet0, charSet2);
      assertSame(charSet0, charSet1);
      assertNotSame(charRangeArray9, charRangeArray6);
      assertNotSame(charRangeArray9, charRangeArray7);
      assertNotSame(charRangeArray9, charRangeArray2);
      assertNotSame(charRangeArray9, charRangeArray1);
      assertNotSame(charRangeArray9, charRangeArray0);
      assertNotSame(charRangeArray9, charRangeArray8);
      assertNotSame(charRangeArray9, charRangeArray4);
      assertNotSame(charRangeArray9, charRangeArray3);
      assertNotSame(charRangeArray9, charRangeArray5);
      
      boolean boolean7 = charSet1.contains('}');
      assertFalse(boolean7);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertSame(charSet1, charSet2);
      assertSame(charSet1, charSet0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      CharSet charSet0 = CharSet.getInstance(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(charSet0);
      
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      CharSet charSet1 = CharSet.getInstance(stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(charSet1.equals((Object)charSet0));
      assertNotNull(charSet1);
      assertNotSame(charSet1, charSet0);
      
      CharSet charSet2 = CharSet.getInstance(stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(charSet2.equals((Object)charSet1));
      assertTrue(charSet2.equals((Object)charSet0));
      assertNotNull(charSet2);
      assertNotSame(charSet2, charSet0);
      assertNotSame(charSet2, charSet1);
      
      CharRange[] charRangeArray0 = charSet2.getCharRanges();
      assertEquals(6, stringArray0.length);
      assertEquals(0, charRangeArray0.length);
      assertTrue(charSet2.equals((Object)charSet1));
      assertTrue(charSet2.equals((Object)charSet0));
      assertNotNull(charRangeArray0);
      assertNotSame(charSet2, charSet0);
      assertNotSame(charSet2, charSet1);
      
      CharSet charSet3 = CharSet.getInstance(stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(charSet3.equals((Object)charSet0));
      assertTrue(charSet3.equals((Object)charSet1));
      assertTrue(charSet3.equals((Object)charSet2));
      assertNotNull(charSet3);
      assertNotSame(charSet3, charSet2);
      assertNotSame(charSet3, charSet1);
      assertNotSame(charSet3, charSet0);
      
      boolean boolean0 = charSet3.ASCII_NUMERIC.contains('8');
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
      assertTrue(charSet3.equals((Object)charSet0));
      assertTrue(charSet3.equals((Object)charSet1));
      assertTrue(charSet3.equals((Object)charSet2));
      assertNotSame(charSet3, charSet2);
      assertNotSame(charSet3, charSet1);
      assertNotSame(charSet3, charSet0);
      
      CharRange[] charRangeArray1 = charSet1.EMPTY.getCharRanges();
      assertEquals(6, stringArray0.length);
      assertEquals(0, charRangeArray1.length);
      assertTrue(charSet1.equals((Object)charSet2));
      assertTrue(charSet1.equals((Object)charSet3));
      assertTrue(charSet1.equals((Object)charSet0));
      assertFalse(charRangeArray1.equals((Object)charRangeArray0));
      assertNotNull(charRangeArray1);
      assertNotSame(charSet1, charSet0);
      assertNotSame(charSet1, charSet2);
      assertNotSame(charSet1, charSet3);
      assertNotSame(charRangeArray1, charRangeArray0);
      
      charSet1.hashCode();
      assertEquals(6, stringArray0.length);
      assertTrue(charSet1.equals((Object)charSet2));
      assertTrue(charSet1.equals((Object)charSet3));
      assertTrue(charSet1.equals((Object)charSet0));
      assertNotSame(charSet1, charSet0);
      assertNotSame(charSet1, charSet2);
      assertNotSame(charSet1, charSet3);
      
      boolean boolean1 = charSet1.equals(charSet2);
      assertTrue(boolean1);
      assertEquals(6, stringArray0.length);
      assertTrue(charSet1.equals((Object)charSet2));
      assertTrue(charSet1.equals((Object)charSet3));
      assertTrue(charSet1.equals((Object)charSet0));
      assertTrue(charSet2.equals((Object)charSet1));
      assertTrue(charSet2.equals((Object)charSet3));
      assertTrue(charSet2.equals((Object)charSet0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(charSet1, charSet0);
      assertNotSame(charSet1, charSet2);
      assertNotSame(charSet1, charSet3);
      assertNotSame(charSet2, charSet0);
      assertNotSame(charSet2, charSet1);
      assertNotSame(charSet2, charSet3);
      
      CharRange[] charRangeArray2 = charSet0.getCharRanges();
      assertEquals(6, stringArray0.length);
      assertEquals(0, charRangeArray2.length);
      assertTrue(charSet0.equals((Object)charSet3));
      assertTrue(charSet0.equals((Object)charSet1));
      assertTrue(charSet0.equals((Object)charSet2));
      assertFalse(charRangeArray2.equals((Object)charRangeArray0));
      assertFalse(charRangeArray2.equals((Object)charRangeArray1));
      assertNotNull(charRangeArray2);
      assertNotSame(charSet0, charSet3);
      assertNotSame(charSet0, charSet2);
      assertNotSame(charSet0, charSet1);
      assertNotSame(charRangeArray2, charRangeArray0);
      assertNotSame(charRangeArray2, charRangeArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharSet charSet0 = CharSet.ASCII_ALPHA;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A-Z";
      stringArray0[1] = "ch&izdFR^}!LsswZ";
      stringArray0[2] = "";
      stringArray0[3] = "";
      CharSet.getInstance(stringArray0);
      String string0 = charSet0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "r>T";
      CharSet charSet0 = CharSet.getInstance(stringArray0);
      assertNotNull(charSet0);
      
      charSet0.toString();
      charSet0.EMPTY.getCharRanges();
      boolean boolean0 = charSet0.contains('M');
      CharSet charSet1 = CharSet.ASCII_ALPHA;
      charSet1.getCharRanges();
      boolean boolean1 = charSet0.equals("java.util.Collections$SynchronizedSet@0000000005");
      assertTrue(boolean1 == boolean0);
      
      CharSet charSet2 = CharSet.getInstance(stringArray0);
      assertFalse(charSet2.equals((Object)charSet1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }
}
