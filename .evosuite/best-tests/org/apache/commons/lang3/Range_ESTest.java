/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:53:45 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.IllegalFormatConversionException;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.Range;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-219));
      assertEquals((-219), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-219));
      assertEquals((-219), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = Integer.divideUnsigned(37, 37);
      assertEquals(1, int0);
      
      Range<Integer> range0 = Range.between(integer0, integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      int int1 = range0.elementCompareTo(integer1);
      assertEquals(0, int1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(int1 == int0);
      assertTrue(range0.isNaturalOrdering());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.is((Object) integer0, comparator0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      Object object0 = range1.getMinimum();
      assertEquals((-219), object0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int1));
      assertTrue(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-219)).when(comparator1).compare(anyString() , anyString());
      Range<String> range2 = Range.between("Elements in a range must not be null: element1=", "Elements in a range must not be null: element1=", comparator1);
      assertNotNull(range2);
      assertFalse(range2.isNaturalOrdering());
      
      Range<Object> range3 = Range.is((Object) "Elements in a range must not be null: element1=", (Comparator<Object>) null);
      assertNotSame(range3, range1);
      assertFalse(range3.equals((Object)range1));
      assertNotNull(range3);
      assertTrue(range3.isNaturalOrdering());
      
      // Undeclared exception!
      try { 
        range1.isOverlappedBy(range3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("The validated expression is false", "The validated expression is false", ", element2=").when(comparator0).toString();
      doReturn(60, 60, 60, 60, (-1024)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "..", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(60, 2, (-746)).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.between((Object) "..", (Object) range0, comparator1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Range<Object> range2 = range0.intersectionWith(range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean0 = range2.isOverlappedBy(range0);
      assertFalse(boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean1 = range0.isAfterRange(range1);
      assertTrue(boolean1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "A>P#f";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1488, 1488).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("A>P#f", "A>P#f", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      int int0 = 1868;
      Integer integer0 = new Integer(1868);
      assertEquals(1868, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1868).when(comparator1).compare(anyInt() , anyInt());
      Range<Integer> range1 = Range.is(integer0, comparator1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      String string1 = "}d6?Dl-Gqq~";
      boolean boolean0 = range0.isAfter("}d6?Dl-Gqq~");
      assertFalse(boolean0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(856, 856, (-672), 1488, 1868).when(comparator2).compare(any() , any());
      Range<Object> range2 = Range.between((Object) range0, (Object) range1, comparator2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(range2);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-672)).when(comparator3).compare(any() , any());
      Range<Object> range3 = Range.is((Object) "A>P#f", comparator3);
      assertNotSame(range3, range2);
      assertFalse(range3.equals((Object)range2));
      assertNotNull(range3);
      assertFalse(range3.isNaturalOrdering());
      
      boolean boolean1 = range2.containsRange(range3);
      assertFalse(boolean1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range2);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range3.equals((Object)range2));
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      // Undeclared exception!
      try { 
        range2.intersectionWith(range2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate intersection with non-overlapping range [[1868..1868]..[A>P#f..A>P#f]]
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1354, 1354, (-1182), 24, 1354).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("", "]", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1501)).when(comparator2).compare(anyString() , anyString());
      Range<String> range1 = Range.is("Cannot calculate intersection with non-overlapping range %s", comparator2);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      boolean boolean0 = range0.containsRange(range1);
      assertFalse(boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(17, 17, 17).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("", "]", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Object object0 = range0.getMinimum();
      assertEquals("]", object0);
      assertNotNull(object0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(17, 17, 17, 17, (-2472)).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.is((Object) "]", comparator1);
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      Range<Object> range2 = range1.intersectionWith(range1);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertNotNull(range2);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean0 = range2.isOverlappedBy(range1);
      assertFalse(boolean0);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      int int0 = range2.elementCompareTo("]");
      assertEquals((-1), int0);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Object object2 = range2.fit("");
      assertEquals("]", object2);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertTrue(object2.equals((Object)object0));
      assertNotNull(object2);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean1 = range1.isBefore("]");
      assertFalse(boolean1);
      assertSame(range1, range2);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(17).when(comparator2).compare(anyString() , anyString());
      Range<String> range3 = Range.is("Cannot calculate intersection with non-overlapping range %s", comparator2);
      assertNotSame(range3, range0);
      assertFalse(range3.equals((Object)range0));
      assertNotNull(range3);
      assertFalse(range3.isNaturalOrdering());
      
      boolean boolean2 = range0.containsRange(range3);
      assertFalse(boolean2);
      assertNotSame(range0, range3);
      assertNotSame(range3, range0);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range3.equals((Object)range0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      Integer integer0 = new Integer(586);
      assertEquals(586, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Comparator<Integer> comparator3 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator3).compare(anyInt() , anyInt());
      Range<Integer> range4 = Range.between(integer0, integer0, comparator3);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(range4);
      assertFalse(range4.isNaturalOrdering());
      
      Integer integer1 = new Integer(2557);
      assertEquals(2557, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = range4.fit(integer1);
      assertEquals(2557, (int)integer2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(integer2);
      assertFalse(range4.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Range<Integer> range0 = Range.is(integer0);
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Range<Integer> range1 = Range.between(integer0, integer1);
      assertNotSame(range1, range0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(range1.isNaturalOrdering());
      
      boolean boolean0 = range0.containsRange(range1);
      assertTrue(boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(range0.equals((Object)range1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      
      Integer integer2 = Integer.getInteger("8FXUuW/App|b@YebXJ");
      assertNull(integer2);
      
      Range<String> range2 = Range.is("8FXUuW/App|b@YebXJ");
      assertNotNull(range2);
      assertTrue(range2.isNaturalOrdering());
      
      boolean boolean1 = range2.isAfter("8FXUuW/App|b@YebXJ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(range2.isNaturalOrdering());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range3 = Range.between((Object) range1, (Object) range2, comparator0);
      assertNotSame(range1, range0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range3);
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(388, 2, 388, 984, 0).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range4 = Range.is(range3, comparator1);
      assertNotSame(range1, range0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range4);
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      Comparator<Range<Object>> comparator2 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(388, 388).when(comparator2).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      boolean boolean2 = range3.isEndedBy(integer0);
      assertFalse(boolean2);
      assertNotSame(range1, range0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(range1.equals((Object)range0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      Range<Range<Object>> range5 = Range.is(range3, comparator2);
      assertNotSame(range1, range0);
      assertNotSame(range5, range4);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range5.equals((Object)range4));
      assertNotNull(range5);
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      assertFalse(range5.isNaturalOrdering());
      
      boolean boolean3 = range5.isStartedBy(range3);
      assertFalse(boolean3);
      assertNotSame(range1, range0);
      assertNotSame(range5, range4);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range5.equals((Object)range4));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      assertFalse(range5.isNaturalOrdering());
      
      Range<Range<Object>> range6 = range5.intersectionWith(range4);
      range4.isBeforeRange(range6);
      Object object0 = range4.getMinimum();
      range3.elementCompareTo(object0);
      String string0 = "eK";
      Comparator<String> comparator3 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator3).compare(anyString() , anyString());
      Range<String> range7 = Range.is(string0, comparator3);
      range2.isOverlappedBy(range7);
      range3.hashCode();
      String string1 = "";
      try { 
        Integer.parseUnsignedInt(string1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-648));
      assertEquals((-648), (int)integer0);
      assertNotNull(integer0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) "", (Object) integer0, comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      Range<Integer> range1 = Range.is(integer0, comparator1);
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      String string0 = range0.toString("?M4Y6*( ");
      assertEquals("?M4Y6*( ", string0);
      assertNotNull(string0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator2).compare(any() , any());
      Range<Object> range2 = Range.is((Object) "", comparator2);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean0 = range0.isBeforeRange(range2);
      assertFalse(boolean0);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Range<String> range3 = Range.is("");
      assertNotNull(range3);
      assertTrue(range3.isNaturalOrdering());
      
      boolean boolean1 = range3.isAfter("3^O");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(range3.isNaturalOrdering());
      
      Comparator<String> comparator3 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator3).compare(anyString() , anyString());
      Range<String> range4 = Range.is("", comparator3);
      assertNotSame(range4, range3);
      assertTrue(range4.equals((Object)range3));
      assertNotNull(range4);
      assertFalse(range4.isNaturalOrdering());
      
      boolean boolean2 = range3.containsRange(range4);
      assertTrue(boolean2);
      assertNotSame(range3, range4);
      assertNotSame(range4, range3);
      assertTrue(range3.equals((Object)range4));
      assertTrue(range4.equals((Object)range3));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(range3.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      boolean boolean3 = range3.containsRange(range4);
      assertTrue(boolean3);
      assertNotSame(range3, range4);
      assertNotSame(range4, range3);
      assertTrue(range3.equals((Object)range4));
      assertTrue(range4.equals((Object)range3));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(range3.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      String string1 = null;
      // Undeclared exception!
      try { 
        range3.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Range<Object> range0 = Range.is((Object) integer0, (Comparator<Object>) null);
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      Object object0 = range0.getMinimum();
      assertEquals(0, object0);
      assertNotNull(object0);
      assertTrue(range0.isNaturalOrdering());
      
      Range<Object> range1 = Range.between((Object) integer0, (Object) object0, (Comparator<Object>) null);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      
      Range<Object> range2 = range1.intersectionWith(range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      assertNotSame(range2, range0);
      assertSame(range2, range1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      
      boolean boolean0 = range2.contains((Object) null);
      assertFalse(boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      assertNotSame(range2, range0);
      assertSame(range2, range1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1396);
      assertEquals(1396, (int)integer0);
      assertNotNull(integer0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      range0.hashCode();
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator1).toString();
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyString() , anyString());
      Range<String> range1 = Range.is("!`M2ay=K}", comparator1);
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      Range<String> range2 = Range.is("_,[h1}i]=7D`UW:");
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertTrue(range2.isNaturalOrdering());
      
      boolean boolean0 = range1.isAfter("!`M2ay=K}");
      assertFalse(boolean0);
      assertNotSame(range1, range2);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.isNaturalOrdering());
      
      Range<String> range3 = range1.intersectionWith(range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertNotNull(range3);
      assertFalse(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator2).compare(any() , any());
      Range<Object> range4 = Range.is((Object) "SkOsXc$Q-t-%fQ", comparator2);
      assertNotSame(range4, range0);
      assertFalse(range4.equals((Object)range0));
      assertNotNull(range4);
      assertFalse(range4.isNaturalOrdering());
      
      String string0 = range3.toString();
      assertEquals("[!`M2ay=K}.._,[h1}i]=7D`UW:]", string0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertNotNull(string0);
      assertFalse(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      boolean boolean1 = range3.equals(range1);
      assertFalse(boolean1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      Object object0 = range0.fit("_,[h1}i]=7D`UW:");
      assertEquals("_,[h1}i]=7D`UW:", object0);
      assertNotSame(range0, range4);
      assertFalse(range0.equals((Object)range4));
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertFalse(range0.isNaturalOrdering());
      
      boolean boolean2 = range0.isStartedBy(range2);
      assertTrue(boolean2);
      assertNotSame(range0, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(range0.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      
      Range<Integer> range5 = Range.between(integer0, integer0);
      assertNotNull(range5);
      assertTrue(range5.isNaturalOrdering());
      
      Integer integer1 = new Integer(1396);
      assertEquals(1396, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean3 = range5.isStartedBy(integer1);
      assertTrue(boolean3);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(range5.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      String string0 = range0.getMinimum();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(range0.isNaturalOrdering());
      
      Integer integer0 = new Integer(172);
      assertEquals(172, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare(172, 172);
      assertEquals(0, int0);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      boolean boolean0 = range0.isBefore("frsl$8`fYF8y");
      assertFalse(boolean0);
      assertFalse(range0.isNaturalOrdering());
      
      Range<Integer> range1 = Range.is(integer0, comparator1);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      boolean boolean1 = range1.contains(integer0);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.isNaturalOrdering());
      
      String string1 = range0.toString("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(range0.isNaturalOrdering());
      
      Integer integer1 = new Integer((-1657));
      assertEquals((-1657), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator2).compare(anyInt() , anyInt());
      Range<Integer> range2 = Range.is(integer1, comparator2);
      assertNotSame(range2, range1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertFalse(range2.isNaturalOrdering());
      
      // Undeclared exception!
      try { 
        range0.toString("='_:U]pqjsnD18%Me\"h");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'M'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      Range<Object> range0 = Range.is((Object) "", (Comparator<Object>) null);
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.isBefore((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      Object object0 = range0.fit("");
      assertEquals("", object0);
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      assertTrue(range0.isNaturalOrdering());
      
      // Undeclared exception!
      try { 
        Range.between((Object) null, (Object) "", (Comparator<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Range<Integer> range0 = Range.between(integer0, integer0, (Comparator<Integer>) null);
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      boolean boolean0 = range0.isStartedBy(integer0);
      assertTrue(boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      Range<Object> range1 = Range.is((Object) range0, comparator0);
      assertNotNull(range1);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      int int0 = range0.elementCompareTo(integer0);
      assertEquals(0, int0);
      assertTrue(range0.isNaturalOrdering());
      
      Range<Object> range2 = range1.intersectionWith(range1);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(range2);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean1 = range2.isAfter("");
      assertFalse(boolean1);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Range<Object> range3 = range2.intersectionWith(range1);
      assertSame(range1, range2);
      assertSame(range1, range3);
      assertSame(range2, range1);
      assertSame(range2, range3);
      assertSame(range3, range1);
      assertSame(range3, range2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(range3);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      boolean boolean2 = range3.containsRange((Range<Object>) null);
      assertFalse(boolean2);
      assertSame(range1, range2);
      assertSame(range1, range3);
      assertSame(range2, range1);
      assertSame(range2, range3);
      assertSame(range3, range1);
      assertSame(range3, range2);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      Object object0 = range3.fit(integer0);
      assertEquals(0, object0);
      assertSame(range1, range2);
      assertSame(range1, range3);
      assertSame(range2, range1);
      assertSame(range2, range3);
      assertSame(range3, range1);
      assertSame(range3, range2);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(object0.equals((Object)int0));
      assertNotNull(object0);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      Integer integer1 = Integer.getInteger("");
      assertNull(integer1);
      
      boolean boolean3 = range2.containsRange(range1);
      assertTrue(boolean3);
      assertSame(range1, range2);
      assertSame(range1, range3);
      assertSame(range2, range1);
      assertSame(range2, range3);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Integer integer2 = new Integer(1060);
      assertEquals(1060, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      long long0 = Integer.toUnsignedLong(0);
      assertEquals(0L, long0);
      
      int int1 = range0.elementCompareTo(integer2);
      assertEquals(1, int1);
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(int1 == int0);
      assertTrue(range0.isNaturalOrdering());
      
      Range<String> range4 = Range.is("cf_37:@qFhL#");
      assertNotNull(range4);
      assertTrue(range4.isNaturalOrdering());
      
      String string0 = range4.getMaximum();
      assertEquals("cf_37:@qFhL#", string0);
      assertNotNull(string0);
      assertTrue(range4.isNaturalOrdering());
      
      boolean boolean4 = range4.equals((Object) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(range4.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.isAfterRange((Range<Integer>) null);
      assertFalse(boolean0);
      assertFalse(range0.isNaturalOrdering());
      
      Integer integer1 = new Integer(37);
      assertEquals(37, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = Integer.compareUnsigned(37, 0);
      assertEquals(1, int0);
      
      boolean boolean1 = range0.isStartedBy(integer1);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.isNaturalOrdering());
      
      Integer integer2 = range0.getMinimum();
      assertEquals(0, (int)integer2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertFalse(range0.isNaturalOrdering());
      
      Integer integer3 = range0.fit(integer0);
      assertEquals(0, (int)integer3);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      doReturn(0).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.is((Object) integer3, comparator1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(range1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      boolean boolean2 = range1.isEndedBy((Object) null);
      assertFalse(boolean2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Object> comparator2 = range1.getComparator();
      assertSame(comparator2, comparator1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(comparator2);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<String> comparator3 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator3).compare(anyString() , anyString());
      Range<String> range2 = Range.is("..", comparator3);
      assertNotNull(range2);
      assertFalse(range2.isNaturalOrdering());
      
      String string0 = range2.toString();
      assertEquals("[......]", string0);
      assertNotNull(string0);
      assertFalse(range2.isNaturalOrdering());
      
      Range<String> range3 = Range.is("");
      assertNotSame(range3, range2);
      assertFalse(range3.equals((Object)range2));
      assertNotNull(range3);
      assertTrue(range3.isNaturalOrdering());
      
      boolean boolean3 = range2.isAfterRange(range3);
      assertFalse(boolean3);
      assertNotSame(range3, range2);
      assertNotSame(range2, range3);
      assertFalse(range3.equals((Object)range2));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(range2.equals((Object)range3));
      assertTrue(range3.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Comparator<String> comparator4 = range3.getComparator();
      assertNotSame(range3, range2);
      assertFalse(range3.equals((Object)range2));
      assertFalse(comparator4.equals((Object)comparator3));
      assertNotNull(comparator4);
      assertTrue(range3.isNaturalOrdering());
      
      Integer integer4 = new Integer(1);
      assertEquals(1, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      Range<Integer> range4 = Range.is(integer4);
      assertNotSame(range4, range0);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(range4.equals((Object)range0));
      assertNotNull(range4);
      assertTrue(range4.isNaturalOrdering());
      
      // Undeclared exception!
      try { 
        range4.intersectionWith((Range<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate intersection with non-overlapping range null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "%o|";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2488)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("%o|", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2488)).when(comparator1).compare(anyString() , anyString());
      Range<String> range1 = Range.between("%o|", "%o|", comparator1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2488)).when(comparator2).compare(any() , any());
      Range<Object> range2 = Range.is((Object) "%o|", comparator2);
      assertNotNull(range2);
      assertFalse(range2.isNaturalOrdering());
      
      Comparator<Range<Object>> comparator3 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator3).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range3 = Range.is(range2, comparator3);
      assertNotNull(range3);
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      boolean boolean0 = range3.isAfterRange((Range<Range<Object>>) null);
      assertFalse(boolean0);
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      Comparator<String> comparator4 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator4).compare(anyString() , anyString());
      Range<String> range4 = Range.between("XDQ#", "", comparator4);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertNotNull(range4);
      assertFalse(range4.isNaturalOrdering());
      
      // Undeclared exception!
      try { 
        Range.is((Object) range1, (Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-219));
      assertEquals((-219), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-219));
      assertEquals((-219), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = Integer.divideUnsigned(37, 37);
      assertEquals(1, int0);
      
      Range<Integer> range0 = Range.between(integer0, integer1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      int int1 = range0.elementCompareTo(integer1);
      assertEquals(0, int1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(int1 == int0);
      assertTrue(range0.isNaturalOrdering());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.is((Object) integer0, comparator0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)integer1));
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      Object object0 = range1.getMinimum();
      assertEquals((-219), object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(object0.equals((Object)int1));
      assertFalse(object0.equals((Object)int0));
      assertTrue(object0.equals((Object)integer1));
      assertNotNull(object0);
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(anyString() , anyString());
      Range<String> range2 = Range.between("Elements in a range must not be null: element1=", "Elements in a range must not be null: element1=", comparator1);
      assertNotNull(range2);
      assertFalse(range2.isNaturalOrdering());
      
      Range<Object> range3 = Range.is((Object) "Elements in a range must not be null: element1=", (Comparator<Object>) null);
      assertNotSame(range3, range1);
      assertFalse(range3.equals((Object)range1));
      assertNotNull(range3);
      assertTrue(range3.isNaturalOrdering());
      
      boolean boolean0 = range2.isBefore("");
      assertFalse(boolean0);
      assertFalse(range2.isNaturalOrdering());
      
      // Undeclared exception!
      try { 
        range1.intersectionWith(range3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      int int0 = Integer.max(0, 0);
      assertEquals(0, int0);
      
      Range<Integer> range0 = Range.between(integer0, integer0, comparator0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Integer integer1 = new Integer(2371);
      assertEquals(2371, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int1 = Integer.sum((-2326), (-1266));
      assertEquals((-3592), int1);
      assertFalse(int1 == int0);
      
      int int2 = Integer.compareUnsigned((-187), 0);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean0 = range0.isBefore(integer1);
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(range0.isNaturalOrdering());
      
      int int3 = range0.hashCode();
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Integer> comparator1 = range0.getComparator();
      assertSame(comparator1, comparator0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(comparator1);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2371, 0).when(comparator2).compare(anyString() , anyString());
      Range<String> range1 = Range.is("e0u1ln3g", comparator2);
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      boolean boolean1 = range1.isEndedBy("e0u1ln3g");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.isNaturalOrdering());
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)int2));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Range<String> range2 = Range.is("e0u1ln3g");
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertTrue(range2.isNaturalOrdering());
      
      Object object0 = range2.getMinimum();
      assertEquals("e0u1ln3g", object0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      assertNotNull(object0);
      assertTrue(range2.isNaturalOrdering());
      
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-187)).when(comparator3).compare(any() , any());
      Range<Object> range3 = Range.between((Object) integer2, (Object) "e0u1ln3g", comparator3);
      assertFalse(integer2.equals((Object)int2));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(range3);
      assertFalse(range3.isNaturalOrdering());
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      boolean boolean2 = range3.isEndedBy(integer3);
      assertFalse(boolean2);
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(integer2.equals((Object)int2));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(range3.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("|bk(%5C|", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<String> comparator1 = range0.getComparator();
      assertSame(comparator1, comparator0);
      assertNotNull(comparator1);
      assertFalse(range0.isNaturalOrdering());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      range0.hashCode();
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator2).compare(anyInt() , anyInt());
      Range<Integer> range1 = Range.between(integer0, integer0, comparator2);
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      range1.hashCode();
      assertFalse(range1.isNaturalOrdering());
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      range1.hashCode();
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Range<Integer>> comparator3 = (Comparator<Range<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator3).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Integer>> range2 = Range.is(range1, comparator3);
      assertNotNull(range2);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean1 = range2.isNaturalOrdering();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Range<String> range3 = Range.between("", "", comparator1);
      assertNotSame(range0, range3);
      assertSame(comparator1, comparator0);
      assertNotSame(range3, range0);
      assertFalse(range3.equals((Object)range0));
      assertNotNull(range3);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      Range<String> range4 = range0.intersectionWith(range3);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertSame(comparator1, comparator0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertNotNull(range4);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator4).compare(any() , any());
      Range<Object> range5 = Range.is((Object) "", comparator4);
      assertNotNull(range5);
      assertFalse(range5.isNaturalOrdering());
      
      Range range6 = (Range)range5.fit(range3);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertSame(comparator1, comparator0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertNotNull(range6);
      assertFalse(range5.isNaturalOrdering());
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Range<Integer> range0 = Range.is(integer0);
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      int int0 = Integer.compareUnsigned(2768, (-2466));
      assertEquals((-1), int0);
      
      boolean boolean0 = range0.isBefore(integer0);
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(range0.isNaturalOrdering());
      
      Integer integer1 = new Integer((-2466));
      assertEquals((-2466), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int1 = Integer.min(0, (-2466));
      assertEquals((-2466), int1);
      assertFalse(int1 == int0);
      
      int int2 = range0.elementCompareTo(integer1);
      assertEquals((-1), int2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(range0.isNaturalOrdering());
      
      String string0 = "b'c]xK$";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.is((Object) "b'c]xK$", comparator0);
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator1).compare(any() , any());
      Range<Object> range2 = Range.is((Object) "b'c]xK$", comparator1);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean1 = range2.isOverlappedBy(range1);
      assertTrue(boolean1);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Range<Object> range3 = range1.intersectionWith(range2);
      assertSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range2);
      assertSame(range3, range1);
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertNotNull(range3);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      // Undeclared exception!
      try { 
        Range.between(range1, range1, (Comparator<Range<Object>>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range<String> range0 = Range.is("]o|!yk");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(129, (-19), (-19), 37, 126).when(comparator0).compare(anyString() , anyString());
      Range<String> range1 = Range.between("]o|!yk", "]o|!yk", comparator0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      int int0 = range1.elementCompareTo("hafamCy%ud{:bYM");
      assertEquals((-1), int0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.isNaturalOrdering());
      
      String string0 = range1.toString();
      assertEquals("[]o|!yk..]o|!yk]", string0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(string0);
      assertFalse(range1.isNaturalOrdering());
      
      String string1 = range1.toString("]o|!yk");
      assertEquals("]o|!yk", string1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(range1.isNaturalOrdering());
      
      String string2 = range1.toString("]o|!yk");
      assertEquals("]o|!yk", string2);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertFalse(range1.isNaturalOrdering());
      
      Range<String> range2 = range0.intersectionWith(range1);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      
      boolean boolean0 = range2.isBefore("]o|!yk");
      assertFalse(boolean0);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      
      String string3 = range2.toString("");
      assertEquals("", string3);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      
      String string4 = range2.getMaximum();
      assertEquals("]o|!yk", string4);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 0).when(comparator1).compare(any() , any());
      Range<Object> range3 = Range.between((Object) "h>R/8", (Object) "", comparator1);
      assertNotNull(range3);
      assertFalse(range3.isNaturalOrdering());
      
      boolean boolean1 = range3.isEndedBy(range1);
      assertTrue(boolean1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range<String> range0 = Range.between("?M3Ioop", "?M3Ioop", (Comparator<String>) null);
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.contains("?M3Ioop");
      assertTrue(boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      String string0 = range0.fit("org.apache.commons.lang3.Range$ComparableComparator");
      assertEquals("?M3Ioop", string0);
      assertNotNull(string0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean1 = range0.isStartedBy("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      String string1 = range0.toString("?M3Ioop");
      assertEquals("?M3Ioop", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(range0.isNaturalOrdering());
      
      String string2 = range0.getMaximum();
      assertEquals("?M3Ioop", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertTrue(range0.isNaturalOrdering());
      
      Integer integer0 = new Integer(3834);
      assertEquals(3834, (int)integer0);
      assertNotNull(integer0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.between((Integer) null, integer0, comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=3834
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "]", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.isAfter("");
      assertFalse(boolean0);
      assertFalse(range0.isNaturalOrdering());
      
      boolean boolean1 = range0.containsRange((Range<Object>) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isNaturalOrdering());
      
      boolean boolean2 = range0.isAfter("]");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(range0.isNaturalOrdering());
      
      Range<String> range1 = Range.is("]");
      assertNotNull(range1);
      assertTrue(range1.isNaturalOrdering());
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyString() , anyString());
      Range<String> range2 = Range.is("", comparator1);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertFalse(range2.isNaturalOrdering());
      
      Range<String> range3 = range1.intersectionWith(range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertNotNull(range3);
      assertTrue(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertTrue(range3.isNaturalOrdering());
      
      Comparator<Range<String>> comparator2 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator2).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      boolean boolean3 = range2.isOverlappedBy(range1);
      assertTrue(boolean3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Range<Range<String>> range4 = Range.between(range3, range1, comparator2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertNotNull(range4);
      assertTrue(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertTrue(range3.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      Integer integer0 = new Integer((-1604));
      assertEquals((-1604), (int)integer0);
      assertNotNull(integer0);
      
      Comparator<Integer> comparator3 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator3).compare(anyInt() , anyInt());
      Range<Integer> range5 = Range.is(integer0, comparator3);
      assertNotNull(range5);
      assertFalse(range5.isNaturalOrdering());
      
      Comparator<Range<Integer>> comparator4 = (Comparator<Range<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator4).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Integer>> range6 = Range.is(range5, comparator4);
      assertNotNull(range6);
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range5.isNaturalOrdering());
      
      Range<String> range7 = range4.getMaximum();
      assertNotSame(range7, range2);
      assertNotSame(range7, range3);
      assertSame(range7, range1);
      assertSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range7);
      assertNotSame(range3, range1);
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertNotNull(range7);
      assertTrue(range7.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertTrue(range3.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range<String> range0 = Range.is(",>bBh");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range1 = Range.between("", " =;X)%%Q&W)t>5Yy", comparator0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      Range<String> range2 = range0.intersectionWith(range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      
      boolean boolean0 = range2.isOverlappedBy(range0);
      assertTrue(boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range<String> range0 = Range.between("", "G$N0I`)jX\"zx.ZK1M");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.isBefore("G$N0I`)jX\"zx.ZK1M");
      assertFalse(boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      String string0 = range0.getMinimum();
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(range0.isNaturalOrdering());
      
      Range<String> range1 = Range.is("Elements in a range must not be null: element1=");
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(range1.isNaturalOrdering());
      
      Range<String> range2 = range0.intersectionWith(range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      
      boolean boolean1 = range0.isOverlappedBy(range2);
      assertTrue(boolean1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(boolean1 == boolean0);
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      
      String string1 = range1.toString();
      assertEquals("[Elements in a range must not be null: element1=..Elements in a range must not be null: element1=]", string1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(range1.isNaturalOrdering());
      
      boolean boolean2 = range2.isOverlappedBy(range0);
      assertTrue(boolean2);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(840);
      assertEquals(840, (int)integer0);
      assertNotNull(integer0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.isStartedBy(integer0);
      assertTrue(boolean0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      doReturn(0, 0, 0).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range1 = Range.is(range0, comparator1);
      assertNotNull(range1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Range<Object>> comparator2 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator2).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range2 = Range.is(range0, comparator2);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Range<Range<Object>> range3 = range1.intersectionWith(range2);
      assertNotSame(range1, range2);
      assertSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range2);
      assertSame(range3, range1);
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertNotNull(range3);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      boolean boolean1 = range1.isBeforeRange(range3);
      assertFalse(boolean1);
      assertNotSame(range1, range2);
      assertSame(range1, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range2);
      assertSame(range3, range1);
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      boolean boolean2 = range1.isBefore(range0);
      assertFalse(boolean2);
      assertNotSame(range1, range2);
      assertSame(range1, range3);
      assertTrue(range1.equals((Object)range2));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Range<Object>> comparator3 = range1.getComparator();
      assertNotSame(range1, range2);
      assertSame(range1, range3);
      assertSame(comparator3, comparator1);
      assertNotSame(comparator3, comparator2);
      assertTrue(range1.equals((Object)range2));
      assertFalse(comparator3.equals((Object)comparator2));
      assertNotNull(comparator3);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      // Undeclared exception!
      try { 
        Range.is((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("B-#AxB{pCiMEyaVW NB", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      range0.hashCode();
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparator1).toString();
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyString() , anyString());
      Range<String> range1 = Range.between("H2\"zf8g6Lw", "ypR+JfJc#JKh!Lr\"", comparator1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      boolean boolean0 = range0.contains("");
      assertTrue(boolean0);
      assertNotSame(range0, range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.isNaturalOrdering());
      
      boolean boolean1 = range0.isBeforeRange(range1);
      assertFalse(boolean1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Range<String> range2 = range1.intersectionWith(range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Range<String> range3 = range2.intersectionWith(range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertNotNull(range3);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      Range<String> range4 = range3.intersectionWith(range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertNotNull(range4);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      boolean boolean2 = range3.contains("H2\"zf8g6Lw");
      assertTrue(boolean2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      int int0 = range0.elementCompareTo("B-#AxB{pCiMEyaVW NB");
      assertEquals(0, int0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.isNaturalOrdering());
      
      boolean boolean3 = range0.isOverlappedBy(range1);
      assertTrue(boolean3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<String> comparator2 = range1.getComparator();
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(comparator2, comparator0);
      assertSame(comparator2, comparator1);
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range0));
      assertFalse(comparator2.equals((Object)comparator0));
      assertNotNull(comparator2);
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator3).compare(any() , any());
      Range<Object> range5 = Range.between((Object) "B-#AxB{pCiMEyaVW NB", (Object) "B-#AxB{pCiMEyaVW NB", comparator3);
      assertNotNull(range5);
      assertFalse(range5.isNaturalOrdering());
      
      Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator4).toString();
      doReturn(0, 0, 0, 0, 0).when(comparator4).compare(any() , any());
      Range<Object> range6 = Range.is((Object) range5, comparator4);
      assertNotSame(range6, range5);
      assertNotSame(range5, range6);
      assertFalse(range6.equals((Object)range5));
      assertNotNull(range6);
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range5.isNaturalOrdering());
      
      Range<Object> range7 = range6.intersectionWith(range5);
      assertNotSame(range6, range5);
      assertNotSame(range6, range7);
      assertNotSame(range7, range5);
      assertNotSame(range7, range6);
      assertNotSame(range5, range6);
      assertNotSame(range5, range7);
      assertFalse(range6.equals((Object)range5));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range5.equals((Object)range6));
      assertNotNull(range7);
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range7.isNaturalOrdering());
      assertFalse(range5.isNaturalOrdering());
      
      Range range8 = (Range)range7.getMinimum();
      assertNotSame(range6, range5);
      assertNotSame(range6, range7);
      assertNotSame(range7, range5);
      assertNotSame(range7, range6);
      assertNotSame(range5, range6);
      assertNotSame(range5, range7);
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertNotNull(range8);
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range7.isNaturalOrdering());
      assertFalse(range8.isNaturalOrdering());
      assertFalse(range5.isNaturalOrdering());
      
      Range range9 = (Range)range7.getMinimum();
      assertNotSame(range6, range5);
      assertNotSame(range6, range7);
      assertNotSame(range7, range5);
      assertNotSame(range7, range6);
      assertSame(range9, range8);
      assertNotSame(range5, range6);
      assertNotSame(range5, range7);
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertNotNull(range9);
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range7.isNaturalOrdering());
      assertFalse(range9.isNaturalOrdering());
      assertFalse(range5.isNaturalOrdering());
      
      Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator5).compare(any() , any());
      Range<Object> range10 = Range.between((Object) range8, (Object) range9, comparator5);
      assertNotSame(range6, range10);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertNotSame(range7, range10);
      assertNotSame(range7, range5);
      assertNotSame(range7, range6);
      assertSame(range8, range9);
      assertSame(range9, range8);
      assertNotSame(range10, range6);
      assertNotSame(range10, range7);
      assertNotSame(range10, range5);
      assertNotSame(range5, range6);
      assertNotSame(range5, range10);
      assertNotSame(range5, range7);
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range5));
      assertTrue(range10.equals((Object)range6));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertNotNull(range10);
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range7.isNaturalOrdering());
      assertFalse(range8.isNaturalOrdering());
      assertFalse(range9.isNaturalOrdering());
      assertFalse(range10.isNaturalOrdering());
      assertFalse(range5.isNaturalOrdering());
      
      boolean boolean4 = range5.containsRange(range10);
      assertTrue(boolean4);
      assertNotSame(range6, range10);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertNotSame(range7, range10);
      assertNotSame(range7, range5);
      assertNotSame(range7, range6);
      assertSame(range8, range9);
      assertSame(range9, range8);
      assertNotSame(range10, range6);
      assertNotSame(range10, range7);
      assertNotSame(range10, range5);
      assertNotSame(range5, range6);
      assertNotSame(range5, range10);
      assertNotSame(range5, range7);
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range10));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range5));
      assertTrue(range10.equals((Object)range6));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range7.isNaturalOrdering());
      assertFalse(range8.isNaturalOrdering());
      assertFalse(range9.isNaturalOrdering());
      assertFalse(range10.isNaturalOrdering());
      assertFalse(range5.isNaturalOrdering());
      
      boolean boolean5 = range2.isAfter((String) null);
      assertFalse(boolean5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Range range11 = (Range)range6.fit(range0);
      assertNotSame(range6, range10);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range11, range8);
      assertNotSame(range11, range9);
      assertNotSame(range5, range6);
      assertNotSame(range5, range10);
      assertNotSame(range5, range7);
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range10));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range11.equals((Object)range9));
      assertTrue(range11.equals((Object)range8));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range7));
      assertNotNull(range11);
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range11.isNaturalOrdering());
      assertFalse(range5.isNaturalOrdering());
      
      Range range12 = (Range)range10.fit(range9);
      assertNotSame(range6, range10);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertNotSame(range7, range10);
      assertNotSame(range7, range5);
      assertNotSame(range7, range6);
      assertSame(range8, range12);
      assertSame(range8, range9);
      assertNotSame(range8, range11);
      assertSame(range9, range12);
      assertSame(range9, range8);
      assertNotSame(range9, range11);
      assertNotSame(range10, range6);
      assertNotSame(range10, range7);
      assertNotSame(range10, range5);
      assertSame(range12, range8);
      assertNotSame(range12, range11);
      assertSame(range12, range9);
      assertNotSame(range5, range6);
      assertNotSame(range5, range10);
      assertNotSame(range5, range7);
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range10));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range6));
      assertTrue(range8.equals((Object)range11));
      assertTrue(range9.equals((Object)range11));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range5));
      assertTrue(range10.equals((Object)range6));
      assertTrue(range12.equals((Object)range11));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range7));
      assertNotNull(range12);
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range7.isNaturalOrdering());
      assertFalse(range8.isNaturalOrdering());
      assertFalse(range9.isNaturalOrdering());
      assertFalse(range10.isNaturalOrdering());
      assertFalse(range12.isNaturalOrdering());
      assertFalse(range5.isNaturalOrdering());
      
      int int1 = range5.hashCode();
      assertNotSame(range5, range6);
      assertNotSame(range5, range10);
      assertNotSame(range5, range7);
      assertFalse(int1 == int0);
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.isNaturalOrdering());
      
      Comparator<Range<Object>> comparator6 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator6).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range13 = Range.is(range10, comparator6);
      assertNotSame(range6, range10);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertNotSame(range7, range10);
      assertNotSame(range7, range5);
      assertNotSame(range7, range6);
      assertSame(range8, range12);
      assertSame(range8, range9);
      assertNotSame(range8, range11);
      assertSame(range9, range12);
      assertSame(range9, range8);
      assertNotSame(range9, range11);
      assertNotSame(range10, range6);
      assertNotSame(range10, range7);
      assertNotSame(range10, range5);
      assertNotSame(range5, range6);
      assertNotSame(range5, range10);
      assertNotSame(range5, range7);
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range10));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range6));
      assertTrue(range8.equals((Object)range11));
      assertTrue(range9.equals((Object)range11));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range5));
      assertTrue(range10.equals((Object)range6));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range7));
      assertNotNull(range13);
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range7.isNaturalOrdering());
      assertFalse(range8.isNaturalOrdering());
      assertFalse(range9.isNaturalOrdering());
      assertFalse(range10.isNaturalOrdering());
      assertFalse(range13.isNaturalOrdering());
      assertFalse(range5.isNaturalOrdering());
      
      boolean boolean6 = range13.contains(range5);
      assertTrue(boolean6);
      assertNotSame(range6, range10);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertNotSame(range7, range10);
      assertNotSame(range7, range5);
      assertNotSame(range7, range6);
      assertSame(range8, range12);
      assertSame(range8, range9);
      assertNotSame(range8, range11);
      assertSame(range9, range12);
      assertSame(range9, range8);
      assertNotSame(range9, range11);
      assertNotSame(range10, range6);
      assertNotSame(range10, range7);
      assertNotSame(range10, range5);
      assertNotSame(range5, range6);
      assertNotSame(range5, range10);
      assertNotSame(range5, range7);
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range10));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range6));
      assertTrue(range8.equals((Object)range11));
      assertTrue(range9.equals((Object)range11));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range5));
      assertTrue(range10.equals((Object)range6));
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range7.isNaturalOrdering());
      assertFalse(range8.isNaturalOrdering());
      assertFalse(range9.isNaturalOrdering());
      assertFalse(range10.isNaturalOrdering());
      assertFalse(range13.isNaturalOrdering());
      assertFalse(range5.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range<String> range0 = Range.between("Mn1", "Mn1");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      String string0 = range0.fit("GD&ze(");
      assertEquals("Mn1", string0);
      assertNotNull(string0);
      assertTrue(range0.isNaturalOrdering());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range1 = Range.is("GD&ze(", comparator0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      Range<String> range2 = range0.intersectionWith(range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(any() , any());
      Range<Object> range3 = Range.is((Object) "Mn1", comparator1);
      assertNotNull(range3);
      assertFalse(range3.isNaturalOrdering());
      
      boolean boolean0 = range3.isNaturalOrdering();
      assertFalse(boolean0);
      assertFalse(range3.isNaturalOrdering());
      
      boolean boolean1 = range3.isStartedBy(range1);
      assertTrue(boolean1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      Integer integer0 = new Integer((-779));
      assertEquals((-779), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-779));
      assertEquals((-779), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator2).compare(anyInt() , anyInt());
      Range<Integer> range4 = Range.between(integer0, integer1, comparator2);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(range4);
      assertFalse(range4.isNaturalOrdering());
      
      Integer integer2 = new Integer((-779));
      assertEquals((-779), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Range<Integer> range5 = Range.is(integer2);
      assertNotSame(range5, range4);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(range5.equals((Object)range4));
      assertNotNull(range5);
      assertTrue(range5.isNaturalOrdering());
      
      boolean boolean2 = range4.isAfterRange(range5);
      assertFalse(boolean2);
      assertNotSame(range4, range5);
      assertNotSame(range5, range4);
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(range4.equals((Object)range5));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(range5.equals((Object)range4));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(range4.isNaturalOrdering());
      assertTrue(range5.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "*Z0";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("*Z0", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Object> comparator1 = null;
      // Undeclared exception!
      try { 
        Range.is((Object) range0, (Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "";
      Range<String> range0 = Range.between("", "f");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      String string1 = null;
      boolean boolean0 = range0.isAfter("f");
      assertFalse(boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean1 = range0.isStartedBy((String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      // Undeclared exception!
      try { 
        range0.elementCompareTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Element is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range<String> range0 = Range.is("");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      range0.hashCode();
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.isBefore("INSTANCE");
      assertTrue(boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean1 = range0.isOverlappedBy((Range<String>) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean2 = range0.isOverlappedBy((Range<String>) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean3 = range0.isStartedBy("rED;~iTRK,+8{RHD");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean4 = range0.contains("INSTANCE");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(range0.isNaturalOrdering());
      
      int int0 = range0.elementCompareTo("INSTANCE");
      assertEquals(1, int0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean5 = range0.isBefore("\"o$f4;");
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(range0.isNaturalOrdering());
      
      int int1 = range0.elementCompareTo("INSTANCE");
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertTrue(range0.isNaturalOrdering());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range1 = Range.is("&", comparator0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-753), (-753)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("", "1&[0", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.contains("]");
      assertFalse(boolean0);
      assertFalse(range0.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) "JijS(~0PG]EJO", (Object) "JijS(~0PG]EJO", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.isStartedBy("JijS(~0PG]EJO");
      assertTrue(boolean0);
      assertFalse(range0.isNaturalOrdering());
      
      Integer integer0 = new Integer(17);
      assertEquals(17, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(762);
      assertEquals(762, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Range<Integer> range1 = Range.between(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(range1);
      assertTrue(range1.isNaturalOrdering());
      
      boolean boolean1 = range1.isBefore(integer0);
      assertFalse(boolean1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean1 == boolean0);
      assertTrue(range1.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "]4(a_1?3TQy)#,$jj";
      Range<String> range0 = Range.is("]4(a_1?3TQy)#,$jj", (Comparator<String>) null);
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      Range<String> range1 = Range.is("");
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(range1.isNaturalOrdering());
      
      // Undeclared exception!
      try { 
        range1.fit((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Element is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer((-1894));
      assertEquals((-1894), (int)integer0);
      assertNotNull(integer0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.isBeforeRange((Range<Integer>) null);
      assertFalse(boolean0);
      assertFalse(range0.isNaturalOrdering());
      
      String string0 = Integer.toUnsignedString(17);
      assertEquals("17", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Range.between((Integer) null, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=-1894
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range<String> range0 = Range.is("");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      Range<String> range1 = Range.is("");
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(range1.isNaturalOrdering());
      
      boolean boolean0 = range1.isAfter("INSTANCE");
      assertFalse(boolean0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.isNaturalOrdering());
      
      Range<String> range2 = range0.intersectionWith(range1);
      assertNotSame(range0, range1);
      assertSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is(object0, comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Range<Object> range1 = range0.intersectionWith(range0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range2 = Range.between(range0, range1, comparator1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNotNull(range2);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range<String> range0 = Range.is("");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range1 = Range.between("", "", comparator0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Range<String>> comparator1 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range2 = Range.is(range1, comparator1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range2);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Range range3 = (Range)range2.getMinimum();
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range3);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator2).compare(any() , any());
      Range<Object> range4 = Range.between((Object) range3, (Object) range2, comparator2);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range4);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.is((Object) null, comparator3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range<String> range0 = Range.is("SrOupmo@@5/+;po");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      Comparator<Range<String>> comparator0 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range1 = Range.is(range0, comparator0);
      assertNotNull(range1);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Range<String>> comparator1 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range2 = Range.between(range0, range0, comparator1);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean0 = range2.isEndedBy(range0);
      assertTrue(boolean0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Range<Range<String>> range3 = range1.intersectionWith(range2);
      assertNotSame(range1, range2);
      assertSame(range1, range3);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertSame(range3, range1);
      assertNotSame(range3, range2);
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertNotNull(range3);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      boolean boolean1 = range3.isOverlappedBy(range2);
      assertTrue(boolean1);
      assertNotSame(range1, range2);
      assertSame(range1, range3);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertSame(range3, range1);
      assertNotSame(range3, range2);
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range3.equals((Object)range2));
      assertTrue(boolean1 == boolean0);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = range0.equals(object0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(range0.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range<String> range0 = Range.between("", "G$N0I`)jX\"zx.ZK1M");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.isBefore("G$N0I`)jX\"zx.ZK1M");
      assertFalse(boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      String string0 = range0.getMinimum();
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(range0.isNaturalOrdering());
      
      Range<String> range1 = Range.is("Elements in a range must not be null: element1=");
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(range1.isNaturalOrdering());
      
      Range<String> range2 = range0.intersectionWith(range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      
      boolean boolean1 = range2.isBefore("Vx^S");
      assertTrue(boolean1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(boolean1 == boolean0);
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      
      boolean boolean2 = range2.isOverlappedBy(range0);
      assertTrue(boolean2);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range<String> range0 = Range.is("");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      Range<String> range1 = Range.between("", "", (Comparator<String>) null);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(range1.isNaturalOrdering());
      
      Range<String> range2 = range0.intersectionWith(range1);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      
      boolean boolean0 = range2.isNaturalOrdering();
      assertTrue(boolean0);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(29);
      assertEquals(29, (int)integer0);
      assertNotNull(integer0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Range<Object> range1 = range0.intersectionWith(range0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      boolean boolean0 = range1.isOverlappedBy(range0);
      assertTrue(boolean0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator2).compare(anyString() , anyString());
      Range<String> range2 = Range.is("", comparator2);
      assertNotNull(range2);
      assertFalse(range2.isNaturalOrdering());
      
      Range<String> range3 = Range.is("", (Comparator<String>) null);
      assertNotSame(range3, range2);
      assertTrue(range3.equals((Object)range2));
      assertNotNull(range3);
      assertTrue(range3.isNaturalOrdering());
      
      boolean boolean1 = range2.isOverlappedBy(range3);
      assertTrue(boolean1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range2);
      assertTrue(range2.equals((Object)range3));
      assertTrue(range3.equals((Object)range2));
      assertTrue(boolean1 == boolean0);
      assertFalse(range2.isNaturalOrdering());
      assertTrue(range3.isNaturalOrdering());
      
      Range<Range<Object>> range4 = Range.between(range1, range0, comparator1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNotNull(range4);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      boolean boolean2 = range4.isBefore(range0);
      assertFalse(boolean2);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      Comparator<String> comparator3 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator3).compare(anyString() , anyString());
      Range<String> range5 = Range.between("", "", comparator3);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      assertNotNull(range5);
      assertFalse(range5.isNaturalOrdering());
      
      Comparator<Range<String>> comparator4 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator4).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range6 = Range.is(range5, comparator4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      assertNotNull(range6);
      assertFalse(range5.isNaturalOrdering());
      assertFalse(range6.isNaturalOrdering());
      
      boolean boolean3 = range6.isNaturalOrdering();
      assertFalse(boolean3);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.isNaturalOrdering());
      assertFalse(range6.isNaturalOrdering());
      
      Range<Object> range7 = range0.intersectionWith(range1);
      assertSame(range7, range1);
      assertSame(range7, range0);
      assertSame(range0, range7);
      assertSame(range0, range1);
      assertSame(range1, range7);
      assertSame(range1, range0);
      assertNotNull(range7);
      assertFalse(range7.isNaturalOrdering());
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Integer> comparator5 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.between(integer0, (Integer) null, comparator5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=29, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer((-2670));
      assertEquals((-2670), (int)integer0);
      assertNotNull(integer0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Object object0 = range0.getMinimum();
      assertEquals((-2670), object0);
      assertNotNull(object0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator2).compare(any() , any());
      Range<Object> range1 = Range.between((Object) object0, (Object) range0, comparator2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Range<Object> range2 = range0.intersectionWith(range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Range<Object> range3 = range2.intersectionWith(range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertNotNull(range3);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      boolean boolean0 = range0.isAfterRange(range2);
      assertFalse(boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Range<Object> range4 = Range.between((Object) object0, (Object) integer0, comparator1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertNotNull(range4);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      range4.hashCode();
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      String string0 = "";
      Range<String> range5 = Range.is("");
      assertNotNull(range5);
      assertTrue(range5.isNaturalOrdering());
      
      boolean boolean1 = range5.contains("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(range5.isNaturalOrdering());
      
      Comparator<Range<Object>> comparator3 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator3).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range6 = Range.is(range4, comparator3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertNotNull(range6);
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      boolean boolean2 = range6.isNaturalOrdering();
      assertFalse(boolean2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      Range<Integer> range7 = Range.is(integer0);
      assertNotNull(range7);
      assertTrue(range7.isNaturalOrdering());
      
      boolean boolean3 = range1.isAfterRange(range2);
      assertFalse(boolean3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean4 = range7.isNaturalOrdering();
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(range7.isNaturalOrdering());
      
      Comparator<Range<String>> comparator4 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator4).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range8 = Range.is(range5, comparator4);
      assertNotNull(range8);
      assertFalse(range8.isNaturalOrdering());
      assertTrue(range5.isNaturalOrdering());
      
      int int0 = range5.elementCompareTo("");
      assertEquals(0, int0);
      assertTrue(range5.isNaturalOrdering());
      
      // Undeclared exception!
      try { 
        range8.intersectionWith((Range<Range<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate intersection with non-overlapping range null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.between("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.is((Object) null, comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range<String> range0 = Range.between("org.apache.commons.lang3.Range", "org.apache.commons.lang3.Range");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.isNaturalOrdering();
      assertTrue(boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      Range<String> range1 = Range.between("", "");
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(range1.isNaturalOrdering());
      
      boolean boolean1 = range0.isAfterRange(range1);
      assertTrue(boolean1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer((-1117));
      assertEquals((-1117), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare((-1117), 193);
      assertEquals((-1), int0);
      
      String string0 = Integer.toUnsignedString(193);
      assertEquals("193", string0);
      assertNotNull(string0);
      
      int int1 = Integer.max((-1117), (-1313));
      assertEquals((-1117), int1);
      assertFalse(int1 == int0);
      
      Range<Integer> range0 = Range.is(integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.isEndedBy(integer0);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean1 = range0.isStartedBy((Integer) null);
      assertFalse(boolean1);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      int int2 = range0.hashCode();
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(range0.isNaturalOrdering());
      
      Range<String> range1 = Range.between("", "");
      assertNotNull(range1);
      assertTrue(range1.isNaturalOrdering());
      
      String string1 = range1.getMinimum();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(range1.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range<String> range0 = Range.between("'/", "-K@rop$W");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.isOverlappedBy((Range<String>) null);
      assertFalse(boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Range<Integer> range1 = Range.between(integer0, integer1, (Comparator<Integer>) null);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(range1);
      assertTrue(range1.isNaturalOrdering());
      
      Integer integer2 = range1.getMinimum();
      assertEquals(1, (int)integer2);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertTrue(range1.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Range<Integer> range0 = Range.between(integer0, integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      Integer integer2 = new Integer((-215));
      assertEquals((-215), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Range<Integer> range1 = Range.is(integer2);
      assertNotSame(range1, range0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(range1.isNaturalOrdering());
      
      // Undeclared exception!
      try { 
        range0.intersectionWith(range1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate intersection with non-overlapping range [-215..-215]
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("", "1&[0", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.contains("O4zl3`6");
      assertTrue(boolean0);
      assertFalse(range0.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range<String> range0 = Range.between("", "");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.isEndedBy("");
      assertTrue(boolean0);
      assertTrue(range0.isNaturalOrdering());
      
      String string0 = range0.toString("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(range0.isNaturalOrdering());
      
      String string1 = range0.toString();
      assertEquals("[..]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(range0.isNaturalOrdering());
      
      String string2 = range0.toString("[..]");
      assertEquals("[..]", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertTrue(range0.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer((-2364));
      assertEquals((-2364), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2364));
      assertEquals((-2364), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Range<Integer> range0 = Range.between(integer0, integer1, (Comparator<Integer>) null);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      boolean boolean0 = range0.isEndedBy(integer0);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(range0.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("FogbE1QTgz=", "FogbE1QTgz=", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Range<String> range1 = Range.is(" rE#o\u0003aUG^sL-fiJ");
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(range1.isNaturalOrdering());
      
      boolean boolean0 = range0.isBeforeRange(range1);
      assertFalse(boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator1).toString();
      doReturn(0, 0, 0, 0).when(comparator1).compare(any() , any());
      Range<Object> range2 = Range.is((Object) " MbPp9%4", comparator1);
      assertNotNull(range2);
      assertFalse(range2.isNaturalOrdering());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator2).compare(any() , any());
      Range<Object> range3 = Range.between((Object) " rE#o\u0003aUG^sL-fiJ", object0, comparator2);
      assertNotSame(range3, range2);
      assertFalse(range3.equals((Object)range2));
      assertNotNull(range3);
      assertFalse(range3.isNaturalOrdering());
      
      Range<Object> range4 = range2.intersectionWith(range3);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertFalse(range2.equals((Object)range3));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertNotNull(range4);
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      range4.hashCode();
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range2.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "..", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Range<Object> range1 = range0.intersectionWith(range0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Object object0 = range1.getMinimum();
      assertEquals("..", object0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNotNull(object0);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      Range<Object> range2 = Range.between((Object) "..", (Object) "..", comparator1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertFalse(range2.isNaturalOrdering());
      
      Object object1 = range2.getMaximum();
      assertEquals("..", object1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(object1.equals((Object)object0));
      assertNotNull(object1);
      assertFalse(range2.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range<String> range0 = Range.between("", "");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      Range<String> range1 = Range.is("");
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(range1.isNaturalOrdering());
      
      Range<String> range2 = range0.intersectionWith(range1);
      assertNotSame(range0, range1);
      assertSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertTrue(range0.isNaturalOrdering());
      assertTrue(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      
      int int0 = range0.elementCompareTo("");
      assertEquals(0, int0);
      assertNotSame(range0, range1);
      assertSame(range0, range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "..", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.between((Object) "..", (Object) range0, comparator1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Range<Object> range2 = range0.intersectionWith(range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean0 = range2.isOverlappedBy(range0);
      assertTrue(boolean0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is(object0, comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Object object1 = range0.fit(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      assertFalse(range0.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range<String> range0 = Range.is("", (Comparator<String>) null);
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      Object object0 = range0.getMaximum();
      assertEquals("", object0);
      assertNotNull(object0);
      assertTrue(range0.isNaturalOrdering());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        Range.between((Object) "", object1, (Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range<String> range0 = Range.is("MY(");
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      String string0 = range0.toString();
      assertEquals("[MY(..MY(]", string0);
      assertNotNull(string0);
      assertTrue(range0.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("YO", "YO", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      // Undeclared exception!
      try { 
        range0.toString("e2WMTU@dp(%C5");
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // c != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer((-750));
      assertEquals((-750), (int)integer0);
      assertNotNull(integer0);
      
      Range<Integer> range0 = Range.is(integer0);
      assertNotNull(range0);
      assertTrue(range0.isNaturalOrdering());
      
      Comparator<Range<Integer>> comparator0 = (Comparator<Range<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Integer>> range1 = Range.is(range0, comparator0);
      assertNotNull(range1);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      String string0 = range1.toString();
      assertEquals("[[-750..-750]..[-750..-750]]", string0);
      assertNotNull(string0);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      boolean boolean0 = range1.isStartedBy(range0);
      assertTrue(boolean0);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Range<String> range2 = Range.is("[[-750..-750]..[-750..-750]]");
      assertNotNull(range2);
      assertTrue(range2.isNaturalOrdering());
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyString() , anyString());
      Range<String> range3 = Range.between("", "");
      assertNotSame(range3, range2);
      assertFalse(range3.equals((Object)range2));
      assertNotNull(range3);
      assertTrue(range3.isNaturalOrdering());
      
      boolean boolean1 = range2.isBeforeRange(range3);
      assertFalse(boolean1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range2);
      assertFalse(range2.equals((Object)range3));
      assertFalse(range3.equals((Object)range2));
      assertFalse(boolean1 == boolean0);
      assertTrue(range2.isNaturalOrdering());
      assertTrue(range3.isNaturalOrdering());
      
      Range<String> range4 = Range.is("[[-750..-750]..[-750..-750]]", comparator1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertFalse(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range2));
      assertNotNull(range4);
      assertFalse(range4.isNaturalOrdering());
      
      Integer integer1 = new Integer(577);
      assertEquals(577, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = range0.elementCompareTo(integer1);
      assertEquals(1, int0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(range0.isNaturalOrdering());
      
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator2).compare(anyString() , anyString());
      Range<String> range5 = Range.between("?5mVv(G}", "Element is null", comparator2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range3));
      assertNotNull(range5);
      assertFalse(range5.isNaturalOrdering());
      
      String string1 = range2.getMinimum();
      assertEquals("[[-750..-750]..[-750..-750]]", string1);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range3));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(range2.isNaturalOrdering());
      
      String string2 = range2.getMinimum();
      assertEquals("[[-750..-750]..[-750..-750]]", string2);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertTrue(string2.equals((Object)string0));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range3));
      assertNotNull(string2);
      assertTrue(range2.isNaturalOrdering());
      
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator3).compare(any() , any());
      Range<Object> range6 = Range.is((Object) "[[-750..-750]..[-750..-750]]", comparator3);
      assertNotNull(range6);
      assertFalse(range6.isNaturalOrdering());
      
      Integer integer2 = new Integer((-2214));
      assertEquals((-2214), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      int int1 = Integer.divideUnsigned(2472, 558);
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      int int2 = range1.hashCode();
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      int int3 = Integer.compareUnsigned((-2558), 193);
      assertEquals(1, int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      
      int int4 = Integer.divideUnsigned((-2214), (-750));
      assertEquals(0, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      
      Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator4).compare(any() , any());
      Range<Object> range7 = Range.is((Object) integer2, comparator4);
      assertNotSame(range7, range6);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int3));
      assertFalse(integer2.equals((Object)int4));
      assertFalse(range7.equals((Object)range6));
      assertNotNull(range7);
      assertFalse(range7.isNaturalOrdering());
      
      String string3 = range7.toString("[[-750..-750]..[-750..-750]]");
      assertEquals("[[-750..-750]..[-750..-750]]", string3);
      assertNotSame(range7, range6);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int3));
      assertFalse(integer2.equals((Object)int4));
      assertFalse(range7.equals((Object)range6));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertFalse(range7.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(180, 180, 180, 180).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator1).toString();
      doReturn(180, (-1), (-1)).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.between((Object) range0, (Object) range0, comparator1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      boolean boolean0 = range0.isBeforeRange(range1);
      assertTrue(boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = range1.isAfter(object0);
      assertTrue(boolean1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      boolean boolean2 = range0.containsRange(range1);
      assertFalse(boolean2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      String string0 = range1.toString("");
      assertEquals("", string0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(string0);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Range range2 = (Range)range1.getMaximum();
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range2);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Comparator<Object> comparator2 = range1.getComparator();
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(comparator2, comparator0);
      assertSame(comparator2, comparator1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(comparator2.equals((Object)comparator0));
      assertNotNull(comparator2);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Range<Object>> comparator3 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "'?_").when(comparator3).toString();
      doReturn((-3), 180, 1285, (-3), (-1)).when(comparator3).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range3 = Range.between(range0, range1, comparator3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range3);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      
      Comparator<Range<Object>> comparator4 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3241, 1285, (-290), 0, 0).when(comparator4).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range4 = Range.is(range0, comparator4);
      assertNotSame(range0, range1);
      assertNotSame(range4, range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertNotNull(range4);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      boolean boolean3 = range3.isAfterRange(range4);
      assertFalse(boolean3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range3, range4);
      assertNotSame(range4, range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range4.equals((Object)range3));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      boolean boolean4 = range4.isAfter(range1);
      assertFalse(boolean4);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range4, range3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      Range<Object> range5 = Range.between((Object) range1, (Object) "9Q%Epxg,l", comparator2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(comparator2, comparator0);
      assertSame(comparator2, comparator1);
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(comparator2.equals((Object)comparator0));
      assertNotNull(range5);
      assertFalse(range5.isNaturalOrdering());
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Range<Range<Object>> range6 = range3.intersectionWith(range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range6, range3);
      assertNotSame(range6, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range4, range6);
      assertNotSame(range4, range3);
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range4.equals((Object)range3));
      assertNotNull(range6);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      Range<Object> range7 = range6.getMaximum();
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range6, range3);
      assertNotSame(range6, range4);
      assertNotSame(range7, range5);
      assertSame(range7, range1);
      assertNotSame(range7, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertSame(range1, range7);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range4, range6);
      assertNotSame(range4, range3);
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range3));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range3));
      assertNotNull(range7);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range7.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3202, (-3370), 3202, (-3370), (-1064)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("", "]", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Object object0 = range0.getMinimum();
      assertEquals("]", object0);
      assertNotNull(object0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-729), 726, (-1969), 16, 3202).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.is((Object) "]", comparator1);
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      Range<Object> range2 = range1.intersectionWith(range1);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertNotNull(range2);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean0 = range2.containsRange(range1);
      assertFalse(boolean0);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean1 = range2.isAfter(object1);
      assertFalse(boolean1);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean2 = range2.isOverlappedBy(range1);
      assertFalse(boolean2);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      int int0 = range2.elementCompareTo("]");
      assertEquals(1, int0);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Object object2 = range2.fit("");
      assertEquals("]", object2);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertTrue(object2.equals((Object)object0));
      assertNotNull(object2);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean3 = range1.isBefore("]");
      assertTrue(boolean3);
      assertSame(range1, range2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator2).toString();
      doReturn((-856), 0, 0, 0).when(comparator2).compare(anyString() , anyString());
      Range<String> range3 = Range.is("Cannot calculate intersection with non-overlapping range %s", comparator2);
      assertNotSame(range3, range0);
      assertFalse(range3.equals((Object)range0));
      assertNotNull(range3);
      assertFalse(range3.isNaturalOrdering());
      
      Range<String> range4 = range3.intersectionWith(range0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertNotNull(range4);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
      assertFalse(range4.isNaturalOrdering());
      
      boolean boolean4 = range0.containsRange(range3);
      assertFalse(boolean4);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("", "]", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      Object object0 = range0.getMinimum();
      assertEquals("", object0);
      assertNotNull(object0);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.is((Object) "", comparator1);
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      Range<Object> range2 = range1.intersectionWith(range1);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertNotNull(range2);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean0 = range2.containsRange(range1);
      assertTrue(boolean0);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean1 = range2.isAfter(object1);
      assertFalse(boolean1);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean2 = range2.isOverlappedBy(range1);
      assertTrue(boolean2);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      int int0 = range2.elementCompareTo("]");
      assertEquals(0, int0);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      Object object2 = range2.fit("");
      assertEquals("", object2);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertTrue(object2.equals((Object)object0));
      assertNotNull(object2);
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range2.isNaturalOrdering());
      
      boolean boolean3 = range1.isBefore("");
      assertFalse(boolean3);
      assertSame(range1, range2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator2).compare(anyString() , anyString());
      Range<String> range3 = Range.is("Cannot calculate intersection with non-overlapping range %s", comparator2);
      assertNotSame(range3, range0);
      assertFalse(range3.equals((Object)range0));
      assertNotNull(range3);
      assertFalse(range3.isNaturalOrdering());
      
      boolean boolean4 = range0.containsRange(range3);
      assertTrue(boolean4);
      assertNotSame(range0, range3);
      assertNotSame(range3, range0);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range3.equals((Object)range0));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(range0.isNaturalOrdering());
      assertFalse(range3.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = Integer.getInteger("VyA&eyD3gF{V!", 0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        Range.between(integer0, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=0, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is(", element2=", comparator0);
      assertNotNull(range0);
      assertFalse(range0.isNaturalOrdering());
      
      String string0 = range0.fit("]@d'D");
      assertEquals("]@d'D", string0);
      assertNotNull(string0);
      assertFalse(range0.isNaturalOrdering());
      
      String string1 = range0.getMinimum();
      assertEquals(", element2=", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.between((Object) "]@d'D", (Object) ", element2=", comparator1);
      assertNotNull(range1);
      assertFalse(range1.isNaturalOrdering());
      
      boolean boolean0 = range1.isAfter("]@d'D");
      assertFalse(boolean0);
      assertFalse(range1.isNaturalOrdering());
      
      boolean boolean1 = range1.isBefore("]@d'D");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isNaturalOrdering());
      
      Object object0 = range1.getMinimum();
      assertEquals("]@d'D", object0);
      assertTrue(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      assertNotNull(object0);
      assertFalse(range1.isNaturalOrdering());
      
      boolean boolean2 = range0.isEndedBy(", element2=");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(range0.isNaturalOrdering());
      
      Integer integer0 = Integer.valueOf(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Range<Integer> range2 = Range.between(integer0, integer0);
      assertNotNull(range2);
      assertTrue(range2.isNaturalOrdering());
      
      Range<Integer> range3 = Range.between(integer0, integer0);
      assertNotSame(range3, range2);
      assertTrue(range3.equals((Object)range2));
      assertNotNull(range3);
      assertTrue(range3.isNaturalOrdering());
      
      range2.hashCode();
      assertNotSame(range2, range3);
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.isNaturalOrdering());
      
      Range<Integer> range4 = range3.intersectionWith(range2);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range4, range2);
      assertSame(range4, range3);
      assertTrue(range2.equals((Object)range3));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range4.equals((Object)range2));
      assertNotNull(range4);
      assertTrue(range2.isNaturalOrdering());
      assertTrue(range3.isNaturalOrdering());
      assertTrue(range4.isNaturalOrdering());
      
      boolean boolean3 = range2.isOverlappedBy(range3);
      assertTrue(boolean3);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertSame(range3, range4);
      assertNotSame(range3, range2);
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range3.equals((Object)range2));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(range2.isNaturalOrdering());
      assertTrue(range3.isNaturalOrdering());
      
      boolean boolean4 = range0.isBefore("]@d'D");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(range0.isNaturalOrdering());
      
      Comparator<Range<Object>> comparator2 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator2).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range5 = Range.is(range1, comparator2);
      assertNotNull(range5);
      assertFalse(range5.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Range<Object>> comparator3 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator3).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range6 = Range.between(range1, range1, comparator3);
      assertNotSame(range6, range5);
      assertTrue(range6.equals((Object)range5));
      assertNotNull(range6);
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Range<Range<Object>> range7 = range5.intersectionWith(range6);
      assertSame(range5, range7);
      assertNotSame(range5, range6);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertSame(range7, range5);
      assertNotSame(range7, range6);
      assertTrue(range5.equals((Object)range6));
      assertTrue(range6.equals((Object)range5));
      assertTrue(range7.equals((Object)range6));
      assertNotNull(range7);
      assertFalse(range5.isNaturalOrdering());
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range7.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator4).compare(any() , any());
      Range<Object> range8 = Range.is((Object) "]@d'D", comparator4);
      assertNotSame(range8, range1);
      assertFalse(range8.equals((Object)range1));
      assertNotNull(range8);
      assertFalse(range8.isNaturalOrdering());
      
      Object object1 = range8.getMaximum();
      assertEquals("]@d'D", object1);
      assertNotSame(range8, range1);
      assertFalse(range8.equals((Object)range1));
      assertTrue(object1.equals((Object)string0));
      assertTrue(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)string1));
      assertNotNull(object1);
      assertFalse(range8.isNaturalOrdering());
      
      Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator5).compare(any() , any());
      Range<Object> range9 = Range.between((Object) ", element2=", (Object) "]@d'D", comparator5);
      assertNotSame(range9, range1);
      assertNotSame(range9, range8);
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range8));
      assertNotNull(range9);
      assertFalse(range9.isNaturalOrdering());
      
      boolean boolean5 = range7.isStartedBy(range9);
      assertTrue(boolean5);
      assertSame(range5, range7);
      assertNotSame(range5, range6);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertSame(range7, range5);
      assertNotSame(range7, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range9, range1);
      assertNotSame(range9, range8);
      assertTrue(range5.equals((Object)range6));
      assertTrue(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range5));
      assertTrue(range7.equals((Object)range6));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range8));
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(range5.isNaturalOrdering());
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range7.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      assertFalse(range9.isNaturalOrdering());
      
      boolean boolean6 = range7.containsRange(range5);
      assertTrue(boolean6);
      assertSame(range5, range7);
      assertNotSame(range5, range6);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertSame(range7, range5);
      assertNotSame(range7, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertTrue(range5.equals((Object)range6));
      assertTrue(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range5));
      assertTrue(range7.equals((Object)range6));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertFalse(range5.isNaturalOrdering());
      assertFalse(range6.isNaturalOrdering());
      assertFalse(range7.isNaturalOrdering());
      assertFalse(range1.isNaturalOrdering());
      
      Comparator<Object> comparator6 = range1.getComparator();
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(comparator6, comparator4);
      assertSame(comparator6, comparator1);
      assertNotSame(comparator6, comparator5);
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertFalse(comparator6.equals((Object)comparator4));
      assertFalse(comparator6.equals((Object)comparator5));
      assertNotNull(comparator6);
      assertFalse(range1.isNaturalOrdering());
      
      int int0 = Integer.remainderUnsigned((-1), (-1));
      assertEquals(0, int0);
      
      Range<Object> range10 = Range.between((Object) "]@d'D", (Object) range2, comparator6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(comparator6, comparator4);
      assertSame(comparator6, comparator1);
      assertNotSame(comparator6, comparator5);
      assertNotSame(range10, range1);
      assertNotSame(range10, range8);
      assertNotSame(range10, range9);
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range4));
      assertFalse(comparator6.equals((Object)comparator4));
      assertFalse(comparator6.equals((Object)comparator5));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range9));
      assertNotNull(range10);
      assertFalse(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      assertFalse(range10.isNaturalOrdering());
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      boolean boolean7 = range10.isStartedBy(integer1);
      assertTrue(boolean7);
      assertNotSame(range1, range10);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(comparator6, comparator4);
      assertSame(comparator6, comparator1);
      assertNotSame(comparator6, comparator5);
      assertNotSame(range10, range1);
      assertNotSame(range10, range8);
      assertNotSame(range10, range9);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean1);
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range4));
      assertFalse(comparator6.equals((Object)comparator4));
      assertFalse(comparator6.equals((Object)comparator5));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range1.isNaturalOrdering());
      assertTrue(range2.isNaturalOrdering());
      assertFalse(range10.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = new Integer((-3477));
      assertEquals((-3477), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = null;
      try { 
        Integer.parseUnsignedInt((String) null, (-3477));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.between(integer0, integer0);
      Integer integer1 = new Integer(0);
      String string0 = range0.toString("");
      Range<Integer> range1 = Range.between(integer1, integer0);
      Range<Integer> range2 = range0.intersectionWith(range1);
      Integer integer2 = new Integer(0);
      int int0 = Integer.compare(0, 0);
      boolean boolean0 = range2.isBefore(integer2);
      boolean boolean1 = range2.isStartedBy(integer1);
      assertTrue(boolean1);
      
      boolean boolean2 = range0.isBeforeRange((Range<Integer>) null);
      assertTrue(boolean2 == boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      doReturn((-3642), (-824), 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range3 = Range.is((Object) range2, comparator0);
      range3.equals("");
      range3.hashCode();
      Range<Integer> range4 = Range.is(integer1);
      Object object0 = range4.getMaximum();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-824), 0, 1, 0, 0).when(comparator1).compare(any() , any());
      Range<Object> range5 = Range.is((Object) object0, comparator1);
      Range<Object> range6 = range3.intersectionWith(range5);
      assertTrue(range6.equals((Object)range5));
      
      int int1 = range0.hashCode();
      assertFalse(int1 == int0);
      
      String string1 = "ASo:6{I-IG7FK,";
      Range<String> range7 = Range.between(string0, string1);
      String string2 = "Tpb[<Nd";
      range7.toString(string2);
      assertSame(range0, range2);
      assertTrue(range0.equals((Object)range4));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(17, (-2583), 3, (-6)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between(";h2w^yX4ow2X(_brw{3", ";h2w^yX4ow2X(_brw{3", comparator0);
      Comparator<Range<String>> comparator1 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", ":UUM[&U<_W,18Y").when(comparator1).toString();
      doReturn(17, 17, 17).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range1 = Range.between(range0, range0, comparator1);
      range1.isBefore(range0);
      range1.isStartedBy(range0);
      range1.toString("f]G%%0XeC|x");
      range0.isAfter("!RbY98uI|");
      Comparator<Range<String>> comparator2 = range1.getComparator();
      range0.getMinimum();
      range0.contains("!RbY98uI|");
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3, (-1)).when(comparator3).compare(any() , any());
      Range<Object> range2 = Range.between((Object) comparator2, (Object) ";h2w^yX4ow2X(_brw{3", comparator3);
      range2.elementCompareTo(comparator2);
      Integer integer0 = null;
      Comparator<Integer> comparator4 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.is((Integer) null, comparator4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range<String> range0 = Range.between("\br]A&*ma}n>x", "H~D0y?Ls1D$");
      Comparator<Range<String>> comparator0 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range1 = Range.is(range0, comparator0);
      range1.isNaturalOrdering();
      Integer integer0 = new Integer((-1));
      Range<Integer> range2 = Range.is(integer0);
      Integer integer1 = null;
      range2.hashCode();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.is((Integer) null, comparator1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1942).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("org.apache.commons.lang3.Range$ComparableComparator", "org.apache.commons.lang3.Range$ComparableComparator", comparator0);
      range0.toString("org.apache.commons.lang3.Range$ComparableComparator");
      range0.toString();
      range0.hashCode();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-180)).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.is((Object) "org.apache.commons.lang3.Range$ComparableComparator", comparator1);
      range0.getMinimum();
      // Undeclared exception!
      try { 
        range1.intersectionWith((Range<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate intersection with non-overlapping range null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Integer integer0 = new Integer(568);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(568, (-2379)).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("The validated character sequence index is invalid: %d", "The validated character sequence index is invalid: %d", "The validated character sequence index is invalid: %d").when(comparator1).toString();
      doReturn(0, 568, 568, 833).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.between((Object) range0, (Object) integer0, comparator1);
      Comparator<Range<Object>> comparator2 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1047), 3).when(comparator2).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(568, 17, (-1047)).when(comparator3).compare(any() , any());
      Range<Object> range2 = Range.between((Object) integer0, (Object) range1, comparator3);
      Range<Object> range3 = range1.intersectionWith(range2);
      Range<Range<Object>> range4 = Range.is(range1, comparator2);
      boolean boolean0 = range4.isEndedBy(range1);
      Range<String> range5 = Range.between("", "");
      Range<String> range6 = Range.between("", "F.161{Gf5o", (Comparator<String>) null);
      Range<String> range7 = range5.intersectionWith(range6);
      range7.toString("KWMd@K_*AD");
      boolean boolean1 = range5.isBefore("D\"MnLFr3");
      Range<String> range8 = Range.is("", (Comparator<String>) null);
      boolean boolean2 = range5.isAfterRange(range8);
      assertFalse(boolean2);
      assertTrue(range5.equals((Object)range7));
      assertNotSame(range5, range7);
      
      range0.getMaximum();
      boolean boolean3 = range3.isNaturalOrdering();
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertTrue(boolean3 == boolean0);
      
      Integer integer1 = new Integer(568);
      Comparator<Integer> comparator4 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1047)).when(comparator4).compare(anyInt() , anyInt());
      Range<Integer> range9 = Range.between(integer1, integer1, comparator4);
      boolean boolean4 = range0.isBeforeRange(range9);
      assertFalse(boolean4 == boolean1);
      
      String string0 = range0.toString();
      assertFalse(range0.isNaturalOrdering());
      assertNotNull(string0);
  }
}
