/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 01:49:58 GMT 2019
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.IllegalFormatConversionException;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.MutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(4997);
      ImmutablePair<Integer, String> immutablePair0 = new ImmutablePair<Integer, String>(integer0, "");
      MutablePair<Comparable<Object>, ImmutablePair<Integer, String>> mutablePair0 = MutablePair.of(comparable0, immutablePair0);
      Comparable<Object> comparable1 = mutablePair0.getLeft();
      MutablePair<String, String> mutablePair1 = new MutablePair<String, String>();
      MutablePair<Comparable<Object>, MutablePair<String, String>> mutablePair2 = new MutablePair<Comparable<Object>, MutablePair<String, String>>(comparable1, mutablePair1);
      String string0 = mutablePair2.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePair<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> mutablePair0 = new MutablePair<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Object object0 = mutablePair0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Integer integer0 = new Integer(4997);
      ImmutablePair<Integer, String> immutablePair0 = new ImmutablePair<Integer, String>(integer0, "");
      MutablePair<Comparable<Object>, ImmutablePair<Integer, String>> mutablePair0 = MutablePair.of(comparable0, immutablePair0);
      Comparable<Object> comparable1 = mutablePair0.getLeft();
      Pair<Comparable<Object>, Integer> pair0 = Pair.of(comparable1, integer0);
      Integer integer1 = pair0.getValue();
      assertEquals(4997, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutablePair<Integer, ImmutablePair<String, Object>> mutablePair0 = new MutablePair<Integer, ImmutablePair<String, Object>>();
      ImmutablePair<String, Object> immutablePair0 = mutablePair0.getRight();
      assertNull(immutablePair0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(4997);
      ImmutablePair<Integer, String> immutablePair0 = new ImmutablePair<Integer, String>(integer0, "");
      Pair<Object, Integer> pair0 = Pair.of((Object) immutablePair0, integer0);
      Integer integer1 = pair0.getRight();
      assertEquals(4997, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImmutablePair<MutablePair<String, String>, Comparable<Integer>> immutablePair0 = ImmutablePair.nullPair();
      Object object0 = immutablePair0.getLeft();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(4997);
      ImmutablePair<Integer, String> immutablePair0 = new ImmutablePair<Integer, String>(integer0, "");
      Pair<Object, String> pair0 = Pair.of((Object) immutablePair0, "");
      Object object0 = pair0.getLeft();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutablePair<AbstractMap.SimpleImmutableEntry<Object, Object>, ImmutablePair<Object, Object>> mutablePair0 = new MutablePair<AbstractMap.SimpleImmutableEntry<Object, Object>, ImmutablePair<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = mutablePair0.getKey();
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Integer integer0 = new Integer(4997);
      ImmutablePair<Integer, String> immutablePair0 = new ImmutablePair<Integer, String>(integer0, "");
      MutablePair<Comparable<Object>, ImmutablePair<Integer, String>> mutablePair0 = MutablePair.of(comparable0, immutablePair0);
      Comparable<Object> comparable1 = mutablePair0.getLeft();
      MutablePair<String, String> mutablePair1 = new MutablePair<String, String>();
      MutablePair<Comparable<Object>, MutablePair<String, String>> mutablePair2 = new MutablePair<Comparable<Object>, MutablePair<String, String>>(comparable1, mutablePair1);
      Comparable<Object> comparable2 = mutablePair2.getKey();
      assertSame(comparable2, comparable1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(41);
      Pair<Object, MutablePair<Object, String>> pair0 = Pair.of((Object) ">Et}:>fLW0#RH0>c", (MutablePair<Object, String>) null);
      ImmutablePair<Integer, String> immutablePair0 = ImmutablePair.nullPair();
      ImmutablePair<Object, Object> immutablePair1 = ImmutablePair.of((Object) integer0, (Object) pair0);
      MutablePair<ImmutablePair<Integer, String>, Pair<Object, Object>> mutablePair0 = MutablePair.of(immutablePair0, (Pair<Object, Object>) immutablePair1);
      int int0 = mutablePair0.compareTo((Pair<ImmutablePair<Integer, String>, Pair<Object, Object>>) mutablePair0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImmutablePair<Comparable<String>, Object> immutablePair0 = ImmutablePair.nullPair();
      String string0 = immutablePair0.toString();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("(null,null)", "(null,null)");
      MutablePair<Object, String> mutablePair0 = MutablePair.of((Object) string0, "Sd|ZsW=tk#hBQO`y");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(mutablePair0);
      ImmutablePair<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>> immutablePair1 = new ImmutablePair<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      // Undeclared exception!
      try { 
        immutablePair1.toString("pK7%&0r8l24OicUA");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '&'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePair<Object, Integer> mutablePair0 = new MutablePair<Object, Integer>();
      ImmutablePair<MutablePair<Object, Integer>, Integer> immutablePair0 = ImmutablePair.of(mutablePair0, (Integer) null);
      MutablePair<Object, Object> mutablePair1 = new MutablePair<Object, Object>("org.apache.commons.lang3.tuple.ImmutablePair", immutablePair0.right);
      MutablePair<MutablePair<Object, Object>, String> mutablePair2 = MutablePair.of(mutablePair1, "#F&RqNZL!%(h>4bb");
      // Undeclared exception!
      try { 
        mutablePair2.toString("z.&=_oje!hpw%d");
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != org.apache.commons.lang3.tuple.MutablePair
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutablePair<Object, String> mutablePair0 = new MutablePair<Object, String>((Object) null, (String) null);
      // Undeclared exception!
      try { 
        mutablePair0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutablePair<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> mutablePair0 = new MutablePair<String, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      // Undeclared exception!
      try { 
        mutablePair0.compareTo((Pair<String, AbstractMap.SimpleImmutableEntry<Integer, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.tuple.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImmutablePair<Object, String> immutablePair0 = ImmutablePair.nullPair();
      ImmutablePair<Object, ImmutablePair<Object, String>> immutablePair1 = new ImmutablePair<Object, ImmutablePair<Object, String>>("", immutablePair0);
      Integer integer0 = new Integer((-2131));
      MutablePair<Object, ImmutablePair<Object, String>> mutablePair0 = MutablePair.of((Object) integer0, immutablePair0);
      // Undeclared exception!
      try { 
        immutablePair1.compareTo((Pair<Object, ImmutablePair<Object, String>>) mutablePair0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("%td24K4ek6>Pn\"]", "%td24K4ek6>Pn\"]");
      Integer integer0 = new Integer(0);
      MutablePair<Integer, Object> mutablePair0 = new MutablePair<Integer, Object>(integer0, abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(mutablePair0);
      ImmutablePair<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> immutablePair0 = ImmutablePair.of("r", abstractMap_SimpleImmutableEntry0);
      MutablePair<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> mutablePair1 = MutablePair.of("%td24K4ek6>Pn\"]", abstractMap_SimpleImmutableEntry0);
      int int0 = immutablePair0.compareTo((Pair<String, AbstractMap.SimpleImmutableEntry<Integer, Object>>) mutablePair1);
      assertEquals(77, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutablePair<String, Object> mutablePair0 = new MutablePair<String, Object>();
      mutablePair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutablePair<Object, String> mutablePair0 = new MutablePair<Object, String>((Object) null, "=-&n9noo");
      mutablePair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutablePair<String, Integer> mutablePair0 = new MutablePair<String, Integer>();
      MutablePair<Object, String> mutablePair1 = new MutablePair<Object, String>((Object) null, "=-&n9noo");
      boolean boolean0 = mutablePair1.equals(mutablePair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(41);
      MutablePair<String, Integer> mutablePair0 = MutablePair.of((String) null, integer0);
      ImmutablePair<Object, Object> immutablePair0 = ImmutablePair.of((Object) integer0, (Object) "?/T&?+");
      boolean boolean0 = immutablePair0.equals(mutablePair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutablePair<AbstractMap.SimpleImmutableEntry<Object, Object>, ImmutablePair<Object, Object>> mutablePair0 = new MutablePair<AbstractMap.SimpleImmutableEntry<Object, Object>, ImmutablePair<Object, Object>>();
      ImmutablePair<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> immutablePair0 = ImmutablePair.nullPair();
      boolean boolean0 = immutablePair0.equals(mutablePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      MutablePair<Object, Object> mutablePair0 = MutablePair.of((Object) comparable0, (Object) comparable0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = mutablePair0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      MutablePair<Object, Object> mutablePair0 = MutablePair.of((Object) comparable0, (Object) comparable0);
      Pair<Comparable<Object>, MutablePair<Object, Object>> pair0 = Pair.of(comparable0, mutablePair0);
      String string0 = pair0.toString("LmtxW\" ,kkHMj>x/#X");
      assertEquals("LmtxW\" ,kkHMj>x/#X", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutablePair<Integer, String> mutablePair0 = new MutablePair<Integer, String>();
      ImmutablePair<Integer, String> immutablePair0 = ImmutablePair.of(integer0, "org.apache.commons.lang3.tuple.Pair$PairAdapter");
      int int0 = mutablePair0.compareTo((Pair<Integer, String>) immutablePair0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      MutablePair<Object, Object> mutablePair0 = MutablePair.of((Object) comparable0, (Object) comparable0);
      Pair<Comparable<Object>, MutablePair<Object, Object>> pair0 = Pair.of(comparable0, mutablePair0);
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Pair<Object, AbstractMap.SimpleEntry<Object, Comparable>>[] pairArray0 = Pair.emptyArray();
      assertEquals(0, pairArray0.length);
  }
}
