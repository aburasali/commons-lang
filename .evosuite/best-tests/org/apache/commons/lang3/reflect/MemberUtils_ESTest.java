/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:26:05 GMT 2019
 */

package org.apache.commons.lang3.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import org.apache.commons.lang3.reflect.MemberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MemberUtils_ESTest extends MemberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Member member0 = mock(Member.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(member0).getModifiers();
      doReturn(false).when(member0).isSynthetic();
      boolean boolean0 = MemberUtils.isAccessible(member0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Member member0 = mock(Member.class, new ViolatedAssumptionAnswer());
      doReturn(337).when(member0).getModifiers();
      doReturn(true).when(member0).isSynthetic();
      boolean boolean0 = MemberUtils.isAccessible(member0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Member member0 = mock(Member.class, new ViolatedAssumptionAnswer());
      doReturn(3046).when(member0).getModifiers();
      boolean boolean0 = MemberUtils.isAccessible(member0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = MemberUtils.isAccessible((Member) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = MemberUtils.isPackageAccess(832);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = MemberUtils.isPackageAccess(2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccessibleObject accessibleObject0 = mock(AccessibleObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(accessibleObject0).isAccessible();
      boolean boolean0 = MemberUtils.setAccessibleWorkaround(accessibleObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccessibleObject accessibleObject0 = mock(AccessibleObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(accessibleObject0).isAccessible();
      // Undeclared exception!
      try { 
        MemberUtils.setAccessibleWorkaround(accessibleObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.lang.reflect.AccessibleObject$MockitoMock$454940806 cannot be cast to java.lang.reflect.Member
         //
         verifyException("org.apache.commons.lang3.reflect.MemberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = MemberUtils.setAccessibleWorkaround((AccessibleObject) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      // Undeclared exception!
      try { 
        MemberUtils.isMatchingMethod((Method) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MemberUtils$Executable", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      // Undeclared exception!
      try { 
        MemberUtils.isMatchingConstructor((Constructor<?>) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MemberUtils$Executable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 7);
      // Undeclared exception!
      try { 
        MemberUtils.compareConstructorFit((Constructor<?>) null, (Constructor<?>) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MemberUtils$Executable", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 5);
      // Undeclared exception!
      try { 
        MemberUtils.compareMethodFit((Method) null, (Method) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MemberUtils$Executable", e);
      }
  }
}
