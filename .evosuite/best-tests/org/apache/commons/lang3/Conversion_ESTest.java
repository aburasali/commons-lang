/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:30:26 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import java.util.UUID;
import org.apache.commons.lang3.Conversion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Conversion_ESTest extends Conversion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = 83;
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigit(booleanArray0, 83);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert an empty array.
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Random.setNextRandom(97);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-87);
      byte[] byteArray1 = Conversion.shortToByteArray((short) (-211), 97, byteArray0, (byte)77, (-1399));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)50, (byte)56, (byte)14, (byte) (-87), (byte)77, (byte) (-87)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)50, (byte)56, (byte)14, (byte) (-87), (byte)77, (byte) (-87)}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      char char0 = Conversion.binaryToHexDigit(booleanArray0, (int) (byte)1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true, true, true, true}, booleanArray0));
      assertEquals('5', char0);
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "EkppX\":FoR?WB7K";
      short short0 = (short)11;
      // Undeclared exception!
      try { 
        Conversion.hexToShort("EkppX\":FoR?WB7K", (-1672), (short)11, (-1937), 67);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Conversion.longToHex(2813L, (-1), "0aguSG,u;W>>D", 0, (-1));
      assertEquals("0aguSG,u;W>>D", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Conversion.longToByteArray(1072L, 0, byteArray0, (-3727), (-1));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      long long0 = Conversion.hexToLong("0aguSG,u;W>>D", 64, 0L, 0, (-1));
      assertEquals(0L, long0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = Conversion.binaryToInt(booleanArray0, (-3727), 0, 356, 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(4, booleanArray0.length);
      
      char char0 = Conversion.intToHexDigit(0);
      assertEquals('0', char0);
      
      byte[] byteArray2 = Conversion.intToByteArray((-349), 1, byteArray0, 64, 0);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      
      long long1 = Conversion.binaryToLong(booleanArray0, (-3727), 356, 586, (-581));
      assertFalse(long1 == long0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(356L, long1);
      assertEquals(4, booleanArray0.length);
      
      char char1 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertFalse(char1 == char0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals('7', char1);
      assertEquals(4, booleanArray0.length);
      
      short short0 = Conversion.hexToShort("0aguSG,u;W>>D", 1541, (short) (-3300), (-957), (-780));
      assertEquals((short) (-3300), short0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = Conversion.byteToBinary((byte) (-94), (byte) (-94), booleanArray0, (byte) (-94), (byte) (-94));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      long long0 = Conversion.binaryToLong(booleanArray0, (byte) (-94), (byte) (-94), (byte) (-94), (-1));
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray0));
      assertEquals((-94L), long0);
      assertEquals(6, booleanArray0.length);
      
      Conversion conversion0 = new Conversion();
      assertNotNull(conversion0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-94);
      shortArray0[1] = (short) (byte) (-94);
      shortArray0[2] = (short)1048;
      shortArray0[3] = (short) (byte) (-94);
      shortArray0[4] = (short) (byte) (-94);
      shortArray0[5] = (short) (byte) (-94);
      shortArray0[6] = (short) (byte) (-94);
      long long1 = (-341L);
      long long2 = Conversion.shortArrayToLong(shortArray0, (short) (-94), (-341L), (-1368), (short) (-94));
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertArrayEquals(new short[] {(short) (-94), (short) (-94), (short)1048, (short) (-94), (short) (-94), (short) (-94), (short) (-94)}, shortArray0);
      assertEquals((-341L), long2);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      byte[] byteArray1 = Conversion.intToByteArray((byte) (-94), (byte) (-94), byteArray0, (byte) (-94), (-1));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('R');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'R' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = Conversion.byteToBinary((byte) (-94), (byte) (-94), booleanArray0, (byte) (-94), (byte) (-94));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      long long0 = Conversion.binaryToLong(booleanArray0, (byte) (-94), (byte) (-94), (byte) (-94), (-1));
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray0));
      assertEquals((-94L), long0);
      assertEquals(6, booleanArray0.length);
      
      Conversion conversion0 = new Conversion();
      assertNotNull(conversion0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      byte[] byteArray1 = Conversion.intToByteArray((byte) (-94), (byte) (-94), byteArray0, (byte) (-94), (-1));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('@');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '@' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2225;
      shortArray0[1] = (short) (-1681);
      shortArray0[2] = (short)0;
      Random.setNextRandom(97);
      String string0 = Conversion.intToHex((-1399), (short)0, "", (short) (-1681), (short) (-1681));
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-87);
      byte[] byteArray1 = Conversion.shortToByteArray((short) (-211), (-458), byteArray0, (byte)86, (-1399));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)50, (byte)56, (byte)14, (byte) (-87), (byte)86, (byte) (-87)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)50, (byte)56, (byte)14, (byte) (-87), (byte)86, (byte) (-87)}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('=');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '=' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = Conversion.longToBinary(1L, 0, booleanArray0, 250, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals('d', char0);
      assertEquals(4, booleanArray0.length);
      
      short short0 = Conversion.hexToShort("", 250, (short)5522, 250, 0);
      assertEquals((short)5522, short0);
      
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('j');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'j' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('7');
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      boolean[] booleanArray1 = Conversion.shortToBinary((short)0, (-5), booleanArray0, 2, (-5));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals('7', char0);
      assertEquals(4, booleanArray0.length);
      
      int int0 = Conversion.binaryToInt(booleanArray1, (-5), (-5), 0, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray1));
      assertEquals((-5), int0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      boolean[] booleanArray2 = Conversion.longToBinary(0L, '7', booleanArray0, (-5), 0);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray2, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray2));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Conversion.shortToByteArray((short)747, (-5), byteArray0, 98, (short)0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      byte[] byteArray2 = Conversion.uuidToByteArray(uUID0, byteArray1, 2, (-5));
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(byteArray2);
      
      // Undeclared exception!
      try { 
        Conversion.longToHex(98, 2, "", 0, 1634);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)102;
      shortArray0[1] = (short)51;
      shortArray0[2] = (short) (-266);
      shortArray0[3] = (short) (-3072);
      shortArray0[4] = (short)1179;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-1824);
      shortArray0[7] = (short)990;
      shortArray0[8] = (short) (-3224);
      short[] shortArray1 = Conversion.intToShortArray(2438, 423, shortArray0, 433, (short) (-266));
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)102, (short)51, (short) (-266), (short) (-3072), (short)1179, (short)1, (short) (-1824), (short)990, (short) (-3224)}, shortArray0);
      assertArrayEquals(new short[] {(short)102, (short)51, (short) (-266), (short) (-3072), (short)1179, (short)1, (short) (-1824), (short)990, (short) (-3224)}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        Conversion.hexToByte("", 1574, (byte) (-79), (short) (-1824), (short)51);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte byte0 = (byte) (-94);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = Conversion.byteToBinary((byte) (-94), (byte) (-94), booleanArray0, (byte) (-94), (byte) (-94));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Conversion conversion0 = new Conversion();
      assertNotNull(conversion0);
      
      // Undeclared exception!
      try { 
        Conversion.binaryToLong(booleanArray0, (-1), (-1), (byte) (-94), 92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('>');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '>' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals('6', char0);
      assertEquals(3, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigitMsb0_4bits(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // src.length-srcPos<4: src.length=3, srcPos=0
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2225;
      shortArray0[1] = (short) (-1681);
      shortArray0[2] = (short)0;
      short[] shortArray1 = Conversion.intToShortArray(99, 99, shortArray0, (short)2225, (short)0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2225, (short) (-1681), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2225, (short) (-1681), (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      Random.setNextRandom(97);
      String string0 = Conversion.intToHex((-1399), (short)0, "", (short) (-1681), (short) (-1681));
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-87);
      byte[] byteArray1 = Conversion.shortToByteArray((short) (-211), (-458), byteArray0, (byte)77, (-1399));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)50, (byte)56, (byte)14, (byte) (-87), (byte)77, (byte) (-87)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)50, (byte)56, (byte)14, (byte) (-87), (byte)77, (byte) (-87)}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals('2', char0);
      assertEquals(2, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.binaryToInt(booleanArray0, (byte)77, 2801, (short)2225, 1545);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+dstPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitToBinary('0');
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      short short0 = Conversion.binaryToShort(booleanArray0, (-1280), (short)255, 9, (-1280));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals((short)255, short0);
      assertEquals(4, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.hexToByte("", (-1280), (byte)0, (short)255, (short)255);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = (-1280);
      String string0 = "nibble value not between 0 and 15: ";
      int int1 = 2228;
      int int2 = 53;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      char char0 = Conversion.binaryToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, true, true, false}, booleanArray0));
      assertEquals('d', char0);
      assertEquals(9, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('y');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'y' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2225;
      shortArray0[1] = (short) (-1681);
      shortArray0[2] = (short)0;
      short[] shortArray1 = Conversion.intToShortArray(99, 99, shortArray0, (short)2225, (short)0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2225, (short) (-1681), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2225, (short) (-1681), (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      Random.setNextRandom(97);
      String string0 = Conversion.intToHex((-1399), (short)0, "", (short) (-1681), (short) (-1681));
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-87);
      byte[] byteArray1 = Conversion.shortToByteArray((short) (-211), (-458), byteArray0, (byte)77, (-1399));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)50, (byte)56, (byte)13, (byte) (-87), (byte)77, (byte) (-87)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)50, (byte)56, (byte)13, (byte) (-87), (byte)77, (byte) (-87)}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertEquals('2', char0);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      char char0 = Conversion.binaryToHexDigit(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals('1', char0);
      assertEquals(2, booleanArray0.length);
      
      byte byte0 = Conversion.hexToByte("", 0, (byte)0, 1877, 0);
      assertEquals((byte)0, byte0);
      
      boolean[] booleanArray1 = Conversion.hexDigitToBinary('1');
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      long long0 = Conversion.shortArrayToLong(shortArray0, 0, (short)0, 0, (byte)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0L, long0);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Conversion.intToByteArray(0, 0, byteArray0, (-2129), (byte)0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-116), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-116), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitToBinary('3');
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      short short0 = (short)0;
      int int0 = 0;
      int int1 = 2;
      boolean[] booleanArray1 = Conversion.shortToBinary((short)0, 0, booleanArray0, 2, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals('c', char0);
      assertEquals(4, booleanArray0.length);
      
      int int2 = Conversion.hexDigitMsb0ToInt('c');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3, int2);
      
      boolean[] booleanArray2 = Conversion.longToBinary(0L, 9, booleanArray0, 0, 0);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray2));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      byte[] byteArray0 = new byte[0];
      int int3 = 98;
      byte[] byteArray1 = Conversion.shortToByteArray((short)747, 3, byteArray0, 98, (short)0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      // Undeclared exception!
      try { 
        Conversion.uuidToByteArray(uUID0, byteArray1, 2, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('T');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'T' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = (-205);
      short short0 = (short) (-2640);
      int int1 = (-1);
      short short1 = Conversion.byteArrayToShort(byteArray0, (-205), (short) (-2640), (short) (-2640), (-1));
      assertTrue(short1 == short0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((short) (-2640), short1);
      assertEquals(0, byteArray0.length);
      
      int int2 = 481;
      int int3 = 3985;
      // Undeclared exception!
      try { 
        Conversion.shortToHex((short) (-2640), 481, "(nHexs-1)*4+srcPos is greater or equal to than 16", 481, 3985);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = (-802);
      int int1 = 12;
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        Conversion.binaryToByte(booleanArray0, 77, (byte)0, (-176), 79);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 77
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = Conversion.byteToBinary((byte) (-94), (byte) (-94), booleanArray0, (byte) (-94), (byte) (-94));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      long long0 = Conversion.binaryToLong(booleanArray0, (byte) (-94), (byte) (-94), (byte) (-94), (-1));
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false}, booleanArray0));
      assertEquals((-94L), long0);
      assertEquals(6, booleanArray0.length);
      
      Conversion conversion0 = new Conversion();
      assertNotNull(conversion0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      byte[] byteArray1 = Conversion.intToByteArray((byte) (-94), (byte) (-94), byteArray0, (byte) (-94), (-1));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('I');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'I' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = Conversion.longToBinary(1L, 0, booleanArray0, 250, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertEquals('a', char0);
      assertEquals(4, booleanArray0.length);
      
      short short0 = Conversion.hexToShort("", 250, (short)5522, 250, 0);
      assertEquals((short)5522, short0);
      
      // Undeclared exception!
      try { 
        Conversion.hexToShort("", 0, (short)6, 0, 250);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char char0 = Conversion.intToHexDigitMsb0(1);
      assertEquals('8', char0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byte byte0 = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byte byte1 = (byte) (-31);
      byteArray0[3] = (byte) (-31);
      byte byte2 = (byte)38;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)78;
      // Undeclared exception!
      try { 
        Conversion.intToByteArray(1, 62, byteArray0, (byte) (-110), (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+srcPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean boolean0 = false;
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean1 = false;
      booleanArray0[3] = false;
      boolean boolean2 = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      char char0 = Conversion.binaryToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
      assertEquals('6', char0);
      assertEquals(6, booleanArray0.length);
      
      char char1 = Conversion.binaryToHexDigit(booleanArray0);
      assertTrue(char1 == char0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
      assertEquals('6', char1);
      assertEquals(6, booleanArray0.length);
      
      int int0 = 1286;
      int int1 = 671;
      // Undeclared exception!
      try { 
        Conversion.binaryToInt(booleanArray0, 1286, 1286, 1286, 671);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+dstPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      char char0 = Conversion.binaryToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false}, booleanArray0));
      assertEquals('a', char0);
      assertEquals(7, booleanArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-104);
      // Undeclared exception!
      try { 
        Conversion.uuidToByteArray((UUID) null, byteArray0, (-1075), (byte) (-104));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = 75;
      int int1 = 99;
      int int2 = Conversion.shortArrayToInt(shortArray0, 75, 99, 99, (-146));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(99, int2);
      assertEquals(0, shortArray0.length);
      
      int int3 = 71;
      // Undeclared exception!
      try { 
        Conversion.intToShortArray(75, (-1), shortArray0, 75, 71);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nShorts-1)*16+srcPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('@');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '@' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('>');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '>' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = Conversion.longToBinary(1L, 0, booleanArray0, 250, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals('b', char0);
      assertEquals(4, booleanArray0.length);
      
      short short0 = Conversion.hexToShort("", 250, (short)5522, 250, 0);
      assertEquals((short)5522, short0);
      
      // Undeclared exception!
      try { 
        Conversion.intToHexDigit(250);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nibble value not between 0 and 15: 250
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char char0 = '=';
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('=');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '=' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitToBinary('2');
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigitMsb0_4bits(booleanArray1, 467);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // src.length-srcPos<4: src.length=3, srcPos=467
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)3236;
      shortArray0[2] = (short)102;
      shortArray0[1] = (short)1;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      short short0 = Conversion.byteArrayToShort(byteArray0, 0, (short)1, (-1604), (-3251));
      assertArrayEquals(new byte[] {(byte)127}, byteArray0);
      assertEquals((short)1, short0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = Conversion.binaryToInt(booleanArray0, 2951, (byte)127, (-1064), 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(127, int0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      short short0 = Conversion.byteArrayToShort(byteArray0, 0, (short)1, (-1604), (-3251));
      assertArrayEquals(new byte[] {(byte)127}, byteArray0);
      assertEquals((short)1, short0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = Conversion.binaryToInt(booleanArray0, 2951, (byte)127, (-1064), 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(127, int0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 48;
      intArray0[1] = (-4443);
      intArray0[2] = (-189);
      long long0 = Conversion.intArrayToLong(intArray0, (-4255), (-189), (-1), (-4255));
      assertArrayEquals(new int[] {48, (-4443), (-189)}, intArray0);
      assertEquals((-189L), long0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = Conversion.shortToBinary((short)490, 0, booleanArray0, 0, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)490;
      shortArray0[1] = (short)490;
      shortArray0[2] = (short)490;
      shortArray0[3] = (short)490;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)490;
      // Undeclared exception!
      try { 
        Conversion.longToShortArray(2865L, (-189), shortArray0, (-416), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -416
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('3');
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      short short0 = (short)0;
      int int0 = 0;
      int int1 = 2;
      boolean[] booleanArray1 = Conversion.shortToBinary((short)0, 0, booleanArray0, 2, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char char0 = Conversion.intToHexDigitMsb0(2);
      assertEquals('4', char0);
      
      int int2 = 9;
      // Undeclared exception!
      try { 
        Conversion.binaryToInt(booleanArray1, 0, 0, 0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)3984;
      shortArray0[0] = (short)3984;
      short short1 = (short) (-2479);
      shortArray0[1] = (short) (-2479);
      // Undeclared exception!
      try { 
        Conversion.shortArrayToInt(shortArray0, (short)3984, 0, (short) (-2479), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3984
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('^');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '^' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean[] booleanArray0 = null;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        Conversion.binaryToLong((boolean[]) null, (-3636), (-1L), (-1), 770);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte byte0 = Conversion.hexToByte("", (-1725), (byte)0, 1, (-1725));
      assertEquals((byte)0, byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Conversion.longToByteArray(1, 69, byteArray0, 73, (byte)0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 69;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      long long0 = Conversion.intArrayToLong(intArray0, (-821), (-1699L), 69, (-1725));
      assertArrayEquals(new int[] {0, 69, 0, 0, 0, 0}, intArray0);
      assertEquals((-1699L), long0);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigitMsb0_4bits(booleanArray0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // src.length-srcPos<4: src.length=1, srcPos=0
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      char char0 = Conversion.binaryToHexDigit(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals('1', char0);
      assertEquals(2, booleanArray0.length);
      
      byte byte0 = Conversion.hexToByte("", 0, (byte)0, 1877, 0);
      assertEquals((byte)0, byte0);
      
      boolean[] booleanArray1 = Conversion.intToBinary(175, 1877, booleanArray0, (-1402), (byte)0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      long long0 = Conversion.shortArrayToLong(shortArray0, 0, (short)0, 0, (byte)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0L, long0);
      assertEquals(7, shortArray0.length);
      
      int int0 = Conversion.hexToInt("hf:", 0, (-2112), 0, 0);
      assertEquals((-2112), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      char char0 = Conversion.binaryToHexDigit(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals('0', char0);
      assertEquals(2, booleanArray0.length);
      
      byte byte0 = Conversion.hexToByte("", 0, (byte)0, 1877, 0);
      assertEquals((byte)0, byte0);
      
      boolean[] booleanArray1 = Conversion.intToBinary(175, 1877, booleanArray0, (-1402), (byte)0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      long long0 = Conversion.shortArrayToLong(shortArray0, 0, (short)0, 0, (byte)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0L, long0);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Conversion.intToByteArray(0, 0, byteArray0, (-2129), (byte)0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-116), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-116), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('3');
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      short short0 = (short)0;
      int int0 = 0;
      int int1 = 2;
      boolean[] booleanArray1 = Conversion.shortToBinary((short)0, 0, booleanArray0, 2, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertEquals('3', char0);
      assertEquals(4, booleanArray0.length);
      
      int int2 = Conversion.hexDigitMsb0ToInt('3');
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(12, int2);
      
      boolean[] booleanArray2 = Conversion.longToBinary(0L, 9, booleanArray0, 0, 0);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray2));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      byte[] byteArray0 = new byte[0];
      int int3 = 98;
      byte[] byteArray1 = Conversion.shortToByteArray((short)747, 12, byteArray0, 98, (short)0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      // Undeclared exception!
      try { 
        Conversion.uuidToByteArray(uUID0, byteArray1, 2, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = Conversion.longToBinary(1L, 0, booleanArray0, 250, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals('9', char0);
      assertEquals(4, booleanArray0.length);
      
      short short0 = Conversion.hexToShort("", 250, (short)5522, 250, 0);
      assertEquals((short)5522, short0);
      
      char char1 = Conversion.binaryToHexDigit(booleanArray0);
      assertTrue(char1 == char0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals('9', char1);
      assertEquals(4, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.shortArrayToLong((short[]) null, (-136193), (-136193), (-1), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = Conversion.hexDigitToInt('e');
      assertEquals(14, int0);
      
      boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('e');
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int int1 = 1869;
      // Undeclared exception!
      try { 
        Conversion.intToHexDigit(1869);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nibble value not between 0 and 15: 1869
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 1;
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        Conversion.intToBinary(1, 1, booleanArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = Conversion.longToBinary(1L, 0, booleanArray0, 250, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals('7', char0);
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      long long0 = Conversion.hexToLong("", (-3741), 1L, (byte)1, (-488));
      assertEquals(1L, long0);
      
      // Undeclared exception!
      try { 
        Conversion.intToBinary(0, (-3741), booleanArray0, (-3741), 1671);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3741
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      byte byte0 = Conversion.binaryToByte(booleanArray0, 0, (byte) (-7), 0, 5);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      assertEquals((byte) (-25), byte0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = Conversion.longToBinary(1L, 0, booleanArray0, 250, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals('8', char0);
      assertEquals(4, booleanArray0.length);
      
      short short0 = Conversion.hexToShort("", 250, (short)5522, 250, 0);
      assertEquals((short)5522, short0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertEquals('4', char0);
      assertEquals(5, booleanArray0.length);
      
      short short0 = Conversion.hexToShort("gJH,}u>d`Ggtbk", 0, (short)906, (-50), (-1601));
      assertEquals((short)906, short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Conversion.shortToByteArray((short)1, (-50), byteArray0, 0, 0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-47), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-47), (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        Conversion.shortArrayToLong((short[]) null, 6, 0L, 2861, 90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte byte0 = (byte) (-94);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = Conversion.byteToBinary((byte) (-94), (byte) (-94), booleanArray0, (byte) (-94), (byte) (-94));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      long long0 = Conversion.binaryToLong(booleanArray0, (byte) (-94), (byte) (-94), (byte) (-94), (-1));
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false}, booleanArray0));
      assertEquals((-94L), long0);
      assertEquals(6, booleanArray0.length);
      
      Conversion conversion0 = new Conversion();
      assertNotNull(conversion0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-94);
      // Undeclared exception!
      try { 
        Conversion.intToByteArray(63, 63, byteArray0, (byte) (-94), 77);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+srcPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Conversion.longToByteArray(1867L, 0, byteArray0, (byte)0, (-3140));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)96, (byte)127, (byte)123, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)96, (byte)127, (byte)123, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      char char0 = Conversion.binaryToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertEquals('5', char0);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[4] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      assertEquals('8', char0);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('B');
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)13;
      byteArray0[3] = (byte)13;
      byte byte2 = (byte)87;
      byteArray0[4] = (byte)87;
      // Undeclared exception!
      try { 
        Conversion.byteArrayToUuid(byteArray0, (-951));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -951
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray0));
      assertEquals('4', char0);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitToBinary('3');
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      short short0 = (short)0;
      int int0 = 0;
      int int1 = 2;
      boolean[] booleanArray1 = Conversion.shortToBinary((short)0, 0, booleanArray0, 2, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals('c', char0);
      assertEquals(4, booleanArray0.length);
      
      int int2 = 9;
      // Undeclared exception!
      try { 
        Conversion.binaryToInt(booleanArray1, 0, 0, 0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        Conversion.longToBinary((-7L), (-218), booleanArray0, (-218), 252);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -218
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('3');
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      short short0 = (short)0;
      int int0 = 0;
      int int1 = 2;
      boolean[] booleanArray1 = Conversion.shortToBinary((short)0, 0, booleanArray0, 2, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char char0 = Conversion.intToHexDigitMsb0(0);
      assertEquals('0', char0);
      
      int int2 = 9;
      // Undeclared exception!
      try { 
        Conversion.binaryToInt(booleanArray1, 0, 0, 0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)94;
      byteArray0[0] = (byte)94;
      byte byte1 = (byte)101;
      byteArray0[1] = (byte)101;
      int int0 = (-760);
      // Undeclared exception!
      try { 
        Conversion.byteArrayToShort(byteArray0, (-760), (byte)94, (-760), (byte)94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -760
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      char char0 = Conversion.binaryToHexDigit(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals('3', char0);
      assertEquals(2, booleanArray0.length);
      
      byte byte0 = Conversion.hexToByte("", 0, (byte)0, 1877, 0);
      assertEquals((byte)0, byte0);
      
      boolean[] booleanArray1 = Conversion.intToBinary(175, 1877, booleanArray0, (-1402), (byte)0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      long long0 = Conversion.shortArrayToLong(shortArray0, 0, (short)0, 0, (byte)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0L, long0);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Conversion.intToByteArray(0, 0, byteArray0, (-2129), (byte)0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-116), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-116), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.byteToBinary((byte) (-14), (byte) (-14), (boolean[]) null, (-2502), 0);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte) (-14);
      byteArray0[8] = (byte) (-14);
      short short0 = Conversion.byteArrayToShort(byteArray0, 0, (byte) (-14), (byte) (-14), (byte) (-14));
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14)}, byteArray0);
      assertEquals((short) (-14), short0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('D');
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Conversion conversion0 = new Conversion();
      assertNotNull(conversion0);
      
      // Undeclared exception!
      try { 
        Conversion.longToHex((-618L), (-1389), (String) null, (-1389), (-1389));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-70);
      byte[] byteArray1 = Conversion.uuidToByteArray(uUID0, byteArray0, (byte) (-70), (byte) (-70));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)97, (byte) (-70)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)97, (byte) (-70)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        Conversion.uuidToByteArray(uUID0, byteArray2, (-3864), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3864
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 1745;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      byte byte0 = Conversion.binaryToByte(booleanArray0, 0, (byte)91, (-1), 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertEquals((byte)91, byte0);
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Conversion.uuidToByteArray((UUID) null, byteArray0, (-1), 0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        Conversion.hexToByte("", (byte)91, (byte)91, 1745, (byte)91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        Conversion.binaryBeMsb0ToHexDigit((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigit(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert an empty array.
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)395;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-754);
      shortArray0[7] = (short)1505;
      shortArray0[8] = (short) (-493);
      short[] shortArray1 = Conversion.longToShortArray((-2051L), 127, shortArray0, (short)1, (-872));
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)395, (short)0, (short)0, (short)0, (short)1, (short) (-754), (short)1505, (short) (-493)}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)395, (short)0, (short)0, (short)0, (short)1, (short) (-754), (short)1505, (short) (-493)}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      
      String string0 = Conversion.longToHex(256L, (short) (-754), "", (-1), (short)0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      long long0 = Conversion.byteArrayToLong(byteArray0, 0, (short)1505, (short)0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1505L, long0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      // Undeclared exception!
      try { 
        Conversion.binaryToInt(booleanArray0, (short)0, (short)1, 0, (short)1505);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+dstPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)956;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short) (-1);
      int int0 = Conversion.shortArrayToInt(shortArray0, (short)956, (-1079), (-1), (short)0);
      assertArrayEquals(new short[] {(short)4, (short)0, (short)0, (short)0, (short)0, (short)956, (short)0, (short)0, (short) (-1)}, shortArray0);
      assertEquals((-1079), int0);
      assertEquals(9, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      long long0 = Conversion.binaryToLong(booleanArray0, 1, (-1L), 0, (short)0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray0));
      assertEquals((-1L), long0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true}, booleanArray0));
      assertEquals('5', char0);
      assertEquals(6, booleanArray0.length);
      
      char char1 = Conversion.intToHexDigitMsb0(11);
      assertFalse(char1 == char0);
      assertEquals('d', char1);
      
      char char2 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertTrue(char2 == char0);
      assertFalse(char2 == char1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true}, booleanArray0));
      assertEquals('5', char2);
      assertEquals(6, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.binaryToShort(booleanArray0, 1607, (short) (-962), (-552), 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1607
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)538;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1828;
      int int0 = Conversion.shortArrayToInt(shortArray0, 1, 15, (short)6, (-1366));
      assertArrayEquals(new short[] {(short)6, (short)538, (short) (-1), (short)1828}, shortArray0);
      assertEquals(15, int0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = Conversion.longToBinary((-1366), 15, (boolean[]) null, (short)6, (-1528));
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Conversion.shortToByteArray((short) (-174), (-1992), byteArray0, (short)1828, (short) (-1));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)538;
      intArray0[1] = 15;
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short)6;
      intArray0[4] = (-1366);
      intArray0[5] = 15;
      intArray0[6] = (-1366);
      intArray0[7] = (-1528);
      intArray0[8] = (int) (short)1828;
      long long0 = Conversion.intArrayToLong(intArray0, 1, 2L, (-1), (-1366));
      assertArrayEquals(new int[] {538, 15, (-1), 6, (-1366), 15, (-1366), (-1528), 1828}, intArray0);
      assertEquals(2L, long0);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.binaryToByte((boolean[]) null, (-1830), (byte) (-42), (short) (-1), 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      char char0 = Conversion.binaryToHexDigit(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals('1', char0);
      assertEquals(2, booleanArray0.length);
      
      byte byte0 = Conversion.hexToByte("", 0, (byte)0, 1877, 0);
      assertEquals((byte)0, byte0);
      
      boolean[] booleanArray1 = Conversion.intToBinary(175, 1877, booleanArray0, (-1402), (byte)0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      long long0 = Conversion.shortArrayToLong(shortArray0, 0, (short)0, 0, (byte)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0L, long0);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Conversion.intToByteArray(0, 0, byteArray0, (-2129), (byte)0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-116), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-116), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('3');
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      short short0 = (short)0;
      int int0 = 0;
      int int1 = 2;
      boolean[] booleanArray1 = Conversion.shortToBinary((short)0, 0, booleanArray0, 2, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertEquals('3', char0);
      assertEquals(4, booleanArray0.length);
      
      int int2 = 9;
      // Undeclared exception!
      try { 
        Conversion.binaryToInt(booleanArray1, 0, 0, 0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitToBinary('B');
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigitMsb0_4bits(booleanArray1, 467);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // src.length-srcPos<4: src.length=3, srcPos=467
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = (-1169);
      byte[] byteArray1 = Conversion.longToByteArray(1060L, (-1), byteArray0, (-1), (-1169));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short short0 = Conversion.hexToShort("Cannot interpret '", (-1169), (short) (-718), (-1169), (-4974));
      assertEquals((short) (-718), short0);
      
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('p');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'p' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('g');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'g' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.byteToBinary((byte) (-14), (byte) (-14), (boolean[]) null, (-2502), 0);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte) (-14);
      boolean[] booleanArray1 = Conversion.shortToBinary((byte) (-14), (byte) (-14), (boolean[]) null, 1601, 0);
      assertNull(booleanArray1);
      
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigit((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "o<>agw.";
      byte byte0 = Conversion.hexToByte("o<>agw.", (-1), (byte)13, 0, (-66));
      assertEquals((byte)13, byte0);
      
      Conversion conversion0 = new Conversion();
      assertNotNull(conversion0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)13;
      shortArray0[1] = (short) (byte)13;
      shortArray0[2] = (short) (byte)13;
      shortArray0[3] = (short) (byte)13;
      // Undeclared exception!
      try { 
        Conversion.intToShortArray((-66), (-1466), shortArray0, (short)13, (short)13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      int int1 = Conversion.hexToInt((String) null, 0, 0, 0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        Conversion.hexToByte((String) null, 0, (byte)1, 0, (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      short short0 = Conversion.binaryToShort(booleanArray0, 0, (short)0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((short)0, short0);
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 344;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = 0;
      intArray0[6] = (int) (short)0;
      int[] intArray1 = Conversion.longToIntArray(2341L, (short)0, intArray0, 1, 0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 344, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 344, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Conversion.uuidToByteArray(uUID0, byteArray0, (-3118), 344);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBytes is greater than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 1267;
      int int1 = Conversion.hexToInt("I{%F4", 1267, 1267, (-757), (-1791));
      assertTrue(int1 == int0);
      assertEquals(1267, int1);
      
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'z' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "hMuFcmOy3S*b/;";
      int int0 = (-871);
      short short0 = Conversion.hexToShort("hMuFcmOy3S*b/;", 0, (short) (-366), (-871), 0);
      assertEquals((short) (-366), short0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      long long0 = Conversion.byteArrayToLong(byteArray0, (byte)120, 0, (byte)120, 0);
      assertArrayEquals(new byte[] {(byte)120}, byteArray0);
      assertEquals(0L, long0);
      assertEquals(1, byteArray0.length);
      
      char char0 = Conversion.intToHexDigit(0);
      assertEquals('0', char0);
      
      String string1 = Conversion.shortToHex((byte)120, (byte)120, "hMuFcmOy3S*b/;", 0, (short) (-366));
      assertTrue(string1.equals((Object)string0));
      assertEquals("hMuFcmOy3S*b/;", string1);
      assertNotNull(string1);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      // Undeclared exception!
      try { 
        Conversion.uuidToByteArray(uUID0, byteArray0, 5, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBytes is greater than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      int int0 = Conversion.binaryToInt(booleanArray0, (-618), (-618), 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true}, booleanArray0));
      assertEquals((-618), int0);
      assertEquals(7, booleanArray0.length);
      
      long long0 = Conversion.binaryToLong(booleanArray0, 0, 0L, 0, (-618));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true}, booleanArray0));
      assertEquals(0L, long0);
      assertEquals(7, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.hexToShort("H1RoaX!emR<bBoa", 0, (short)100, 0, (short)100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('K');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'K' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      long long0 = Conversion.byteArrayToLong(byteArray0, 901, 901, (-905), (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(901L, long0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-230);
      shortArray0[1] = (short) (-499);
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1331;
      shortArray0[5] = (short) (-509);
      shortArray0[6] = (short)651;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      short[] shortArray1 = Conversion.longToShortArray((-1), 0, shortArray0, 901, 0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-230), (short) (-499), (short)3, (short)0, (short)1331, (short) (-509), (short)651, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-230), (short) (-499), (short)3, (short)0, (short)1331, (short) (-509), (short)651, (short)0, (short)0}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        Conversion.hexToShort("skx", (-905), (short)0, 0, 901);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte byte0 = Conversion.hexToByte("R=!s", 0, (byte) (-105), 0, 0);
      assertEquals((byte) (-105), byte0);
      
      // Undeclared exception!
      try { 
        Conversion.intToHex((byte) (-105), (byte) (-105), (String) null, (byte) (-105), (-1488));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      long long0 = Conversion.byteArrayToLong(byteArray0, 901, 901, (-905), (-905));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(901L, long0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-230);
      shortArray0[1] = (short) (-499);
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1331;
      shortArray0[5] = (short) (-509);
      shortArray0[6] = (short)651;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      short[] shortArray1 = Conversion.longToShortArray((-905), 0, shortArray0, 901, 0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-230), (short) (-499), (short)3, (short)0, (short)1331, (short) (-509), (short)651, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-230), (short) (-499), (short)3, (short)0, (short)1331, (short) (-509), (short)651, (short)0, (short)0}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        Conversion.hexToShort("skx", (-905), (short)0, 0, 901);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      long long0 = Conversion.byteArrayToLong(byteArray0, 0, 65535L, 0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(65535L, long0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Conversion.intToByteArray(2089, (-1566), byteArray0, (byte)10, 80);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)12;
      shortArray0[1] = (short)32;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)793;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-1388);
      long long0 = Conversion.shortArrayToLong(shortArray0, (short)0, (short)0, (short)0, (-2224));
      assertArrayEquals(new short[] {(short)12, (short)32, (short)0, (short)0, (short)0, (short)793, (short)0, (short) (-1388)}, shortArray0);
      assertEquals(0L, long0);
      assertEquals(8, shortArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.byteArrayToLong((byte[]) null, (short)12, (short) (-1388), (short)0, (short) (-1388));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.binaryToShort((boolean[]) null, (-1), (short)0, (-1), (-1481));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte byte0 = (byte) (-115);
      int int0 = 2;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      // Undeclared exception!
      try { 
        Conversion.byteToBinary((byte) (-115), 2, booleanArray0, (byte) (-115), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -115
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = (byte)1;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        Conversion.byteToBinary((byte)1, (byte)1, booleanArray0, 2486, (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2486
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = Conversion.longToBinary(15L, (-786), booleanArray0, (-786), (-786));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      String string0 = "(n)Z8Be*T";
      int int0 = 1735;
      int int1 = 1281;
      // Undeclared exception!
      try { 
        Conversion.hexToInt("(n)Z8Be*T", (-786), 1735, 0, 1281);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertEquals('4', char0);
      assertEquals(5, booleanArray0.length);
      
      short short0 = Conversion.hexToShort("gJH,}u>d`Ggtbk", 0, (short)906, (-50), (-1601));
      assertEquals((short)906, short0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertEquals('5', char0);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('D');
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Conversion conversion0 = new Conversion();
      assertNotNull(conversion0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1160);
      shortArray0[1] = (short)1782;
      shortArray0[2] = (short) (-2898);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)450;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-690);
      short[] shortArray1 = Conversion.longToShortArray(0L, (-1129), shortArray0, (short)0, (short)0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1160), (short)1782, (short) (-2898), (short)0, (short)450, (short)0, (short) (-690)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1160), (short)1782, (short) (-2898), (short)0, (short)450, (short)0, (short) (-690)}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = (-218);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int1 = 252;
      // Undeclared exception!
      try { 
        Conversion.longToBinary(1L, (-218), booleanArray0, (-218), 252);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -218
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = Conversion.hexToInt("!)e'7<k0A?nFoKPSnv&", 5, 0, 0, 0);
      assertEquals(0, int0);
      
      int int1 = 102;
      // Undeclared exception!
      try { 
        Conversion.intToHex(0, 65535, "!)e'7<k0A?nFoKPSnv&", (-2749), 102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        Conversion.longToBinary(1L, (-218), booleanArray0, (-218), 252);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -218
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1851);
      intArray0[2] = 0;
      intArray0[3] = 5082;
      intArray0[4] = (-2536);
      intArray0[5] = 0;
      long long0 = Conversion.intArrayToLong(intArray0, (-1851), (-1851), (-1851), 0);
      assertArrayEquals(new int[] {0, (-1851), 0, 5082, (-2536), 0}, intArray0);
      assertEquals((-1851L), long0);
      assertEquals(6, intArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.intArrayToLong(intArray0, (-1091), 0L, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1091
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short short0 = Conversion.hexToShort((String) null, 0, (short)2, 0, 0);
      assertEquals((short)2, short0);
      
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('P');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'P' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1196);
      long long0 = Conversion.intArrayToLong(intArray0, 0, (-1196), (-1196), (-1196));
      assertArrayEquals(new int[] {(-1196)}, intArray0);
      assertEquals((-1196L), long0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-1);
      int int0 = Conversion.byteArrayToInt(byteArray0, 0, (byte)55, (byte) (-72), (byte)0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)55, (byte) (-72), (byte)0, (byte)124, (byte) (-1)}, byteArray0);
      assertEquals(55, int0);
      assertEquals(6, byteArray0.length);
      
      int int1 = Conversion.byteArrayToInt(byteArray0, (byte) (-1), (byte) (-1), (byte) (-1), 0);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)55, (byte) (-72), (byte)0, (byte)124, (byte) (-1)}, byteArray0);
      assertEquals((-1), int1);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.longToByteArray(3580L, 0, byteArray0, (byte) (-72), 97);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+srcPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      short short0 = (short) (-1568);
      short short1 = Conversion.hexToShort("t}E%5oVDi5i9|3~UA", (-802), (short) (-1568), (-1), (-802));
      assertTrue(short1 == short0);
      assertEquals((short) (-1568), short1);
      
      int int0 = Conversion.hexDigitMsb0ToInt('E');
      assertEquals(7, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1568);
      shortArray0[1] = (short) (-1568);
      shortArray0[2] = (short) (-1568);
      shortArray0[3] = (short) (-1568);
      short[] shortArray1 = Conversion.longToShortArray((-802), (-1), shortArray0, 0, 0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1568), (short) (-1568), (short) (-1568), (short) (-1568)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1568), (short) (-1568), (short) (-1568), (short) (-1568)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        Conversion.byteArrayToUuid((byte[]) null, (-1664));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte byte0 = (byte) (-47);
      // Undeclared exception!
      try { 
        Conversion.hexToByte("NOm7%;#09$OoVm|1D]", 1595, (byte) (-47), 787, (byte) (-47));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('_');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '_' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals('1', char0);
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = Conversion.hexDigitMsb0ToBinary('1');
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)51;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-823);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)2373;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)360;
      short[] shortArray1 = Conversion.intToShortArray((-1616), 0, shortArray0, 1386, (short) (-823));
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)51, (short)0, (short) (-823), (short)0, (short)2373, (short)0, (short)1, (short)360}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)51, (short)0, (short) (-823), (short)0, (short)2373, (short)0, (short)1, (short)360}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        Conversion.binaryToShort(booleanArray0, 0, (short)2223, 99, 99);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+dstPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigitMsb0_4bits(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // src.length-srcPos<4: src.length=0, srcPos=0
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      byte byte0 = (byte)30;
      int int0 = 905;
      // Undeclared exception!
      try { 
        Conversion.binaryToByte(booleanArray0, 0, (byte)30, (byte)30, 905);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+dstPos is greater or equal to than 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short[] shortArray0 = null;
      int int0 = (-619);
      // Undeclared exception!
      try { 
        Conversion.shortArrayToInt((short[]) null, 72, (-619), (-619), (-935));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals('e', char0);
      assertEquals(4, booleanArray0.length);
      
      int int0 = (-5242);
      // Undeclared exception!
      try { 
        Conversion.intToHexDigitMsb0((-5242));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nibble value not between 0 and 15: -5242
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('V');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'V' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte byte0 = (byte)0;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = (-2926);
      int int1 = 208;
      // Undeclared exception!
      try { 
        Conversion.byteToBinary((byte)0, 2605, booleanArray0, (-2926), 208);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+srcPos is greater or equal to than 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigit((boolean[]) null, (-2857));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = Conversion.hexToLong("", (-1), 2727L, 0, 0);
      assertEquals(2727L, long0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      long long1 = Conversion.intArrayToLong(intArray0, 0, (-1), 0, (-3841));
      assertFalse(long1 == long0);
      assertArrayEquals(new int[] {0, (-1)}, intArray0);
      assertEquals((-1L), long1);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals('0', char0);
      assertEquals(1, booleanArray0.length);
      
      int int0 = Conversion.hexDigitToInt('0');
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-41);
      long long2 = Conversion.byteArrayToLong(byteArray0, 0, (-1L), (byte) (-7), (byte)6);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertArrayEquals(new byte[] {(byte)56, (byte)6, (byte)0, (byte)0, (byte) (-7), (byte) (-41)}, byteArray0);
      assertEquals(8214565376491520013L, long2);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      short[] shortArray0 = new short[0];
      long long0 = Conversion.shortArrayToLong(shortArray0, 547, 65535L, 0, 0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(65535L, long0);
      assertEquals(0, shortArray0.length);
      
      byte byte0 = (byte)0;
      int int0 = 1;
      // Undeclared exception!
      try { 
        Conversion.byteToHex((byte)0, (byte)0, (String) null, 547, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = Conversion.hexDigitMsb0ToInt('a');
      assertEquals(5, int0);
      
      short short0 = (short)0;
      int int1 = 9;
      int int2 = 401;
      // Undeclared exception!
      try { 
        Conversion.shortToHex((short)0, 9, "", 860, 401);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.intArrayToLong((int[]) null, 0, 0, 934, 3134);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      short short0 = Conversion.binaryToShort(booleanArray0, 0, (short) (-264), 0, 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((short) (-264), short0);
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      long long0 = Conversion.intArrayToLong(intArray0, 0, (short) (-264), (-783), 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-264L), long0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-264);
      shortArray0[1] = (short) (-264);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-264);
      shortArray0[4] = (short)15;
      shortArray0[5] = (short) (-264);
      shortArray0[6] = (short) (-264);
      shortArray0[7] = (short) (-264);
      short[] shortArray1 = Conversion.longToShortArray((short) (-264), 64, shortArray0, 0, (short) (-264));
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-264), (short) (-264), (short)0, (short) (-264), (short)15, (short) (-264), (short) (-264), (short) (-264)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-264), (short) (-264), (short)0, (short) (-264), (short)15, (short) (-264), (short) (-264), (short) (-264)}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 0;
      short short0 = (short)0;
      // Undeclared exception!
      try { 
        Conversion.hexToShort("z?T8IKg", 0, (short)0, 3735, 3735);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToInt('G');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'G' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = Conversion.hexToLong("", 397, 0L, 397, 0);
      assertEquals(0L, long0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      char char0 = Conversion.binaryToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, true}, booleanArray0));
      assertEquals('0', char0);
      assertEquals(7, booleanArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)54;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-997);
      long long1 = Conversion.shortArrayToLong(shortArray0, 5, 0L, (-704), 1);
      assertFalse(long1 == long0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)54, (short)1, (short)1, (short) (-997)}, shortArray0);
      assertEquals(1L, long1);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, true, true, true}, booleanArray0));
      assertEquals('f', char0);
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      short[] shortArray0 = Conversion.intToShortArray(1456, 1456, (short[]) null, 0, (-245));
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      long long0 = Conversion.binaryToLong(booleanArray0, 0, (-245), 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false}, booleanArray0));
      assertEquals((-245L), long0);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      short short0 = (short)2854;
      // Undeclared exception!
      try { 
        Conversion.hexToShort("", 0, (short)2854, 0, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-163);
      intArray0[1] = (-163);
      intArray0[2] = 0;
      intArray0[3] = (-163);
      int[] intArray1 = Conversion.longToIntArray(0L, (-163), intArray0, (-163), (-1));
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-163), (-163), 0, (-163)}, intArray0);
      assertArrayEquals(new int[] {(-163), (-163), 0, (-163)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      
      String string0 = "dp|R9B7c)\\";
      String string1 = Conversion.longToHex((-163), 0, "dp|R9B7c)", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dp|R9B7c)", string1);
      assertNotNull(string1);
      
      int int0 = Conversion.hexToInt("!EjF`,", (-163), 0, 0, 0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        Conversion.hexDigitToInt('V');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'V' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2581;
      intArray0[1] = 1745;
      intArray0[2] = 2581;
      intArray0[3] = 2581;
      intArray0[4] = 2581;
      intArray0[5] = 2581;
      intArray0[6] = 2581;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        Conversion.longToIntArray(1L, 2581, intArray0, (-1), 1900);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nInts-1)*32+srcPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = (-839);
      String string0 = "]C> 6 @";
      int int1 = 12;
      // Undeclared exception!
      try { 
        Conversion.longToHex(0L, (-839), "]C> 6 @", (-839), 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -839
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary(':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret ':' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 3175;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 101;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        Conversion.longToIntArray((-1L), 0, intArray0, 1577, 3382);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nInts-1)*32+srcPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3959);
      shortArray0[1] = (short)51;
      shortArray0[2] = (short) (-541);
      shortArray0[3] = (short)2506;
      shortArray0[4] = (short)553;
      // Undeclared exception!
      try { 
        Conversion.shortArrayToLong(shortArray0, 0, 533L, (short)553, (short)2506);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nShorts-1)*16+dstPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Conversion conversion0 = new Conversion();
      assertNotNull(conversion0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      long long0 = Conversion.byteArrayToLong(byteArray0, (byte)32, (byte) (-117), (-1326), (-1326));
      assertArrayEquals(new byte[] {(byte)24, (byte)0, (byte)32, (byte) (-117), (byte)0, (byte) (-1)}, byteArray0);
      assertEquals((-117L), long0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Conversion.byteToHex((byte)0, (byte)0, ")Dr2>$", (byte)0, 0);
      assertEquals(")Dr2>$", string0);
      assertNotNull(string0);
      
      UUID uUID0 = MockUUID.fromString(":p&(=[~{WC5z0 ");
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Conversion.uuidToByteArray(uUID0, byteArray0, (byte)0, (byte)0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      char char0 = Conversion.binaryToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false}, booleanArray0));
      assertEquals('7', char0);
      assertEquals(6, booleanArray0.length);
      
      short short0 = Conversion.byteArrayToShort(byteArray1, (byte)0, (byte)0, (-951), 0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals((short)0, short0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      short short1 = Conversion.binaryToShort(booleanArray0, 0, (byte)0, (-694), (-2130));
      assertTrue(short1 == short0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false}, booleanArray0));
      assertEquals((short)0, short1);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1068);
      intArray0[1] = (-1755);
      intArray0[2] = (-1);
      intArray0[3] = 4139;
      intArray0[4] = 55;
      intArray0[5] = (-225);
      intArray0[6] = 3707;
      long long0 = Conversion.intArrayToLong(intArray0, 4139, (-1068), 0, 0);
      assertArrayEquals(new int[] {(-1068), (-1755), (-1), 4139, 55, (-225), 3707}, intArray0);
      assertEquals((-1068L), long0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      char char0 = Conversion.binaryToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      assertEquals('4', char0);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short short0 = (short) (-3106);
      byte[] byteArray0 = new byte[0];
      int int0 = 1;
      // Undeclared exception!
      try { 
        Conversion.shortToByteArray((short) (-3106), (short) (-3106), byteArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = (-992);
      String string0 = Conversion.intToHex(0, 0, "", (-992), 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Conversion conversion0 = new Conversion();
      assertNotNull(conversion0);
      
      // Undeclared exception!
      try { 
        Conversion.shortToHex((short) (-991), 0, " nH(&m", 2020, 2015);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2805);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1379);
      shortArray0[3] = (short)1;
      short[] shortArray1 = Conversion.longToShortArray((-1218L), 91, shortArray0, (short) (-2805), 0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2805), (short)0, (short) (-1379), (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2805), (short)0, (short) (-1379), (short)1}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0, (int) (short)0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false}, booleanArray0));
      assertEquals('1', char0);
      assertEquals(6, booleanArray0.length);
      
      boolean[] booleanArray1 = Conversion.shortToBinary((short)0, (-1978), booleanArray0, (-2351), (-4104));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte byte0 = Conversion.binaryToByte(booleanArray1, 7, (byte)75, 807, (short)0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false}, booleanArray1));
      assertEquals((byte)75, byte0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('T');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'T' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        Conversion.hexToByte("j6H*6/,_v4'}5xUQH", 0, (byte)0, (-1), 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.shortToHex((short)13, (-2467), "", (-2467), 1082);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals('0', char0);
      assertEquals(1, booleanArray0.length);
      
      int int0 = Conversion.hexDigitToInt('0');
      assertEquals(0, int0);
      
      byte byte0 = (byte) (-98);
      byte byte1 = Conversion.binaryToByte(booleanArray0, 0, (byte) (-98), 0, 0);
      assertTrue(byte1 == byte0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals((byte) (-98), byte1);
      assertEquals(1, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.hexToInt((String) null, 5, 5, 4, 529);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char char0 = Conversion.intToHexDigit(0);
      assertEquals('0', char0);
      
      boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('0');
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      String string0 = "GfIxAn~avg";
      // Undeclared exception!
      try { 
        Conversion.hexToInt("GfIxAn~avg", 0, 0, 57, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true}, booleanArray0));
      assertEquals('d', char0);
      assertEquals(6, booleanArray0.length);
      
      byte byte0 = (byte)0;
      boolean[] booleanArray1 = Conversion.byteToBinary((byte)0, (byte)0, booleanArray0, (byte)0, (byte)0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = Conversion.longToBinary((byte)0, (byte)0, booleanArray0, (byte)0, (byte)0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true}, booleanArray2));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      boolean[] booleanArray3 = Conversion.longToBinary((byte)0, 54, booleanArray1, (-2575), (-2575));
      assertSame(booleanArray0, booleanArray3);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray1, booleanArray3);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray3, booleanArray0);
      assertSame(booleanArray3, booleanArray1);
      assertSame(booleanArray3, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true}, booleanArray3));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray3.length);
      assertNotNull(booleanArray3);
      
      int int0 = Conversion.hexDigitToInt('5');
      assertEquals(5, int0);
      
      byte byte1 = (byte) (-72);
      int int1 = (-1360);
      byte byte2 = Conversion.binaryToByte(booleanArray3, (-2059), (byte) (-72), 5, (-1360));
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertSame(booleanArray0, booleanArray3);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray1, booleanArray3);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray3, booleanArray0);
      assertSame(booleanArray3, booleanArray1);
      assertSame(booleanArray3, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true}, booleanArray3));
      assertEquals((byte) (-72), byte2);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray3.length);
      
      // Undeclared exception!
      try { 
        Conversion.binaryToShort(booleanArray0, (-2059), (short)0, (byte) (-72), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2059
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      short short0 = (short)99;
      int int0 = 4;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int1 = 9;
      // Undeclared exception!
      try { 
        Conversion.shortToBinary((short)99, 4, booleanArray0, 4, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.byteToBinary((byte) (-14), (byte) (-14), (boolean[]) null, (-2502), 0);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte) (-14);
      byteArray0[8] = (byte) (-14);
      // Undeclared exception!
      try { 
        Conversion.byteArrayToShort(byteArray0, 0, (byte) (-14), 53, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+dstPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-24);
      byte byte0 = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)11;
      long long0 = Conversion.byteArrayToLong(byteArray0, (-1775), 65535L, (byte) (-17), (-1119));
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-24), (byte) (-17), (byte)84, (byte)11}, byteArray0);
      assertEquals(65535L, long0);
      assertEquals(5, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      char char0 = Conversion.binaryToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals('2', char0);
      assertEquals(3, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.binaryToShort(booleanArray0, (-1119), (byte) (-71), (byte) (-24), 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1119
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-834);
      shortArray0[1] = (short) (-4499);
      shortArray0[2] = (short) (-2561);
      shortArray0[3] = (short) (-347);
      shortArray0[4] = (short)32;
      shortArray0[5] = (short) (-3045);
      shortArray0[6] = (short)265;
      short[] shortArray1 = Conversion.longToShortArray(93L, 101, shortArray0, (-4634), (-1489));
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-834), (short) (-4499), (short) (-2561), (short) (-347), (short)32, (short) (-3045), (short)265}, shortArray0);
      assertArrayEquals(new short[] {(short) (-834), (short) (-4499), (short) (-2561), (short) (-347), (short)32, (short) (-3045), (short)265}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray0));
      assertEquals('5', char0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = Conversion.hexDigitMsb0ToInt('A');
      assertEquals(5, int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals('9', char0);
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray0 = new byte[0];
      short short0 = (short)79;
      // Undeclared exception!
      try { 
        Conversion.byteArrayToShort(byteArray0, 5, (short)79, 5, (short)79);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+dstPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigitMsb0_4bits(booleanArray0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // src.length>8: src.length=9
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = Conversion.longToIntArray((-672L), 0, intArray0, 0, 0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      
      long long0 = Conversion.hexToLong("R*", 3835, (-600L), 1210, 0);
      assertEquals((-600L), long0);
      
      // Undeclared exception!
      try { 
        Conversion.byteArrayToShort((byte[]) null, 2279, (short)0, 0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      char char0 = Conversion.intToHexDigit(1);
      assertEquals('1', char0);
      
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('_');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '_' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char char0 = 'K';
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('K');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'K' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('_');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '_' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = Conversion.longToBinary(0L, 1966, booleanArray0, 0, 0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-84);
      byte[] byteArray1 = Conversion.shortToByteArray((short)1, (short)1, byteArray0, 13, (byte)0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-33), (byte) (-112), (byte)55, (byte)0, (byte)78, (byte) (-84)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-33), (byte) (-112), (byte)55, (byte)0, (byte)78, (byte) (-84)}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      
      String string0 = Conversion.shortToHex((short)0, (-2683), "O?", 1734, (byte) (-112));
      assertEquals("O?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2149;
      intArray0[1] = 2149;
      int[] intArray1 = Conversion.longToIntArray(1L, 2149, intArray0, 2149, 0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2149, 2149}, intArray0);
      assertArrayEquals(new int[] {2149, 2149}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-27);
      byte[] byteArray1 = Conversion.intToByteArray(0, 0, byteArray0, 0, (byte)0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)22, (byte) (-27)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)22, (byte) (-27)}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      short short0 = (short) (-2445);
      int int0 = 0;
      int int1 = 4067;
      long long0 = Conversion.hexToLong("F8gTii=\"#\"c1Q]eF3F", 4067, 1L, 0, 0);
      assertEquals(1L, long0);
      
      char char0 = ']';
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary(']');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret ']' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      char char0 = Conversion.binaryToHexDigit(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true}, booleanArray0));
      assertEquals('2', char0);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-453);
      intArray0[1] = 74;
      intArray0[2] = (-476);
      long long0 = Conversion.intArrayToLong(intArray0, (-438), 0L, (-476), (-476));
      assertArrayEquals(new int[] {(-453), 74, (-476)}, intArray0);
      assertEquals(0L, long0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Conversion conversion0 = new Conversion();
      assertNotNull(conversion0);
      
      String string0 = Conversion.intToHex((-2829), (-2829), "", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      // Undeclared exception!
      try { 
        Conversion.longToByteArray((-1788L), (-4110), byteArray0, 0, (byte)28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte) (-76);
      short short0 = Conversion.byteArrayToShort(byteArray0, 0, (short)49, (-584), (byte)0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)72, (byte)126, (byte)25, (byte) (-76)}, byteArray0);
      assertEquals((short)49, short0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigit(booleanArray0, (-1955));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1952
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals('0', char0);
      assertEquals(2, booleanArray0.length);
      
      int int0 = Conversion.hexDigitMsb0ToInt('0');
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)30;
      int int1 = Conversion.byteArrayToInt(byteArray0, (byte)30, 818, 738, (-595));
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-22), (byte)9, (byte)0, (byte)30}, byteArray0);
      assertEquals(818, int1);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)101;
      // Undeclared exception!
      try { 
        Conversion.longToByteArray(1639L, 3989, byteArray0, (byte) (-124), (byte) (-124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+srcPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)535;
      shortArray0[1] = (short)32;
      shortArray0[2] = (short) (-3271);
      shortArray0[3] = (short)0;
      short[] shortArray1 = Conversion.intToShortArray(0, (-2444), shortArray0, (short)32, (short)0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)535, (short)32, (short) (-3271), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)535, (short)32, (short) (-3271), (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "Oec7uhnqi.Z#y,";
      short short0 = Conversion.hexToShort("Oec7uhnqi.Z#y,", 588, (short)0, 588, (short)0);
      assertEquals((short)0, short0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      int int0 = (-4717);
      byte[] byteArray1 = Conversion.intToByteArray(0, (short)0, byteArray0, 38, (-4717));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        Conversion.byteArrayToUuid((byte[]) null, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = (-1338);
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigitMsb0_4bits(booleanArray0, (-1338));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1335
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-507);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      short short0 = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-3182);
      short[] shortArray1 = Conversion.longToShortArray(4294967295L, 0, shortArray0, (short) (-507), (short) (-3182));
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-507), (short)0, (short)0, (short)0, (short)0, (short)0, (short) (-3182)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-507), (short)0, (short)0, (short)0, (short)0, (short)0, (short) (-3182)}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        Conversion.binaryBeMsb0ToHexDigit((boolean[]) null, (int) (short)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char char0 = Conversion.intToHexDigit(0);
      assertEquals('0', char0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1479);
      shortArray0[2] = (short)1132;
      shortArray0[3] = (short)596;
      int int0 = Conversion.shortArrayToInt(shortArray0, 829, 0, 0, 0);
      assertArrayEquals(new short[] {(short)0, (short) (-1479), (short)1132, (short)596}, shortArray0);
      assertEquals(0, int0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = Conversion.longToHex((-1L), (-2019), "9C*/6{62)q/Fd1<E'", (-2019), (-2019));
      assertEquals("9C*/6{62)q/Fd1<E'", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      int int0 = Conversion.binaryToInt(booleanArray0, (-2019), 2534, 1643, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertEquals(2534, int0);
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)56;
      // Undeclared exception!
      try { 
        Conversion.shortToByteArray((short) (-2007), 2157, byteArray0, (byte)11, (byte)64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+srcPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 0;
      int int1 = 2;
      // Undeclared exception!
      try { 
        Conversion.byteArrayToInt((byte[]) null, 0, 2, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)68;
      // Undeclared exception!
      try { 
        Conversion.byteArrayToUuid(byteArray0, (-1070));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1070
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1265);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-2183);
      shortArray0[3] = (short) (-1495);
      shortArray0[4] = (short)240;
      short[] shortArray1 = Conversion.intToShortArray(0, 0, shortArray0, 0, (short) (-2183));
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1265), (short)0, (short) (-2183), (short) (-1495), (short)240}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1265), (short)0, (short) (-2183), (short) (-1495), (short)240}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigit(booleanArray0, 4049);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4049
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      short short0 = Conversion.binaryToShort(booleanArray0, 0, (short)0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals((short)0, short0);
      assertEquals(2, booleanArray0.length);
      
      int int0 = 4;
      // Undeclared exception!
      try { 
        Conversion.intToHex(12, 4, "", 12, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 12
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      short short0 = Conversion.binaryToShort(booleanArray0, 0, (short)473, (short)473, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertEquals((short)473, short0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      int int0 = Conversion.binaryToInt(booleanArray0, 0, 0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, true, false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)16;
      short[] shortArray1 = Conversion.intToShortArray((-1142), 1, shortArray0, 1274, (-2718));
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)16}, shortArray0);
      assertArrayEquals(new short[] {(short)16}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigit(booleanArray0, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 102
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      short[] shortArray0 = Conversion.longToShortArray((-112L), 2885, (short[]) null, 3312, (-2789));
      assertNull(shortArray0);
      
      short[] shortArray1 = Conversion.longToShortArray((-5240L), 1226, (short[]) null, 0, (-2789));
      assertNull(shortArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)1;
      short short0 = Conversion.byteArrayToShort(byteArray0, (byte)0, (byte)0, (byte)102, 0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-103), (byte)102, (byte)0, (byte)0, (byte)3, (byte)1}, byteArray0);
      assertEquals((short)0, short0);
      assertEquals(7, byteArray0.length);
      
      int int0 = Conversion.hexDigitToInt('a');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      int int0 = 4605;
      // Undeclared exception!
      try { 
        Conversion.intToBinary(0, 0, booleanArray0, 417, 4605);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+srcPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        Conversion.binaryToInt((boolean[]) null, 1579, (-248), (-248), (-4827));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean[] booleanArray0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigitMsb0_4bits((boolean[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = 3798;
      // Undeclared exception!
      try { 
        Conversion.intToBinary(1673, 3798, (boolean[]) null, 1673, 1673);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+srcPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      // Undeclared exception!
      try { 
        Conversion.shortToBinary((short)1640, 8, booleanArray0, (short)1640, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1640
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = Conversion.intToBinary(0, 0, booleanArray0, 0, (-1761));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte) (-85);
      byte[] byteArray1 = Conversion.uuidToByteArray((UUID) null, byteArray0, (-470), 0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)110, (byte)0, (byte)0, (byte) (-1), (byte)111, (byte) (-62), (byte) (-85)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)110, (byte)0, (byte)0, (byte) (-1), (byte)111, (byte) (-62), (byte) (-85)}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        Conversion.intToBinary((-1), (-2700), booleanArray0, 190, 190);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 190
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      short short0 = Conversion.byteArrayToShort(byteArray0, 0, (short) (-1971), 0, (-997));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((short) (-1971), short0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int int0 = Conversion.binaryToInt(booleanArray0, 412, (-1), (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        Conversion.binaryToInt(booleanArray0, (-588), (-588), 0, 5706);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+dstPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = Conversion.byteToHex((byte)0, (byte)0, (String) null, (byte)0, (byte)0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      short short0 = Conversion.hexToShort("D^/$o", 1745, (short)2610, (-2187), (-1));
      assertEquals((short)2610, short0);
      
      String string0 = Conversion.longToHex((-2187), (short)2610, "E83%]A +fDvjv", 1791, (-1956));
      assertEquals("E83%]A +fDvjv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)3;
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)1;
      byte byte1 = (byte)127;
      byteArray0[3] = (byte)127;
      byte[] byteArray1 = Conversion.shortToByteArray((short)0, 55, byteArray0, 3, (-1152));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)71, (byte)1, (byte)127}, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)71, (byte)1, (byte)127}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        Conversion.longToHex((-1191L), (byte)71, "", 0, (byte)127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      short short0 = (short)928;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = Conversion.shortToBinary((short)928, (short)928, booleanArray0, (short)928, (-3724));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      // Undeclared exception!
      try { 
        Conversion.binaryBeMsb0ToHexDigit(booleanArray0, (-3724));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte byte0 = (byte)40;
      // Undeclared exception!
      try { 
        Conversion.byteToHex((byte)40, (byte)40, "G(`..r", 681, 681);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greater or equal to than 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = Conversion.intToHex(0, 5, "$~v56Loh!=?", (-1742), 0);
      assertEquals("$~v56Loh!=?", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)64;
      int int0 = Conversion.byteArrayToInt(byteArray0, (byte) (-92), (byte)0, 52, (-2266));
      assertArrayEquals(new byte[] {(byte) (-35), (byte) (-92), (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)7, (byte)64}, byteArray0);
      assertEquals(0, int0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = Conversion.intToHex((-1), (-1), "Ak`b4O;", (-1), (-919));
      assertEquals("Ak`b4O;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)50;
      int int0 = Conversion.byteArrayToInt(byteArray0, (byte)50, 0, (byte)9, (byte) (-116));
      assertArrayEquals(new byte[] {(byte)9, (byte)18, (byte) (-116), (byte) (-121), (byte)0, (byte)50}, byteArray0);
      assertEquals(0, int0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      // Undeclared exception!
      try { 
        Conversion.byteArrayToInt(byteArray0, (byte)102, (byte)102, (byte)102, 2371);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+dstPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = Conversion.longToBinary((-3090L), (-1), booleanArray0, 1270, (-1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      String string0 = Conversion.byteToHex((byte) (-1), 0, "", 0, (-3898));
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Conversion.longToHex((byte) (-1), 7, "", 0, 418);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      short short0 = (short) (-1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)75;
      byte[] byteArray1 = Conversion.shortToByteArray((short) (-1), (short) (-1), byteArray0, (short) (-1), (byte) (-128));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)75}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)75}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)75;
      intArray0[1] = (int) (byte)75;
      intArray0[2] = (int) (byte)75;
      intArray0[3] = (int) (byte) (-128);
      // Undeclared exception!
      try { 
        Conversion.intArrayToLong(intArray0, 75, (byte) (-128), 0, 75);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nInts-1)*32+dstPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.shortToBinary((short) (-1), (short) (-1), (boolean[]) null, 0, (short) (-1));
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      short short0 = Conversion.hexToShort((String) null, (-2289), (short)13, 1573, (-2289));
      assertEquals((short)13, short0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = 0;
      // Undeclared exception!
      try { 
        Conversion.binaryBeMsb0ToHexDigit(booleanArray0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert an empty array.
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Conversion.intToByteArray(1, 1, byteArray0, 132, (byte)0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)10, (byte) (-105), (byte)10, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)10, (byte) (-105), (byte)10, (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = Conversion.hexDigitToBinary('A');
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      String string0 = Conversion.longToHex((-2070L), 0, "a_", 0, (byte)10);
      assertEquals("ae7fffffff", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Conversion.longToBinary((byte)0, 132, booleanArray0, 556, (byte)10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+srcPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = 1501;
      // Undeclared exception!
      try { 
        Conversion.byteToHex((byte)0, (byte)0, ")Ej[ a]SyNb+N}(q~'", (byte)0, 1501);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greater or equal to than 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      byte[] byteArray1 = Conversion.intToByteArray(0, (-1090), byteArray0, 0, (byte) (-61));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-61)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-61)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, true, true}, booleanArray0));
      assertEquals('c', char0);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      short short0 = (short)0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      // Undeclared exception!
      try { 
        Conversion.shortToByteArray((short)0, (-214), byteArray0, (byte) (-1), (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[0] = (short)0;
      short short1 = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-949);
      shortArray0[3] = (short) (-2157);
      shortArray0[4] = (short) (-267);
      int int0 = 0;
      long long0 = Conversion.shortArrayToLong(shortArray0, (short) (-267), (short) (-267), 0, (short) (-2157));
      assertArrayEquals(new short[] {(short)0, (short)1, (short) (-949), (short) (-2157), (short) (-267)}, shortArray0);
      assertEquals((-267L), long0);
      assertEquals(5, shortArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.intToHexDigitMsb0((short) (-267));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nibble value not between 0 and 15: -267
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = 5324;
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigitMsb0_4bits(booleanArray0, 5324);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // src.length-srcPos<4: src.length=0, srcPos=5324
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)1;
      // Undeclared exception!
      try { 
        Conversion.shortToByteArray((short)0, (short)0, byteArray0, (byte)27, (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-121);
      // Undeclared exception!
      try { 
        Conversion.shortToByteArray((short)0, (short)0, byteArray0, (-3226), 2339);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+srcPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)62;
      byte[] byteArray1 = Conversion.intToByteArray((-3848), 0, byteArray0, (byte) (-97), (-339));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-97), (byte)1, (byte)55, (byte)62}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-97), (byte)1, (byte)55, (byte)62}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Conversion.intToByteArray(145, 145, byteArray0, 1516, 0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)99, (byte)111, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)99, (byte)111, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false}, booleanArray0));
      assertEquals('c', char0);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2100);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      long long0 = Conversion.shortArrayToLong(shortArray0, (short)0, 4294967295L, (short)0, (-2097));
      assertArrayEquals(new short[] {(short) (-2100), (short)0, (short)0}, shortArray0);
      assertEquals(4294967295L, long0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)13;
      byte[] byteArray1 = Conversion.uuidToByteArray(uUID0, byteArray0, (byte) (-110), (-1031));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-85), (byte)82, (byte) (-110), (byte)0, (byte) (-46), (byte)13}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-85), (byte)82, (byte) (-110), (byte)0, (byte) (-46), (byte)13}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        Conversion.intToHexDigitMsb0((-2025));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nibble value not between 0 and 15: -2025
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = 3767;
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigitMsb0_4bits(booleanArray0, 3767);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // src.length-srcPos<4: src.length=4, srcPos=3767
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.longToBinary(0L, 130, (boolean[]) null, 0, (-66));
      assertNull(booleanArray0);
      
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigitMsb0_4bits((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2003);
      shortArray0[1] = (short)713;
      shortArray0[2] = (short) (-1);
      // Undeclared exception!
      try { 
        Conversion.longToShortArray(0L, 36, shortArray0, 51, (short)713);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nShorts-1)*16+srcPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = Conversion.longToShortArray(65535L, 0, shortArray0, (-1496), 0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1438);
      intArray0[1] = (-1438);
      intArray0[2] = (-1233);
      intArray0[3] = (-1438);
      intArray0[4] = (-1438);
      intArray0[5] = (-1438);
      intArray0[6] = (-1438);
      int[] intArray1 = Conversion.longToIntArray(728L, (-1438), intArray0, (-1438), (-1438));
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1438), (-1438), (-1233), (-1438), (-1438), (-1438), (-1438)}, intArray0);
      assertArrayEquals(new int[] {(-1438), (-1438), (-1233), (-1438), (-1438), (-1438), (-1438)}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Conversion conversion0 = new Conversion();
      assertNotNull(conversion0);
      
      boolean[] booleanArray0 = Conversion.intToBinary(0, 0, (boolean[]) null, 0, 0);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = Conversion.hexDigitMsb0ToInt('D');
      assertEquals(11, int0);
      
      int int1 = 0;
      String string0 = Conversion.byteToHex((byte)125, (byte)125, "", 492, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Conversion.hexToLong("", 810, 0, 138, 2570);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      // Undeclared exception!
      try { 
        Conversion.binaryToLong(booleanArray0, 586, 586, 255, 586);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+dstPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      long long0 = Conversion.hexToLong("", 1353, 0L, 0, (-1577));
      assertEquals(0L, long0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)2946;
      shortArray0[4] = (short)674;
      shortArray0[5] = (short)49;
      shortArray0[6] = (short)595;
      shortArray0[7] = (short) (-5370);
      shortArray0[8] = (short)3366;
      // Undeclared exception!
      try { 
        Conversion.shortArrayToInt(shortArray0, (short)2946, 51, (-1993), 2602);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nShorts-1)*16+dstPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = (-1);
      byte byte0 = (byte)0;
      byte byte1 = Conversion.binaryToByte(booleanArray0, (-1), (byte)0, (byte)0, (-1));
      assertTrue(byte1 == byte0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals((byte)0, byte1);
      assertEquals(2, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.hexToLong("xt!o6D<1^&(TkSA@OdE", 1170, (-679L), (-747), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexToLong("cug", (-166), (-824L), 850, 850);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      short short0 = (short) (-152);
      shortArray0[1] = (short) (-152);
      shortArray0[2] = (short)1328;
      shortArray0[3] = (short) (-2190);
      shortArray0[4] = (short)0;
      // Undeclared exception!
      try { 
        Conversion.shortArrayToInt(shortArray0, 10, (short) (-2190), 0, (short)1328);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nShorts-1)*16+dstPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      int int0 = Conversion.shortArrayToInt(shortArray0, (short)0, (short)0, (short)0, (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)44;
      // Undeclared exception!
      try { 
        Conversion.byteArrayToUuid(byteArray0, (byte)44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Need at least 16 bytes for UUID
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = (-6026);
      // Undeclared exception!
      try { 
        Conversion.intToHexDigit((-6026));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nibble value not between 0 and 15: -6026
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1902);
      shortArray0[1] = (short)100;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-308);
      shortArray0[4] = (short)49;
      shortArray0[5] = (short) (-2083);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)906;
      shortArray0[8] = (short) (-279);
      // Undeclared exception!
      try { 
        Conversion.intToShortArray(0, 0, shortArray0, (short)49, (short)100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nShorts-1)*16+srcPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        Conversion.byteArrayToLong((byte[]) null, 1805, 0L, 0, 1805);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)70;
      byteArray0[0] = (byte)70;
      int int0 = 0;
      // Undeclared exception!
      try { 
        Conversion.byteArrayToLong(byteArray0, 0, (byte)70, (byte)70, (byte)70);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+dstPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      long long0 = Conversion.shortArrayToLong(shortArray0, 0, (-2997L), 511, 0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals((-2997L), long0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = Conversion.byteToHex((byte)0, 0, "h,NviMc~h4", (byte)0, (byte)0);
      assertEquals("h,NviMc~h4", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = Conversion.hexDigitToBinary('9');
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int int0 = Conversion.hexDigitToInt('9');
      assertEquals(9, int0);
      
      boolean[] booleanArray1 = Conversion.hexDigitMsb0ToBinary('9');
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray1));
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Conversion.byteArrayToUuid(byteArray0, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Need at least 16 bytes for UUID
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        Conversion.byteArrayToUuid(byteArray0, (-3077));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3077
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0, 1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals('0', char0);
      assertEquals(3, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('p');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'p' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-81);
      long long0 = Conversion.byteArrayToLong(byteArray0, 0, 1L, (byte)5, (-1));
      assertArrayEquals(new byte[] {(byte)5, (byte)87, (byte)0, (byte)0, (byte) (-81)}, byteArray0);
      assertEquals(1L, long0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.intToHexDigit(774);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nibble value not between 0 and 15: 774
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      short short0 = Conversion.binaryToShort(booleanArray0, (-1576), (short)787, (-1733), (-1733));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((short)787, short0);
      assertEquals(0, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        Conversion.intToShortArray((short)787, (-1576), shortArray0, (-1733), (short)787);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nShorts-1)*16+srcPos is greater or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte byte0 = Conversion.hexToByte((String) null, 0, (byte)0, (byte)0, 0);
      assertEquals((byte)0, byte0);
      
      String string0 = Conversion.longToHex(0, (byte)0, (String) null, 0, (byte)0);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        Conversion.byteArrayToLong(byteArray0, (byte)0, 0L, 0, 1079);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+dstPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      // Undeclared exception!
      try { 
        Conversion.byteArrayToLong(byteArray0, (byte)4, (-1L), (-2407), (byte)4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.byteArrayToLong((byte[]) null, 1, 1, (-807), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int int0 = (-2160);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte) (-17);
      byte byte0 = (byte)1;
      byteArray0[7] = (byte)1;
      // Undeclared exception!
      try { 
        Conversion.longToByteArray(576L, (-2160), byteArray0, (byte) (-71), 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -71
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      int int0 = 60;
      byte byte0 = Conversion.hexToByte("(nBytes-1)*8+srcPos is greater or equal to than 64", 60, (byte) (-85), (byte) (-85), (-1835));
      assertEquals((byte) (-85), byte0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      int int1 = (-2038);
      int int2 = (-418);
      int int3 = Conversion.byteArrayToInt(byteArray0, (-2038), (byte) (-85), (-418), (byte) (-85));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85)}, byteArray0);
      assertEquals((-85), int3);
      assertEquals(4, byteArray0.length);
      
      char char0 = 'n';
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'n' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigit(booleanArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = 2438;
      int int1 = 423;
      short[] shortArray0 = new short[9];
      shortArray0[4] = (short)102;
      shortArray0[1] = (short)51;
      shortArray0[2] = (short) (-266);
      shortArray0[3] = (short) (-3072);
      shortArray0[4] = (short)1179;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-1824);
      shortArray0[7] = (short)990;
      shortArray0[8] = (short) (-3224);
      short[] shortArray1 = Conversion.intToShortArray(2438, 423, shortArray0, 433, (short) (-266));
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)51, (short) (-266), (short) (-3072), (short)1179, (short)1, (short) (-1824), (short)990, (short) (-3224)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)51, (short) (-266), (short) (-3072), (short)1179, (short)1, (short) (-1824), (short)990, (short) (-3224)}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        Conversion.byteArrayToInt((byte[]) null, (short) (-1824), 2438, (-1679), (short)51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-2873);
      shortArray0[2] = (short)1581;
      shortArray0[3] = (short) (-164);
      int int0 = 70;
      // Undeclared exception!
      try { 
        Conversion.shortArrayToInt(shortArray0, (short)1581, (-973), (-2040), 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1581
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3439);
      shortArray0[1] = (short)3276;
      shortArray0[2] = (short) (-820);
      shortArray0[3] = (short)1465;
      Conversion.shortArrayToLong(shortArray0, (short)3276, (short) (-820), (-409), (-21));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte)92;
      // Undeclared exception!
      try { 
        Conversion.shortToByteArray((short)3276, (-1307), byteArray0, 1653, 55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1653
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('0');
      short short0 = (short)255;
      int int0 = 9;
      Conversion.binaryToShort(booleanArray0, (-1280), (short)255, 9, (-1280));
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        Conversion.hexToByte("", (-1280), (byte)0, (short)255, (short)255);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greater or equal to than 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2225;
      shortArray0[1] = (short) (-1681);
      shortArray0[2] = (short)0;
      int int0 = 97;
      Random.setNextRandom(97);
      Conversion.intToHex((-1399), (short)0, "", (short) (-1681), (short) (-1681));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)14;
      byte byte0 = (byte) (-87);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-87);
      Conversion.shortToByteArray((short) (-211), (-458), byteArray0, (byte)77, (-1399));
      // Undeclared exception!
      try { 
        Conversion.intToHexDigitMsb0(758);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nibble value not between 0 and 15: 758
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('3');
      short short0 = (short)0;
      int int0 = (-5);
      int int1 = 2;
      boolean[] booleanArray1 = Conversion.shortToBinary((short)0, (-5), booleanArray0, 2, (-5));
      Conversion.binaryToHexDigitMsb0_4bits(booleanArray0);
      Conversion.binaryToInt(booleanArray1, (-5), (-5), 0, 0);
      Conversion.longToBinary(0L, '3', booleanArray0, (-5), 0);
      short short1 = (short)747;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Conversion.shortToByteArray((short)747, (-5), byteArray0, 98, (short)0);
      UUID uUID0 = MockUUID.randomUUID();
      Conversion.uuidToByteArray(uUID0, byteArray1, 2, (-5));
      String string0 = "";
      // Undeclared exception!
      try { 
        Conversion.longToHex(98, 2, "", 0, 1634);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greater or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Conversion.longToBinary(1L, 0, booleanArray0, 250, 0);
      Conversion.binaryBeMsb0ToHexDigit(booleanArray0);
      Conversion.hexToShort("", 250, (short)5522, 250, 0);
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('j');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'j' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Conversion.binaryToHexDigit(booleanArray0, 0);
      Conversion.hexToByte("", 0, (byte)0, 1877, 0);
      Conversion.intToBinary(175, 1877, booleanArray0, (-1402), (byte)0);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      Conversion.shortArrayToLong(shortArray0, 0, (short)0, (-2), (byte)0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      shortArray0[2] = (short) (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Conversion.intToByteArray((short)0, (short)0, byteArray0, (-2129), (byte)0);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      // Undeclared exception!
      try { 
        Conversion.shortToBinary((short) (-295), 1, booleanArray0, 7, 102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+srcPos is greater or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[3] = false;
      Conversion.byteToBinary((byte) (-94), (byte) (-94), booleanArray0, (byte) (-94), (byte) (-94));
      Conversion.binaryToLong(booleanArray0, (byte) (-94), (byte) (-94), (byte) (-94), (-1));
      Conversion conversion0 = new Conversion();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      Conversion.intToByteArray((byte) (-94), (byte) (-94), byteArray0, (byte) (-94), (-1));
      // Undeclared exception!
      try { 
        Conversion.shortToHex((byte) (-94), (-1), "", (-1), 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      char char0 = '|';
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('|');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '|' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Conversion.longToHex(2813L, (-1), "0aguSG,u;W>>D", 0, (-1));
      byte[] byteArray0 = new byte[0];
      int int0 = (-3727);
      Conversion.longToByteArray(1072L, (-3439), byteArray0, (-3727), (-1));
      Conversion.hexToLong("0aguSG,u;W>>D", 64, 0L, (-3439), (-1));
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int1 = 356;
      Conversion.binaryToInt(booleanArray0, (-3727), 0, 356, (-3439));
      // Undeclared exception!
      try { 
        Conversion.intToHexDigit((-3439));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nibble value not between 0 and 15: -3439
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Conversion.hexDigitToBinary('B');
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)13;
      byteArray0[3] = (byte)13;
      byte byte2 = (byte)87;
      byteArray0[4] = (byte)87;
      // Undeclared exception!
      try { 
        Conversion.byteArrayToUuid(byteArray0, (-951));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -951
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }
}
