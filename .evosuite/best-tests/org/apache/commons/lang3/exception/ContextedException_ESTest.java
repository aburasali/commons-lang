/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:39:26 GMT 2019
 */

package org.apache.commons.lang3.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import java.util.Set;
import org.apache.commons.lang3.exception.ContextedException;
import org.apache.commons.lang3.exception.ContextedRuntimeException;
import org.apache.commons.lang3.exception.DefaultExceptionContext;
import org.apache.commons.lang3.exception.ExceptionContext;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ContextedException_ESTest extends ContextedException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException("]\n");
      String string0 = contextedException0.getRawMessage();
      assertEquals("]\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException((String) null);
      ContextedException contextedException0 = new ContextedException("", contextedRuntimeException0, contextedRuntimeException0);
      String string0 = contextedException0.getRawMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException((String) null);
      String string0 = contextedException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException((String) null);
      String string0 = contextedException0.getFormattedExceptionMessage((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      DefaultExceptionContext defaultExceptionContext0 = new DefaultExceptionContext();
      DefaultExceptionContext defaultExceptionContext1 = defaultExceptionContext0.setContextValue("", "");
      ContextedException contextedException0 = new ContextedException("", mockThrowable0, defaultExceptionContext1);
      List<Object> list0 = contextedException0.getContextValues("");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException("i&F/l_GqwG*C\"[", (Throwable) null);
      ContextedException contextedException0 = new ContextedException("L}s2Bm4", (Throwable) null, contextedRuntimeException0);
      ContextedException contextedException1 = contextedException0.addContextValue("L}s2Bm4", "L}s2Bm4");
      Set<String> set0 = contextedException1.getContextLabels();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      ContextedException contextedException1 = contextedException0.setContextValue("", "");
      List<Pair<String, Object>> list0 = contextedException1.getContextEntries();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException("*%W8*1O5FOV?Eu", (Throwable) null, (ExceptionContext) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException("");
      ContextedException contextedException0 = new ContextedException("", contextedRuntimeException0, contextedRuntimeException0);
      List<Object> list0 = contextedException0.getContextValues("");
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      ContextedException contextedException1 = contextedException0.setContextValue("", contextedException0);
      Object object0 = contextedException0.getFirstContextValue("");
      assertSame(object0, contextedException1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException(contextedException0);
      ContextedException contextedException1 = new ContextedException(contextedRuntimeException0);
      assertFalse(contextedException1.equals((Object)contextedException0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException("JrdjP(*V*f.GRVce");
      String string0 = contextedException0.getFormattedExceptionMessage("JrdjP(*V*f.GRVce");
      assertEquals("JrdjP(*V*f.GRVce", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      List<Pair<String, Object>> list0 = contextedException0.getContextEntries();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException("i&F/l_GqwG*C\"[", (Throwable) null);
      ContextedException contextedException0 = new ContextedException("L}s2Bm4", (Throwable) null, contextedRuntimeException0);
      Set<String> set0 = contextedException0.getContextLabels();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      String string0 = contextedException0.getRawMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      Object object0 = contextedException0.getFirstContextValue("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ContextedException contextedException0 = new ContextedException("%<YPcm33{0*7?Z", mockThrowable0);
      String string0 = contextedException0.getMessage();
      assertEquals("%<YPcm33{0*7?Z", string0);
  }
}
