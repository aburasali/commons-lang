/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:22:19 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.ThaiBuddhistDate;
import java.time.format.DateTimeFormatter;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.DurationFormatUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DurationFormatUtils_ESTest extends DurationFormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'", (-1));
      DurationFormatUtils.formatPeriod((long) (-1), 3600000L, "]J@$dMS");
      String string1 = DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN;
      long long0 = (-2397L);
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDurationISO((-2397L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[1];
      String string0 = (String)DurationFormatUtils.H;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("H");
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      durationFormatUtils_Token1.toString();
      durationFormatUtils_Token0.toString();
      durationFormatUtils_Token1.toString();
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token1;
      durationFormatUtils_Token1.toString();
      durationFormatUtils_Token1.increment();
      DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, "");
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("H");
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token("H", 372);
      durationFormatUtils_Token3.toString();
      durationFormatUtils_Token3.equals(durationFormatUtils_Token0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DurationFormatUtils.formatDuration(2106L, "HH:mm:ss.SSS", true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DurationFormatUtils.formatDuration(86400000L, "");
      int int0 = 0;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("", 0);
      durationFormatUtils_Token0.toString();
      int int1 = 0;
      durationFormatUtils_Token0.equals(durationFormatUtils_Token0);
      durationFormatUtils_Token0.increment();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeekYear();
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(mockGregorianCalendar0, (-20));
      durationFormatUtils_Token0.increment();
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriod(86400000L, 1668L, " 0 hours");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // startMillis must not be greater than endMillis
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[2];
      String string0 = (String)DurationFormatUtils.M;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("M");
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      durationFormatUtils_Token0.increment();
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token1.increment();
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token1.increment();
      durationFormatUtils_Token0.increment();
      DurationFormatUtils.format(durationFormatUtils_TokenArray0, 86400000L, 86400000L, (-805L), 86400000L, 60000L, (-906L), 86400000L, true);
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.increment();
      DurationFormatUtils.formatPeriodISO((-805L), (-78L));
      durationFormatUtils_Token1.increment();
      durationFormatUtils_Token1.getValue();
      DurationFormatUtils.formatDuration(0L, "l9`^RD5[", true);
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      TimeZone timeZone0 = TimeZone.getTimeZone("fe!H(gd6;Wc^F~CDX");
      DurationFormatUtils.formatPeriod(0L, 896L, "java.lang.StringBuilder@00000000190java.lang.StringBuilder@00000000200java.lang.StringBuilder@00000000210java.lang.StringBuilder@00000000220java.lang.StringBuilder@00000000230java.lang.StringBuilder@00000000240java.lang.StringBuilder@0000000025727java.lang.StringBuilder@0000000026", false, timeZone0);
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriod(2893L, 60000L, "86400000", true, (TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.DurationFormatUtils$Token";
      DurationFormatUtils.formatPeriod(2934L, 60000L, "org.apache.commons.lang3.time.DurationFormatUtils$Token");
      DurationFormatUtils.formatDurationWords(2088L, true, true);
      String string1 = "Cannot assign a %s to a %s";
      DurationFormatUtils.formatDuration(2088L, "Cannot assign a %s to a %s", true);
      DurationFormatUtils.formatPeriod(2088L, 3042L, "java.lang.StringBuilder@000000001100java.lang.StringBuilder@000000001257java.lang.StringBuilder@000000001300java.lang.StringBuilder@0000000014java.lang.StringBuilder@000000001557java.lang.StringBuilder@0000000016");
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = null;
      // Undeclared exception!
      try { 
        DurationFormatUtils.Token.containsTokenWithValue((DurationFormatUtils.Token[]) null, "Cannot assign a %s to a %s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DurationFormatUtils$Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "5gd^M{@iHNM%#";
      DurationFormatUtils.formatDuration(280L, "5gd^M{@iHNM%#", false);
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDurationWords((-1L), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 0L;
      boolean boolean0 = false;
      TimeZone timeZone0 = TimeZone.getTimeZone("<");
      DurationFormatUtils.formatPeriod(0L, 0L, "w?NePm$vU/Y3=N6", false, timeZone0);
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[2];
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("<");
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (CharSequence) "<");
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(stringBuilder1);
      durationFormatUtils_Token1.toString();
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      durationFormatUtils_Token1.increment();
      stringBuilder0.append('=');
      long long1 = 0L;
      long long2 = (-2335L);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(0, (char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriod((-1955L), (-1955L), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DurationFormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = " aWRGt'WiY";
      // Undeclared exception!
      try { 
        DurationFormatUtils.lexx(" aWRGt'WiY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unmatched quote in format:  aWRGt'WiY
         //
         verifyException("org.apache.commons.lang3.time.DurationFormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = 0L;
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDuration(0L, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DurationFormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = 0L;
      DurationFormatUtils.formatPeriod(0L, 0L, "");
      DurationFormatUtils.lexx("");
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      long long1 = 221L;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DurationFormatUtils.formatDuration(86400000L, "");
      int int0 = 0;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("", 0);
      durationFormatUtils_Token0.toString();
      int int1 = 0;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 0);
      durationFormatUtils_Token1.equals(durationFormatUtils_Token0);
      durationFormatUtils_Token0.increment();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeekYear();
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(mockGregorianCalendar0, (-39));
      durationFormatUtils_Token1.increment();
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriod(86400000L, 1668L, " 0 hours");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // startMillis must not be greater than endMillis
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token((Object) null);
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.increment();
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 0);
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[1];
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      // Undeclared exception!
      try { 
        DurationFormatUtils.format(durationFormatUtils_TokenArray0, 0, 0, 1385L, 1738L, (-5351L), 0, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DurationFormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = (-1544L);
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriod(1L, (-1544L), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // startMillis must not be greater than endMillis
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DurationFormatUtils.formatPeriod(195L, 1840L, "y", false, timeZone0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'", (-1));
      DurationFormatUtils.formatPeriod((long) (-1), 3600000L, "The validated array contains null element at index: %d");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = 0L;
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDuration(0L, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DurationFormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set(422, 422, (-5014), 0, (-5014), (-5014));
      mockGregorianCalendar0.setTimeInMillis(3600000L);
      mockGregorianCalendar0.isWeekDateSupported();
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(mockGregorianCalendar0, 0);
      durationFormatUtils_Token0.getValue();
      DurationFormatUtils.lexx("XN!NwQ*=_7g");
      DurationFormatUtils.formatDuration(0L, "");
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriodISO(3600000L, 2391L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // startMillis must not be greater than endMillis
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = 0L;
      DurationFormatUtils.formatDurationISO(0L);
      String string0 = null;
      // Undeclared exception!
      try { 
        DurationFormatUtils.lexx((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DurationFormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DurationFormatUtils.formatDurationWords(0L, false, false);
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuilder@00000000090java.lang.StringBuilder@00000000100java.lang.StringBuilder@00000000110java.lang.StringBuilder@0000000012", 2170);
      durationFormatUtils_Token0.increment();
      String string0 = durationFormatUtils_Token0.toString();
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      DurationFormatUtils.formatPeriod((long) 2170, 2883L, "0java.lang.StringBuilder@00000000090java.lang.StringBuilder@00000000100java.lang.StringBuilder@00000000110java.lang.StringBuilder@0000000012");
      DurationFormatUtils.formatDuration(0L, "", false);
      durationFormatUtils_Token0.increment();
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[0];
      DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, "0java.lang.StringBuilder@00000000090java.lang.StringBuilder@00000000100java.lang.StringBuilder@00000000110java.lang.StringBuilder@0000000012");
      // Undeclared exception!
      DurationFormatUtils.formatDuration(1165L, string0, false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      DurationFormatUtils.formatDuration(210L, "j()`j");
      DurationFormatUtils.formatPeriod(1909L, 1909L, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'");
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriodISO(2498L, 1676L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // startMillis must not be greater than endMillis
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.m;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("m");
      durationFormatUtils_Token0.toString();
      durationFormatUtils_Token0.toString();
      durationFormatUtils_Token0.increment();
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[0];
      durationFormatUtils_Token0.toString();
      durationFormatUtils_Token0.toString();
      DurationFormatUtils.format(durationFormatUtils_TokenArray0, (-500L), 9223372036854775807L, 3600000L, 9223372036854775807L, 3600000L, (-500L), (-500L), true);
      DurationFormatUtils.formatDurationISO(2130L);
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.increment();
      DurationFormatUtils.formatPeriodISO((-585L), 9223372036854775807L);
      durationFormatUtils_Token0.getCount();
      String string1 = (String)DurationFormatUtils.H;
      DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, "H");
      String string2 = (String)DurationFormatUtils.d;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("d", 4);
      DurationFormatUtils.lexx(" 1 hour");
      DurationFormatUtils.formatDurationISO(0L);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DurationFormatUtils.formatDuration(9223372036854775807L, "d");
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("d");
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.getValue();
      durationFormatUtils_Token0.getCount();
      DurationFormatUtils.formatDurationWords(9223372036854775807L, false, false);
      durationFormatUtils_Token0.toString();
      long long0 = (-1385L);
      long long1 = 0L;
      String string0 = "8=";
      boolean boolean0 = false;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(3, "M", 3, 0, 3674, 0, 3, 0, 0, 3, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal daylight saving value: 0
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DurationFormatUtils.formatDurationHMS(1L);
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("00java.lang.StringBuilder@000000000800java.lang.StringBuilder@000000000900java.lang.StringBuilder@0000000010001");
      DurationFormatUtils.formatPeriodISO(1L, 1L);
      long long0 = 0L;
      long long1 = 0L;
      boolean boolean0 = true;
      DurationFormatUtils.format(durationFormatUtils_TokenArray0, 3600000L, 86400000L, 3600000L, 0L, 0L, 0L, 1404L, true);
      DurationFormatUtils.formatDurationWords(758L, true, true);
      DurationFormatUtils.formatDurationHMS(1404L);
      long long2 = (-4990L);
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDurationHMS((-4990L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.d;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("d");
      durationFormatUtils_Token0.toString();
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.toString();
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.toString();
      DurationFormatUtils.formatPeriodISO((-2822L), (-2822L));
      durationFormatUtils_Token0.equals("java.lang.StringBuilder@00000000180java.lang.StringBuilder@00000000190java.lang.StringBuilder@00000000200java.lang.StringBuilder@00000000210java.lang.StringBuilder@00000000220java.lang.StringBuilder@00000000230java.lang.StringBuilder@0000000024000java.lang.StringBuilder@0000000025");
      DurationFormatUtils.formatDurationWords(3600000L, true, true);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.y;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("y");
      durationFormatUtils_Token0.toString();
      durationFormatUtils_Token0.toString();
      durationFormatUtils_Token0.getValue();
      durationFormatUtils_Token0.getValue();
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[9];
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[7] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[8] = durationFormatUtils_Token0;
      DurationFormatUtils.format(durationFormatUtils_TokenArray0, 9223372036854775807L, 9223372036854775807L, 0L, 0L, 0L, 9223372036854775807L, (-406L), false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      long long0 = (-611L);
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDurationISO((-611L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.M;
      assertEquals("M", string0);
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("M", (-778));
      assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      int int0 = durationFormatUtils_Token1.getCount();
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertEquals(1, int0);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(0L, 0L, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDuration(0L, "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriod(1L, (-3744L), "", true, (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // startMillis must not be greater than endMillis
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx(" ");
      assertEquals(1, durationFormatUtils_TokenArray0.length);
      assertNotNull(durationFormatUtils_TokenArray0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token((Object) null);
      assertNotNull(durationFormatUtils_Token0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(9223372036854775807L, 9223372036854775807L, "H");
      assertEquals("0", string0);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDurationHMS(9223372036854775807L);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = DurationFormatUtils.formatDuration(0L, "0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.S;
      assertEquals("S", string0);
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("S");
      assertNotNull(durationFormatUtils_Token0);
      
      long long0 = (-2532L);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDurationWords((-2532L), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(0L, false, true);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(0L, false, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDuration((-1652L), "J&e", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String string0 = DurationFormatUtils.formatPeriod((-1L), 1L, "", true, timeZone0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.H;
      assertEquals("H", string0);
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("H");
      assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 482);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      boolean boolean0 = durationFormatUtils_Token1.equals("H");
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertFalse(boolean0);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[0];
      String string0 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 1021L, 0L, 1021L, 0L, (-1L), 1021L, 1021L, false);
      assertEquals(0, durationFormatUtils_TokenArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, "");
      assertEquals(0, durationFormatUtils_TokenArray0.length);
      assertFalse(boolean0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("");
      assertNotNull(durationFormatUtils_Token0);
      
      Object object0 = durationFormatUtils_Token0.getValue();
      assertEquals("", object0);
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      
      String string1 = DurationFormatUtils.formatPeriodISO((-1L), 0L);
      assertFalse(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = DurationFormatUtils.formatDurationWords(1021L, false, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      durationFormatUtils_Token0.increment();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(753, "M*%3&#H");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("M*%3&#H", simpleTimeZone0.getID());
      assertEquals(753, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=M*%3&#H,offset=753,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      String string0 = DurationFormatUtils.formatPeriod((-1740L), (-1740L), ".6B/9%\"?`*Wi$l00H?", false, (TimeZone) simpleTimeZone0);
      assertNotNull(string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("M*%3&#H", simpleTimeZone0.getID());
      assertEquals(753, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=M*%3&#H,offset=753,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(0L, "f:_Xda;k6QC-ZWJ+", false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO((-984L), (-984L));
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatPeriodISO((-984L), 1203L);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = 0L;
      String string0 = "o&NVS%TM^kQ),U0";
      String string1 = DurationFormatUtils.formatDuration(0L, "o&NVS%TM^kQ),U0");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriod(0L, 0L, "java.lang.StringBuilder@00000000060java.lang.StringBuilder@00000000070java.lang.StringBuilder@0000000008", true, (TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(0L, 0L, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = (String)DurationFormatUtils.M;
      assertEquals("M", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("M");
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_Token0.increment();
      String string2 = DurationFormatUtils.formatDurationISO(0L);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Object object0 = durationFormatUtils_Token0.getValue();
      assertEquals("M", object0);
      assertTrue(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string2));
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      
      String string3 = durationFormatUtils_Token0.toString();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)object0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = DurationFormatUtils.formatPeriodISO(0L, 0L);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)object0));
      assertNotNull(string4);
      
      String string5 = DurationFormatUtils.formatDurationISO(0L);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)object0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2626, "w");
      assertNotNull(simpleTimeZone0);
      assertEquals("w", simpleTimeZone0.getID());
      assertEquals(2626, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=w,offset=2626,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriod(0L, (-1L), "java.lang.StringBuilder@00000000640java.lang.StringBuilder@00000000650java.lang.StringBuilder@00000000660java.lang.StringBuilder@00000000670java.lang.StringBuilder@00000000680java.lang.StringBuilder@00000000690java.lang.StringBuilder@0000000070000java.lang.StringBuilder@0000000071", false, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // startMillis must not be greater than endMillis
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long long0 = (-588L);
      String string0 = ":PjqTrl";
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDuration((-588L), ":PjqTrl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      String string0 = DurationFormatUtils.formatDurationISO(0L);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatPeriod(593L, 1123L, "");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[9];
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("", 0);
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("");
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token2);
      
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token2;
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token("java.lang.StringBuilder@00000000170java.lang.StringBuilder@00000000180java.lang.StringBuilder@00000000190java.lang.StringBuilder@00000000200java.lang.StringBuilder@00000000210java.lang.StringBuilder@00000000220java.lang.StringBuilder@0000000023000java.lang.StringBuilder@0000000024");
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token3);
      
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token3;
      String string2 = (String)DurationFormatUtils.M;
      assertEquals("M", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token("M");
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token1));
      assertNotNull(durationFormatUtils_Token4);
      
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token4;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token(mockGregorianCalendar0);
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token1));
      assertNotNull(durationFormatUtils_Token5);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("GMT", timeZone0.getID());
      
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token5;
      DurationFormatUtils.Token durationFormatUtils_Token6 = new DurationFormatUtils.Token("java.lang.StringBuilder@00000000170java.lang.StringBuilder@00000000180java.lang.StringBuilder@00000000190java.lang.StringBuilder@00000000200java.lang.StringBuilder@00000000210java.lang.StringBuilder@00000000220java.lang.StringBuilder@0000000023000java.lang.StringBuilder@0000000024");
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token5));
      assertNotNull(durationFormatUtils_Token6);
      
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token6;
      String string3 = (String)DurationFormatUtils.S;
      assertEquals("S", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      DurationFormatUtils.Token durationFormatUtils_Token7 = new DurationFormatUtils.Token("S");
      assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token6));
      assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token5));
      assertNotNull(durationFormatUtils_Token7);
      
      durationFormatUtils_TokenArray0[7] = durationFormatUtils_Token7;
      String string4 = (String)DurationFormatUtils.s;
      assertEquals("s", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      DurationFormatUtils.Token durationFormatUtils_Token8 = new DurationFormatUtils.Token("s", 0);
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token6));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token7));
      assertNotNull(durationFormatUtils_Token8);
      
      durationFormatUtils_TokenArray0[8] = durationFormatUtils_Token8;
      String string5 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 593L, 1123L, 0L, 3096L, 593L, (-1L), 1123L, true);
      assertEquals(9, durationFormatUtils_TokenArray0.length);
      assertEquals("11231123-1", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = DurationFormatUtils.formatDurationISO(3192L);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      StringBuilder stringBuilder0 = new StringBuilder("^n]K\"n:uEF|=|S");
      assertNotNull(stringBuilder0);
      assertEquals("^n]K\"n:uEF|=|S", stringBuilder0.toString());
      
      String string7 = DurationFormatUtils.formatDurationHMS(0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, "");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("^n]K\"n:uEF|=|S", stringBuilder0.toString());
      assertEquals("^n]K\"n:uEF|=|S", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.replace(0, 0, "");
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder2);
      assertEquals("^n]K\"n:uEF|=|S", stringBuilder2.toString());
      assertEquals("^n]K\"n:uEF|=|S", stringBuilder0.toString());
      assertEquals("^n]K\"n:uEF|=|S", stringBuilder1.toString());
      
      StringBuilder stringBuilder3 = stringBuilder0.append((double) 0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotNull(stringBuilder3);
      assertEquals("^n]K\"n:uEF|=|S0.0", stringBuilder3.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0", stringBuilder0.toString());
      
      StringBuilder stringBuilder4 = stringBuilder2.append((CharSequence) "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'");
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertNotNull(stringBuilder4);
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'", stringBuilder2.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'", stringBuilder4.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'", stringBuilder0.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'", stringBuilder1.toString());
      
      StringBuilder stringBuilder5 = stringBuilder2.append((-2552));
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder3);
      assertNotNull(stringBuilder5);
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder2.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder5.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder0.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder1.toString());
      
      DurationFormatUtils.Token durationFormatUtils_Token9 = new DurationFormatUtils.Token(stringBuilder5);
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token8));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token7));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token6));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token2));
      assertNotNull(durationFormatUtils_Token9);
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder2.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder5.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder0.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder1.toString());
      
      String string8 = durationFormatUtils_Token9.toString();
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder2);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token8);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token5);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token4);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token3);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token7);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token6);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder3);
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token8));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token7));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token6));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token2));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder2.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder5.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder0.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder1.toString());
      
      Object object0 = durationFormatUtils_Token9.getValue();
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, object0);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, object0);
      assertSame(stringBuilder5, stringBuilder2);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token8);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token5);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token4);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token3);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token7);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token6);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token2);
      assertSame(object0, stringBuilder0);
      assertSame(object0, stringBuilder2);
      assertSame(object0, stringBuilder4);
      assertSame(object0, stringBuilder3);
      assertSame(object0, stringBuilder5);
      assertSame(object0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, object0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, object0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder3);
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token8));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token7));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token6));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token2));
      assertNotNull(object0);
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder2.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder5.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", object0.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder0.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder1.toString());
      
      String string9 = durationFormatUtils_Token9.toString();
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, object0);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, object0);
      assertSame(stringBuilder5, stringBuilder2);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token8);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token5);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token4);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token3);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token7);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token6);
      assertNotSame(durationFormatUtils_Token9, durationFormatUtils_Token2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, object0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, object0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder3);
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token8));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token7));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token6));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token2));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder2.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder5.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder0.toString());
      assertEquals("^n]K\"n:uEF|=|S0.0'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'-2552", stringBuilder1.toString());
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDuration(593L, "9Xxot|p3]n;`,U'aP", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unmatched quote in format: 9Xxot|p3]n;`,U'aP
         //
         verifyException("org.apache.commons.lang3.time.DurationFormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(86400000L, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 0;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("", 0);
      assertNotNull(durationFormatUtils_Token0);
      
      String string1 = durationFormatUtils_Token0.toString();
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = 0;
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token0);
      assertTrue(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      int int2 = mockGregorianCalendar0.getWeekYear();
      assertEquals(2014, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(mockGregorianCalendar0, (-20));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      durationFormatUtils_Token0.increment();
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriod(86400000L, 1668L, " 0 hours");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // startMillis must not be greater than endMillis
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationHMS(1000L);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(1000L, true, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(object0, 1);
      assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'");
      assertEquals(15, durationFormatUtils_TokenArray0.length);
      assertNotNull(durationFormatUtils_TokenArray0);
      
      String string2 = DurationFormatUtils.formatPeriod((-180L), (long) 1, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = DurationFormatUtils.formatDurationWords(1, true, true);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = DurationFormatUtils.formatDuration(1000L, "7^?@}z0-C");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = DurationFormatUtils.formatPeriodISO(1, 1);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray1 = new DurationFormatUtils.Token[4];
      assertFalse(durationFormatUtils_TokenArray1.equals((Object)durationFormatUtils_TokenArray0));
      
      durationFormatUtils_TokenArray1[0] = durationFormatUtils_Token0;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("0java.lang.StringBuilder@00000000710java.lang.StringBuilder@00000000720java.lang.StringBuilder@00000000730java.lang.StringBuilder@0000000074");
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      durationFormatUtils_TokenArray1[1] = durationFormatUtils_Token1;
      durationFormatUtils_TokenArray1[2] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray1[3] = durationFormatUtils_Token0;
      String string6 = DurationFormatUtils.format(durationFormatUtils_TokenArray1, 1, (-180L), (-5L), 0L, (-5L), 4691L, 4691L, true);
      assertNotSame(durationFormatUtils_TokenArray1, durationFormatUtils_TokenArray0);
      assertEquals(4, durationFormatUtils_TokenArray1.length);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(durationFormatUtils_TokenArray1.equals((Object)durationFormatUtils_TokenArray0));
      assertNotNull(string6);
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertTrue(boolean0);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[1];
      String string0 = (String)DurationFormatUtils.H;
      assertEquals("H", string0);
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("H");
      assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      String string1 = durationFormatUtils_Token1.toString();
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = durationFormatUtils_Token0.toString();
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = durationFormatUtils_Token1.toString();
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token1;
      String string4 = durationFormatUtils_Token1.toString();
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      durationFormatUtils_Token0.increment();
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      
      durationFormatUtils_Token1.increment();
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      boolean boolean0 = DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, "");
      assertEquals(1, durationFormatUtils_TokenArray0.length);
      assertFalse(boolean0);
      
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("H");
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token2);
      
      String string5 = DurationFormatUtils.formatPeriod((-907L), (-907L), "7e|;&Yptx`;Eq<D\"f");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token("H", 372);
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      assertNotNull(durationFormatUtils_Token3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'", (-12));
      DurationFormatUtils.formatPeriod((long) (-12), 3600000L, "Osi;");
      String string1 = DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN;
      String string2 = DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN;
      String string3 = DurationFormatUtils.formatDurationWords(7216L, false, false);
      TimeZone timeZone0 = TimeZone.getTimeZone("'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'");
      String string4 = DurationFormatUtils.formatPeriod((-2397L), 1668L, "", true, timeZone0);
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.m;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("m", 0);
      String string1 = durationFormatUtils_Token0.toString();
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.toString();
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 0);
      DurationFormatUtils.formatPeriodISO(0, 0);
      String string2 = DurationFormatUtils.formatDurationWords(0, true, true);
      assertFalse(string2.equals((Object)string1));
  }
}
