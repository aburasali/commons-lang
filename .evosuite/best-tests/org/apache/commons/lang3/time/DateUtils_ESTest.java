/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:19:21 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ChronoPeriod;
import java.time.chrono.Chronology;
import java.time.chrono.Era;
import java.time.chrono.JapaneseDate;
import java.time.chrono.JapaneseEra;
import java.time.chrono.MinguoDate;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalUnit;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.function.Consumer;
import org.apache.commons.lang3.time.DateUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateUtils_ESTest extends DateUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("~6]");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      DateUtils.iterator((Object) mockGregorianCalendar0, 1);
      DateUtils.getFragmentInMinutes((Calendar) mockGregorianCalendar0, 1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      DateUtils.parseDateStrictly("", stringArray0);
      int int0 = 2147481972;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1776, 1776, 1776, (-145), 2147481972, 1309);
      mockGregorianCalendar0.getWeeksInWeekYear();
      DateUtils.truncatedCompareTo((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0, 2);
      // Undeclared exception!
      try { 
        DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("~6]");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      mockGregorianCalendar0.setTimeZone(timeZone0);
      DateUtils.iterator((Object) mockGregorianCalendar0, 1);
      MockDate mockDate0 = new MockDate((-1256), 6, (-1256));
      DateUtils.getFragmentInMilliseconds((Date) mockDate0, 6);
      DateUtils.getFragmentInDays((Date) mockDate0, 6);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setTimeZone((TimeZone) null);
      // Undeclared exception!
      try { 
        DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Date date0 = null;
      int int0 = (-187);
      // Undeclared exception!
      try { 
        DateUtils.setYears((Date) null, (-187));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = 0;
      Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 0);
      DateUtils.truncatedEquals(calendar0, (Calendar) mockGregorianCalendar0, 0);
      DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, calendar0);
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutes((-12), (-777));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset minutes not in valid range: value -777 is not in the range -59 to 59
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.addYears((Date) null, (-239));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"##G&=k";
      try { 
        DateUtils.parseDateStrictly("", stringArray0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unable to parse the date: 
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 542;
      int int1 = 124;
      int int2 = 15;
      MockDate mockDate0 = new MockDate(542, 124, 15, 542, 124, 542);
      mockDate0.setTime((-1L));
      Instant instant0 = mockDate0.toInstant();
      mockDate0.clone();
      Date date0 = Date.from(instant0);
      mockDate0.after(date0);
      mockDate0.getTime();
      mockDate0.toInstant();
      mockDate0.setTime((-1L));
      mockDate0.getTime();
      Date date1 = DateUtils.setMonths(mockDate0, (-368));
      Calendar calendar0 = DateUtils.toCalendar(date1);
      // Undeclared exception!
      try { 
        DateUtils.round(calendar0, (-837));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -837 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1325), (-1325), 0, 0, 0, 7);
      DateUtils.getFragmentInMilliseconds((Calendar) mockGregorianCalendar0, 5);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, (-1325), (-227), 0, 0);
      mockGregorianCalendar1.getActualMinimum(0);
      mockGregorianCalendar0.getWeekYear();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInHours((Calendar) mockGregorianCalendar1, (-1325));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment -1325 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 9);
      DateUtils.truncatedEquals(calendar0, (Calendar) mockGregorianCalendar0, 9);
      int int0 = (-26);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "?pq~A";
      stringArray0[1] = "?pq~A";
      stringArray0[2] = "?pq~A";
      stringArray0[3] = "?pq~A";
      stringArray0[4] = "org.apache.commons.lang3.time.FastDateParser$PatternStrategy";
      stringArray0[5] = "?pq~A";
      stringArray0[6] = "?pq~A";
      stringArray0[7] = "?pq~A";
      stringArray0[8] = "?pq~A";
      // Undeclared exception!
      try { 
        DateUtils.parseDateStrictly("?pq~A", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'p' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Date date0 = null;
      int int0 = 2114;
      // Undeclared exception!
      try { 
        DateUtils.setMilliseconds((Date) null, 2114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("~6]");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      DateUtils.iterator((Object) mockGregorianCalendar0, 1);
      MockDate mockDate0 = new MockDate((-1256), 6, (-1256));
      DateUtils.getFragmentInMilliseconds((Date) mockDate0, 6);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-557), (-557), (-557), 1076, 39);
      DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar0);
      DateUtils.getFragmentInSeconds((Calendar) mockGregorianCalendar0, 14);
      MockDate mockDate0 = new MockDate(829, (-331), 829, 2585, 2585, (-557));
      Calendar calendar0 = DateUtils.toCalendar((Date) mockDate0);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMinutes(calendar0, 829);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 829 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-15), (-15), (-15), (-15), (-15));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DateUtils.parseDate("", stringArray0);
      Date date0 = DateUtils.setMonths(mockDate0, (-15));
      int int0 = (-1170);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(280000000, (-1170), 280000000, 280000000, 92);
      DateUtils.addYears(date0, 280000000);
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Calendar) mockGregorianCalendar0, (-15));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 199;
      MockDate mockDate0 = new MockDate((-411), 1, 1309, 2720, 199);
      Date date0 = DateUtils.addWeeks(mockDate0, (-1652));
      int int1 = 12;
      Date date1 = DateUtils.truncate(date0, 12);
      // Undeclared exception!
      try { 
        DateUtils.ceiling(date1, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 7 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0);
      DateUtils.getFragmentInMinutes((Date) mockDate0, 2);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(15, "cR4tO'OGO1PqD_7Q");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      DateUtils.getFragmentInHours((Calendar) mockGregorianCalendar0, 2);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInSeconds((Calendar) mockGregorianCalendar0, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 7 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      int int0 = 1;
      Date date0 = DateUtils.parseDateStrictly("", stringArray0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      DateUtils.isSameDay((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
      Date date1 = DateUtils.setMilliseconds(date0, (-740));
      Date date2 = DateUtils.setMinutes(date1, 1);
      Date date3 = DateUtils.addSeconds(date2, (-740));
      Calendar calendar0 = DateUtils.toCalendar(date3);
      DateUtils.setMilliseconds(date3, 1);
      DateUtils.addMinutes(date3, (-2814));
      calendar0.setTimeZone((TimeZone) null);
      int int1 = 1;
      // Undeclared exception!
      try { 
        DateUtils.iterator(calendar0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 11;
      int int1 = (-1273);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-387), 11, 11, 11, (-1273), 11);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      DateUtils.getFragmentInSeconds(date0, 11);
      // Undeclared exception!
      try { 
        DateUtils.round(date0, (-387));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -387 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar0);
      MockDate mockDate0 = new MockDate(124, 123, (-1921));
      DateUtils.truncatedEquals((Date) mockDate0, (Date) mockDate0, 9);
      Date date0 = DateUtils.setMonths(mockDate0, 574);
      DateUtils.addSeconds(date0, 8);
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        dateUtils_DateIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DateUtils$DateIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = (-1652);
      mockGregorianCalendar0.getTimeZone();
      DateUtils.ceiling((Calendar) mockGregorianCalendar0, 9);
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Object) mockGregorianCalendar0, (-1652));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -1652 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0);
      int int0 = 2;
      DateUtils.getFragmentInMinutes((Date) mockDate0, 2);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(15, "cR4tO'OGO1PqD_7Q", 2, 2, 2160, (-2596), 15, 91, 91, 15, 15, 15, 91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -2596
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Calendar calendar0 = null;
      int int0 = 6;
      // Undeclared exception!
      try { 
        DateUtils.round((Calendar) null, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[2] = null;
      stringArray0[2] = null;
      stringArray0[3] = "8/v,/r";
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateUtils.truncate((Object) null, 2373);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      int int0 = 1;
      DateUtils.parseDateStrictly("", stringArray0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      gregorianCalendar0.setTimeZone((TimeZone) null);
      // Undeclared exception!
      try { 
        DateUtils.isSameDay((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[11];
      stringArray0[0] = "fE!Fx.Zj`";
      stringArray0[1] = "pG {aq";
      stringArray0[2] = "pG {aq";
      stringArray0[3] = "pG {aq";
      Calendar calendar0 = null;
      int int0 = (-3141);
      // Undeclared exception!
      try { 
        DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 11;
      int int1 = (-15);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 11, (-15));
      mockGregorianCalendar0.get(15);
      // Undeclared exception!
      try { 
        DateUtils.iterator((Object) mockGregorianCalendar0, 1123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The range style 1123 is not valid.
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.getOffset(0L);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 0, 0);
      DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1);
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar1);
      // Undeclared exception!
      try { 
        dateUtils_DateIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DateUtils$DateIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      mockDate0.getTime();
      Date date0 = DateUtils.addSeconds(mockDate0, 1);
      DateUtils.setDays(mockDate0, 1);
      DateUtils.ceiling(date0, 1);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1892), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1146, 1146, 1146, 3, (-820));
      Date date0 = DateUtils.setSeconds(mockDate0, (-820));
      Date date1 = DateUtils.addYears(date0, 5);
      int int0 = 146139496;
      Date date2 = DateUtils.addHours(date1, 146139496);
      DateUtils.setDays(date2, 1146);
      Instant instant0 = MockInstant.ofEpochSecond(1394828481320L);
      Date.from(instant0);
      int int1 = (-140);
      // Undeclared exception!
      try { 
        DateUtils.truncatedEquals(date0, date1, (-140));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -140 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      DateUtils.parseDateStrictly("", stringArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateUtils.parseDate("", locale0, stringArray0);
      Locale locale1 = Locale.CHINA;
      locale1.stripExtensions();
      // Undeclared exception!
      try { 
        DateUtils.parseDate("/jH@", locale1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$StrategyParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Date date0 = null;
      int int0 = 319;
      // Undeclared exception!
      try { 
        DateUtils.addWeeks((Date) null, 319);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = (-1652);
      MockDate mockDate0 = new MockDate((-1652), (-1652), (-1652), (-1652), (-1652));
      Calendar.getAvailableCalendarTypes();
      Date date0 = DateUtils.addDays(mockDate0, (-1652));
      mockGregorianCalendar0.getTimeInMillis();
      Date date1 = DateUtils.setMilliseconds(date0, (-1652));
      // Undeclared exception!
      try { 
        DateUtils.iterator(date1, (-1540));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The range style -1540 is not valid.
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Date date0 = null;
      int int0 = 396;
      // Undeclared exception!
      try { 
        DateUtils.addMonths((Date) null, 396);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      String[] stringArray0 = new String[0];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(129, 129, 3, (-3541), (-2991), (-1));
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 3 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      String[] stringArray0 = new String[0];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(129, 129, 3, (-3541), 129, (-1));
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 3 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 10;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(10, 10, 10);
      ZonedDateTime zonedDateTime0 = mockGregorianCalendar0.toZonedDateTime();
      MockGregorianCalendar.from(zonedDateTime0);
      mockGregorianCalendar0.getWeekYear();
      Date date0 = DateUtils.ceiling((Object) mockGregorianCalendar0, 10);
      DateUtils.truncatedEquals(date0, date0, 10);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMilliseconds(date0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 10 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale locale0 = new Locale("", "D6A5wa");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "D6A5wa";
      stringArray0[2] = "D6A5wa";
      stringArray0[2] = "";
      stringArray0[3] = "D6A5wa";
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtils.setMilliseconds(mockDate0, 6);
      Date date1 = DateUtils.addMonths(date0, 6);
      DateUtils.getFragmentInMinutes(date1, 6);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Date date0 = DateUtils.parseDateStrictly("", stringArray0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      DateUtils.isSameDay((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
      Date date1 = DateUtils.setMilliseconds(date0, (-740));
      Date date2 = DateUtils.setMinutes(date1, 1);
      Date date3 = DateUtils.addSeconds(date2, (-740));
      Calendar calendar0 = DateUtils.toCalendar(date3);
      DateUtils.setMilliseconds(date3, 1);
      DateUtils.addMinutes(date3, (-2814));
      DateUtils.iterator(calendar0, 1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.FRANCE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale0.toLanguageTag();
      linkedList0.removeLastOccurrence(locale0);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        DateUtils.parseDateStrictly("zh-CN", locale1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$StrategyParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "Format '";
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Format '";
      stringArray0[1] = "Format '";
      // Undeclared exception!
      try { 
        DateUtils.parseDateStrictly("Format '", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$StrategyParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3160, 3160, 3160, 0, 0);
      Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 0);
      Calendar calendar1 = DateUtils.round(calendar0, 14);
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar1, calendar1);
      // Undeclared exception!
      try { 
        dateUtils_DateIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DateUtils$DateIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMinutes((Calendar) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Date date0 = null;
      int int0 = 395;
      // Undeclared exception!
      try { 
        DateUtils.setMinutes((Date) null, 395);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 0 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-570), (-570), (-570), (-570), (-570));
      Date date0 = DateUtils.addSeconds(mockDate0, (-570));
      int int0 = (-1639);
      // Undeclared exception!
      try { 
        DateUtils.ceiling(date0, (-1639));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -1639 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1371), (-1371), (-1), 0, 1553, (-1));
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Object) mockGregorianCalendar0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -1 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Date date0 = null;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInHours((Date) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 280000000;
      int int1 = 0;
      MockDate mockDate0 = new MockDate(280000000, 280000000, 280000000, 0, 0, 0);
      Date date0 = DateUtils.setHours(mockDate0, 280000000);
      int int2 = (-1);
      // Undeclared exception!
      try { 
        DateUtils.truncate(date0, (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 2327;
      // Undeclared exception!
      try { 
        DateUtils.addMilliseconds((Date) null, 2327);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.FRANCE;
      String[] stringArray0 = new String[0];
      try { 
        DateUtils.parseDateStrictly("", locale0, stringArray0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unable to parse the date: 
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      timeZone0.toZoneId();
      DateUtils.truncate((Calendar) mockGregorianCalendar0, 13);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Date date0 = DateUtils.parseDate("", (Locale) null, stringArray0);
      int int0 = 3565;
      DateUtils.addDays(date0, 3565);
      // Undeclared exception!
      try { 
        DateUtils.isSameDay((Date) null, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Date date0 = null;
      int int0 = 1257;
      // Undeclared exception!
      try { 
        DateUtils.addMinutes((Date) null, 1257);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2681), 0, (-2681));
      mockGregorianCalendar0.clear(0);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMinutes((Calendar) mockGregorianCalendar0, (-2681));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment -2681 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      Instant instant0 = MockInstant.now(clock0);
      Date date0 = Date.from(instant0);
      DateUtils.truncatedCompareTo(date0, date0, 0);
      Date date1 = DateUtils.truncate(date0, 0);
      Calendar calendar0 = DateUtils.toCalendar(date1);
      DateUtils.isSameLocalTime(calendar0, calendar0);
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0);
      // Undeclared exception!
      try { 
        dateUtils_DateIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DateUtils$DateIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getCalendarType();
      mockGregorianCalendar0.getTime();
      // Undeclared exception!
      try { 
        DateUtils.truncatedEquals((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0, (-2019));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -2019 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Date date0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        DateUtils.setSeconds((Date) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 5589, (-1433));
      mockDate0.getTime();
      Date date0 = DateUtils.addYears(mockDate0, (-1433));
      mockDate0.after(date0);
      int int0 = 12;
      MockDate.UTC(0, 0, 0, 0, 12, 0);
      mockDate0.clone();
      mockDate0.getTime();
      DateUtils.addMonths(mockDate0, 0);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInSeconds((Date) mockDate0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 0 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3018), 0, (-3018));
      int int1 = (-1682);
      // Undeclared exception!
      try { 
        DateUtils.round((Calendar) mockGregorianCalendar0, (-1682));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -1682 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1471, (-1), 774, 2943, 3825);
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMinutes((Date) null, 2943);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Date date0 = null;
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMinutes((Date) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[0];
      try { 
        DateUtils.parseDate("-5", stringArray0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unable to parse the date: -5
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = DateUtils.truncate((Object) mockGregorianCalendar0, 0);
      Date date1 = DateUtils.round(date0, 0);
      DateUtils.toCalendar(date1);
      Date date2 = DateUtils.addSeconds(date0, 0);
      DateUtils.truncate(date1, 0);
      int int0 = 0;
      DateUtils.setDays(date2, 0);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInHours((Calendar) mockGregorianCalendar0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 0 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInHours(calendar0, 2752);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 2752 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Calendar calendar0 = null;
      int int0 = 14;
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Calendar) null, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Date date0 = DateUtils.parseDate("", (Locale) null, stringArray0);
      int int0 = 584;
      Date date1 = DateUtils.addMonths(date0, 584);
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Object) date1, (-2723));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -2723 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-96);
      // Undeclared exception!
      try { 
        DateUtils.truncate(object0, (-96));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not truncate java.lang.Object@79c67800
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Date date0 = null;
      int int0 = 1701;
      // Undeclared exception!
      try { 
        DateUtils.addHours((Date) null, 1701);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Calendar calendar0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        DateUtils.truncate((Calendar) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Calendar calendar0 = null;
      int int0 = 2519;
      // Undeclared exception!
      try { 
        DateUtils.truncatedCompareTo((Calendar) null, (Calendar) null, 2519);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.truncate((Calendar) null, 204);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-43);
      // Undeclared exception!
      try { 
        DateUtils.round((Date) null, (-43));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      String[] stringArray0 = new String[0];
      locale0.getUnicodeLocaleAttributes();
      try { 
        DateUtils.parseDate("", locale0, stringArray0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unable to parse the date: 
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2014, 2014, 755, 2014, 755, 755);
      Date date0 = DateUtils.setDays(mockDate0, (-2192));
      // Undeclared exception!
      try { 
        DateUtils.truncatedCompareTo(date0, date0, 755);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 755 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockDate mockDate0 = new MockDate(931L);
      Clock clock0 = MockClock.systemDefaultZone();
      mockDate0.getTime();
      Instant instant0 = MockInstant.now(clock0);
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Instant instant1 = MockInstant.plus(instant0, 336L, (TemporalUnit) chronoUnit0);
      Instant instant2 = MockInstant.plusNanos(instant1, 336L);
      Date.from(instant2);
      int int0 = 3204;
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInDays((Date) mockDate0, 3204);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 3204 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.set(1708, 3902, (-953));
      DateUtils.truncate((Object) mockGregorianCalendar0, 0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        DateUtils.truncate(object0, (-15));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not truncate java.lang.Object@3f7b4303
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2512), 1, (-2512), 340, (-2512));
      mockDate0.getTime();
      Date date0 = DateUtils.addWeeks(mockDate0, 0);
      DateUtils.getFragmentInMilliseconds(date0, 1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-264), 3, 13, (-264), 1502);
      mockGregorianCalendar0.getLeastMaximum(0);
      DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Date date1 = DateUtils.parseDate("", locale0, stringArray0);
      DateUtils.parseDateStrictly("", stringArray0);
      DateUtils.setSeconds(date1, 4);
      DateUtils.getFragmentInSeconds(date0, 1);
      DateUtils.setMilliseconds(date0, 1);
      MockGregorianCalendar mockGregorianCalendar1 = null;
      try {
        mockGregorianCalendar1 = new MockGregorianCalendar((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1808), 0, (-1808), 0, 885, 0);
      MockDate.UTC(0, 7, 0, 0, 0, 0);
      DateUtils.getFragmentInSeconds((Date) mockDate0, 1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(885, 1, 1001, 2268, 2268);
      DateUtils.truncatedEquals((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0, 1001);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMilliseconds((Date) mockDate0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 4 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Date date0 = DateUtils.parseDate("", locale0, stringArray0);
      int int0 = (-752);
      // Undeclared exception!
      try { 
        DateUtils.truncate(date0, (-752));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -752 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Date date0 = DateUtils.addDays(mockDate0, 0);
      Date date1 = DateUtils.addMilliseconds(date0, 1);
      Date date2 = DateUtils.addMonths(date1, 6);
      DateUtils.getFragmentInSeconds(date2, 1);
      Locale locale0 = Locale.CHINESE;
      MockCalendar.getInstance(locale0);
      LocalDateTime localDateTime0 = null;
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutesSeconds(4, 0, 371);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset seconds not in valid range: value 371 is not in the range -59 to 59
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Date date0 = null;
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInSeconds((Date) null, 1115);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2372), (-1), 2226, (-2375), (-698));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMilliseconds(date0, 1511);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 1511 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3023, 3023, 0, 1, (-1), 1);
      Date date0 = DateUtils.addHours(mockDate0, 0);
      Date date1 = DateUtils.addYears(date0, (-1));
      DateUtils.addMinutes(date1, (-1));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0);
      dateUtils_DateIterator0.hasNext();
      // Undeclared exception!
      try { 
        dateUtils_DateIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DateUtils$DateIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 0, 527, 1, (-1687));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Date date1 = DateUtils.setMonths(date0, 0);
      DateUtils.setMonths(date1, 1);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMilliseconds((Calendar) mockGregorianCalendar0, 527);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 527 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3e95J*";
      // Undeclared exception!
      try { 
        DateUtils.parseDate("3e95J*", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'e' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 291;
      // Undeclared exception!
      try { 
        DateUtils.addSeconds((Date) null, 291);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 2803, 640, 0);
      mockDate0.clone();
      Date date0 = DateUtils.setHours(mockDate0, (-1));
      Date date1 = DateUtils.round(date0, 10);
      Date date2 = DateUtils.addSeconds(date1, (-120));
      DateUtils.addMilliseconds(date2, 2474);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1371), (-1371), (-1), (-1371), 1553, (-1));
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Object) mockGregorianCalendar0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -1 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = (-1430);
      MockDate mockDate0 = new MockDate(0, 0, (-1430), 0, 8);
      Date date0 = DateUtils.setYears(mockDate0, (-1953));
      mockDate0.after(date0);
      Instant instant0 = mockDate0.toInstant();
      Date.from(instant0);
      mockDate0.after(date0);
      DateUtils.setDays(mockDate0, 613);
      DateUtils.setDays(mockDate0, 8);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(8, (-4080), 8, 4168, 0);
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Calendar) mockGregorianCalendar0, (-1430));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -1430 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 0);
      mockGregorianCalendar0.getTimeInMillis();
      Date date1 = DateUtils.round((Object) date0, 0);
      Date date2 = DateUtils.addHours(date1, 1);
      DateUtils dateUtils0 = new DateUtils();
      Date date3 = DateUtils.setHours(date2, 1);
      int int0 = 1681;
      // Undeclared exception!
      try { 
        DateUtils.truncate((Object) date3, 1681);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 1681 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate(0, 0, 0, (-1495), (-1495));
      Date date0 = DateUtils.setMilliseconds(mockDate0, 0);
      mockDate0.before(date0);
      int int1 = (-1);
      MockDate.UTC((-1495), (-1), 0, 586, 586, (-230));
      mockDate0.setTime((-1));
      Date date1 = DateUtils.addWeeks(date0, (-1516));
      // Undeclared exception!
      try { 
        DateUtils.round((Object) date1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -1 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = 0;
      Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 0);
      DateUtils.truncatedEquals(calendar0, (Calendar) mockGregorianCalendar0, 0);
      int int1 = (-12);
      // Undeclared exception!
      try { 
        DateUtils.addDays((Date) null, (-12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      int int0 = 751;
      // Undeclared exception!
      try { 
        DateUtils.round(calendar0, 751);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 751 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      // Undeclared exception!
      try { 
        DateUtils.setHours((Date) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1328L);
      int int0 = 24;
      Date date0 = DateUtils.setHours(mockDate0, 24);
      Date date1 = DateUtils.setYears(date0, 24);
      DateUtils.addHours(date1, 24);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Calendar) mockGregorianCalendar0, 24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 24 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      int int0 = (-1646);
      // Undeclared exception!
      try { 
        DateUtils.iterator(calendar0, (-1646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The range style -1646 is not valid.
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Calendar calendar0 = null;
      int int0 = 1;
      // Undeclared exception!
      try { 
        DateUtils.iterator((Calendar) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "a{K1c`j2JZ6kx4Z`_Q\\";
      int int0 = (-602);
      // Undeclared exception!
      try { 
        DateUtils.iterator((Object) "a{K1c`j2JZ6kx4Z`_Q", (-602));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not iterate based on a{K1c`j2JZ6kx4Z`_Q
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.iterator((Object) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      DateUtils.parseDate("", stringArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "UZrn>~3";
      // Undeclared exception!
      try { 
        DateUtils.parseDateStrictly((String) null, locale0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date and Patterns must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-1325);
      // Undeclared exception!
      try { 
        DateUtils.ceiling(object0, (-1325));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not find ceiling of for type: class java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "2L>0I@";
      String[] stringArray0 = new String[0];
      try { 
        DateUtils.parseDateStrictly("2L>0I@", stringArray0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unable to parse the date: 2L>0I@
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        DateUtils.parseDateStrictly((String) null, locale0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date and Patterns must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3600000L);
      Date date0 = DateUtils.addMilliseconds(mockDate0, 0);
      Date date1 = DateUtils.addDays(date0, 0);
      Date date2 = DateUtils.round(date1, 0);
      DateUtils.truncate(date2, 0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 2533;
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Object) null, 2533);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = (-1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      Date date0 = DateUtils.ceiling((Object) mockGregorianCalendar0, 0);
      DateUtils.addHours(date0, 15);
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Object) simpleTimeZone0, (-2023));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not find ceiling of for type: class java.util.SimpleTimeZone
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate(0, 0, 13);
      mockDate0.setTime((-2126L));
      Date date0 = DateUtils.addMonths(mockDate0, 13);
      DateUtils.isSameInstant(date0, (Date) mockDate0);
      Calendar calendar0 = DateUtils.toCalendar(date0);
      DateUtils.truncate(calendar0, 5);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "", 2118, 500, 0, 5, 0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 2118
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.isSameInstant((Date) null, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Locale locale0 = new Locale("&z", "");
      String[] stringArray0 = new String[0];
      try { 
        DateUtils.parseDate("", locale0, stringArray0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unable to parse the date: 
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      DateUtils.parseDateStrictly("", stringArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "";
      int int0 = 3496;
      // Undeclared exception!
      try { 
        DateUtils.round((Object) "", 3496);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not round 
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Locale locale1 = locale0.stripExtensions();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "u~z5Lv";
      stringArray0[1] = "u~z5Lv";
      stringArray0[2] = "u~z5Lv";
      stringArray0[3] = "u~z5Lv";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "u~z5Lv";
      stringArray0[7] = "u~z5Lv";
      stringArray0[8] = "u~z5Lv";
      // Undeclared exception!
      try { 
        DateUtils.parseDateStrictly("u~z5Lv", locale1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'L' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MinguoDate minguoDate0 = MockMinguoDate.now();
      int int0 = 0;
      // Undeclared exception!
      try { 
        DateUtils.round((Object) minguoDate0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not round Minguo ROC 103-02-14
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 3;
      // Undeclared exception!
      try { 
        DateUtils.round((Object) null, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      DateUtils.parseDateStrictly("", locale0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kKK)L=B1.\u0000.zPj";
      stringArray0[1] = "kKK)L=B1.\u0000.zPj";
      // Undeclared exception!
      try { 
        DateUtils.parseDate("kKK)L=B1.\u0000.zPj", locale0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'L' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.parseDateStrictly("", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date and Patterns must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-929), (-929), (-129));
      Date date0 = DateUtils.setDays(mockDate0, (-929));
      Date date1 = DateUtils.setSeconds(date0, 2);
      int int0 = 123;
      Date date2 = DateUtils.setHours(date1, 123);
      // Undeclared exception!
      try { 
        DateUtils.ceiling(date2, 123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 123 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime(0L);
      DateUtils.setSeconds(mockDate0, 4001);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      DateUtils.setHours(mockDate0, (-556));
      Date date0 = DateUtils.setHours(mockDate0, (-556));
      DateUtils.addMonths(mockDate0, (-556));
      DateUtils.setMilliseconds(date0, 812);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.setDays((Date) null, (-892));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = (-2976);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2976), (-2976), (-2976));
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Object) mockGregorianCalendar0, (-2976));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -2976 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 811;
      MockDate mockDate0 = new MockDate(1, 1, 0, 1210, 811);
      Date date0 = DateUtils.setMinutes(mockDate0, 0);
      mockDate0.after(date0);
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        DateUtils.toCalendar(date0, (TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeZone timeZone1 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      Calendar calendar1 = DateUtils.ceiling(calendar0, 0);
      DateUtils.isSameDay(calendar0, calendar1);
      int int0 = (-696);
      int int1 = 0;
      MockDate mockDate0 = new MockDate(0, 0, (-696), 0, 0);
      TimeZone.getDefault();
      Date date0 = DateUtils.setMonths(mockDate0, 0);
      DateUtils.addSeconds(date0, 1);
      DateUtils.toCalendar((Date) mockDate0, timeZone1);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInSeconds(calendar0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment -1 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeZone timeZone1 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      Calendar calendar1 = DateUtils.ceiling(calendar0, 0);
      DateUtils.isSameDay(calendar0, calendar1);
      MockDate mockDate0 = new MockDate(0, 0, (-696), 0, 0);
      TimeZone.getDefault();
      Date date0 = DateUtils.setMonths(mockDate0, 0);
      DateUtils.addSeconds(date0, 1);
      DateUtils.toCalendar((Date) mockDate0, timeZone1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        DateUtils.isSameInstant((Calendar) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      DateUtils.truncatedEquals((Date) mockDate0, (Date) mockDate0, 0);
      Calendar calendar0 = MockCalendar.getInstance();
      DateUtils.isSameInstant(calendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Date date0 = null;
      // Undeclared exception!
      try { 
        DateUtils.toCalendar((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-328), 0, 1);
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        dateUtils_DateIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DateUtils$DateIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(111, 111, 111);
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "}";
      TimeZone timeZone0 = TimeZone.getTimeZone("}");
      timeZone0.clone();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      Calendar calendar1 = DateUtils.truncate(calendar0, 1);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInSeconds(calendar1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 0 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      DateUtils.ceiling((Object) mockGregorianCalendar0, 0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, (-2810));
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Object) mockGregorianCalendar0, (-2810));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -2810 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1949), (-1949), (-1949));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Calendar calendar0 = DateUtils.toCalendar((Date) mockDate0, timeZone0);
      DateUtils.isSameLocalTime(calendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      DateUtils.setMinutes(date0, (-1139));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 2205;
      // Undeclared exception!
      try { 
        DateUtils.setMonths((Date) null, 2205);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-274), 0, 13, (-1));
      Date date0 = DateUtils.addSeconds(mockDate0, 708);
      DateUtils.isSameDay(date0, date0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        DateUtils.isSameDay((Calendar) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2131134959000L));
      Date date0 = DateUtils.addMonths(mockDate0, 3);
      Date date1 = DateUtils.setDays(mockDate0, 3);
      DateUtils.setYears(date1, 146134526);
      DateUtils.addMilliseconds(date0, 146134526);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("~6]");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      mockGregorianCalendar0.toZonedDateTime();
      DateUtils.iterator((Object) mockGregorianCalendar0, 1);
      MockDate mockDate0 = new MockDate((-1266), 6, (-1266));
      DateUtils.getFragmentInMilliseconds((Date) mockDate0, 6);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInHours((Date) mockDate0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 10 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.toZonedDateTime();
      int int0 = (-475);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInMinutes((Calendar) mockGregorianCalendar0, (-475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment -475 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar0);
      MockDate mockDate0 = new MockDate();
      DateUtils.addSeconds(mockDate0, 124);
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Date) mockDate0, (-711));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -711 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 0);
      mockGregorianCalendar0.getTimeInMillis();
      Date date1 = DateUtils.round((Object) date0, 0);
      Date date2 = DateUtils.addHours(date1, 1);
      DateUtils dateUtils0 = new DateUtils();
      DateUtils.setHours(date2, 1);
      int int0 = 1681;
      DateUtils.iterator(date1, 6);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInSeconds((Calendar) mockGregorianCalendar0, (-2252));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment -2252 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 0);
      mockGregorianCalendar0.getTimeInMillis();
      Date date1 = DateUtils.round((Object) date0, 0);
      Date date2 = DateUtils.addHours(date1, 1);
      DateUtils dateUtils0 = new DateUtils();
      DateUtils.setHours(date2, 1);
      int int0 = 1681;
      DateUtils.iterator((Calendar) mockGregorianCalendar0, 3);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInSeconds((Calendar) mockGregorianCalendar0, (-2252));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment -2252 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-15), (-15), (-15), (-15), (-15));
      mockDate0.getTime();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DateUtils.parseDate("", stringArray0);
      DateUtils.setMonths(mockDate0, (-15));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(280000000, (-1170), 280000000, 280000000, 92);
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInHours((Calendar) mockGregorianCalendar0, 491);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 491 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      int int0 = (-1652);
      // Undeclared exception!
      try { 
        DateUtils.ceiling((Object) mockGregorianCalendar0, (-1652));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field -1652 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 0;
      int int1 = 2957;
      int int2 = (-1273);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-387), 0, 2957, 2957, (-1273), 2957);
      MockDate mockDate0 = new MockDate(0, (-1273), 2957, 2957, 0, 0);
      mockDate0.clone();
      // Undeclared exception!
      try { 
        DateUtils.getFragmentInSeconds((Date) mockDate0, 2957);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fragment 2957 is not supported
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = 0;
      Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 0);
      DateUtils.truncatedEquals(calendar0, (Calendar) mockGregorianCalendar0, 0);
      int int1 = (-12);
      // Undeclared exception!
      try { 
        DateUtils.addDays((Date) null, (-12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Date date0 = DateUtils.parseDateStrictly("", stringArray0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      DateUtils.isSameDay((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
      Date date1 = DateUtils.setMilliseconds(date0, (-740));
      Date date2 = DateUtils.setMinutes(date1, 1);
      Date date3 = DateUtils.addSeconds(date2, (-740));
      Calendar calendar0 = DateUtils.toCalendar(date3);
      DateUtils.setMilliseconds(date3, 1);
      DateUtils.addMinutes(date3, (-2814));
      int int0 = 3;
      DateUtils.iterator(calendar0, 3);
      Date date4 = DateUtils.round(date1, 0);
      // Undeclared exception!
      try { 
        DateUtils.iterator(date4, 1850);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The range style 1850 is not valid.
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0);
      int int0 = 2;
      DateUtils.getFragmentInMinutes((Date) mockDate0, 2);
      int int1 = 15;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(15, "cR4tO'OGO1PqD_7Q", 2, 2, 2160, (-2596), 15, 91, 91, 15, 15, 15, 91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -2596
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }
}
