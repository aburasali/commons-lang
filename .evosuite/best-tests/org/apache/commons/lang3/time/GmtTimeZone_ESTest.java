/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:47:25 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.time.GmtTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GmtTimeZone_ESTest extends GmtTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 0, 0);
      boolean boolean0 = gmtTimeZone0.useDaylightTime();
      assertFalse(boolean0);
      assertEquals(0, gmtTimeZone0.getRawOffset());
      assertEquals("GMT-00:00", gmtTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 0, 0);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      boolean boolean0 = gmtTimeZone0.inDaylightTime(mockDate0);
      assertEquals("GMT-00:00", gmtTimeZone0.getID());
      assertEquals(0, gmtTimeZone0.getRawOffset());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 0, 0);
      int int0 = gmtTimeZone0.getRawOffset();
      assertEquals(0, int0);
      assertEquals("GMT-00:00", gmtTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(false, 0, 1);
      int int0 = gmtTimeZone0.getRawOffset();
      assertEquals("GMT+00:01", gmtTimeZone0.getID());
      assertEquals(60000, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 0, 0);
      int int0 = gmtTimeZone0.getOffset(1, 0, 0, 0, 0, 2359);
      assertEquals("GMT-00:00", gmtTimeZone0.getID());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 0, (-1));
      int int0 = gmtTimeZone0.getOffset((-1), (-1), (-1601), 0, 60, 0);
      assertEquals("GMT-00:0/", gmtTimeZone0.getID());
      assertEquals(60000, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(false, (-1432), (-1432));
      String string0 = gmtTimeZone0.getID();
      assertEquals("GMT+\uFFA1.:\uFFA1.", string0);
      assertEquals((-946152704), gmtTimeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(false, (-1432), (-1432));
      GmtTimeZone gmtTimeZone1 = new GmtTimeZone(false, (-1432), (-946152704));
      boolean boolean0 = gmtTimeZone0.equals(gmtTimeZone1);
      assertEquals(855245824, gmtTimeZone1.getRawOffset());
      assertEquals("GMT+\uFFA1.:\u494A,", gmtTimeZone1.getID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, (-1406), (-1406));
      boolean boolean0 = gmtTimeZone0.equals("`2");
      assertEquals("GMT-\uFFA4*:\uFFA4*", gmtTimeZone0.getID());
      assertFalse(boolean0);
      assertEquals(850992704, gmtTimeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(false, (-1432), (-1432));
      boolean boolean0 = gmtTimeZone0.equals(gmtTimeZone0);
      assertEquals("GMT+\uFFA1.:\uFFA1.", gmtTimeZone0.getID());
      assertEquals((-946152704), gmtTimeZone0.getRawOffset());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = null;
      try {
        gmtTimeZone0 = new GmtTimeZone(false, (-1818), 1490);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1490 minutes out of range
         //
         verifyException("org.apache.commons.lang3.time.GmtTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = null;
      try {
        gmtTimeZone0 = new GmtTimeZone(false, 153, 153);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 153 hours out of range
         //
         verifyException("org.apache.commons.lang3.time.GmtTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 8, 8);
      int int0 = gmtTimeZone0.getOffset(8, 8, 8, 8, 8, 8);
      assertEquals((-29280000), int0);
      assertEquals("GMT-08:08", gmtTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(false, (-1432), (-1432));
      int int0 = gmtTimeZone0.getRawOffset();
      assertEquals("GMT+\uFFA1.:\uFFA1.", gmtTimeZone0.getID());
      assertEquals((-946152704), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 8, 8);
      gmtTimeZone0.hashCode();
      assertEquals((-29280000), gmtTimeZone0.getRawOffset());
      assertEquals("GMT-08:08", gmtTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 8, 8);
      String string0 = gmtTimeZone0.toString();
      assertEquals("[GmtTimeZone id=\"GMT-08:08\",offset=-29280000]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 8, 8);
      // Undeclared exception!
      try { 
        gmtTimeZone0.setRawOffset(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.GmtTimeZone", e);
      }
  }
}
