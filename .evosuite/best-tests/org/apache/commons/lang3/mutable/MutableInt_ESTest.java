/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:25:24 GMT 2019
 */

package org.apache.commons.lang3.mutable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableInt_ESTest extends MutableInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.increment();
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      mutableInt1.addAndGet((Number) mutableInt0);
      boolean boolean0 = mutableInt1.equals(mutableInt0);
      assertEquals(1, mutableInt0.intValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt("0");
      mutableInt0.add(535);
      mutableInt0.toInteger();
      assertEquals((short)535, mutableInt0.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      MutableInt mutableInt1 = new MutableInt(0);
      mutableInt0.increment();
      mutableInt1.subtract((Number) mutableInt0);
      assertEquals(1L, mutableInt0.longValue());
      
      Integer integer0 = mutableInt1.toInteger();
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      mutableInt0.increment();
      long long0 = mutableInt0.longValue();
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      mutableInt0.subtract(4027);
      long long0 = mutableInt0.longValue();
      assertEquals((-4027), (int)mutableInt0.toInteger());
      assertEquals((-4027L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(1);
      int int0 = mutableInt0.intValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1070));
      int int0 = mutableInt0.intValue();
      assertEquals((-1070), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      mutableInt0.decrement();
      int int0 = mutableInt0.incrementAndGet();
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      Float float0 = new Float((-811.7F));
      mutableInt0.setValue((Number) float0);
      int int0 = mutableInt0.incrementAndGet();
      assertEquals((-810), mutableInt0.intValue());
      assertEquals((-810), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(1);
      Integer integer0 = mutableInt0.getValue();
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = new Long((-832L));
      MutableInt mutableInt0 = new MutableInt(long0);
      Integer integer0 = mutableInt0.getValue();
      assertEquals((-832), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(0.0);
      MutableInt mutableInt0 = new MutableInt(double0);
      int int0 = mutableInt0.getAndIncrement();
      assertEquals(1, mutableInt0.intValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      int int0 = mutableInt0.getAndDecrement();
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(1);
      int int0 = mutableInt0.getAndDecrement();
      assertEquals("0", mutableInt0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.increment();
      int int0 = mutableInt0.getAndAdd((Number) mutableInt0);
      assertEquals(2, mutableInt0.intValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      mutableInt0.subtract(4027);
      int int0 = mutableInt0.getAndAdd((Number) mutableInt0);
      assertEquals((short) (-8054), mutableInt0.shortValue());
      assertEquals((-4027), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      mutableInt0.increment();
      int int0 = mutableInt0.getAndAdd(793);
      assertEquals((byte)26, mutableInt0.byteValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      mutableInt0.subtract(4027);
      int int0 = mutableInt0.getAndAdd(4027);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((-4027), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      float float0 = mutableInt0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      mutableInt0.increment();
      float float0 = mutableInt0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double(0.0);
      MutableInt mutableInt0 = new MutableInt(double0);
      double double1 = mutableInt0.doubleValue();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      mutableInt0.incrementAndGet();
      int int0 = mutableInt0.decrementAndGet();
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(43);
      int int0 = mutableInt0.decrementAndGet();
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(1);
      Float float0 = new Float((float) 1);
      mutableInt0.addAndGet((Number) float0);
      mutableInt0.getAndIncrement();
      MutableInt mutableInt1 = new MutableInt(2);
      int int0 = mutableInt0.compareTo(mutableInt1);
      assertEquals("3", mutableInt0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      MutableInt mutableInt1 = new MutableInt(0);
      mutableInt0.subtract(4027);
      int int0 = mutableInt0.compareTo(mutableInt1);
      assertEquals((-4027), mutableInt0.intValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-3748));
      mutableInt0.getAndIncrement();
      mutableInt0.decrementAndGet();
      mutableInt0.subtract((-3748));
      int int0 = mutableInt0.addAndGet((Number) mutableInt0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      int int0 = mutableInt0.addAndGet(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.addAndGet(1449);
      double double0 = mutableInt0.doubleValue();
      assertEquals(1449.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      // Undeclared exception!
      try { 
        mutableInt0.subtract((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2628));
      // Undeclared exception!
      try { 
        mutableInt0.setValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1563));
      // Undeclared exception!
      try { 
        mutableInt0.getAndAdd((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      // Undeclared exception!
      try { 
        mutableInt0.compareTo((MutableInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      // Undeclared exception!
      try { 
        mutableInt0.addAndGet((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-97));
      // Undeclared exception!
      try { 
        mutableInt0.add((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutableInt mutableInt0 = null;
      try {
        mutableInt0 = new MutableInt("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableInt mutableInt0 = null;
      try {
        mutableInt0 = new MutableInt((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      int int0 = mutableInt0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      boolean boolean0 = mutableInt0.equals(mutableInt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2384));
      Byte byte0 = new Byte((byte) (-5));
      boolean boolean0 = mutableInt0.equals(byte0);
      assertFalse(boolean0);
      assertEquals("-2384", mutableInt0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2384));
      String string0 = mutableInt0.toString();
      assertEquals("-2384", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      Integer integer0 = mutableInt0.getValue();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      long long0 = mutableInt0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.add((Number) mutableInt0);
      assertEquals((short)0, mutableInt0.shortValue());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      int int0 = mutableInt0.compareTo(mutableInt0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      int int0 = mutableInt0.getAndAdd((Number) mutableInt0);
      assertEquals(0, int0);
      assertEquals(0L, mutableInt0.longValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.increment();
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      mutableInt0.add((Number) mutableInt0);
      boolean boolean0 = mutableInt1.equals(mutableInt0);
      assertEquals(2, mutableInt0.intValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2384));
      float float0 = mutableInt0.floatValue();
      assertEquals((-2384.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      int int0 = mutableInt0.getAndAdd(0);
      assertEquals(0, int0);
      assertEquals(0, (int)mutableInt0.toInteger());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt("0");
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2384));
      double double0 = mutableInt0.doubleValue();
      assertEquals((-2384.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      Long long0 = new Long((-256L));
      int int0 = mutableInt0.addAndGet((Number) long0);
      assertEquals("-256", mutableInt0.toString());
      assertEquals((-256), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2384));
      int int0 = mutableInt0.getAndDecrement();
      assertEquals((-2385), (int)mutableInt0.toInteger());
      assertEquals((-2384), int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2384));
      mutableInt0.setValue((int) (byte) (-5));
      assertEquals((-5), mutableInt0.intValue());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1563));
      int int0 = mutableInt0.addAndGet(0);
      assertEquals((-1563), int0);
  }
}
