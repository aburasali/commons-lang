/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:31:09 GMT 2019
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.IllegalFormatConversionException;
import java.util.MissingFormatArgumentException;
import java.util.UnknownFormatConversionException;
import java.util.concurrent.ThreadFactory;
import org.apache.commons.lang3.concurrent.BasicThreadFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicThreadFactory_ESTest extends BasicThreadFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.reset();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler1 = basicThreadFactory0.getUncaughtExceptionHandler();
      assertSame(thread_UncaughtExceptionHandler0, thread_UncaughtExceptionHandler1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.namingPattern("Wrapped ThreadFactory must not be null!");
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      MockThread mockThread0 = new MockThread((Runnable) null);
      basicThreadFactory0.newThread(mockThread0);
      long long0 = basicThreadFactory0.getThreadCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.priority(0);
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build();
      Integer integer0 = basicThreadFactory0.getPriority();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.priority(1895);
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build();
      Integer integer0 = basicThreadFactory0.getPriority();
      assertEquals(1895, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.priority((-4695));
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build();
      Integer integer0 = basicThreadFactory0.getPriority();
      assertEquals((-4695), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.namingPattern("Wrapped ThreadFactory must not be null!");
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      String string0 = basicThreadFactory0.getNamingPattern();
      assertEquals("Wrapped ThreadFactory must not be null!", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.namingPattern("");
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      String string0 = basicThreadFactory0.getNamingPattern();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.daemon(false);
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      Boolean boolean0 = basicThreadFactory0.getDaemonFlag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.namingPattern("MiH%*-Mi:Ud@eEB5N!");
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build();
      MockThread mockThread0 = new MockThread("Agmj0&vt");
      // Undeclared exception!
      try { 
        basicThreadFactory0.newThread(mockThread0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '*'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.namingPattern("The value %s is not in the specified inclusive range of %s to %s");
      MockThread mockThread0 = new MockThread("");
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      // Undeclared exception!
      try { 
        basicThreadFactory0.newThread(mockThread0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      Boolean boolean0 = basicThreadFactory0.getDaemonFlag();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      ThreadFactory threadFactory0 = basicThreadFactory0.getWrappedFactory();
      assertFalse(threadFactory0.equals((Object)basicThreadFactory0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      String string0 = basicThreadFactory0.getNamingPattern();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      Integer integer0 = basicThreadFactory0.getPriority();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = basicThreadFactory0.getUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      basicThreadFactory_Builder0.daemon(true);
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      Thread thread0 = basicThreadFactory0.newThread(mockThread0);
      assertTrue(thread0.isDaemon());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.priority((-2641));
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      MockThread mockThread0 = new MockThread();
      // Undeclared exception!
      try { 
        basicThreadFactory0.newThread(mockThread0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null).when(threadGroup0).toString();
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      basicThreadFactory_Builder0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      Thread thread0 = basicThreadFactory0.newThread(mockThread0);
      assertFalse(thread0.isInterrupted());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      basicThreadFactory_Builder0.namingPattern("1)P1%gG");
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      // Undeclared exception!
      try { 
        basicThreadFactory0.newThread(mockThread0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != java.lang.Long
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      long long0 = basicThreadFactory0.getThreadCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.daemon(true);
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      Boolean boolean0 = basicThreadFactory0.getDaemonFlag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      basicThreadFactory_Builder0.wrappedFactory(basicThreadFactory0);
      BasicThreadFactory basicThreadFactory1 = basicThreadFactory_Builder0.build();
      assertNull(basicThreadFactory1.getDaemonFlag());
  }
}
