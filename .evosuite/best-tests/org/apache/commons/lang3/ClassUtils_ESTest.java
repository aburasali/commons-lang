/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 01:49:19 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.apache.commons.lang3.ClassUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassUtils_ESTest extends ClassUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertNull(class1);
      
      boolean boolean0 = ClassUtils.isAssignable(class0, class0, false);
      assertTrue(boolean0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class2 = String.class;
      classArray0[0] = class2;
      Class<String> class3 = String.class;
      classArray0[1] = class3;
      Class<String> class4 = String.class;
      classArray0[2] = class4;
      Class<String> class5 = String.class;
      classArray0[3] = class5;
      boolean boolean1 = ClassUtils.isAssignable(classArray0, classArray0, true);
      assertEquals(4, classArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = ClassUtils.getShortCanonicalName("h=p,o4*MrW$U8HZ{");
      assertEquals("h=p,o4*MrW.U8HZ{", string0);
      assertNotNull(string0);
      
      Class<Byte> class6 = Byte.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class6);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Short> class7 = Short.TYPE;
      assertEquals("short", class7.toString());
      assertEquals(1041, class7.getModifiers());
      assertFalse(class7.isInterface());
      assertFalse(class7.isArray());
      assertFalse(class7.isSynthetic());
      assertFalse(class7.isEnum());
      assertFalse(class7.isAnnotation());
      assertTrue(class7.isPrimitive());
      assertNotNull(class7);
      
      String string1 = ClassUtils.getShortCanonicalName(class7);
      assertFalse(string1.equals((Object)string0));
      assertEquals("short", string1);
      assertEquals("short", class7.toString());
      assertEquals(1041, class7.getModifiers());
      assertFalse(class7.isInterface());
      assertFalse(class7.isArray());
      assertFalse(class7.isSynthetic());
      assertFalse(class7.isEnum());
      assertFalse(class7.isAnnotation());
      assertTrue(class7.isPrimitive());
      assertNotNull(string1);
      
      boolean boolean2 = ClassUtils.isInnerClass(class6);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = ClassUtils.getShortClassName((Object) class2, "\"");
      assertSame(class2, class5);
      assertSame(class2, class3);
      assertSame(class2, class4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Class", string2);
      assertNotNull(string2);
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertFalse(list1.contains("h=p,o4*MrW$U8HZ{"));
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list1);
      
      String string3 = ClassUtils.getPackageName((Class<?>) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Class<Integer> class8 = Integer.class;
      List<Class<?>> list2 = ClassUtils.getAllSuperclasses(class8);
      assertNotSame(list2, list0);
      assertTrue(list2.equals((Object)list0));
      assertEquals(2, list2.size());
      assertFalse(list2.isEmpty());
      assertNotNull(list2);
      
      String string4 = ClassUtils.getName(class6, "q!+< |S)2R7'b[Skapw");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("java.lang.Byte", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getPackageCanonicalName(class2);
      assertSame(class2, class5);
      assertSame(class2, class3);
      assertSame(class2, class4);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("java.lang", string5);
      assertNotNull(string5);
      
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class2, classUtils_Interfaces0);
      assertSame(class2, class5);
      assertSame(class2, class3);
      assertSame(class2, class4);
      assertNotNull(iterable0);
      
      String string6 = ClassUtils.getPackageName("L");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      Class<?> class9 = ClassUtils.primitiveToWrapper(class8);
      assertFalse(class9.isInterface());
      assertFalse(class9.isArray());
      assertFalse(class9.isEnum());
      assertFalse(class9.isSynthetic());
      assertFalse(class9.isAnnotation());
      assertEquals("class java.lang.Integer", class9.toString());
      assertEquals(17, class9.getModifiers());
      assertFalse(class9.isPrimitive());
      assertNotNull(class9);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertNull(class1);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class2 = String.class;
      classArray0[0] = class2;
      Class<String> class3 = String.class;
      classArray0[1] = class3;
      Class<String> class4 = String.class;
      classArray0[2] = class4;
      Class<String> class5 = String.class;
      classArray0[3] = class5;
      String string0 = ClassUtils.getShortCanonicalName("h=p,o4*MrW$U8HZ{");
      assertEquals("h=p,o4*MrW.U8HZ{", string0);
      assertNotNull(string0);
      
      Class<Byte> class6 = Byte.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class6);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Class<Short> class7 = Short.class;
      String string1 = ClassUtils.getShortCanonicalName(class7);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Short", string1);
      assertNotNull(string1);
      
      boolean boolean0 = ClassUtils.isInnerClass(class6);
      assertFalse(boolean0);
      
      String string2 = ClassUtils.getShortClassName((Object) class2, "\"");
      assertSame(class2, class4);
      assertSame(class2, class5);
      assertSame(class2, class3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Class", string2);
      assertNotNull(string2);
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertFalse(list1.contains(string2));
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list1);
      
      String string3 = ClassUtils.getSimpleName((Object) class0, "Short");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Class", string3);
      assertNotNull(string3);
      
      Class<Integer> class8 = Integer.class;
      List<Class<?>> list2 = ClassUtils.getAllSuperclasses(class8);
      assertNotSame(list2, list0);
      assertTrue(list2.equals((Object)list0));
      assertFalse(list2.isEmpty());
      assertEquals(2, list2.size());
      assertNotNull(list2);
      
      String string4 = ClassUtils.getName(class6, "q!+< |S)2R7'b[Skapw");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("java.lang.Byte", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getPackageCanonicalName(class2);
      assertSame(class2, class4);
      assertSame(class2, class5);
      assertSame(class2, class3);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("java.lang", string5);
      assertNotNull(string5);
      
      String string6 = ClassUtils.getSimpleName((Class<?>) null, "java.lang.Byte");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("java.lang.Byte", string6);
      assertNotNull(string6);
      
      try { 
        ClassUtils.getClass("Class");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getShortCanonicalName(class0);
      assertEquals("Object", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getShortClassName(class0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Object", string1);
      assertNotNull(string1);
      
      Class<?>[] classArray0 = ClassUtils.wrappersToPrimitives((Class<?>[]) null);
      assertNull(classArray0);
      
      Class<Byte> class1 = Byte.class;
      String string2 = ClassUtils.getSimpleName(class1, "Object");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Byte", string2);
      assertNotNull(string2);
      
      Class<Short> class2 = Short.class;
      String string3 = ClassUtils.getName(class2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("java.lang.Short", string3);
      assertNotNull(string3);
      
      Class<Short> class3 = Short.class;
      String string4 = ClassUtils.getShortCanonicalName(class3);
      assertSame(class3, class2);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Short", string4);
      assertNotNull(string4);
      
      Class<Integer> class4 = Integer.class;
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class4);
      assertTrue(boolean0);
      
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class4);
      assertNotNull(iterable0);
      
      Class<?>[] classArray1 = ClassUtils.toClass((Object[]) null);
      assertNull(classArray1);
      
      String string5 = ClassUtils.getCanonicalName((Object) class3);
      assertSame(class3, class2);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("java.lang.Class", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = ClassUtils.getSimpleName((Object) list0);
      assertEquals("ArrayList", string0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(string0);
      
      List<Class<?>> list1 = ClassUtils.getAllInterfaces(class0);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(3, list1.size());
      assertNotNull(list1);
      
      String string1 = ClassUtils.getPackageName((Object) class0, "<");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang", string1);
      assertNotNull(string1);
      
      String string2 = ClassUtils.getPackageCanonicalName(class0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("java.lang", string2);
      assertNotNull(string2);
      
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      String string3 = ClassUtils.getPackageName((Object) list0, (String) null);
      assertNotSame(list0, list1);
      assertTrue(list0.equals((Object)list1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("java.util", string3);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(string3);
      
      Class<ClassUtils> class1 = ClassUtils.class;
      String string4 = ClassUtils.getPackageCanonicalName(class1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("org.apache.commons.lang3", string4);
      assertNotNull(string4);
      
      Class<Short> class2 = Short.class;
      String string5 = ClassUtils.getAbbreviatedName(class2, 841);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("java.lang.Short", string5);
      assertNotNull(string5);
      
      Class<Long> class3 = Long.class;
      String string6 = ClassUtils.getShortClassName(class3);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Long", string6);
      assertNotNull(string6);
      
      String string7 = ClassUtils.getAbbreviatedName("B{iQ,u>j8m?G\"1>", 841);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("B{iQ,u>j8m?G\"1>", string7);
      assertNotNull(string7);
      
      String string8 = ClassUtils.getAbbreviatedName("B{iQ,u>j8m?G\"1>", 64);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertEquals("B{iQ,u>j8m?G\"1>", string8);
      assertNotNull(string8);
      
      String string9 = ClassUtils.getSimpleName((Object) null);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertEquals("", string9);
      assertNotNull(string9);
      
      String string10 = ClassUtils.getSimpleName((Object) "org.apache.commons.lang3");
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertEquals("String", string10);
      assertNotNull(string10);
      
      String string11 = ClassUtils.getAbbreviatedName("java.lang", 288);
      assertTrue(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertEquals("java.lang", string11);
      assertNotNull(string11);
      
      String string12 = ClassUtils.getCanonicalName((Object) null);
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string2));
      assertEquals("", string12);
      assertNotNull(string12);
      
      String string13 = ClassUtils.getAbbreviatedName(class1, 965);
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string6));
      assertEquals("org.apache.commons.lang3.ClassUtils", string13);
      assertNotNull(string13);
      
      String string14 = ClassUtils.getShortCanonicalName(class2);
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string13));
      assertEquals("Short", string14);
      assertNotNull(string14);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        ClassUtils.getClass(classLoader0, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Long> class0 = Long.class;
      String string0 = ClassUtils.getName(class0, "{");
      assertEquals("java.lang.Long", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getSimpleName((Object) "{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("String", string1);
      assertNotNull(string1);
      
      Class<Double> class1 = Double.class;
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class1);
      assertTrue(boolean0);
      
      String string2 = ClassUtils.getPackageCanonicalName("java.lang.Long");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getCanonicalName(class1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("java.lang.Double", string3);
      assertNotNull(string3);
      
      String string4 = ClassUtils.getSimpleName((Object) "java.lang.Double");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("String", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getPackageName("String");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = ClassUtils.getShortClassName("String");
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertEquals("String", string6);
      assertNotNull(string6);
      
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class1);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      boolean boolean1 = ClassUtils.isAssignable(classArray0, classArray0, true);
      assertEquals(0, classArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = ClassUtils.getPackageCanonicalName(class0);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("java.lang", string7);
      assertNotNull(string7);
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertFalse(list1.contains(string2));
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      Class<?>[] classArray1 = ClassUtils.toClass(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      String string8 = ClassUtils.getSimpleName(class0, "n|cA8Sp=r\"z2e'9v&S");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertEquals("Long", string8);
      assertNotNull(string8);
      
      String string9 = ClassUtils.getPackageName("n|cA8Sp=r\"z2e'9v&S");
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertEquals("", string9);
      assertNotNull(string9);
      
      Class<Object> class2 = Object.class;
      String string10 = ClassUtils.getCanonicalName(class2);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertEquals("java.lang.Object", string10);
      assertNotNull(string10);
      
      Class<Double> class3 = Double.class;
      boolean boolean2 = ClassUtils.isAssignable(class0, class3);
      assertSame(class3, class1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = ClassUtils.isAssignable(class2, class2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      boolean boolean4 = ClassUtils.isAssignable(classArray0, classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      String string11 = ClassUtils.getShortClassName((Object) classUtils0, "");
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string1));
      assertEquals("ClassUtils", string11);
      assertNotNull(string11);
      
      // Undeclared exception!
      try { 
        ClassUtils.getClass((ClassLoader) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = ClassUtils.getAbbreviatedName((String) null, 1324);
      assertEquals("", string0);
      assertNotNull(string0);
      
      ClassUtils.Interfaces[] classUtils_InterfacesArray0 = ClassUtils.Interfaces.values();
      assertEquals(2, classUtils_InterfacesArray0.length);
      assertNotNull(classUtils_InterfacesArray0);
      
      String string1 = ClassUtils.getAbbreviatedName("F2=/ P:R+gNicN^6_", 787);
      assertFalse(string1.equals((Object)string0));
      assertEquals("F2=/ P:R+gNicN^6_", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass("long");
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-124));
      assertEquals((byte) (-124), (byte)byte0);
      assertNotNull(byte0);
      
      long long0 = Byte.toUnsignedLong((byte) (-124));
      assertEquals(132L, long0);
      
      long long1 = Byte.toUnsignedLong((byte) (-124));
      assertTrue(long1 == long0);
      assertEquals(132L, long1);
      
      long long2 = Byte.toUnsignedLong((byte)1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(1L, long2);
      
      long long3 = new Byte((byte)1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals((byte)1, long3);
      
      int int0 = Byte.compare((byte) (-124), (byte) (-124));
      assertEquals(0, int0);
      
      String string0 = ClassUtils.getSimpleName((Object) byte0, "");
      assertFalse(byte0.equals((Object)long3));
      assertEquals("Byte", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Byte";
      objectArray0[1] = (Object) byte0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      long long4 = Byte.toUnsignedLong((byte) (-124));
      assertFalse(long4 == long2);
      assertTrue(long4 == long1);
      assertTrue(long4 == long0);
      assertFalse(long4 == long3);
      assertEquals(132L, long4);
      
      objectArray0[3] = (Object) "";
      int int1 = Byte.toUnsignedInt((byte)66);
      assertFalse(int1 == int0);
      assertEquals(66, int1);
      
      objectArray0[4] = (Object) "";
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertEquals(5, classArray0.length);
      assertEquals(5, objectArray0.length);
      assertNotNull(classArray0);
      
      Class<String> class0 = String.class;
      Class<Boolean> class1 = Boolean.TYPE;
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertNotNull(class1);
      
      boolean boolean0 = ClassUtils.isAssignable(class0, class1);
      assertFalse(boolean0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      assertNotSame(classArray0, classArray1);
      assertNotSame(classArray1, classArray0);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      assertEquals(5, objectArray0.length);
      assertFalse(classArray1.equals((Object)classArray0));
      assertNotNull(classArray1);
      
      String string1 = ClassUtils.getPackageCanonicalName(class0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        ClassUtils.Interfaces.valueOf("e]GOyk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.lang3.ClassUtils.Interfaces.e]GOyk
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertNull(class1);
      
      boolean boolean0 = ClassUtils.isAssignable(class0, class0, false);
      assertTrue(boolean0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class2 = String.class;
      classArray0[0] = class2;
      Class<String> class3 = String.class;
      classArray0[1] = class3;
      boolean boolean1 = ClassUtils.isAssignable(classArray0, classArray0, true);
      assertEquals(4, classArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ClassUtils.getShortCanonicalName("h=p,o4*MrW$U8HZ{");
      assertEquals("h=p,o4*MrW.U8HZ{", string0);
      assertNotNull(string0);
      
      Class<Byte> class4 = Byte.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class4);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Class<Short> class5 = Short.class;
      String string1 = ClassUtils.getShortCanonicalName(class5);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Short", string1);
      assertNotNull(string1);
      
      boolean boolean2 = ClassUtils.isInnerClass(class4);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = ClassUtils.getShortClassName((Object) classArray0[3], "\"");
      assertEquals(4, classArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\"", string2);
      assertNotNull(string2);
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertFalse(list1.contains("h=p,o4*MrW$U8HZ{"));
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list1);
      
      String string3 = ClassUtils.getSimpleName((Object) class0, "Short");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Class", string3);
      assertNotNull(string3);
      
      Class<Integer> class6 = Integer.class;
      List<Class<?>> list2 = ClassUtils.getAllSuperclasses(class6);
      assertNotSame(list2, list0);
      assertTrue(list2.equals((Object)list0));
      assertEquals(2, list2.size());
      assertFalse(list2.isEmpty());
      assertNotNull(list2);
      
      String string4 = ClassUtils.getPackageCanonicalName(classArray0[2]);
      assertEquals(4, classArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getSimpleName((Object) classArray0[2]);
      assertEquals(4, classArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = ClassUtils.getPackageName("`59}Zf");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getName((Object) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      try { 
        ClassUtils.getClass("");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName("MxS~OzqZNqQ{c");
      assertEquals("MxS~OzqZNqQ{c", string0);
      assertNotNull(string0);
      
      Class<Character> class0 = Character.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      String string1 = ClassUtils.getPackageName(class0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(string1);
      
      String string2 = ClassUtils.PACKAGE_SEPARATOR;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".", string2);
      assertNotNull(string2);
      
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      Class<Object> class1 = Object.class;
      String string3 = ClassUtils.getAbbreviatedName(class1, 16);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("j.lang.Object", string3);
      assertNotNull(string3);
      
      Class<String> class2 = String.class;
      String string4 = ClassUtils.getShortCanonicalName(class2);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("String", string4);
      assertNotNull(string4);
      
      boolean boolean0 = ClassUtils.isAssignable(class0, class0);
      assertTrue(boolean0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName("MxS~OzqZNqQ{c");
      assertEquals("MxS~OzqZNqQ{c", string0);
      assertNotNull(string0);
      
      Class<Character> class0 = Character.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      String string1 = ClassUtils.getPackageName(class0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(string1);
      
      String string2 = ClassUtils.PACKAGE_SEPARATOR;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".", string2);
      assertNotNull(string2);
      
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      Class<String> class1 = String.class;
      String string3 = ClassUtils.getShortCanonicalName(class1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("String", string3);
      assertNotNull(string3);
      
      boolean boolean0 = ClassUtils.isAssignable(class0, class0);
      assertTrue(boolean0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Long> class0 = Long.class;
      String string0 = ClassUtils.getName(class0, "{");
      assertEquals("java.lang.Long", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getSimpleName((Object) "{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("String", string1);
      assertNotNull(string1);
      
      Class<Double> class1 = Double.class;
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class1);
      assertTrue(boolean0);
      
      String string2 = ClassUtils.getPackageCanonicalName("java.lang.Long");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.lang", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getCanonicalName((Class<?>) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = ClassUtils.getSimpleName((Object) "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("String", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getPackageName("String");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = ClassUtils.getShortClassName("String");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("String", string6);
      assertNotNull(string6);
      
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class1);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      boolean boolean1 = ClassUtils.isAssignable(classArray0, classArray0, true);
      assertEquals(0, classArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = ClassUtils.getPackageCanonicalName(class0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("java.lang", string7);
      assertNotNull(string7);
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertFalse(list1.contains("java.lang.Long"));
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      Class<?>[] classArray1 = ClassUtils.toClass(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      String string8 = ClassUtils.getSimpleName(class0, "n|cA8Sp=r\"z2e'9v&S");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertEquals("Long", string8);
      assertNotNull(string8);
      
      String string9 = ClassUtils.getPackageName("n|cA8Sp=r\"z2e'9v&S");
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertEquals("", string9);
      assertNotNull(string9);
      
      Class<Object> class2 = Object.class;
      Class<Double> class3 = Double.class;
      boolean boolean2 = ClassUtils.isAssignable(class0, class3);
      assertSame(class3, class1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ClassUtils.isAssignable(class2, class2);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = ClassUtils.isAssignable(classArray0, classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      String string10 = ClassUtils.getShortClassName((Object) classUtils0, "");
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertEquals("ClassUtils", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<?>[] classArray0 = ClassUtils.wrappersToPrimitives((Class<?>[]) null);
      assertNull(classArray0);
      
      Class<Short>[] classArray1 = (Class<Short>[]) Array.newInstance(Class.class, 8);
      Class<Short> class0 = Short.class;
      classArray1[0] = class0;
      Class<Short> class1 = Short.class;
      classArray1[1] = class1;
      Class<Short> class2 = Short.class;
      classArray1[2] = class2;
      Class<Short> class3 = Short.class;
      classArray1[3] = class3;
      Class<Short> class4 = Short.class;
      classArray1[4] = class4;
      Class<Short> class5 = Short.class;
      classArray1[5] = class5;
      Class<Short> class6 = Short.class;
      classArray1[6] = class6;
      Class<Short> class7 = Short.class;
      classArray1[7] = class7;
      boolean boolean0 = ClassUtils.isAssignable((Class<?>[]) null, classArray1, false);
      assertEquals(8, classArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.logicalOr(true, true);
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(true, true);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int0 = Boolean.compare(true, false);
      assertEquals(1, int0);
      
      boolean boolean3 = Boolean.logicalAnd(true, true);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      boolean boolean4 = Boolean.logicalOr(true, true);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      
      boolean boolean5 = Boolean.logicalXor(true, true);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5);
      
      String string0 = ClassUtils.getName((Object) boolean0, "java.lang.Short");
      assertTrue(boolean0.equals((Object)boolean4));
      assertFalse(boolean0.equals((Object)boolean5));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean3));
      assertEquals("java.lang.Boolean", string0);
      assertNotNull(string0);
      
      Class<Integer> class0 = Integer.class;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class0);
      assertNotNull(iterable0);
      
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      String string1 = ClassUtils.getName(class0, "org.apache.commons.lang3.ClassUtils$2");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Integer", string1);
      assertNotNull(string1);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 2);
      String string2 = ClassUtils.getShortClassName(class0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Integer", string2);
      assertNotNull(string2);
      
      Class<Byte> class1 = Byte.class;
      classArray0[0] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[1] = class2;
      String string3 = ClassUtils.getName((Object) iterable0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ClassUtils$$Lambda$49/438151763", string3);
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = ClassUtils.getShortCanonicalName(object0, ".");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Object", string4);
      assertNotNull(string4);
      
      boolean boolean6 = ClassUtils.isAssignable(classArray0, classArray0, true);
      assertEquals(2, classArray0.length);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6);
      
      String string5 = ClassUtils.getCanonicalName((Object) classUtils0);
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ClassUtils", string5);
      assertNotNull(string5);
      
      String string6 = ClassUtils.getPackageName("[java.lang.Double");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("java.lang", string6);
      assertNotNull(string6);
      
      Class<Object> class3 = Object.class;
      String string7 = ClassUtils.getSimpleName(class3, "java.lang.Boolean");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("Object", string7);
      assertNotNull(string7);
      
      String string8 = ClassUtils.getName((Object) class3);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertEquals("java.lang.Class", string8);
      assertNotNull(string8);
      
      Class<?> class4 = ClassUtils.primitiveToWrapper(class1);
      assertSame(class1, class2);
      assertEquals("class java.lang.Byte", class4.toString());
      assertFalse(class4.isPrimitive());
      assertEquals(17, class4.getModifiers());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertNotNull(class4);
      
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class2);
      assertFalse(list0.contains(class4));
      assertSame(class2, class1);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      String string9 = ClassUtils.getPackageName((Object) class1, "Integer");
      assertSame(class1, class2);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertEquals("java.lang", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Long> class0 = Long.class;
      String string0 = ClassUtils.getName(class0, "{");
      assertEquals("java.lang.Long", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getSimpleName((Object) "{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("String", string1);
      assertNotNull(string1);
      
      Class<Double> class1 = Double.class;
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class1);
      assertTrue(boolean0);
      
      String string2 = ClassUtils.getShortClassName("{");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getCanonicalName(class1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("java.lang.Double", string3);
      assertNotNull(string3);
      
      String string4 = ClassUtils.getSimpleName((Object) "java.lang.Double");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("String", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getPackageName("String");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = ClassUtils.getShortClassName("String");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertEquals("String", string6);
      assertNotNull(string6);
      
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class1);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      boolean boolean1 = ClassUtils.isAssignable(classArray0, classArray0, true);
      assertEquals(0, classArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = ClassUtils.getPackageCanonicalName(class0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("java.lang", string7);
      assertNotNull(string7);
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertFalse(list1.contains(string1));
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertNotNull(list1);
      
      Class<?>[] classArray1 = ClassUtils.toClass(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      String string8 = ClassUtils.getSimpleName(class0, "n|cA8Sp=r\"z2e'9v&S");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertEquals("Long", string8);
      assertNotNull(string8);
      
      String string9 = ClassUtils.getPackageName("n|cA8Sp=r\"z2e'9v&S");
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertEquals("", string9);
      assertNotNull(string9);
      
      Class<Object> class2 = Object.class;
      String string10 = ClassUtils.getCanonicalName(class2);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertEquals("java.lang.Object", string10);
      assertNotNull(string10);
      
      Class<Double> class3 = Double.TYPE;
      assertNotSame(class3, class1);
      assertFalse(class3.equals((Object)class1));
      assertFalse(class3.isAnnotation());
      assertEquals("double", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      assertNotNull(class3);
      
      boolean boolean2 = ClassUtils.isAssignable(class0, class3);
      assertNotSame(class3, class1);
      assertFalse(class3.equals((Object)class1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(class3.isAnnotation());
      assertEquals("double", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      
      boolean boolean3 = ClassUtils.isAssignable(class2, class2);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = ClassUtils.isAssignable(classArray0, classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      String string11 = ClassUtils.getShortClassName((Object) classUtils0, "");
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string7));
      assertEquals("ClassUtils", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertNull(class1);
      
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper((Class<?>) null);
      assertFalse(boolean0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class2 = String.class;
      classArray0[0] = class2;
      Class<String> class3 = String.class;
      classArray0[1] = class3;
      Class<String> class4 = String.class;
      classArray0[2] = class4;
      Class<String> class5 = String.class;
      classArray0[3] = class5;
      boolean boolean1 = ClassUtils.isAssignable(classArray0, classArray0, false);
      assertEquals(4, classArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = ClassUtils.getShortCanonicalName("h=p,o4*MrW$U8HZ{");
      assertEquals("h=p,o4*MrW.U8HZ{", string0);
      assertNotNull(string0);
      
      Class<Byte> class6 = Byte.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class6);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Class<Short> class7 = Short.class;
      String string1 = ClassUtils.getShortCanonicalName(class7);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Short", string1);
      assertNotNull(string1);
      
      boolean boolean2 = ClassUtils.isInnerClass(class6);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = ClassUtils.getShortClassName((Object) class2, "\"");
      assertSame(class2, class4);
      assertSame(class2, class5);
      assertSame(class2, class3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Class", string2);
      assertNotNull(string2);
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertFalse(list1.contains(string0));
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list1);
      
      String string3 = ClassUtils.getSimpleName((Object) class0, "Short");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("Class", string3);
      assertNotNull(string3);
      
      Class<Integer> class8 = Integer.class;
      List<Class<?>> list2 = ClassUtils.getAllSuperclasses(class8);
      assertNotSame(list2, list0);
      assertTrue(list2.equals((Object)list0));
      assertFalse(list2.isEmpty());
      assertEquals(2, list2.size());
      assertNotNull(list2);
      
      String string4 = ClassUtils.getName(class6, "q!+< |S)2R7'b[Skapw");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("java.lang.Byte", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getPackageCanonicalName(class2);
      assertSame(class2, class4);
      assertSame(class2, class5);
      assertSame(class2, class3);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("java.lang", string5);
      assertNotNull(string5);
      
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class2, classUtils_Interfaces0);
      assertSame(class2, class4);
      assertSame(class2, class5);
      assertSame(class2, class3);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName((Object) null, "L]");
      assertEquals("L]", string0);
      assertNotNull(string0);
      
      Integer integer0 = new Integer(91);
      assertEquals(91, (int)integer0);
      assertNotNull(integer0);
      
      String string1 = ClassUtils.getName((Object) integer0, "Q");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Integer", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtils.getShortClassName((Object) class0, "byte");
      assertEquals("Class", string0);
      assertNotNull(string0);
      
      Class<ClassUtils>[] classArray0 = (Class<ClassUtils>[]) Array.newInstance(Class.class, 1);
      Class<ClassUtils> class1 = ClassUtils.class;
      classArray0[0] = class1;
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = ClassUtils.getPackageCanonicalName(object0, "Class");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang", string1);
      assertNotNull(string1);
      
      Class<?>[] classArray2 = ClassUtils.primitivesToWrappers(classArray0);
      assertNotSame(classArray2, classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray2.length);
      assertFalse(classArray2.equals((Object)classArray1));
      assertNotNull(classArray2);
      
      String string2 = ClassUtils.getName(class1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ClassUtils", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getShortClassName("[java.lang.Short");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Short[]", string3);
      assertNotNull(string3);
      
      String string4 = ClassUtils.getPackageCanonicalName((Object) "[java.lang.Short", "Class");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("java.lang", string4);
      assertNotNull(string4);
      
      boolean boolean1 = ClassUtils.isAssignable(classArray2, classArray1, false);
      assertNotSame(classArray1, classArray2);
      assertNotSame(classArray2, classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertEquals(1, classArray2.length);
      assertFalse(classArray1.equals((Object)classArray2));
      assertFalse(classArray2.equals((Object)classArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Integer> class2 = Integer.class;
      String string5 = ClassUtils.getCanonicalName(class2);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("java.lang.Integer", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getShortCanonicalName((Class<?>) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getShortClassName(class0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object", string1);
      assertNotNull(string1);
      
      Class<Short> class1 = Short.class;
      String string2 = ClassUtils.getName(class1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang.Short", string2);
      assertNotNull(string2);
      
      Class<Short> class2 = Short.class;
      String string3 = ClassUtils.getShortCanonicalName(class2);
      assertSame(class2, class1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Short", string3);
      assertNotNull(string3);
      
      Class<Integer> class3 = Integer.class;
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class3);
      assertTrue(boolean0);
      
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class3);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, classArray0.length);
      assertNotNull(classArray0);
      
      Class<Long> class0 = Long.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtils.isAssignable(class0, class0, true);
      assertTrue(boolean0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      
      String string0 = "AWwZw_ltU/mg-=|Xe";
      String string1 = ClassUtils.getPackageCanonicalName("AWwZw_ltU/mg-=|Xe");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = ClassUtils.isPrimitiveOrWrapper(class0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertNotSame(classArray0, classArray1);
      assertNotSame(classArray1, classArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
      assertFalse(classArray1.equals((Object)classArray0));
      assertNotNull(classArray1);
      
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertNotNull(iterable0);
      
      // Undeclared exception!
      try { 
        ClassUtils.Interfaces.valueOf("^)*/2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.lang3.ClassUtils.Interfaces.^)*_/2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getShortCanonicalName(class0);
      assertEquals("Object", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getShortClassName(class0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Object", string1);
      assertNotNull(string1);
      
      Class<?>[] classArray0 = ClassUtils.wrappersToPrimitives((Class<?>[]) null);
      assertNull(classArray0);
      
      Class<Byte> class1 = Byte.class;
      String string2 = ClassUtils.getSimpleName(class1, "Object");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Byte", string2);
      assertNotNull(string2);
      
      Class<Short> class2 = Short.class;
      String string3 = ClassUtils.getShortCanonicalName(class2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Short", string3);
      assertNotNull(string3);
      
      Class<Integer> class3 = Integer.TYPE;
      assertFalse(class3.isEnum());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("int", class3.toString());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertNotNull(class3);
      
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class3);
      assertTrue(boolean0);
      assertFalse(class3.isEnum());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("int", class3.toString());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class3);
      assertFalse(class3.isEnum());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("int", class3.toString());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtils.getSimpleName(class0);
      assertEquals("String", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getShortClassName("String");
      assertTrue(string1.equals((Object)string0));
      assertEquals("String", string1);
      assertNotNull(string1);
      
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      String string2 = ClassUtils.getPackageName(class0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang", string2);
      assertNotNull(string2);
      
      Class<?> class2 = ClassUtils.primitiveToWrapper(class0);
      assertSame(class2, class1);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.String", class2.toString());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Boolean boolean0 = new Boolean("String");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String string3 = ClassUtils.getPackageCanonicalName((Object) boolean0, "[java.lang.Short");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("java.lang", string3);
      assertNotNull(string3);
      
      Class<Float> class3 = Float.class;
      String string4 = ClassUtils.getCanonicalName(class3, "[java.lang.Short");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("java.lang.Float", string4);
      assertNotNull(string4);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<?> class4 = ClassUtils.getClass(classLoader1, "double", false);
      assertNotSame(class4, class1);
      assertNotSame(class4, class2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(class4.equals((Object)class1));
      assertFalse(class4.equals((Object)class2));
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals(1041, class4.getModifiers());
      assertTrue(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals("double", class4.toString());
      assertNotNull(class4);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = ClassUtils.PACKAGE_SEPARATOR;
      assertEquals(".", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getAbbreviatedName(".", 302);
      assertTrue(string1.equals((Object)string0));
      assertEquals(".", string1);
      assertNotNull(string1);
      
      String string2 = ClassUtils.getShortClassName((Class<?>) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Class<Short> class0 = Short.class;
      String string3 = ClassUtils.getName(class0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("java.lang.Short", string3);
      assertNotNull(string3);
      
      Class<Short> class1 = Short.class;
      String string4 = ClassUtils.getShortCanonicalName(class1);
      assertSame(class1, class0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Short", string4);
      assertNotNull(string4);
      
      Class<Integer> class2 = Integer.class;
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class2);
      assertTrue(boolean0);
      
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class2);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = ClassUtils.getAbbreviatedName("L", 829);
      assertEquals("L", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getPackageCanonicalName(class0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(string1);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 16);
      Class<Byte> class1 = Byte.class;
      classArray0[0] = class1;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0, false);
      assertEquals(16, classArray0.length);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus("", false);
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader0);
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertNotNull(classLoader2);
      
      try { 
        ClassUtils.getClass(classLoader0, "L", false);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtils.isPrimitiveWrapper(class0);
      assertFalse(boolean0);
      
      Class<Long> class1 = Long.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class1);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      ClassUtils.Interfaces[] classUtils_InterfacesArray0 = ClassUtils.Interfaces.values();
      assertEquals(2, classUtils_InterfacesArray0.length);
      assertNotNull(classUtils_InterfacesArray0);
      
      // Undeclared exception!
      try { 
        ClassUtils.getPackageCanonicalName("[ng");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      long long0 = Short.toUnsignedLong((short) (-1066));
      assertEquals(64470L, long0);
      
      String string0 = ClassUtils.getCanonicalName((Object) short0);
      assertEquals("java.lang.Short", string0);
      assertNotNull(string0);
      
      Class<Character> class0 = Character.class;
      String string1 = ClassUtils.getName(class0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Character", string1);
      assertNotNull(string1);
      
      ClassUtils.Interfaces[] classUtils_InterfacesArray0 = ClassUtils.Interfaces.values();
      assertEquals(2, classUtils_InterfacesArray0.length);
      assertNotNull(classUtils_InterfacesArray0);
      
      String string2 = ClassUtils.getName((Object) "java.lang.Character");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang.String", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getShortCanonicalName((String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtils.getShortClassName((Object) class0, "byte");
      assertEquals("Class", string0);
      assertNotNull(string0);
      
      Class<ClassUtils>[] classArray0 = (Class<ClassUtils>[]) Array.newInstance(Class.class, 1);
      Class<ClassUtils> class1 = ClassUtils.class;
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = ClassUtils.getPackageCanonicalName(object0, "Class");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang", string1);
      assertNotNull(string1);
      
      Class<?>[] classArray2 = ClassUtils.primitivesToWrappers(classArray0);
      assertNotSame(classArray2, classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray2.length);
      assertFalse(classArray2.equals((Object)classArray1));
      assertNotNull(classArray2);
      
      String string2 = ClassUtils.getName(class1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ClassUtils", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getShortClassName("T6,3%8N:,-Ux?;");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("T6,3%8N:,-Ux?;", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 1);
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      classArray0[0] = class0;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0);
      assertEquals(1, classArray0.length);
      assertTrue(boolean0);
      
      Class<Integer> class1 = Integer.class;
      Class<?> class2 = ClassUtils.primitiveToWrapper(class1);
      assertEquals("class java.lang.Integer", class2.toString());
      assertFalse(class2.isSynthetic());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertNotNull(class2);
      
      String string0 = ">";
      String string1 = ClassUtils.getPackageCanonicalName(">");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      try { 
        ClassUtils.getClass("");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName("K");
      assertEquals("K", string0);
      assertNotNull(string0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0, true);
      assertEquals(3, classArray0.length);
      assertTrue(boolean0);
      
      Class<Double> class3 = Double.class;
      String string1 = ClassUtils.getCanonicalName(class3, "K");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Double", string1);
      assertNotNull(string1);
      
      String string2 = ClassUtils.getCanonicalName((Object) "K", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.lang.String", string2);
      assertNotNull(string2);
      
      boolean boolean1 = ClassUtils.isAssignable(classArray0, classArray0);
      assertEquals(3, classArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = ClassUtils.getShortCanonicalName(class0);
      assertSame(class0, class2);
      assertSame(class0, class1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("String", string3);
      assertNotNull(string3);
      
      Class<Long> class4 = Long.class;
      boolean boolean2 = ClassUtils.isAssignable(class1, class4);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = ClassUtils.isAssignable(classArray0, classArray0, true);
      assertEquals(3, classArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string4 = ClassUtils.getSimpleName((Object) null, "K");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("K", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getName(class1);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("java.lang.String", string5);
      assertNotNull(string5);
      
      String string6 = ClassUtils.getName((Object) "String");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("java.lang.String", string6);
      assertNotNull(string6);
      
      Class<?> class5 = ClassUtils.getClass("java.lang.String");
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertEquals(17, class5.getModifiers());
      assertFalse(class5.isAnnotation());
      assertEquals("class java.lang.String", class5.toString());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertNotNull(class5);
      
      int int0 = (-285);
      // Undeclared exception!
      try { 
        ClassUtils.getAbbreviatedName("K", (-285));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // len must be > 0
         //
         verifyException("org.apache.commons.lang3.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getCanonicalName(class0, "#+U$w<M;");
      assertEquals("java.lang.Object", string0);
      assertNotNull(string0);
      
      Class<String> class1 = String.class;
      String string1 = ClassUtils.getAbbreviatedName(class1, 1064);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.String", string1);
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = ClassUtils.getPackageName(object0, "Field names are mandatory when using JsonToStringStyle");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang", string2);
      assertNotNull(string2);
      
      Class<?> class2 = ClassUtils.getClass("java.lang.Object", true);
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertNotNull(class2);
      
      Class<Integer> class3 = Integer.class;
      Class<?> class4 = ClassUtils.primitiveToWrapper(class3);
      assertNotSame(class4, class2);
      assertFalse(class4.equals((Object)class2));
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isArray());
      assertEquals("class java.lang.Integer", class4.toString());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertEquals(17, class4.getModifiers());
      assertNotNull(class4);
      
      String string3 = ClassUtils.getAbbreviatedName(class3, 64);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("java.lang.Integer", string3);
      assertNotNull(string3);
      
      Class<Float> class5 = Float.class;
      boolean boolean0 = ClassUtils.isPrimitiveWrapper(class5);
      assertTrue(boolean0);
      
      String string4 = ClassUtils.getShortCanonicalName("java.lang.Integer");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Integer", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getPackageName("");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string4));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses(linkedList0);
      assertFalse(linkedList0.contains(string4));
      assertFalse(list0.contains(class2));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<?> class6 = ClassUtils.getClass("java.lang.Object", false);
      assertNotSame(class6, class4);
      assertSame(class6, class2);
      assertFalse(class6.equals((Object)class4));
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertEquals(1, class6.getModifiers());
      assertFalse(class6.isInterface());
      assertEquals("class java.lang.Object", class6.toString());
      assertFalse(class6.isArray());
      assertFalse(class6.isPrimitive());
      assertFalse(class6.isAnnotation());
      assertNotNull(class6);
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertFalse(list1.contains(string5));
      assertFalse(linkedList0.contains(string5));
      assertFalse(list0.contains(class4));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list1);
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 9);
      Class<Double> class7 = Double.class;
      classArray0[0] = class7;
      Class<Double> class8 = Double.class;
      classArray0[1] = class8;
      Class<Double> class9 = Double.class;
      classArray0[2] = class9;
      Class<Double> class10 = Double.class;
      classArray0[3] = class10;
      Class<Double> class11 = Double.class;
      classArray0[4] = class11;
      Class<Double> class12 = Double.class;
      classArray0[5] = class12;
      Class<Double> class13 = Double.class;
      classArray0[6] = class13;
      Class<Double> class14 = Double.class;
      classArray0[7] = class14;
      Class<Double> class15 = Double.class;
      classArray0[8] = class15;
      boolean boolean1 = ClassUtils.isAssignable(classArray0, classArray0);
      assertEquals(9, classArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName((Object) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<Long> class0 = Long.class;
      String string1 = ClassUtils.getName(class0, "Puy");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Long", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        ClassUtils.Interfaces.valueOf("Puy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.lang3.ClassUtils.Interfaces.Puy
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Double> class0 = Double.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = 2591;
      Integer integer0 = new Integer(2591);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2591, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ClassUtils.getName((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals("java.lang.Integer", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtils.getShortCanonicalName("[/R)KrkKgjwN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = ClassUtils.getPackageName("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = Byte.toUnsignedInt((byte) (-1));
      assertEquals(255, int0);
      
      String string1 = ClassUtils.getShortClassName((Object) byte0, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Byte", string1);
      assertNotNull(string1);
      
      Class<Boolean> class0 = Boolean.class;
      String string2 = ClassUtils.getShortCanonicalName(class0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Boolean", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getShortClassName(class0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("Boolean", string3);
      assertNotNull(string3);
      
      int int1 = Byte.toUnsignedInt((byte) (-1));
      assertTrue(int1 == int0);
      assertEquals(255, int1);
      
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class0);
      assertTrue(boolean0);
      
      String string4 = ClassUtils.getPackageName((Object) "Boolean", "Byte");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("java.lang", string4);
      assertNotNull(string4);
      
      Character character0 = new Character('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      boolean boolean1 = Character.isIdeographic((byte) (-1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Character.isIdeographic((byte) (-1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = ClassUtils.getShortCanonicalName((Object) character0, "Byte");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Character", string5);
      assertNotNull(string5);
      
      String string6 = ClassUtils.getName((Object) "Boolean", "@vB\"]R~6=/IwLL lU");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("java.lang.String", string6);
      assertNotNull(string6);
      
      int int2 = Byte.toUnsignedInt((byte) (-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(255, int2);
      
      Class<Boolean> class1 = Boolean.class;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class1);
      assertSame(class1, class0);
      assertNotNull(iterable0);
      
      String string7 = ClassUtils.getPackageName("4$vpe!iZ}j=");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = ClassUtils.getPackageName((Object) null, "Byte");
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertEquals("Byte", string8);
      assertNotNull(string8);
      
      Class<String> class2 = String.class;
      String string9 = ClassUtils.getAbbreviatedName(class2, 46);
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertEquals("java.lang.String", string9);
      assertNotNull(string9);
      
      boolean boolean3 = ClassUtils.isPrimitiveOrWrapper(class2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Class<Object> class3 = Object.class;
      Class<Integer> class4 = Integer.class;
      boolean boolean4 = ClassUtils.isAssignable(class3, class4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string10 = ClassUtils.getPackageName((Object) "Byte", " g2G=ARz$o");
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertEquals("java.lang", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertNull(class1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, classArray0.length);
      assertNotNull(classArray0);
      
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = ClassUtils.getCanonicalName(object1, ".");
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertEquals("java.lang.Object", string0);
      assertNotNull(string0);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      String string1 = ClassUtils.getPackageCanonicalName((Object) null, ".");
      assertFalse(string1.equals((Object)string0));
      assertEquals(".", string1);
      assertNotNull(string1);
      
      String string2 = ClassUtils.getPackageName(object2, ".");
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getName((Object) classUtils0, "$");
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ClassUtils", string3);
      assertNotNull(string3);
      
      boolean boolean0 = ClassUtils.isPrimitiveWrapper(class0);
      assertFalse(boolean0);
      
      Class<Byte> class2 = Byte.class;
      String string4 = ClassUtils.getName(class2, "F");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("java.lang.Byte", string4);
      assertNotNull(string4);
      
      Class<Short> class3 = Short.class;
      String string5 = ClassUtils.getShortClassName(class3);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Short", string5);
      assertNotNull(string5);
      
      String string6 = ClassUtils.getSimpleName(class0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("String", string6);
      assertNotNull(string6);
      
      boolean boolean1 = ClassUtils.isAssignable(class0, class3, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      String string7 = ClassUtils.getSimpleName(object3);
      assertNotSame(object3, object2);
      assertNotSame(object3, object1);
      assertNotSame(object3, object0);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Object", string7);
      assertNotNull(string7);
      
      String string8 = ClassUtils.getAbbreviatedName((Class<?>) null, (-1712));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      String string9 = ClassUtils.getShortCanonicalName(object4, "+D]{DHUUr^@!_X");
      assertNotSame(object4, object2);
      assertNotSame(object4, object1);
      assertNotSame(object4, object0);
      assertNotSame(object4, object3);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertEquals("Object", string9);
      assertNotNull(string9);
      
      boolean boolean2 = ClassUtils.isAssignable(classArray0, classArray0, true);
      assertEquals(4, objectArray0.length);
      assertEquals(4, classArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Float> class0 = Float.class;
      String string0 = ClassUtils.getCanonicalName(class0);
      assertEquals("java.lang.Float", string0);
      assertNotNull(string0);
      
      boolean boolean0 = ClassUtils.isPrimitiveWrapper(class0);
      assertTrue(boolean0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max(0.0F, 0.0F);
      assertEquals(0.0F, float1, 0.01F);
      
      String string1 = ClassUtils.getName((Object) float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals("java.lang.Float", string1);
      assertNotNull(string1);
      
      String string2 = ClassUtils.getCanonicalName((Object) null, "java.lang.Float");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("java.lang.Float", string2);
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = ClassUtils.getSimpleName(object0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Object", string3);
      assertNotNull(string3);
      
      String string4 = ClassUtils.getName((Object) null, "void");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("void", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getPackageName("");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = ClassUtils.getShortClassName(class0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Float", string6);
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        ClassUtils.getAbbreviatedName("", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // len must be > 0
         //
         verifyException("org.apache.commons.lang3.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtils.getCanonicalName(class0, "");
      assertEquals("java.lang.String", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getShortCanonicalName("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertNull(class1);
      
      String string2 = ClassUtils.getPackageCanonicalName((Object) "", "B~`");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.lang", string2);
      assertNotNull(string2);
      
      Class<Object> class2 = Object.class;
      boolean boolean0 = ClassUtils.isAssignable(class2, (Class<?>) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "L";
      String string1 = ClassUtils.getPackageCanonicalName("L");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Class<Object> class0 = Object.class;
      String string2 = ClassUtils.getShortClassName(class0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Object", string2);
      assertNotNull(string2);
      
      Class<ClassUtils> class1 = ClassUtils.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Class<String> class2 = String.class;
      classArray0[0] = class2;
      Class<String> class3 = String.class;
      classArray0[1] = class3;
      Class<String> class4 = String.class;
      classArray0[2] = class4;
      Class<String> class5 = String.class;
      classArray0[3] = class5;
      Class<String> class6 = String.class;
      classArray0[4] = class6;
      Class<String> class7 = String.class;
      classArray0[5] = class7;
      try { 
        ClassUtils.getPublicMethod(class1, "L", classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = ClassUtils.getCanonicalName((Object) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getPackageName((Object) "", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtils.getShortCanonicalName(class0);
      assertEquals("String", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getShortClassName((Object) "String", "String");
      assertTrue(string1.equals((Object)string0));
      assertEquals("String", string1);
      assertNotNull(string1);
      
      String string2 = ClassUtils.getCanonicalName((Object) "C", "String");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang.String", string2);
      assertNotNull(string2);
      
      Class<Character> class1 = Character.class;
      String string3 = ClassUtils.getName(class1, "zWpC~eq](;x\u0002");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("java.lang.Character", string3);
      assertNotNull(string3);
      
      String string4 = ClassUtils.getShortCanonicalName("1yC{d0}iiT,XzUHB");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("1yC{d0}iiT,XzUHB", string4);
      assertNotNull(string4);
      
      Class<ClassUtils> class2 = ClassUtils.class;
      Class<?> class3 = ClassUtils.wrapperToPrimitive(class2);
      assertNull(class3);
      
      String string5 = ClassUtils.getName((Class<?>) null);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        ClassUtils.getAbbreviatedName("C*", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // len must be > 0
         //
         verifyException("org.apache.commons.lang3.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = ClassUtils.getPackageCanonicalName("short");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<?> class0 = ClassUtils.getClass("short");
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertNotNull(class0);
      
      Class<Object> class1 = Object.class;
      Class<?> class2 = ClassUtils.wrapperToPrimitive(class1);
      assertNull(class2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, classArray0.length);
      assertNotNull(classArray0);
      
      String string1 = ClassUtils.getName((Class<?>) null, "GFw:K.XA=R9&6o@");
      assertFalse(string1.equals((Object)string0));
      assertEquals("GFw:K.XA=R9&6o@", string1);
      assertNotNull(string1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      try { 
        ClassUtils.getClass(classLoader0, "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      String string0 = ClassUtils.getShortCanonicalName(")58g8w|i].G-.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getAbbreviatedName("", 610);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Class<String> class0 = String.class;
      String string2 = ClassUtils.getCanonicalName(class0, ".");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.lang.String", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getShortCanonicalName(class0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("String", string3);
      assertNotNull(string3);
      
      String string4 = ClassUtils.getPackageCanonicalName(".");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Long", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class1);
      assertTrue(boolean0);
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Long", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      boolean boolean1 = ClassUtils.isAssignable(class0, class1, true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Long", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      String string0 = ClassUtils.getSimpleName(class0);
      assertEquals("Long", string0);
      assertNotNull(string0);
      
      Class<Double> class2 = Double.TYPE;
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("double", class2.toString());
      assertNotNull(class2);
      
      String string1 = ClassUtils.getCanonicalName((Object) class2, "Long");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Class", string1);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("double", class2.toString());
      assertNotNull(string1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<?> class3 = ClassUtils.getClass(classLoader1, "java.lang.Class", true);
      assertNotSame(class3, class1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(class3.equals((Object)class1));
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals(17, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isPrimitive());
      assertEquals("class java.lang.Class", class3.toString());
      assertFalse(class3.isAnnotation());
      assertNotNull(class3);
      
      String string2 = ClassUtils.getSimpleName(class0, "7bj@%K");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Long", string2);
      assertNotNull(string2);
      
      Class<Object> class4 = Object.class;
      String string3 = ClassUtils.getCanonicalName(class4, "java.lang.Class");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("java.lang.Object", string3);
      assertNotNull(string3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string3));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses(linkedList0);
      assertFalse(linkedList0.contains(string3));
      assertFalse(list0.contains(class3));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class3);
      assertNotSame(class3, class1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(class3.equals((Object)class1));
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals(17, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isPrimitive());
      assertEquals("class java.lang.Class", class3.toString());
      assertFalse(class3.isAnnotation());
      assertNotNull(iterable0);
      
      String string4 = "#8qpgd3E#";
      try { 
        ClassUtils.getClass(classLoader1, "#8qpgd3E#", true);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtils.getShortClassName("=0_");
      assertEquals("=0_", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getPackageName((Object) class0, "=0_");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang", string1);
      assertNotNull(string1);
      
      Class<?>[] classArray0 = ClassUtils.wrappersToPrimitives((Class<?>[]) null);
      assertNull(classArray0);
      
      String string2 = ClassUtils.getShortCanonicalName("");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Class<Integer> class1 = Integer.class;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class1);
      assertNotNull(iterable0);
      
      String string3 = ClassUtils.getSimpleName(class1, "cb'b.");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Integer", string3);
      assertNotNull(string3);
      
      String string4 = ClassUtils.getPackageName((Object) "Integer", "org.apache.commons.lang3.ArrayUtils");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("java.lang", string4);
      assertNotNull(string4);
      
      Class<?> class2 = ClassUtils.wrapperToPrimitive(class1);
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("int", class2.toString());
      assertNotNull(class2);
      
      Class<?> class3 = ClassUtils.wrapperToPrimitive(class0);
      assertNull(class3);
      
      String string5 = ClassUtils.getPackageName((Object) "", "");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("java.lang", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 9);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<Long> class1 = Long.class;
      classArray0[1] = class1;
      Class<Long> class2 = Long.class;
      classArray0[2] = class2;
      Class<Long> class3 = Long.class;
      classArray0[3] = class3;
      Class<Long> class4 = Long.class;
      classArray0[4] = class4;
      Class<Long> class5 = Long.class;
      classArray0[5] = class5;
      Class<Long> class6 = Long.class;
      classArray0[6] = class6;
      Class<Long> class7 = Long.class;
      classArray0[7] = class7;
      Class<Long> class8 = Long.class;
      classArray0[8] = class8;
      boolean boolean0 = ClassUtils.isAssignable((Class<?>[]) null, classArray0);
      assertEquals(9, classArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtils.isInnerClass(class8);
      assertSame(class8, class4);
      assertSame(class8, class1);
      assertSame(class8, class0);
      assertSame(class8, class7);
      assertSame(class8, class6);
      assertSame(class8, class3);
      assertSame(class8, class5);
      assertSame(class8, class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<?> class9 = ClassUtils.primitiveToWrapper(class0);
      assertSame(class0, class7);
      assertSame(class0, class3);
      assertSame(class0, class2);
      assertSame(class0, class6);
      assertSame(class0, class8);
      assertSame(class0, class4);
      assertSame(class0, class1);
      assertSame(class0, class5);
      assertEquals("class java.lang.Long", class9.toString());
      assertFalse(class9.isInterface());
      assertFalse(class9.isArray());
      assertFalse(class9.isAnnotation());
      assertFalse(class9.isPrimitive());
      assertFalse(class9.isEnum());
      assertFalse(class9.isSynthetic());
      assertEquals(17, class9.getModifiers());
      assertNotNull(class9);
      
      Long long0 = new Long((-1461L));
      assertEquals((-1461L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("", (-1461L));
      assertTrue(long1.equals((Object)long0));
      assertEquals((-1461L), (long)long1);
      assertNotNull(long1);
      
      // Undeclared exception!
      try { 
        Long.remainderUnsigned((-1461L), 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Character character0 = new Character(':');
      assertEquals(':', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isIdeographic(0);
      assertFalse(boolean0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) character0);
      assertNotNull(predicate0);
      
      boolean boolean1 = linkedList0.removeIf(predicate0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      
      String string0 = "sq>9QsdA\\uv\"}}sx[";
      boolean boolean2 = linkedList0.add(string0);
      assertTrue(linkedList0.contains(string0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1, linkedList0.size());
      
      boolean boolean3 = linkedList0.offerLast("tJ ):|t?L}wG7 </&");
      assertTrue(linkedList0.contains(string0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(2, linkedList0.size());
      
      boolean boolean4 = linkedList0.add(string0);
      assertTrue(linkedList0.contains(string0));
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      assertEquals(3, linkedList0.size());
      
      List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses(linkedList0);
      assertTrue(linkedList0.contains(string0));
      assertEquals(3, linkedList0.size());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      String string1 = ClassUtils.getShortClassName((Object) string0, "WE;");
      assertFalse(string1.equals((Object)string0));
      assertEquals("String", string1);
      assertNotNull(string1);
      
      String string2 = ClassUtils.getPackageCanonicalName("String");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertTrue(linkedList0.contains("tJ ):|t?L}wG7 </&"));
      assertFalse(linkedList0.contains(string1));
      assertFalse(list1.contains("tJ ):|t?L}wG7 </&"));
      assertEquals(3, linkedList0.size());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      List<Class<?>> list2 = ClassUtils.convertClassNamesToClasses(list1);
      assertTrue(linkedList0.contains("tJ ):|t?L}wG7 </&"));
      assertFalse(linkedList0.contains(string1));
      assertFalse(list1.contains("tJ ):|t?L}wG7 </&"));
      assertNotSame(list0, list2);
      assertNotSame(list2, list0);
      assertTrue(list2.equals((Object)list0));
      assertEquals(3, linkedList0.size());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list2.isEmpty());
      assertEquals(3, list2.size());
      assertNotNull(list2);
      
      Class<Integer> class0 = Integer.class;
      String string3 = ClassUtils.getPackageCanonicalName(class0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("java.lang", string3);
      assertNotNull(string3);
      
      Class<Short> class1 = Short.class;
      Class<?> class2 = ClassUtils.wrapperToPrimitive(class1);
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertEquals("short", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      List<String> list3 = ClassUtils.convertClassesToClassNames(list2);
      assertTrue(linkedList0.contains("tJ ):|t?L}wG7 </&"));
      assertFalse(linkedList0.contains(string3));
      assertFalse(list3.contains(string3));
      assertFalse(list0.contains(class2));
      assertFalse(list1.contains(string3));
      assertFalse(list2.contains(class2));
      assertNotSame(list3, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list3);
      assertNotSame(list2, list0);
      assertTrue(list3.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertEquals(3, linkedList0.size());
      assertFalse(list3.isEmpty());
      assertEquals(3, list3.size());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list2.isEmpty());
      assertEquals(3, list2.size());
      assertNotNull(list3);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ClassUtils.getSimpleName(object0);
      assertEquals("Object", string0);
      assertNotNull(string0);
      
      Class<Integer> class0 = Integer.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertFalse(list1.contains(string0));
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      String string1 = ClassUtils.getAbbreviatedName(class0, 219);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Integer", string1);
      assertNotNull(string1);
      
      List<Class<?>> list2 = ClassUtils.convertClassNamesToClasses(list1);
      assertFalse(list1.contains(string0));
      assertNotSame(list0, list2);
      assertNotSame(list2, list0);
      assertTrue(list2.equals((Object)list0));
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(2, list2.size());
      assertFalse(list2.isEmpty());
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName((Object) null, "_J}_9AXN=k");
      assertEquals("_J}_9AXN=k", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getSimpleName((Object) "_J}_9AXN=k", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("String", string1);
      assertNotNull(string1);
      
      ClassUtils.Interfaces[] classUtils_InterfacesArray0 = ClassUtils.Interfaces.values();
      assertEquals(2, classUtils_InterfacesArray0.length);
      assertNotNull(classUtils_InterfacesArray0);
      
      String string2 = ClassUtils.getSimpleName((Object) "_J}_9AXN=k");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("String", string2);
      assertNotNull(string2);
      
      Class<Long> class0 = Long.class;
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class0, classUtils_Interfaces0);
      assertNotNull(iterable0);
      
      String string3 = ClassUtils.getShortCanonicalName("e$quHQB'qTs!_1q");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("e.quHQB'qTs!_1q", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertNotNull(class0);
      
      Class<Integer> class1 = Integer.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1);
      assertFalse(boolean0);
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      
      try { 
        ClassUtils.getClass("$");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Double double0 = new Double((-331.1988));
      assertEquals((-331.1988), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((-331.1988), 2.0292);
      assertEquals((-331.1988), double1, 0.01);
      
      String string0 = ClassUtils.getSimpleName((Object) double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals("Double", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Double.isFinite((-331.1988));
      assertTrue(boolean0);
      
      String string1 = ClassUtils.getName((Object) "Double", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.String", string1);
      assertNotNull(string1);
      
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      Class<Integer> class0 = Integer.class;
      String string2 = ClassUtils.getShortCanonicalName("");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Short short0 = new Short((short) (-1468));
      assertEquals((short) (-1468), (short)short0);
      assertNotNull(short0);
      
      String string3 = ClassUtils.getSimpleName((Object) short0, "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Short", string3);
      assertNotNull(string3);
      
      String string4 = ClassUtils.getAbbreviatedName(class0, 2);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("j.l.Integer", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getPackageName((Object) classUtils0, "Double");
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("org.apache.commons.lang3", string5);
      assertNotNull(string5);
      
      Class<Short> class1 = Short.TYPE;
      assertFalse(class1.isAnnotation());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      String string6 = ClassUtils.getPackageCanonicalName((Object) class1, ".");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("java.lang", string6);
      assertFalse(class1.isAnnotation());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(string6);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string7 = ClassUtils.getCanonicalName(object0);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals("java.lang.Object", string7);
      assertNotNull(string7);
      
      String string8 = ClassUtils.getSimpleName(class1);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertEquals("short", string8);
      assertFalse(class1.isAnnotation());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(string8);
      
      Class<Float> class2 = Float.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class2);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      String string9 = ClassUtils.getCanonicalName((Object) "java.lang", ".");
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertEquals("java.lang.String", string9);
      assertNotNull(string9);
      
      Class<Float> class3 = Float.class;
      boolean boolean1 = ClassUtils.isAssignable(class0, class3, false);
      assertSame(class3, class2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Integer> class4 = Integer.class;
      boolean boolean2 = ClassUtils.isInnerClass(class4);
      assertSame(class4, class0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      List<Class<?>> list1 = ClassUtils.convertClassNamesToClasses((List<String>) null);
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      String string0 = ClassUtils.getPackageName((Object) class1, (String) null);
      assertEquals("java.lang", string0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isArray());
      assertNotNull(string0);
      
      String string1 = ClassUtils.getSimpleName(class0, "java.lang");
      assertFalse(string1.equals((Object)string0));
      assertEquals("String", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[0];
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      Class<Object> class2 = Object.class;
      String string2 = ClassUtils.getCanonicalName(class2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang.Object", string2);
      assertNotNull(string2);
      
      Class<Long> class3 = Long.class;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class3);
      assertNotNull(iterable0);
      
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, classArray0.length);
      assertTrue(boolean0);
      
      String string3 = ClassUtils.getSimpleName((Object) null, "SDgh#*IW{VbC3!.[sFn");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("SDgh#*IW{VbC3!.[sFn", string3);
      assertNotNull(string3);
      
      Class<Boolean> class4 = Boolean.class;
      Class<?> class5 = ClassUtils.primitiveToWrapper(class4);
      assertNotSame(class5, class1);
      assertFalse(class5.equals((Object)class1));
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isAnnotation());
      assertEquals("class java.lang.Boolean", class5.toString());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertEquals(17, class5.getModifiers());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertNotNull(class5);
      
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      assertSame(classArray0, classArray1);
      assertSame(classArray1, classArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      String string4 = ClassUtils.getPackageName((Object) "java.lang.Object", "]");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("java.lang", string4);
      assertNotNull(string4);
      
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class2);
      assertFalse(list0.contains(class1));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Double double0 = new Double((-1191.8));
      assertEquals((-1191.8), (double)double0, 0.01);
      assertNotNull(double0);
      
      String string5 = ClassUtils.getPackageCanonicalName((Object) double0, "");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("java.lang", string5);
      assertNotNull(string5);
      
      ClassUtils.Interfaces[] classUtils_InterfacesArray0 = ClassUtils.Interfaces.values();
      assertEquals(2, classUtils_InterfacesArray0.length);
      assertNotNull(classUtils_InterfacesArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Integer>[] classArray0 = null;
      boolean boolean0 = true;
      boolean boolean1 = ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null, true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char char0 = '-';
      Character character0 = Character.valueOf('-');
      assertEquals('-', (char)character0);
      assertNotNull(character0);
      
      String string0 = ClassUtils.getPackageCanonicalName((Object) character0, "");
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      String string1 = Character.getName(0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("NULL", string1);
      assertNotNull(string1);
      
      Integer integer0 = new Integer(59);
      assertEquals(59, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 0;
      int int1 = Integer.MAX_VALUE;
      try { 
        Integer.parseUnsignedInt("x_u]W?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"x_u]W?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = ClassUtils.getPackageName(",5p.p$5|y'oY5C");
      assertEquals(",5p", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getShortClassName(",5p.p$5|y'oY5C");
      assertFalse(string1.equals((Object)string0));
      assertEquals("p.5|y'oY5C", string1);
      assertNotNull(string1);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtils.getAbbreviatedName(class0, (-1738));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // len must be > 0
         //
         verifyException("org.apache.commons.lang3.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Long> class0 = Long.class;
      String string0 = ClassUtils.getSimpleName(class0);
      assertEquals("Long", string0);
      assertNotNull(string0);
      
      Class<Object> class1 = Object.class;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class1);
      assertNotNull(iterable0);
      
      boolean boolean0 = ClassUtils.isPrimitiveWrapper(class1);
      assertFalse(boolean0);
      
      String string1 = ClassUtils.getName(class1, "Long");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Object", string1);
      assertNotNull(string1);
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtils.primitiveToWrapper(class2);
      assertSame(class2, class1);
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class java.lang.Object", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertNotNull(class3);
      
      Character character0 = Character.valueOf('n');
      assertEquals('n', (char)character0);
      assertNotNull(character0);
      
      String string2 = ClassUtils.getName((Object) character0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang.Character", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.EXCLUDE;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class0, classUtils_Interfaces0);
      assertNotNull(iterable0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      Class<String> class1 = String.class;
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = ClassUtils.getPackageCanonicalName((Object) null, "{;'~.K8E9`#=T");
      assertEquals("{;'~.K8E9`#=T", string0);
      assertNotNull(string0);
      
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Double", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class<ClassUtils> class2 = ClassUtils.class;
      String string1 = ClassUtils.getCanonicalName(class2);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ClassUtils", string1);
      assertNotNull(string1);
      
      Class<ClassUtils> class3 = ClassUtils.class;
      Class<Byte> class4 = Byte.class;
      boolean boolean0 = ClassUtils.isAssignable(class3, class4);
      assertSame(class3, class2);
      assertFalse(boolean0);
      
      String string2 = ClassUtils.getShortClassName(class3);
      assertSame(class3, class2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ClassUtils", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getName((Object) class3, "ClassUtils");
      assertSame(class3, class2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("java.lang.Class", string3);
      assertNotNull(string3);
      
      String string4 = ClassUtils.getShortCanonicalName(class3);
      assertSame(class3, class2);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("ClassUtils", string4);
      assertNotNull(string4);
      
      Class<Integer> class5 = Integer.class;
      Class<?> class6 = ClassUtils.primitiveToWrapper(class5);
      assertNotSame(class6, class1);
      assertFalse(class6.equals((Object)class1));
      assertEquals("class java.lang.Integer", class6.toString());
      assertEquals(17, class6.getModifiers());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isAnnotation());
      assertFalse(class6.isArray());
      assertFalse(class6.isInterface());
      assertFalse(class6.isPrimitive());
      assertNotNull(class6);
      
      Class<ClassUtils> class7 = ClassUtils.class;
      String string5 = ClassUtils.getShortCanonicalName(class7);
      assertSame(class7, class2);
      assertSame(class7, class3);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("ClassUtils", string5);
      assertNotNull(string5);
      
      boolean boolean1 = ClassUtils.isAssignable(class3, class0);
      assertSame(class3, class2);
      assertSame(class3, class7);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<ClassUtils>[] classArray0 = (Class<ClassUtils>[]) Array.newInstance(Class.class, 7);
      classArray0[0] = class2;
      classArray0[1] = class7;
      classArray0[2] = class3;
      classArray0[3] = class7;
      classArray0[4] = class2;
      classArray0[5] = class3;
      classArray0[6] = class7;
      try { 
        ClassUtils.getPublicMethod(class0, "V|", classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtils.getCanonicalName(class0, "F");
      assertEquals("java.lang.String", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getShortClassName((Object) "java.lang.String", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("String", string1);
      assertNotNull(string1);
      
      Class<ClassUtils> class1 = ClassUtils.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<Boolean> class2 = Boolean.class;
      Class<?> class3 = ClassUtils.wrapperToPrimitive(class2);
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals("boolean", class3.toString());
      assertNotNull(class3);
      
      boolean boolean0 = ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null);
      assertTrue(boolean0);
      
      Class<?>[] classArray0 = ClassUtils.primitivesToWrappers((Class<?>[]) null);
      assertNull(classArray0);
      
      String string2 = ClassUtils.getCanonicalName((Object) list0, "");
      assertFalse(list0.contains(class3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.util.ArrayList", string2);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(string2);
      
      String string3 = ClassUtils.getPackageCanonicalName(class1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.apache.commons.lang3", string3);
      assertNotNull(string3);
      
      boolean boolean1 = ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<Boolean> class4 = Boolean.class;
      boolean boolean2 = ClassUtils.isAssignable(class4, class1, true);
      assertSame(class4, class2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class5 = ClassUtils.getClass(classLoader0, "java.lang.String");
      assertNotSame(class5, class3);
      assertFalse(class5.equals((Object)class3));
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertEquals(17, class5.getModifiers());
      assertEquals("class java.lang.String", class5.toString());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isEnum());
      assertNotNull(class5);
      
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.EXCLUDE;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class0, classUtils_Interfaces0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ClassUtils.getName(object0, "");
      assertEquals("java.lang.Object", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "java.lang.Object";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) "java.lang.Object";
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(7, classArray0.length);
      assertNotNull(classArray0);
      
      Class<?> class1 = ClassUtils.getClass("java.lang.Object", false);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      String string1 = ClassUtils.getPackageName((Object) short0, "$VALUES");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName((Object) "MxS~OzqZNqQ{c", "CTJ*fwg+{_bUXbA}3");
      assertEquals("String", string0);
      assertNotNull(string0);
      
      Class<Character> class0 = Character.class;
      String string1 = ClassUtils.getPackageName(class0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang", string1);
      assertNotNull(string1);
      
      String string2 = ClassUtils.getName((Object) "String", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang.String", string2);
      assertNotNull(string2);
      
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      Class<String> class1 = String.class;
      String string3 = ClassUtils.getShortCanonicalName(class1);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("String", string3);
      assertNotNull(string3);
      
      boolean boolean0 = ClassUtils.isAssignable(class0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Short> class0 = Short.class;
      int int0 = 1;
      String string0 = ClassUtils.getAbbreviatedName(class0, 1);
      assertEquals("j.l.Short", string0);
      assertNotNull(string0);
      
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class0);
      assertNotNull(iterable0);
      
      String string1 = ClassUtils.getCanonicalName((Object) iterable0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ClassUtils$$Lambda$49/438151763", string1);
      assertNotNull(string1);
      
      Class<Object> class1 = Object.class;
      String string2 = "";
      String string3 = ClassUtils.getSimpleName(class1, "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Object", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        ClassUtils.Interfaces.valueOf("org.apache.commons.lang3.ClassUtils$$Lambda$40/958106745");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.lang3.ClassUtils.Interfaces.org.apache.commons.lang3.ClassUtils$$Lambda$40/958106745
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertEquals("char", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      String string0 = ClassUtils.getShortCanonicalName(class1);
      assertEquals("char", string0);
      assertEquals("char", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(string0);
      
      Class<Double> class2 = Double.class;
      String string1 = ClassUtils.getCanonicalName(class2);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Double", string1);
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = ClassUtils.getPackageCanonicalName(object0, "java.lang.Double");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getName((Object) class0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("java.lang.Class", string3);
      assertNotNull(string3);
      
      String string4 = ClassUtils.getSimpleName((Object) "java.lang.Class", "java.lang.Double");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("String", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getName(class2);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("java.lang.Double", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName("+o'^L{5(T");
      assertEquals("+o'^L{5(T", string0);
      assertNotNull(string0);
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      Class<Character> class0 = Character.class;
      Class<Object> class1 = Object.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1, false);
      assertTrue(boolean0);
      
      Long long0 = Long.valueOf(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      int int0 = Long.compare(0L, 0L);
      assertEquals(0, int0);
      
      String string1 = ClassUtils.getName((Object) long0, "+o'^L{5(T");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Long", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        ClassUtils.getAbbreviatedName("+o'^L{5(T", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // len must be > 0
         //
         verifyException("org.apache.commons.lang3.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = ClassUtils.isPrimitiveWrapper(class0);
      assertTrue(boolean0);
      
      String string0 = "MGB.Yg:z*H5";
      String string1 = ClassUtils.getPackageCanonicalName("MGB.Yg:z*H5");
      assertFalse(string1.equals((Object)string0));
      assertEquals("MGB", string1);
      assertNotNull(string1);
      
      Class<Integer> class1 = Integer.class;
      Class<?> class2 = ClassUtils.primitiveToWrapper(class1);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Integer", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertNotNull(class2);
      
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class2);
      assertFalse(list0.contains(class2));
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Integer", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus((String) null, true);
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      classLoader0.clearAssertionStatus();
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      try { 
        ClassUtils.getClass(classLoader0, "MGB.Yg:z*H5", true);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Double> class0 = Double.class;
      String string0 = ClassUtils.getPackageName(class0);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getSimpleName((Object) class0, "org.apache.commons.lang3.ClassUtils$1");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Class", string1);
      assertNotNull(string1);
      
      Class<Double> class1 = Double.class;
      String string2 = ClassUtils.getPackageName(class1);
      assertSame(class1, class0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getPackageCanonicalName("java.lang");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("java", string3);
      assertNotNull(string3);
      
      Class<?> class2 = ClassUtils.wrapperToPrimitive(class0);
      assertSame(class0, class1);
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("double", class2.toString());
      assertNotNull(class2);
      
      Class<String> class3 = String.class;
      String string4 = ClassUtils.getCanonicalName(class3, "java.lang");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("java.lang.String", string4);
      assertNotNull(string4);
      
      Class<Integer> class4 = Integer.class;
      String string5 = ClassUtils.getCanonicalName(class4);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("java.lang.Integer", string5);
      assertNotNull(string5);
      
      Class<String> class5 = String.class;
      String string6 = ClassUtils.getPackageName(class5);
      assertSame(class5, class3);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("java.lang", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getSimpleName(class0);
      assertEquals("Object", string0);
      assertNotNull(string0);
      
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertNull(class1);
      
      Class<Float> class2 = Float.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class2);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = ClassUtils.getSimpleName((Object) null, "org.apache.commons.lang3.ClassUtils");
      assertEquals("org.apache.commons.lang3.ClassUtils", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = null;
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, classArray0.length);
      assertNotNull(classArray0);
      
      String string1 = ClassUtils.getShortCanonicalName("className must not be null.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Class<Integer> class0 = Integer.class;
      String string2 = ClassUtils.getShortCanonicalName(class0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Integer", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getShortCanonicalName(class0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Integer", string3);
      assertNotNull(string3);
      
      String string4 = ClassUtils.getName(class0, "className must not be null.");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("java.lang.Integer", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getShortClassName((Object) "Integer", "boolean");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("String", string5);
      assertNotNull(string5);
      
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Class<Object> class1 = Object.class;
      List<Class<?>> list1 = ClassUtils.getAllInterfaces(class1);
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      String string6 = ClassUtils.getShortClassName((Object) "boolean", (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("String", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Long> class0 = Long.class;
      String string0 = ClassUtils.getShortClassName(class0);
      assertEquals("Long", string0);
      assertNotNull(string0);
      
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      Class<Short> class1 = Short.class;
      String string1 = ClassUtils.getName(class1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Short", string1);
      assertNotNull(string1);
      
      String string2 = ClassUtils.getName((Object) "Long", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.lang.String", string2);
      assertNotNull(string2);
      
      Class<Object> class2 = Object.class;
      try { 
        ClassUtils.getPublicMethod(class2, "Icoan;Da#_4E!n", classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, classArray0.length);
      assertNotNull(classArray0);
      
      String string0 = ClassUtils.getPackageName("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertFalse(boolean0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      String string0 = ClassUtils.getSimpleName(class0);
      assertEquals("Integer", string0);
      assertNotNull(string0);
      
      try { 
        ClassUtils.getClass((ClassLoader) null, "Integer", false);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<ClassUtils>[] classArray0 = (Class<ClassUtils>[]) Array.newInstance(Class.class, 4);
      Class<ClassUtils> class0 = ClassUtils.class;
      classArray0[0] = class0;
      Class<ClassUtils> class1 = ClassUtils.class;
      classArray0[1] = class1;
      Class<ClassUtils> class2 = ClassUtils.class;
      classArray0[2] = class2;
      Class<ClassUtils> class3 = ClassUtils.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = ClassUtils.getPackageName((Object) float0, "");
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      Class<Object> class0 = Object.class;
      Class<Double> class1 = Double.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Short> class1 = Short.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1, false);
      assertFalse(boolean0);
      
      Class<Byte> class2 = Byte.class;
      boolean boolean1 = ClassUtils.isInnerClass(class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = ClassUtils.getName((Object) float0, (String) null);
      assertEquals("java.lang.Float", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      String string0 = ClassUtils.getName((Object) class0, "PsAj8'U!");
      assertEquals("java.lang.Class", string0);
      assertNotNull(string0);
      
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class0);
      assertNotNull(iterable0);
      
      Class<Integer> class1 = Integer.class;
      Class<?> class2 = ClassUtils.wrapperToPrimitive(class1);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("int", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertNotNull(class2);
      
      String string1 = ClassUtils.getShortCanonicalName("EXCLUDE");
      assertFalse(string1.equals((Object)string0));
      assertEquals("EXCLUDE", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0, true);
      assertEquals(2, classArray0.length);
      assertTrue(boolean0);
      
      try { 
        ClassUtils.getClass("");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        ClassUtils.getClass((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ClassUtils.getShortCanonicalName(object0, (String) null);
      assertEquals("Object", string0);
      assertNotNull(string0);
      
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class0);
      assertTrue(boolean0);
      
      Long long0 = new Long((-1110L));
      assertEquals((-1110L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong((String) null);
      assertNull(long1);
      
      String string1 = ClassUtils.getCanonicalName((Object) long0, "Object");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Long", string1);
      assertNotNull(string1);
      
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      Class<Long> class1 = Long.class;
      String string2 = ClassUtils.getCanonicalName(class1, "");
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.lang.Long", string2);
      assertNotNull(string2);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      Class<Object> class2 = Object.class;
      classArray0[0] = class2;
      Class<Object> class3 = Object.class;
      classArray0[1] = class3;
      Class<Object> class4 = Object.class;
      classArray0[2] = class4;
      Class<Object> class5 = Object.class;
      classArray0[3] = class5;
      Class<Object> class6 = Object.class;
      classArray0[4] = class6;
      Class<Object> class7 = Object.class;
      classArray0[5] = class7;
      // Undeclared exception!
      try { 
        ClassUtils.getPublicMethod(class0, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = ClassUtils.getPackageCanonicalName("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<String> class0 = String.class;
      boolean boolean0 = false;
      boolean boolean1 = ClassUtils.isAssignable(class0, class0, false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Byte byte0 = new Byte((byte)64);
      assertEquals((byte)64, (byte)byte0);
      assertNotNull(byte0);
      
      long long0 = Byte.toUnsignedLong((byte) (-120));
      assertEquals(136L, long0);
      
      long long1 = Byte.toUnsignedLong((byte)64);
      assertFalse(long1 == long0);
      assertEquals(64L, long1);
      
      int int0 = Byte.compare((byte)64, (byte)0);
      assertEquals(64, int0);
      
      int int1 = Byte.compare((byte)0, (byte)64);
      assertFalse(int1 == int0);
      assertEquals((-64), int1);
      
      String string1 = ClassUtils.getName((Object) byte0, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Byte", string1);
      assertNotNull(string1);
      
      int int2 = Byte.toUnsignedInt((byte)115);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(115, int2);
      
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtils.getAbbreviatedName((Class<?>) class1, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // len must be > 0
         //
         verifyException("org.apache.commons.lang3.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ClassUtils.Interfaces[] classUtils_InterfacesArray0 = ClassUtils.Interfaces.values();
      assertEquals(2, classUtils_InterfacesArray0.length);
      assertNotNull(classUtils_InterfacesArray0);
      
      String string0 = ClassUtils.getSimpleName((Object) class0, (String) null);
      assertEquals("Class", string0);
      assertNotNull(string0);
      
      Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 2);
      Class<Character> class1 = Character.class;
      classArray0[0] = class1;
      Class<Character> class2 = Character.class;
      classArray0[1] = class2;
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
      assertNotNull(classArray1);
      
      String string1 = "R}y=U)zik&,q>XK";
      String string2 = ClassUtils.getPackageCanonicalName("R}y=U)zik&,q>XK");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getAbbreviatedName(class1, 1724);
      assertSame(class1, class2);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("java.lang.Character", string3);
      assertNotNull(string3);
      
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      try { 
        ClassUtils.getClass(classLoader0, "R}y=U)zik&,q>XK", false);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtils.getSimpleName(class0);
      assertEquals("String", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getShortCanonicalName("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Class<Object> class1 = Object.class;
      Class<Object>[] classArray0 = null;
      try { 
        ClassUtils.getPublicMethod(class1, "nZ9p_R.(", (Class<?>[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = ClassUtils.getPackageName("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<ClassUtils>[] classArray0 = (Class<ClassUtils>[]) Array.newInstance(Class.class, 3);
      Class<ClassUtils> class0 = ClassUtils.class;
      classArray0[0] = class0;
      Class<ClassUtils> class1 = ClassUtils.class;
      classArray0[1] = class1;
      Class<ClassUtils> class2 = ClassUtils.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("int", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Integer", class1.toString());
      assertNotNull(class1);
      
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class0);
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      try { 
        ClassUtils.getClass("[]", false);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      Class<Long> class1 = Long.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1);
      assertFalse(boolean0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        ClassUtils.getAbbreviatedName("} iC0S^jeLDH#Fd ", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // len must be > 0
         //
         verifyException("org.apache.commons.lang3.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Double> class0 = Double.class;
      String string0 = ClassUtils.getName(class0, (String) null);
      assertEquals("java.lang.Double", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class org.apache.commons.lang3.ClassUtils", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Character character0 = Character.valueOf('\"');
      assertEquals('\"', (char)character0);
      assertNotNull(character0);
      
      String string0 = ClassUtils.getCanonicalName((Object) character0);
      assertEquals("java.lang.Character", string0);
      assertNotNull(string0);
      
      Class<Double> class0 = Double.class;
      String string1 = ClassUtils.getSimpleName(class0, "java.lang.Character");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Double", string1);
      assertNotNull(string1);
      
      boolean boolean0 = ClassUtils.isPrimitiveWrapper(class0);
      assertTrue(boolean0);
      
      String string2 = ClassUtils.getShortClassName("");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Long> class0 = Long.class;
      String string0 = ClassUtils.getCanonicalName(class0);
      assertEquals("java.lang.Long", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) "java.lang.Long";
      objectArray0[2] = (Object) "java.lang.Long";
      objectArray0[3] = (Object) "java.lang.Long";
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) class0;
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, classArray0.length);
      assertNotNull(classArray0);
      
      String string1 = ClassUtils.getShortCanonicalName(objectArray0[1], "java.lang.Long");
      assertEquals(6, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("String", string1);
      assertNotNull(string1);
      
      String string2 = ClassUtils.getName(objectArray0[3], "java.lang.Long");
      assertEquals(6, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang.String", string2);
      assertNotNull(string2);
      
      boolean boolean0 = false;
      try { 
        ClassUtils.getClass("String", false);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtils.getPackageName("~fK?}2_4<]_P|A~ H");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<Float> class1 = Float.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class1);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean1 = ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class0);
      assertTrue(boolean0);
      
      boolean boolean1 = ClassUtils.isPrimitiveOrWrapper(class0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = ClassUtils.getPackageCanonicalName((Object) float0, "className must not be null.");
      assertEquals("java.lang", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      String string0 = ClassUtils.getShortClassName((Object) character0, "bXS2)E[>\" L^,ucL~Q");
      assertEquals("Character", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Float> class0 = Float.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ClassUtils.getShortCanonicalName((Object) long0, "void");
      assertEquals("Long", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 8);
      Class<Float> class0 = Float.class;
      classArray0[0] = class0;
      Class<Float> class1 = Float.class;
      classArray0[1] = class1;
      Class<Float> class2 = Float.class;
      classArray0[2] = class2;
      Class<Float> class3 = Float.class;
      classArray0[3] = class3;
      Class<Float> class4 = Float.class;
      classArray0[4] = class4;
      Class<Float> class5 = Float.class;
      classArray0[5] = class5;
      Class<Float> class6 = Float.class;
      classArray0[6] = class6;
      Class<Float> class7 = Float.class;
      classArray0[7] = class7;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0);
      assertEquals(8, classArray0.length);
      assertTrue(boolean0);
      
      String string0 = ClassUtils.getPackageCanonicalName("I[EhyRO");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getCanonicalName(class6, "[]");
      assertSame(class6, class1);
      assertSame(class6, class5);
      assertSame(class6, class4);
      assertSame(class6, class2);
      assertSame(class6, class0);
      assertSame(class6, class3);
      assertSame(class6, class7);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Float", string1);
      assertNotNull(string1);
      
      String string2 = ClassUtils.getShortClassName("[]");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("][]", string2);
      assertNotNull(string2);
      
      Double double0 = new Double(1785.2238077);
      assertEquals(1785.2238077, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string3 = ClassUtils.getSimpleName((Object) double0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Double", string3);
      assertNotNull(string3);
      
      String string4 = ClassUtils.getShortCanonicalName("org.apache.commons.lang3.builder.ToStringStyle$NoFieldNameToStringStyle");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("ToStringStyle.NoFieldNameToStringStyle", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String string0 = ClassUtils.getName(class0);
      assertEquals("java.lang.Short", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtils.getShortCanonicalName("java.lang.Short");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Short", string1);
      assertNotNull(string1);
      
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class0, classUtils_Interfaces0);
      assertNotNull(iterable0);
      
      String string2 = ClassUtils.getSimpleName((Object) "Short", "!?IB=tFzk=c%C))3");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("String", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) iterable0;
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, classArray0.length);
      assertNotNull(classArray0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      try { 
        ClassUtils.getClass(classLoader0, "_P(X+~Tf.2]B[j|D<-");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        ClassUtils.getClass("[");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      String string0 = ClassUtils.getCanonicalName(class0);
      assertEquals("org.apache.commons.lang3.ClassUtils", string0);
      assertNotNull(string0);
      
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class0, classUtils_Interfaces0);
      assertNotNull(iterable0);
      
      String string1 = ClassUtils.getAbbreviatedName(class0, 907);
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ClassUtils", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.EXCLUDE;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class0, classUtils_Interfaces0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      String string0 = ClassUtils.getSimpleName(class0, " ");
      assertEquals("ClassUtils", string0);
      assertNotNull(string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = classLoader0.getParent();
      assertSame(classLoader2, classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertNotNull(classLoader2);
      
      try { 
        ClassUtils.getClass(classLoader1, "org.apache.commons.lang3.ClassUtils$2");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String string0 = ClassUtils.getName(class0);
      assertEquals("java.lang.Short", string0);
      assertNotNull(string0);
      
      boolean boolean0 = ClassUtils.isPrimitiveWrapper(class0);
      assertTrue(boolean0);
      
      String string1 = ClassUtils.getName((Object) class0, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Class", string1);
      assertNotNull(string1);
      
      String string2 = ClassUtils.getSimpleName((Object) class0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Class", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "aOT]: moq{}'awhre?";
      try { 
        ClassUtils.getClass("aOT]: moq{}'awhre?");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName("MxS~OzqZNqQ{c");
      assertEquals("MxS~OzqZNqQ{c", string0);
      assertNotNull(string0);
      
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("char", class0.toString());
      assertNotNull(class0);
      
      String string1 = ClassUtils.getPackageName(class0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("char", class0.toString());
      assertNotNull(string1);
      
      String string2 = ClassUtils.PACKAGE_SEPARATOR;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".", string2);
      assertNotNull(string2);
      
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      boolean boolean0 = ClassUtils.isAssignable(class0, class0);
      assertTrue(boolean0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("char", class0.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtils.getShortClassName((Object) class0, "byte");
      assertEquals("Class", string0);
      assertNotNull(string0);
      
      Class<ClassUtils>[] classArray0 = (Class<ClassUtils>[]) Array.newInstance(Class.class, 1);
      Class<ClassUtils> class1 = ClassUtils.class;
      classArray0[0] = class1;
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = ClassUtils.getPackageCanonicalName(object0, "Class");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang", string1);
      assertNotNull(string1);
      
      Class<?>[] classArray2 = ClassUtils.primitivesToWrappers(classArray0);
      assertNotSame(classArray2, classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray2.length);
      assertFalse(classArray2.equals((Object)classArray1));
      assertNotNull(classArray2);
      
      String string2 = ClassUtils.getName(class1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ClassUtils", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getShortClassName("[java.lang.Short");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Short[]", string3);
      assertNotNull(string3);
      
      String string4 = ClassUtils.getSimpleName(class0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Float", string4);
      assertNotNull(string4);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      try { 
        ClassUtils.getClass(classLoader1, "[java$lang$Class[]", false);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = ClassUtils.getCanonicalName((Object) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<Short> class0 = Short.class;
      String string1 = ClassUtils.getName(class0, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.Short", string1);
      assertNotNull(string1);
      
      Character character0 = new Character('=');
      assertEquals('=', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isIdeographic(8);
      assertFalse(boolean0);
      
      String string2 = ClassUtils.getName((Object) character0, "D");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang.Character", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtils.getPackageCanonicalName("java.lang.Short");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("java.lang", string3);
      assertNotNull(string3);
      
      Class<Short> class1 = Short.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class1);
      assertSame(class1, class0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      String string4 = ClassUtils.getCanonicalName(class1);
      assertSame(class1, class0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("java.lang.Short", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getName((Object) "java.lang.Character");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("java.lang.String", string5);
      assertNotNull(string5);
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertFalse(list1.contains("java.lang.Short"));
      assertSame(class1, class0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertNotNull(list1);
      
      List<Class<?>> list2 = ClassUtils.convertClassNamesToClasses(list1);
      assertFalse(list1.contains("java.lang.Short"));
      assertSame(class1, class0);
      assertNotSame(list0, list2);
      assertNotSame(list2, list0);
      assertTrue(list2.equals((Object)list0));
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertFalse(list2.isEmpty());
      assertEquals(2, list2.size());
      assertNotNull(list2);
      
      Class<Object> class2 = Object.class;
      Class<Long> class3 = Long.class;
      boolean boolean1 = ClassUtils.isAssignable(class2, class3, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = ClassUtils.getShortClassName((String) null);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = ClassUtils.getCanonicalName((Object) list1, "M");
      assertFalse(list1.contains(string7));
      assertSame(class1, class0);
      assertNotSame(list0, list2);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertTrue(list0.equals((Object)list2));
      assertEquals("java.util.ArrayList", string7);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertNotNull(string7);
      
      String string8 = ClassUtils.getPackageCanonicalName((String) null);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      assertNotNull(string8);
      
      Class<Double> class4 = Double.class;
      String string9 = ClassUtils.getShortClassName(class4);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertEquals("Double", string9);
      assertNotNull(string9);
      
      Character character1 = new Character('6');
      assertFalse(character1.equals((Object)character0));
      assertEquals('6', (char)character1);
      assertNotNull(character1);
      
      String string10 = ClassUtils.getCanonicalName((Object) character1, (String) null);
      assertFalse(character1.equals((Object)character0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertEquals("java.lang.Character", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertNull(class1);
      
      boolean boolean0 = ClassUtils.isAssignable(class0, class0, false);
      assertTrue(boolean0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class2 = String.class;
      classArray0[0] = class2;
      Class<String> class3 = String.class;
      classArray0[1] = class3;
      Class<String> class4 = String.class;
      classArray0[2] = class4;
      Class<String> class5 = String.class;
      classArray0[3] = class5;
      boolean boolean1 = ClassUtils.isAssignable(classArray0, classArray0, true);
      assertEquals(4, classArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = ClassUtils.getShortCanonicalName("h=p,o4*MrW$U8HZ{");
      assertEquals("h=p,o4*MrW.U8HZ{", string0);
      assertNotNull(string0);
      
      Class<Byte> class6 = Byte.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class6);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Class<Short> class7 = Short.class;
      String string1 = ClassUtils.getShortCanonicalName(class7);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Short", string1);
      assertNotNull(string1);
      
      boolean boolean2 = ClassUtils.isInnerClass(class6);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = ClassUtils.getShortClassName((Object) class2, "\"");
      assertSame(class2, class5);
      assertSame(class2, class4);
      assertSame(class2, class3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Class", string2);
      assertNotNull(string2);
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertFalse(list1.contains("h=p,o4*MrW$U8HZ{"));
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list1);
      
      String string3 = ClassUtils.getSimpleName((Object) class0, "Short");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("Class", string3);
      assertNotNull(string3);
      
      Class<Integer> class8 = Integer.class;
      List<Class<?>> list2 = ClassUtils.getAllSuperclasses(class8);
      assertNotSame(list2, list0);
      assertTrue(list2.equals((Object)list0));
      assertFalse(list2.isEmpty());
      assertEquals(2, list2.size());
      assertNotNull(list2);
      
      String string4 = ClassUtils.getName(class6, "q!+< |S)2R7'b[Skapw");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("java.lang.Byte", string4);
      assertNotNull(string4);
      
      String string5 = ClassUtils.getPackageCanonicalName(class2);
      assertSame(class2, class5);
      assertSame(class2, class4);
      assertSame(class2, class3);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("java.lang", string5);
      assertNotNull(string5);
      
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class2, classUtils_Interfaces0);
      assertSame(class2, class5);
      assertSame(class2, class4);
      assertSame(class2, class3);
      assertNotNull(iterable0);
      
      String string6 = ClassUtils.getPackageName("L");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-124));
      assertEquals((byte) (-124), (byte)byte0);
      assertNotNull(byte0);
      
      long long0 = Byte.toUnsignedLong((byte) (-124));
      assertEquals(132L, long0);
      
      long long1 = Byte.toUnsignedLong((byte) (-124));
      assertTrue(long1 == long0);
      assertEquals(132L, long1);
      
      long long2 = Byte.toUnsignedLong((byte)1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(1L, long2);
      
      long long3 = Byte.toUnsignedLong((byte) (-124));
      assertTrue(long3 == long0);
      assertTrue(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals(132L, long3);
      
      int int0 = Byte.compare((byte) (-124), (byte) (-124));
      assertEquals(0, int0);
      
      String string0 = ClassUtils.getSimpleName((Object) byte0, ">");
      assertEquals("Byte", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Byte";
      objectArray0[1] = (Object) byte0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) ">";
      int int1 = Byte.toUnsignedInt((byte)66);
      assertFalse(int1 == int0);
      assertEquals(66, int1);
      
      objectArray0[4] = (Object) ">";
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, classArray0.length);
      assertNotNull(classArray0);
      
      Class<String> class0 = String.class;
      Class<Boolean> class1 = Boolean.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1);
      assertFalse(boolean0);
      
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      assertNotSame(classArray1, classArray0);
      assertNotSame(classArray0, classArray1);
      assertEquals(5, classArray1.length);
      assertEquals(5, objectArray0.length);
      assertEquals(5, classArray0.length);
      assertFalse(classArray1.equals((Object)classArray0));
      assertNotNull(classArray1);
      
      String string1 = ClassUtils.getPackageCanonicalName(class0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        ClassUtils.Interfaces.valueOf("e]GOyk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.lang3.ClassUtils.Interfaces.e]GOyk
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getAbbreviatedName("", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // len must be > 0
         //
         verifyException("org.apache.commons.lang3.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = ClassUtils.getSimpleName((Object) list0);
      assertEquals("ArrayList", string0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(string0);
      
      List<Class<?>> list1 = ClassUtils.getAllInterfaces(class0);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      String string1 = ClassUtils.getPackageName((Object) class0, "<");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang", string1);
      assertNotNull(string1);
      
      String string2 = ClassUtils.getPackageCanonicalName(class0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("java.lang", string2);
      assertNotNull(string2);
      
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('.', ClassUtils.PACKAGE_SEPARATOR_CHAR);
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
      assertNotNull(classUtils0);
      
      String string3 = ClassUtils.getPackageName((Object) list0, (String) null);
      assertNotSame(list0, list1);
      assertTrue(list0.equals((Object)list1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("java.util", string3);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(string3);
      
      Class<ClassUtils> class1 = ClassUtils.class;
      String string4 = ClassUtils.getPackageCanonicalName(class1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.apache.commons.lang3", string4);
      assertNotNull(string4);
      
      Class<Short> class2 = Short.class;
      String string5 = ClassUtils.getAbbreviatedName(class2, 841);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("java.lang.Short", string5);
      assertNotNull(string5);
      
      Class<Long> class3 = Long.class;
      String string6 = ClassUtils.getShortClassName(class3);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Long", string6);
      assertNotNull(string6);
      
      String string7 = ClassUtils.getAbbreviatedName("B{iQ,u>j8m?G\"1>", 841);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals("B{iQ,u>j8m?G\"1>", string7);
      assertNotNull(string7);
      
      String string8 = ClassUtils.getAbbreviatedName("B{iQ,u>j8m?G\"1>", 64);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertEquals("B{iQ,u>j8m?G\"1>", string8);
      assertNotNull(string8);
      
      String string9 = ClassUtils.getSimpleName((Object) null);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertEquals("", string9);
      assertNotNull(string9);
      
      String string10 = ClassUtils.getSimpleName((Object) "org.apache.commons.lang3");
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertEquals("String", string10);
      assertNotNull(string10);
      
      String string11 = ClassUtils.getAbbreviatedName("java.lang", 281);
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string3));
      assertTrue(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string0));
      assertTrue(string11.equals((Object)string1));
      assertEquals("java.lang", string11);
      assertNotNull(string11);
      
      String string12 = ClassUtils.getCanonicalName((Object) null);
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string8));
      assertEquals("", string12);
      assertNotNull(string12);
      
      String string13 = ClassUtils.getAbbreviatedName(class1, 965);
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string10));
      assertEquals("org.apache.commons.lang3.ClassUtils", string13);
      assertNotNull(string13);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassUtils.Interfaces.values();
      Class<Long> class0 = Long.class;
      ClassUtils.getShortCanonicalName(class0);
      String string0 = ClassUtils.getPackageCanonicalName((Object) "C", "oKT(\"6v");
      assertEquals("java.lang", string0);
      
      Class<Object> class1 = Object.class;
      ClassUtils.primitiveToWrapper(class1);
      ClassUtils.getShortCanonicalName("', is neither of type Map.Entry nor an Array");
      Float float0 = new Float(994.893F);
      Float.max(137.36F, 137.36F);
      String string1 = ClassUtils.getName((Object) float0, "', is neither of type Map.Entry nor an Array");
      assertEquals("java.lang.Float", string1);
      
      Class<ClassUtils>[] classArray0 = (Class<ClassUtils>[]) Array.newInstance(Class.class, 8);
      Class<ClassUtils> class2 = ClassUtils.class;
      classArray0[0] = class2;
      classArray0[1] = class2;
      Class<ClassUtils> class3 = ClassUtils.class;
      classArray0[2] = class3;
      Class<ClassUtils> class4 = ClassUtils.class;
      classArray0[3] = class4;
      classArray0[4] = class2;
      Class<ClassUtils> class5 = ClassUtils.class;
      classArray0[5] = class5;
      Class<ClassUtils> class6 = ClassUtils.class;
      classArray0[6] = class6;
      Class<ClassUtils> class7 = ClassUtils.class;
      classArray0[7] = class7;
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      assertNotNull(classArray1);
      
      String string2 = ClassUtils.getShortCanonicalName((Object) class7, "$[]");
      assertEquals("Class", string2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtils.getAllInterfaces(class0);
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 7);
      Class<Double> class1 = Double.class;
      classArray0[0] = class1;
      Class<Double> class2 = Double.class;
      classArray0[1] = class2;
      Class<Double> class3 = Double.class;
      classArray0[2] = class3;
      Class<Double> class4 = Double.class;
      classArray0[3] = class4;
      Class<Double> class5 = Double.class;
      classArray0[4] = class5;
      Class<Double> class6 = Double.class;
      classArray0[5] = class6;
      Class<Double> class7 = Double.class;
      classArray0[6] = class7;
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      Class<Short> class8 = Short.class;
      ClassUtils.getName(class8);
      Class<Long> class9 = Long.class;
      try { 
        ClassUtils.getPublicMethod(class9, "java.lang.Short", classArray1);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Short> class0 = Short.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      ClassUtils.convertClassesToClassNames(list0);
      String string0 = "D";
      ClassUtils.getPackageCanonicalName((Object) list0, "D");
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      Class<Byte> class1 = Byte.class;
      classArray0[0] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[1] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[2] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[3] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[4] = class5;
      Class<Byte> class6 = Byte.class;
      classArray0[5] = class6;
      ClassUtils.wrappersToPrimitives(classArray0);
      ClassUtils.convertClassesToClassNames(list0);
      ClassUtils.isPrimitiveWrapper(class1);
      try { 
        ClassUtils.getClass("java.util", false);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtils.getName(class0, "{");
      ClassUtils.getSimpleName((Object) "{");
      Class<Double> class1 = Double.class;
      ClassUtils.isPrimitiveOrWrapper(class1);
      ClassUtils.getPackageCanonicalName("java.lang.Long");
      ClassUtils.getCanonicalName(class1);
      ClassUtils.getSimpleName((Object) "java.lang.Double");
      ClassUtils.getPackageName("String");
      ClassUtils.getShortClassName("String");
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class1);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      ClassUtils.isAssignable(classArray0, classArray0, true);
      ClassUtils.getPackageCanonicalName(class0);
      ClassUtils.convertClassesToClassNames(list0);
      Class<?>[] classArray1 = ClassUtils.toClass(classArray0);
      ClassUtils.getSimpleName(class0, "n|cA8Sp=r\"z2e'9v&S");
      ClassUtils.getPackageName("n|cA8Sp=r\"z2e'9v&S");
      Class<Object> class2 = Object.class;
      ClassUtils.getCanonicalName(class2);
      Class<Double> class3 = Double.class;
      ClassUtils.isAssignable(class0, class3);
      ClassUtils.isAssignable(class2, class2);
      ClassUtils.isAssignable(classArray0, classArray1);
      ClassUtils classUtils0 = new ClassUtils();
      ClassUtils.getShortClassName((Object) classUtils0, "");
      // Undeclared exception!
      try { 
        ClassUtils.getPackageCanonicalName("[[s(*#:/B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
