/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 01:55:27 GMT 2019
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.IDKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HashCodeBuilder_ESTest extends HashCodeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short) (-3496));
      assertEquals((-2867), (int)hashCodeBuilder0.build());
      assertEquals((-2867), hashCodeBuilder0.toHashCode());
      assertEquals((-2867), hashCodeBuilder1.toHashCode());
      assertEquals((-2867), (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((short) (-526));
      assertEquals((-106605), hashCodeBuilder0.toHashCode());
      assertEquals((-106605), (int)hashCodeBuilder0.build());
      assertEquals((-106605), hashCodeBuilder1.toHashCode());
      assertEquals((-106605), (int)hashCodeBuilder1.build());
      assertEquals((-106605), hashCodeBuilder2.toHashCode());
      assertEquals((-106605), (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) hashCodeBuilder1;
      objectArray0[1] = (Object) hashCodeBuilder0;
      objectArray0[2] = (Object) hashCodeBuilder0;
      objectArray0[3] = (Object) hashCodeBuilder1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) hashCodeBuilder0;
      objectArray0[6] = (Object) hashCodeBuilder0;
      objectArray0[7] = (Object) hashCodeBuilder0;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(objectArray0);
      assertEquals((-1626408696), hashCodeBuilder0.toHashCode());
      assertEquals((-1626408696), (int)hashCodeBuilder0.build());
      assertEquals((-1626408696), hashCodeBuilder1.toHashCode());
      assertEquals((-1626408696), (int)hashCodeBuilder1.build());
      assertEquals((-1626408696), (int)hashCodeBuilder2.build());
      assertEquals((-1626408696), hashCodeBuilder2.toHashCode());
      assertEquals((-1626408696), hashCodeBuilder3.toHashCode());
      assertEquals((-1626408696), (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertEquals(8, objectArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((byte)16);
      assertEquals((-47579592), (int)hashCodeBuilder0.build());
      assertEquals((-47579592), hashCodeBuilder0.toHashCode());
      assertEquals((-47579592), (int)hashCodeBuilder1.build());
      assertEquals((-47579592), hashCodeBuilder1.toHashCode());
      assertEquals((-47579592), hashCodeBuilder2.toHashCode());
      assertEquals((-47579592), (int)hashCodeBuilder2.build());
      assertEquals((-47579592), hashCodeBuilder3.toHashCode());
      assertEquals((-47579592), (int)hashCodeBuilder3.build());
      assertEquals((-47579592), hashCodeBuilder4.toHashCode());
      assertEquals((-47579592), (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(8, objectArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder1.append((Object) "");
      assertEquals((-1760444901), hashCodeBuilder0.toHashCode());
      assertEquals((-1760444901), (int)hashCodeBuilder0.build());
      assertEquals((-1760444901), (int)hashCodeBuilder1.build());
      assertEquals((-1760444901), hashCodeBuilder1.toHashCode());
      assertEquals((-1760444901), (int)hashCodeBuilder5.build());
      assertEquals((-1760444901), hashCodeBuilder5.toHashCode());
      assertNotNull(hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.appendSuper((short) (-526));
      assertEquals((-711952423), (int)hashCodeBuilder6.build());
      assertEquals((-711952423), hashCodeBuilder6.toHashCode());
      assertEquals((-711952423), (int)hashCodeBuilder0.build());
      assertEquals((-711952423), hashCodeBuilder0.toHashCode());
      assertEquals((-711952423), hashCodeBuilder1.toHashCode());
      assertEquals((-711952423), (int)hashCodeBuilder1.build());
      assertEquals((-711952423), (int)hashCodeBuilder5.build());
      assertEquals((-711952423), hashCodeBuilder5.toHashCode());
      assertNotNull(hashCodeBuilder6);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      
      Set<IDKey> set0 = HashCodeBuilder.getRegistry();
      assertNull(set0);
      
      boolean boolean0 = false;
      Set<IDKey> set1 = HashCodeBuilder.getRegistry();
      assertNull(set1);
      
      HashCodeBuilder hashCodeBuilder7 = hashCodeBuilder5.append(false);
      assertEquals((-572435874), hashCodeBuilder0.toHashCode());
      assertEquals((-572435874), (int)hashCodeBuilder0.build());
      assertEquals((-572435874), hashCodeBuilder1.toHashCode());
      assertEquals((-572435874), (int)hashCodeBuilder1.build());
      assertEquals((-572435874), (int)hashCodeBuilder7.build());
      assertEquals((-572435874), hashCodeBuilder7.toHashCode());
      assertEquals((-572435874), (int)hashCodeBuilder5.build());
      assertEquals((-572435874), hashCodeBuilder5.toHashCode());
      assertNotNull(hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder7, hashCodeBuilder1);
      assertSame(hashCodeBuilder7, hashCodeBuilder4);
      assertSame(hashCodeBuilder7, hashCodeBuilder6);
      assertSame(hashCodeBuilder7, hashCodeBuilder3);
      assertSame(hashCodeBuilder7, hashCodeBuilder0);
      assertSame(hashCodeBuilder7, hashCodeBuilder2);
      assertSame(hashCodeBuilder7, hashCodeBuilder5);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder7);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder8 = hashCodeBuilder5.append((int[]) null);
      assertEquals(294709142, hashCodeBuilder0.toHashCode());
      assertEquals(294709142, (int)hashCodeBuilder0.build());
      assertEquals(294709142, (int)hashCodeBuilder1.build());
      assertEquals(294709142, hashCodeBuilder1.toHashCode());
      assertEquals(294709142, hashCodeBuilder8.toHashCode());
      assertEquals(294709142, (int)hashCodeBuilder8.build());
      assertEquals(294709142, hashCodeBuilder5.toHashCode());
      assertEquals(294709142, (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder8);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder8);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder8);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder8, hashCodeBuilder0);
      assertSame(hashCodeBuilder8, hashCodeBuilder1);
      assertSame(hashCodeBuilder8, hashCodeBuilder6);
      assertSame(hashCodeBuilder8, hashCodeBuilder3);
      assertSame(hashCodeBuilder8, hashCodeBuilder7);
      assertSame(hashCodeBuilder8, hashCodeBuilder2);
      assertSame(hashCodeBuilder8, hashCodeBuilder5);
      assertSame(hashCodeBuilder8, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder7);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder8);
      
      Integer integer0 = new Integer((short) (-3496));
      assertNotNull(integer0);
      assertEquals((-3496), (int)integer0);
      
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      assertEquals((-1), hashCodeBuilder0.toHashCode());
      assertEquals((-1), (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(booleanArray0);
      assertEquals(0, hashCodeBuilder0.toHashCode());
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, (int)hashCodeBuilder1.build());
      assertEquals(0, hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true}, booleanArray0));
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      int int0 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, false);
      assertEquals(0, hashCodeBuilder0.toHashCode());
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(23426, int0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append((Object) null);
      assertEquals(0, hashCodeBuilder0.toHashCode());
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder2.toHashCode());
      assertEquals(0, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) hashCodeBuilder2;
      objectArray0[1] = null;
      objectArray0[2] = (Object) hashCodeBuilder2;
      objectArray0[3] = null;
      objectArray0[4] = (Object) hashCodeBuilder0;
      objectArray0[5] = null;
      objectArray0[6] = (Object) hashCodeBuilder2;
      objectArray0[7] = null;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(objectArray0);
      assertEquals((-4), (int)hashCodeBuilder0.build());
      assertEquals((-4), hashCodeBuilder0.toHashCode());
      assertEquals((-4), hashCodeBuilder3.toHashCode());
      assertEquals((-4), (int)hashCodeBuilder3.build());
      assertEquals((-4), (int)hashCodeBuilder2.build());
      assertEquals((-4), hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(8, objectArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((byte)127);
      assertEquals(131, hashCodeBuilder0.toHashCode());
      assertEquals(131, (int)hashCodeBuilder0.build());
      assertEquals(131, hashCodeBuilder3.toHashCode());
      assertEquals(131, (int)hashCodeBuilder3.build());
      assertEquals(131, (int)hashCodeBuilder4.build());
      assertEquals(131, hashCodeBuilder4.toHashCode());
      assertEquals(131, hashCodeBuilder2.toHashCode());
      assertEquals(131, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(8, objectArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.appendSuper((-1));
      assertEquals((-132), (int)hashCodeBuilder0.build());
      assertEquals((-132), hashCodeBuilder0.toHashCode());
      assertEquals((-132), hashCodeBuilder3.toHashCode());
      assertEquals((-132), (int)hashCodeBuilder3.build());
      assertEquals((-132), hashCodeBuilder4.toHashCode());
      assertEquals((-132), (int)hashCodeBuilder4.build());
      assertEquals((-132), hashCodeBuilder5.toHashCode());
      assertEquals((-132), (int)hashCodeBuilder5.build());
      assertEquals((-132), (int)hashCodeBuilder2.build());
      assertEquals((-132), hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder5);
      assertEquals(8, objectArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append('\'');
      assertEquals(171, (int)hashCodeBuilder0.build());
      assertEquals(171, hashCodeBuilder0.toHashCode());
      assertEquals(171, (int)hashCodeBuilder3.build());
      assertEquals(171, hashCodeBuilder3.toHashCode());
      assertEquals(171, hashCodeBuilder4.toHashCode());
      assertEquals(171, (int)hashCodeBuilder4.build());
      assertEquals(171, hashCodeBuilder5.toHashCode());
      assertEquals(171, (int)hashCodeBuilder5.build());
      assertEquals(171, (int)hashCodeBuilder6.build());
      assertEquals(171, hashCodeBuilder6.toHashCode());
      assertEquals(171, (int)hashCodeBuilder2.build());
      assertEquals(171, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder6);
      assertEquals(8, objectArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(doubleArray0);
      assertEquals((-1074767127), hashCodeBuilder0.toHashCode());
      assertEquals((-1074767127), (int)hashCodeBuilder0.build());
      assertEquals((-1074767127), hashCodeBuilder1.toHashCode());
      assertEquals((-1074767127), (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "c7[;\tYD|G7c)";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1789), (-1));
      assertEquals((-1789), hashCodeBuilder0.toHashCode());
      assertEquals((-1789), (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      float[] floatArray0 = new float[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(floatArray0);
      assertEquals((-1789), hashCodeBuilder0.toHashCode());
      assertEquals((-1789), (int)hashCodeBuilder0.build());
      assertEquals((-1789), hashCodeBuilder1.toHashCode());
      assertEquals((-1789), (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(true);
      assertEquals(1789, (int)hashCodeBuilder0.build());
      assertEquals(1789, hashCodeBuilder0.toHashCode());
      assertEquals(1789, (int)hashCodeBuilder1.build());
      assertEquals(1789, hashCodeBuilder1.toHashCode());
      assertEquals(1789, hashCodeBuilder2.toHashCode());
      assertEquals(1789, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      char[] charArray0 = new char[0];
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(charArray0);
      assertEquals(1789, (int)hashCodeBuilder0.build());
      assertEquals(1789, hashCodeBuilder0.toHashCode());
      assertEquals(1789, (int)hashCodeBuilder1.build());
      assertEquals(1789, hashCodeBuilder1.toHashCode());
      assertEquals(1789, hashCodeBuilder2.toHashCode());
      assertEquals(1789, (int)hashCodeBuilder2.build());
      assertEquals(1789, (int)hashCodeBuilder3.build());
      assertEquals(1789, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(0, floatArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder1.append(booleanArray0);
      assertEquals(1788, (int)hashCodeBuilder0.build());
      assertEquals(1788, hashCodeBuilder0.toHashCode());
      assertEquals(1788, (int)hashCodeBuilder1.build());
      assertEquals(1788, hashCodeBuilder1.toHashCode());
      assertEquals(1788, hashCodeBuilder4.toHashCode());
      assertEquals(1788, (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(0, floatArray0.length);
      assertEquals(8, booleanArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true}, booleanArray0));
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder3.append((Object) null);
      assertEquals((-1788), hashCodeBuilder5.toHashCode());
      assertEquals((-1788), (int)hashCodeBuilder5.build());
      assertEquals((-1788), hashCodeBuilder0.toHashCode());
      assertEquals((-1788), (int)hashCodeBuilder0.build());
      assertEquals((-1788), hashCodeBuilder1.toHashCode());
      assertEquals((-1788), (int)hashCodeBuilder1.build());
      assertEquals((-1788), (int)hashCodeBuilder2.build());
      assertEquals((-1788), hashCodeBuilder2.toHashCode());
      assertEquals((-1788), hashCodeBuilder3.toHashCode());
      assertEquals((-1788), (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder5);
      assertEquals(0, floatArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append((short)0);
      assertEquals(1788, (int)hashCodeBuilder5.build());
      assertEquals(1788, hashCodeBuilder5.toHashCode());
      assertEquals(1788, (int)hashCodeBuilder0.build());
      assertEquals(1788, hashCodeBuilder0.toHashCode());
      assertEquals(1788, (int)hashCodeBuilder6.build());
      assertEquals(1788, hashCodeBuilder6.toHashCode());
      assertEquals(1788, (int)hashCodeBuilder1.build());
      assertEquals(1788, hashCodeBuilder1.toHashCode());
      assertEquals(1788, hashCodeBuilder2.toHashCode());
      assertEquals(1788, (int)hashCodeBuilder2.build());
      assertEquals(1788, (int)hashCodeBuilder3.build());
      assertEquals(1788, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder6);
      assertEquals(0, floatArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder7 = hashCodeBuilder6.append((long) (-1789));
      assertEquals(0, hashCodeBuilder5.toHashCode());
      assertEquals(0, (int)hashCodeBuilder5.build());
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder0.toHashCode());
      assertEquals(0, hashCodeBuilder6.toHashCode());
      assertEquals(0, (int)hashCodeBuilder6.build());
      assertEquals(0, (int)hashCodeBuilder7.build());
      assertEquals(0, hashCodeBuilder7.toHashCode());
      assertEquals(0, hashCodeBuilder1.toHashCode());
      assertEquals(0, (int)hashCodeBuilder1.build());
      assertEquals(0, hashCodeBuilder2.toHashCode());
      assertEquals(0, (int)hashCodeBuilder2.build());
      assertEquals(0, (int)hashCodeBuilder3.build());
      assertEquals(0, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder7);
      assertEquals(0, floatArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder7);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder7);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder7, hashCodeBuilder2);
      assertSame(hashCodeBuilder7, hashCodeBuilder0);
      assertSame(hashCodeBuilder7, hashCodeBuilder3);
      assertSame(hashCodeBuilder7, hashCodeBuilder6);
      assertSame(hashCodeBuilder7, hashCodeBuilder5);
      assertSame(hashCodeBuilder7, hashCodeBuilder1);
      assertSame(hashCodeBuilder7, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder7);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder7);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((int) (short)0, 1358, (Object) hashCodeBuilder3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*/Q+t\"<h[9up`%5,";
      int int0 = HashCodeBuilder.reflectionHashCode((-137), (-137), "*/Q+t\"<h[9up`%5,", false, (Class<? super String>) class0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-490410249), int0);
      
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((Object[]) stringArray0);
      assertEquals(636, hashCodeBuilder0.toHashCode());
      assertEquals(636, (int)hashCodeBuilder0.build());
      assertEquals(636, (int)hashCodeBuilder1.build());
      assertEquals(636, hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertEquals(1, stringArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(1L);
      assertEquals(23533, (int)hashCodeBuilder0.build());
      assertEquals(23533, hashCodeBuilder0.toHashCode());
      assertEquals(23533, hashCodeBuilder1.toHashCode());
      assertEquals(23533, (int)hashCodeBuilder1.build());
      assertEquals(23533, (int)hashCodeBuilder2.build());
      assertEquals(23533, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertEquals(1, stringArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      Integer integer0 = hashCodeBuilder2.build();
      assertEquals(23533, (int)hashCodeBuilder0.build());
      assertEquals(23533, hashCodeBuilder0.toHashCode());
      assertEquals(23533, hashCodeBuilder1.toHashCode());
      assertEquals(23533, (int)hashCodeBuilder1.build());
      assertEquals(23533, (int)hashCodeBuilder2.build());
      assertEquals(23533, hashCodeBuilder2.toHashCode());
      assertNotNull(integer0);
      assertEquals(1, stringArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(23533, (int)integer0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)43;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(byteArray0);
      assertEquals(1565468429, hashCodeBuilder0.toHashCode());
      assertEquals(1565468429, (int)hashCodeBuilder0.build());
      assertEquals(1565468429, hashCodeBuilder1.toHashCode());
      assertEquals(1565468429, (int)hashCodeBuilder1.build());
      assertEquals(1565468429, (int)hashCodeBuilder2.build());
      assertEquals(1565468429, hashCodeBuilder2.toHashCode());
      assertEquals(1565468429, hashCodeBuilder3.toHashCode());
      assertEquals(1565468429, (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertEquals(1, stringArray0.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-107), (byte) (-43), (byte)1, (byte) (-75), (byte)43}, byteArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-490410249);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder1.append(doubleArray0);
      assertEquals(1160634354, hashCodeBuilder4.toHashCode());
      assertEquals(1160634354, (int)hashCodeBuilder4.build());
      assertEquals(1160634354, hashCodeBuilder0.toHashCode());
      assertEquals(1160634354, (int)hashCodeBuilder0.build());
      assertEquals(1160634354, hashCodeBuilder1.toHashCode());
      assertEquals(1160634354, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, stringArray0.length);
      assertArrayEquals(new double[] {(-4.90410249E8)}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder0.append(booleanArray0);
      assertEquals((-1104458586), hashCodeBuilder0.toHashCode());
      assertEquals((-1104458586), (int)hashCodeBuilder0.build());
      assertEquals((-1104458586), hashCodeBuilder5.toHashCode());
      assertEquals((-1104458586), (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((-1), 2779, (Object) "");
      assertEquals((-2775), int0);
      
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(759, (-1));
      assertEquals(759, hashCodeBuilder0.toHashCode());
      assertEquals(759, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-1332.9F));
      assertEquals((-995714602), (int)hashCodeBuilder0.build());
      assertEquals((-995714602), hashCodeBuilder0.toHashCode());
      assertEquals((-995714602), (int)hashCodeBuilder1.build());
      assertEquals((-995714602), hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append(true);
      assertEquals(995714602, (int)hashCodeBuilder0.build());
      assertEquals(995714602, hashCodeBuilder0.toHashCode());
      assertEquals(995714602, hashCodeBuilder2.toHashCode());
      assertEquals(995714602, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((long) (-2775));
      assertEquals((-995711828), (int)hashCodeBuilder0.build());
      assertEquals((-995711828), hashCodeBuilder0.toHashCode());
      assertEquals((-995711828), hashCodeBuilder2.toHashCode());
      assertEquals((-995711828), (int)hashCodeBuilder2.build());
      assertEquals((-995711828), (int)hashCodeBuilder3.build());
      assertEquals((-995711828), hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedList0.contains(""));
      assertFalse(linkedHashSet0.contains(""));
      
      int int1 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, (Collection<String>) linkedHashSet0);
      assertEquals((-995711828), (int)hashCodeBuilder0.build());
      assertEquals((-995711828), hashCodeBuilder0.toHashCode());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(int1 == int0);
      assertEquals(23692, int1);
      assertFalse(linkedList0.contains(""));
      assertFalse(linkedHashSet0.contains(""));
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((byte)0);
      assertEquals(995711828, hashCodeBuilder0.toHashCode());
      assertEquals(995711828, (int)hashCodeBuilder0.build());
      assertEquals(995711828, (int)hashCodeBuilder2.build());
      assertEquals(995711828, hashCodeBuilder2.toHashCode());
      assertEquals(995711828, hashCodeBuilder3.toHashCode());
      assertEquals(995711828, (int)hashCodeBuilder3.build());
      assertEquals(995711828, (int)hashCodeBuilder4.build());
      assertEquals(995711828, hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((-708));
      assertEquals((-995712536), hashCodeBuilder0.toHashCode());
      assertEquals((-995712536), (int)hashCodeBuilder0.build());
      assertEquals((-995712536), (int)hashCodeBuilder2.build());
      assertEquals((-995712536), hashCodeBuilder2.toHashCode());
      assertEquals((-995712536), (int)hashCodeBuilder3.build());
      assertEquals((-995712536), hashCodeBuilder3.toHashCode());
      assertEquals((-995712536), (int)hashCodeBuilder4.build());
      assertEquals((-995712536), hashCodeBuilder4.toHashCode());
      assertEquals((-995712536), hashCodeBuilder5.toHashCode());
      assertEquals((-995712536), (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append(0.0);
      assertEquals(995712536, hashCodeBuilder0.toHashCode());
      assertEquals(995712536, (int)hashCodeBuilder0.build());
      assertEquals(995712536, hashCodeBuilder2.toHashCode());
      assertEquals(995712536, (int)hashCodeBuilder2.build());
      assertEquals(995712536, (int)hashCodeBuilder3.build());
      assertEquals(995712536, hashCodeBuilder3.toHashCode());
      assertEquals(995712536, hashCodeBuilder4.toHashCode());
      assertEquals(995712536, (int)hashCodeBuilder4.build());
      assertEquals(995712536, hashCodeBuilder5.toHashCode());
      assertEquals(995712536, (int)hashCodeBuilder5.build());
      assertEquals(995712536, (int)hashCodeBuilder6.build());
      assertEquals(995712536, hashCodeBuilder6.toHashCode());
      assertNotNull(hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder7 = hashCodeBuilder6.append((double) (-708));
      assertEquals((-2060664344), (int)hashCodeBuilder0.build());
      assertEquals((-2060664344), hashCodeBuilder0.toHashCode());
      assertEquals((-2060664344), (int)hashCodeBuilder2.build());
      assertEquals((-2060664344), hashCodeBuilder2.toHashCode());
      assertEquals((-2060664344), (int)hashCodeBuilder3.build());
      assertEquals((-2060664344), hashCodeBuilder3.toHashCode());
      assertEquals((-2060664344), (int)hashCodeBuilder4.build());
      assertEquals((-2060664344), hashCodeBuilder4.toHashCode());
      assertEquals((-2060664344), (int)hashCodeBuilder5.build());
      assertEquals((-2060664344), hashCodeBuilder5.toHashCode());
      assertEquals((-2060664344), hashCodeBuilder6.toHashCode());
      assertEquals((-2060664344), (int)hashCodeBuilder6.build());
      assertEquals((-2060664344), (int)hashCodeBuilder7.build());
      assertEquals((-2060664344), hashCodeBuilder7.toHashCode());
      assertNotNull(hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder7);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder7);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder7);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder7, hashCodeBuilder5);
      assertSame(hashCodeBuilder7, hashCodeBuilder6);
      assertSame(hashCodeBuilder7, hashCodeBuilder2);
      assertSame(hashCodeBuilder7, hashCodeBuilder1);
      assertSame(hashCodeBuilder7, hashCodeBuilder0);
      assertSame(hashCodeBuilder7, hashCodeBuilder3);
      assertSame(hashCodeBuilder7, hashCodeBuilder4);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      int int2 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, stringArray0);
      assertEquals((-2060664344), (int)hashCodeBuilder0.build());
      assertEquals((-2060664344), hashCodeBuilder0.toHashCode());
      assertEquals(2, stringArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(23958, int2);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      
      HashCodeBuilder hashCodeBuilder8 = hashCodeBuilder6.append(true);
      assertEquals(2060664344, (int)hashCodeBuilder8.build());
      assertEquals(2060664344, hashCodeBuilder8.toHashCode());
      assertEquals(2060664344, hashCodeBuilder0.toHashCode());
      assertEquals(2060664344, (int)hashCodeBuilder0.build());
      assertEquals(2060664344, hashCodeBuilder2.toHashCode());
      assertEquals(2060664344, (int)hashCodeBuilder2.build());
      assertEquals(2060664344, hashCodeBuilder3.toHashCode());
      assertEquals(2060664344, (int)hashCodeBuilder3.build());
      assertEquals(2060664344, hashCodeBuilder4.toHashCode());
      assertEquals(2060664344, (int)hashCodeBuilder4.build());
      assertEquals(2060664344, (int)hashCodeBuilder5.build());
      assertEquals(2060664344, hashCodeBuilder5.toHashCode());
      assertEquals(2060664344, (int)hashCodeBuilder6.build());
      assertEquals(2060664344, hashCodeBuilder6.toHashCode());
      assertNotNull(hashCodeBuilder8);
      assertSame(hashCodeBuilder8, hashCodeBuilder4);
      assertSame(hashCodeBuilder8, hashCodeBuilder0);
      assertSame(hashCodeBuilder8, hashCodeBuilder7);
      assertSame(hashCodeBuilder8, hashCodeBuilder2);
      assertSame(hashCodeBuilder8, hashCodeBuilder6);
      assertSame(hashCodeBuilder8, hashCodeBuilder3);
      assertSame(hashCodeBuilder8, hashCodeBuilder1);
      assertSame(hashCodeBuilder8, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder8);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder8);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder7);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder8);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder8);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder8);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder7);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder7);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder8);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) hashCodeBuilder1;
      objectArray0[1] = (Object) hashCodeBuilder1;
      objectArray0[2] = (Object) hashCodeBuilder0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) linkedList0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) linkedList0;
      HashCodeBuilder hashCodeBuilder9 = hashCodeBuilder6.append(objectArray0);
      assertEquals(2060664358, hashCodeBuilder0.toHashCode());
      assertEquals(2060664358, (int)hashCodeBuilder0.build());
      assertEquals(2060664358, hashCodeBuilder2.toHashCode());
      assertEquals(2060664358, (int)hashCodeBuilder2.build());
      assertEquals(2060664358, hashCodeBuilder3.toHashCode());
      assertEquals(2060664358, (int)hashCodeBuilder3.build());
      assertEquals(2060664358, (int)hashCodeBuilder4.build());
      assertEquals(2060664358, hashCodeBuilder4.toHashCode());
      assertEquals(2060664358, (int)hashCodeBuilder5.build());
      assertEquals(2060664358, hashCodeBuilder5.toHashCode());
      assertEquals(2060664358, (int)hashCodeBuilder6.build());
      assertEquals(2060664358, hashCodeBuilder6.toHashCode());
      assertEquals(2060664358, hashCodeBuilder9.toHashCode());
      assertEquals(2060664358, (int)hashCodeBuilder9.build());
      assertNotNull(hashCodeBuilder9);
      assertEquals(8, objectArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder8);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder9);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder8);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder9);
      assertSame(hashCodeBuilder2, hashCodeBuilder7);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder9);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder8);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder9);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder8);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder8);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder7);
      assertSame(hashCodeBuilder5, hashCodeBuilder9);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder9);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder7);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder8);
      assertSame(hashCodeBuilder9, hashCodeBuilder3);
      assertSame(hashCodeBuilder9, hashCodeBuilder8);
      assertSame(hashCodeBuilder9, hashCodeBuilder6);
      assertSame(hashCodeBuilder9, hashCodeBuilder5);
      assertSame(hashCodeBuilder9, hashCodeBuilder4);
      assertSame(hashCodeBuilder9, hashCodeBuilder2);
      assertSame(hashCodeBuilder9, hashCodeBuilder1);
      assertSame(hashCodeBuilder9, hashCodeBuilder0);
      assertSame(hashCodeBuilder9, hashCodeBuilder7);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append('M');
      assertEquals(706, hashCodeBuilder0.toHashCode());
      assertEquals(706, (int)hashCodeBuilder0.build());
      assertEquals(706, (int)hashCodeBuilder1.build());
      assertEquals(706, hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((char[]) null);
      assertEquals(26122, (int)hashCodeBuilder0.build());
      assertEquals(26122, hashCodeBuilder0.toHashCode());
      assertEquals(26122, (int)hashCodeBuilder1.build());
      assertEquals(26122, hashCodeBuilder1.toHashCode());
      assertEquals(26122, (int)hashCodeBuilder2.build());
      assertEquals(26122, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder0.appendSuper((-594));
      assertEquals(965920, (int)hashCodeBuilder0.build());
      assertEquals(965920, hashCodeBuilder0.toHashCode());
      assertEquals(965920, hashCodeBuilder3.toHashCode());
      assertEquals(965920, (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder2.append((short)0);
      assertEquals(35739040, (int)hashCodeBuilder0.build());
      assertEquals(35739040, hashCodeBuilder0.toHashCode());
      assertEquals(35739040, hashCodeBuilder1.toHashCode());
      assertEquals(35739040, (int)hashCodeBuilder1.build());
      assertEquals(35739040, hashCodeBuilder2.toHashCode());
      assertEquals(35739040, (int)hashCodeBuilder2.build());
      assertEquals(35739040, hashCodeBuilder4.toHashCode());
      assertEquals(35739040, (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append('7');
      assertEquals(1322344535, (int)hashCodeBuilder0.build());
      assertEquals(1322344535, hashCodeBuilder0.toHashCode());
      assertEquals(1322344535, hashCodeBuilder1.toHashCode());
      assertEquals(1322344535, (int)hashCodeBuilder1.build());
      assertEquals(1322344535, (int)hashCodeBuilder2.build());
      assertEquals(1322344535, hashCodeBuilder2.toHashCode());
      assertEquals(1322344535, (int)hashCodeBuilder4.build());
      assertEquals(1322344535, hashCodeBuilder4.toHashCode());
      assertEquals(1322344535, hashCodeBuilder5.toHashCode());
      assertEquals(1322344535, (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder0.append('M');
      assertEquals(1682107616, hashCodeBuilder0.toHashCode());
      assertEquals(1682107616, (int)hashCodeBuilder0.build());
      assertEquals(1682107616, (int)hashCodeBuilder6.build());
      assertEquals(1682107616, hashCodeBuilder6.toHashCode());
      assertNotNull(hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      HashCodeBuilder hashCodeBuilder7 = hashCodeBuilder6.append(shortArray0);
      assertEquals((-1825571872), hashCodeBuilder0.toHashCode());
      assertEquals((-1825571872), (int)hashCodeBuilder0.build());
      assertEquals((-1825571872), hashCodeBuilder6.toHashCode());
      assertEquals((-1825571872), (int)hashCodeBuilder6.build());
      assertEquals((-1825571872), hashCodeBuilder7.toHashCode());
      assertEquals((-1825571872), (int)hashCodeBuilder7.build());
      assertNotNull(hashCodeBuilder7);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder7);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder7, hashCodeBuilder6);
      assertSame(hashCodeBuilder7, hashCodeBuilder2);
      assertSame(hashCodeBuilder7, hashCodeBuilder1);
      assertSame(hashCodeBuilder7, hashCodeBuilder5);
      assertSame(hashCodeBuilder7, hashCodeBuilder0);
      assertSame(hashCodeBuilder7, hashCodeBuilder4);
      assertSame(hashCodeBuilder7, hashCodeBuilder3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, (Collection<String>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "$}k*A", (Collection<String>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals((-891158948), int0);
      assertFalse(linkedHashSet0.contains("$}k*A"));
      
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-891158948);
      longArray0[1] = (long) (-891158948);
      longArray0[2] = 1706L;
      longArray0[3] = (long) (-891158948);
      longArray0[4] = (long) (-891158948);
      longArray0[5] = (long) (-891158948);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(longArray0);
      assertEquals(514964490, (int)hashCodeBuilder0.build());
      assertEquals(514964490, hashCodeBuilder0.toHashCode());
      assertEquals(514964490, hashCodeBuilder1.toHashCode());
      assertEquals(514964490, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-891158948L), (-891158948L), 1706L, (-891158948L), (-891158948L), (-891158948L)}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(byteArray0);
      assertEquals(1873816948, hashCodeBuilder0.toHashCode());
      assertEquals(1873816948, (int)hashCodeBuilder0.build());
      assertEquals(1873816948, (int)hashCodeBuilder1.build());
      assertEquals(1873816948, hashCodeBuilder1.toHashCode());
      assertEquals(1873816948, hashCodeBuilder2.toHashCode());
      assertEquals(1873816948, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertEquals(6, longArray0.length);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new long[] {(-891158948L), (-891158948L), 1706L, (-891158948L), (-891158948L), (-891158948L)}, longArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append('o');
      assertEquals(611750451, (int)hashCodeBuilder0.build());
      assertEquals(611750451, hashCodeBuilder0.toHashCode());
      assertEquals(611750451, hashCodeBuilder1.toHashCode());
      assertEquals(611750451, (int)hashCodeBuilder1.build());
      assertEquals(611750451, (int)hashCodeBuilder2.build());
      assertEquals(611750451, hashCodeBuilder2.toHashCode());
      assertEquals(611750451, (int)hashCodeBuilder3.build());
      assertEquals(611750451, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(6, longArray0.length);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new long[] {(-891158948L), (-891158948L), 1706L, (-891158948L), (-891158948L), (-891158948L)}, longArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-1.0F));
      assertEquals((-1082129803), (int)hashCodeBuilder0.build());
      assertEquals((-1082129803), hashCodeBuilder0.toHashCode());
      assertEquals((-1082129803), hashCodeBuilder1.toHashCode());
      assertEquals((-1082129803), (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) hashCodeBuilder0;
      objectArray0[1] = (Object) hashCodeBuilder1;
      objectArray0[2] = (Object) hashCodeBuilder1;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append(1);
      assertEquals((-1384097046), (int)hashCodeBuilder0.build());
      assertEquals((-1384097046), hashCodeBuilder0.toHashCode());
      assertEquals((-1384097046), hashCodeBuilder2.toHashCode());
      assertEquals((-1384097046), (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      
      objectArray0[3] = (Object) hashCodeBuilder0;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder1.append(objectArray0);
      assertEquals(2104054182, (int)hashCodeBuilder0.build());
      assertEquals(2104054182, hashCodeBuilder0.toHashCode());
      assertEquals(2104054182, (int)hashCodeBuilder1.build());
      assertEquals(2104054182, hashCodeBuilder1.toHashCode());
      assertEquals(2104054182, hashCodeBuilder3.toHashCode());
      assertEquals(2104054182, (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertEquals(4, objectArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(intArray0);
      assertEquals(540593406, hashCodeBuilder0.toHashCode());
      assertEquals(540593406, (int)hashCodeBuilder0.build());
      assertEquals(540593406, hashCodeBuilder1.toHashCode());
      assertEquals(540593406, (int)hashCodeBuilder1.build());
      assertEquals(540593406, (int)hashCodeBuilder3.build());
      assertEquals(540593406, hashCodeBuilder3.toHashCode());
      assertEquals(540593406, (int)hashCodeBuilder4.build());
      assertEquals(540593406, hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder4);
      assertEquals(4, objectArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      
      short[] shortArray0 = new short[1];
      Class<Object> class0 = Object.class;
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(1, 0, (IDKey) null, true, (Class<? super IDKey>) class0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = HashCodeBuilder.reflectionHashCode(Integer.MAX_VALUE, Integer.MAX_VALUE, object0, true);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      assertEquals((-1), hashCodeBuilder0.toHashCode());
      assertEquals((-1), (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)941;
      shortArray0[1] = (short) (-840);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(shortArray0);
      assertEquals((-1782), (int)hashCodeBuilder0.build());
      assertEquals((-1782), hashCodeBuilder0.toHashCode());
      assertEquals((-1782), (int)hashCodeBuilder1.build());
      assertEquals((-1782), hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)941, (short) (-840)}, shortArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      char[] charArray0 = new char[0];
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(charArray0);
      assertEquals((-1782), (int)hashCodeBuilder0.build());
      assertEquals((-1782), hashCodeBuilder0.toHashCode());
      assertEquals((-1782), (int)hashCodeBuilder1.build());
      assertEquals((-1782), hashCodeBuilder1.toHashCode());
      assertEquals((-1782), hashCodeBuilder2.toHashCode());
      assertEquals((-1782), (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertEquals(2, shortArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new short[] {(short)941, (short) (-840)}, shortArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append('5');
      assertEquals(1835, (int)hashCodeBuilder0.build());
      assertEquals(1835, hashCodeBuilder0.toHashCode());
      assertEquals(1835, (int)hashCodeBuilder1.build());
      assertEquals(1835, hashCodeBuilder1.toHashCode());
      assertEquals(1835, (int)hashCodeBuilder2.build());
      assertEquals(1835, hashCodeBuilder2.toHashCode());
      assertEquals(1835, (int)hashCodeBuilder3.build());
      assertEquals(1835, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(2, shortArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new short[] {(short)941, (short) (-840)}, shortArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(0L);
      assertEquals((-1835), (int)hashCodeBuilder0.build());
      assertEquals((-1835), hashCodeBuilder0.toHashCode());
      assertEquals((-1835), (int)hashCodeBuilder1.build());
      assertEquals((-1835), hashCodeBuilder1.toHashCode());
      assertEquals((-1835), hashCodeBuilder2.toHashCode());
      assertEquals((-1835), (int)hashCodeBuilder2.build());
      assertEquals((-1835), hashCodeBuilder3.toHashCode());
      assertEquals((-1835), (int)hashCodeBuilder3.build());
      assertEquals((-1835), (int)hashCodeBuilder4.build());
      assertEquals((-1835), hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder4);
      assertEquals(2, shortArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new short[] {(short)941, (short) (-840)}, shortArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(shortArray0);
      assertEquals((-3616), (int)hashCodeBuilder0.build());
      assertEquals((-3616), hashCodeBuilder0.toHashCode());
      assertEquals((-3616), hashCodeBuilder1.toHashCode());
      assertEquals((-3616), (int)hashCodeBuilder1.build());
      assertEquals((-3616), (int)hashCodeBuilder2.build());
      assertEquals((-3616), hashCodeBuilder2.toHashCode());
      assertEquals((-3616), hashCodeBuilder3.toHashCode());
      assertEquals((-3616), (int)hashCodeBuilder3.build());
      assertEquals((-3616), (int)hashCodeBuilder4.build());
      assertEquals((-3616), hashCodeBuilder4.toHashCode());
      assertEquals((-3616), hashCodeBuilder5.toHashCode());
      assertEquals((-3616), (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertEquals(2, shortArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new short[] {(short)941, (short) (-840)}, shortArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder4.appendSuper(0);
      assertEquals(3616, hashCodeBuilder0.toHashCode());
      assertEquals(3616, (int)hashCodeBuilder0.build());
      assertEquals(3616, hashCodeBuilder1.toHashCode());
      assertEquals(3616, (int)hashCodeBuilder1.build());
      assertEquals(3616, hashCodeBuilder2.toHashCode());
      assertEquals(3616, (int)hashCodeBuilder2.build());
      assertEquals(3616, (int)hashCodeBuilder3.build());
      assertEquals(3616, hashCodeBuilder3.toHashCode());
      assertEquals(3616, (int)hashCodeBuilder4.build());
      assertEquals(3616, hashCodeBuilder4.toHashCode());
      assertEquals(3616, hashCodeBuilder6.toHashCode());
      assertEquals(3616, (int)hashCodeBuilder6.build());
      assertNotNull(hashCodeBuilder6);
      assertEquals(2, shortArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new short[] {(short)941, (short) (-840)}, shortArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      
      int int0 = hashCodeBuilder6.toHashCode();
      assertEquals(3616, hashCodeBuilder0.toHashCode());
      assertEquals(3616, (int)hashCodeBuilder0.build());
      assertEquals(3616, hashCodeBuilder1.toHashCode());
      assertEquals(3616, (int)hashCodeBuilder1.build());
      assertEquals(3616, hashCodeBuilder2.toHashCode());
      assertEquals(3616, (int)hashCodeBuilder2.build());
      assertEquals(3616, (int)hashCodeBuilder3.build());
      assertEquals(3616, hashCodeBuilder3.toHashCode());
      assertEquals(3616, (int)hashCodeBuilder4.build());
      assertEquals(3616, hashCodeBuilder4.toHashCode());
      assertEquals(3616, hashCodeBuilder6.toHashCode());
      assertEquals(3616, (int)hashCodeBuilder6.build());
      assertEquals(2, shortArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(3616, int0);
      assertArrayEquals(new short[] {(short)941, (short) (-840)}, shortArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      
      HashCodeBuilder hashCodeBuilder7 = hashCodeBuilder2.append((float) (-1));
      assertEquals((-1082134048), (int)hashCodeBuilder0.build());
      assertEquals((-1082134048), hashCodeBuilder0.toHashCode());
      assertEquals((-1082134048), hashCodeBuilder1.toHashCode());
      assertEquals((-1082134048), (int)hashCodeBuilder1.build());
      assertEquals((-1082134048), (int)hashCodeBuilder2.build());
      assertEquals((-1082134048), hashCodeBuilder2.toHashCode());
      assertEquals((-1082134048), hashCodeBuilder7.toHashCode());
      assertEquals((-1082134048), (int)hashCodeBuilder7.build());
      assertNotNull(hashCodeBuilder7);
      assertEquals(2, shortArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new short[] {(short)941, (short) (-840)}, shortArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder7);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder7, hashCodeBuilder1);
      assertSame(hashCodeBuilder7, hashCodeBuilder4);
      assertSame(hashCodeBuilder7, hashCodeBuilder5);
      assertSame(hashCodeBuilder7, hashCodeBuilder6);
      assertSame(hashCodeBuilder7, hashCodeBuilder3);
      assertSame(hashCodeBuilder7, hashCodeBuilder0);
      assertSame(hashCodeBuilder7, hashCodeBuilder2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      int int1 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder1, (Collection<String>) linkedHashSet0);
      assertEquals((-1082134048), (int)hashCodeBuilder0.build());
      assertEquals((-1082134048), hashCodeBuilder0.toHashCode());
      assertEquals((-1082134048), hashCodeBuilder1.toHashCode());
      assertEquals((-1082134048), (int)hashCodeBuilder1.build());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(2, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(23426, int1);
      assertArrayEquals(new short[] {(short)941, (short) (-840)}, shortArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      
      int int2 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder2, (Collection<String>) linkedHashSet0);
      assertEquals((-1082134048), (int)hashCodeBuilder0.build());
      assertEquals((-1082134048), hashCodeBuilder0.toHashCode());
      assertEquals((-1082134048), hashCodeBuilder1.toHashCode());
      assertEquals((-1082134048), (int)hashCodeBuilder1.build());
      assertEquals((-1082134048), (int)hashCodeBuilder2.build());
      assertEquals((-1082134048), hashCodeBuilder2.toHashCode());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(2, shortArray0.length);
      assertEquals(0, charArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(23692, int2);
      assertArrayEquals(new short[] {(short)941, (short) (-840)}, shortArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder7);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(0L);
      assertEquals(629, (int)hashCodeBuilder0.build());
      assertEquals(629, hashCodeBuilder0.toHashCode());
      assertEquals(629, hashCodeBuilder1.toHashCode());
      assertEquals(629, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-612);
      intArray0[1] = 32;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(intArray0);
      assertEquals(838489, hashCodeBuilder0.toHashCode());
      assertEquals(838489, (int)hashCodeBuilder0.build());
      assertEquals(838489, (int)hashCodeBuilder1.build());
      assertEquals(838489, hashCodeBuilder1.toHashCode());
      assertEquals(838489, (int)hashCodeBuilder2.build());
      assertEquals(838489, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-612), 32}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (-612);
      floatArray0[3] = (float) (-612);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(floatArray0);
      assertEquals((-29735223), hashCodeBuilder0.toHashCode());
      assertEquals((-29735223), (int)hashCodeBuilder0.build());
      assertEquals((-29735223), (int)hashCodeBuilder1.build());
      assertEquals((-29735223), hashCodeBuilder1.toHashCode());
      assertEquals((-29735223), (int)hashCodeBuilder2.build());
      assertEquals((-29735223), hashCodeBuilder2.toHashCode());
      assertEquals((-29735223), hashCodeBuilder3.toHashCode());
      assertEquals((-29735223), (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertEquals(2, intArray0.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new int[] {(-612), 32}, intArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-612.0F), (-612.0F)}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append('N');
      assertEquals((-1100203173), hashCodeBuilder0.toHashCode());
      assertEquals((-1100203173), (int)hashCodeBuilder0.build());
      assertEquals((-1100203173), (int)hashCodeBuilder1.build());
      assertEquals((-1100203173), hashCodeBuilder1.toHashCode());
      assertEquals((-1100203173), hashCodeBuilder2.toHashCode());
      assertEquals((-1100203173), (int)hashCodeBuilder2.build());
      assertEquals((-1100203173), hashCodeBuilder3.toHashCode());
      assertEquals((-1100203173), (int)hashCodeBuilder3.build());
      assertEquals((-1100203173), hashCodeBuilder4.toHashCode());
      assertEquals((-1100203173), (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(2, intArray0.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new int[] {(-612), 32}, intArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-612.0F), (-612.0F)}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-612);
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(longArray0);
      assertEquals((-2052811126), hashCodeBuilder0.toHashCode());
      assertEquals((-2052811126), (int)hashCodeBuilder0.build());
      assertEquals((-2052811126), (int)hashCodeBuilder1.build());
      assertEquals((-2052811126), hashCodeBuilder1.toHashCode());
      assertEquals((-2052811126), (int)hashCodeBuilder2.build());
      assertEquals((-2052811126), hashCodeBuilder2.toHashCode());
      assertEquals((-2052811126), hashCodeBuilder3.toHashCode());
      assertEquals((-2052811126), (int)hashCodeBuilder3.build());
      assertEquals((-2052811126), hashCodeBuilder4.toHashCode());
      assertEquals((-2052811126), (int)hashCodeBuilder4.build());
      assertEquals((-2052811126), hashCodeBuilder5.toHashCode());
      assertEquals((-2052811126), (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertEquals(2, intArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new int[] {(-612), 32}, intArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-612.0F), (-612.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new long[] {(-612L)}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append(0.0F);
      assertEquals(1355399666, (int)hashCodeBuilder6.build());
      assertEquals(1355399666, hashCodeBuilder6.toHashCode());
      assertEquals(1355399666, (int)hashCodeBuilder0.build());
      assertEquals(1355399666, hashCodeBuilder0.toHashCode());
      assertEquals(1355399666, hashCodeBuilder1.toHashCode());
      assertEquals(1355399666, (int)hashCodeBuilder1.build());
      assertEquals(1355399666, hashCodeBuilder2.toHashCode());
      assertEquals(1355399666, (int)hashCodeBuilder2.build());
      assertEquals(1355399666, hashCodeBuilder3.toHashCode());
      assertEquals(1355399666, (int)hashCodeBuilder3.build());
      assertEquals(1355399666, (int)hashCodeBuilder4.build());
      assertEquals(1355399666, hashCodeBuilder4.toHashCode());
      assertEquals(1355399666, (int)hashCodeBuilder5.build());
      assertEquals(1355399666, hashCodeBuilder5.toHashCode());
      assertNotNull(hashCodeBuilder6);
      assertEquals(2, intArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new int[] {(-612), 32}, intArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-612.0F), (-612.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new long[] {(-612L)}, longArray0);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(37, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = HashCodeBuilder.isRegistered(object0);
      assertFalse(boolean0);
      
      Object object1 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, (Collection<String>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((-1377), (-2627), (Object) "org.apache.commons.lang3.builder.HashCodeBuilder");
      assertEquals(813502937, int0);
      
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append('<');
      assertEquals(689, (int)hashCodeBuilder0.build());
      assertEquals(689, hashCodeBuilder0.toHashCode());
      assertEquals(689, hashCodeBuilder1.toHashCode());
      assertEquals(689, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((-1.0F));
      assertEquals((-1082104939), hashCodeBuilder0.toHashCode());
      assertEquals((-1082104939), (int)hashCodeBuilder0.build());
      assertEquals((-1082104939), (int)hashCodeBuilder1.build());
      assertEquals((-1082104939), hashCodeBuilder1.toHashCode());
      assertEquals((-1082104939), (int)hashCodeBuilder2.build());
      assertEquals((-1082104939), hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2627);
      intArray0[1] = 813502937;
      intArray0[2] = 813502937;
      intArray0[3] = (-1);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(intArray0);
      assertEquals((-1371286981), (int)hashCodeBuilder0.build());
      assertEquals((-1371286981), hashCodeBuilder0.toHashCode());
      assertEquals((-1371286981), (int)hashCodeBuilder1.build());
      assertEquals((-1371286981), hashCodeBuilder1.toHashCode());
      assertEquals((-1371286981), (int)hashCodeBuilder2.build());
      assertEquals((-1371286981), hashCodeBuilder2.toHashCode());
      assertEquals((-1371286981), (int)hashCodeBuilder3.build());
      assertEquals((-1371286981), hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-2627), 813502937, 813502937, (-1)}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.appendSuper((-1377));
      assertEquals(801987878, (int)hashCodeBuilder0.build());
      assertEquals(801987878, hashCodeBuilder0.toHashCode());
      assertEquals(801987878, hashCodeBuilder1.toHashCode());
      assertEquals(801987878, (int)hashCodeBuilder1.build());
      assertEquals(801987878, hashCodeBuilder2.toHashCode());
      assertEquals(801987878, (int)hashCodeBuilder2.build());
      assertEquals(801987878, (int)hashCodeBuilder3.build());
      assertEquals(801987878, hashCodeBuilder3.toHashCode());
      assertEquals(801987878, (int)hashCodeBuilder4.build());
      assertEquals(801987878, hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder4);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-2627), 813502937, 813502937, (-1)}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((byte) (-18));
      assertEquals((-391219604), hashCodeBuilder0.toHashCode());
      assertEquals((-391219604), (int)hashCodeBuilder0.build());
      assertEquals((-391219604), (int)hashCodeBuilder1.build());
      assertEquals((-391219604), hashCodeBuilder1.toHashCode());
      assertEquals((-391219604), hashCodeBuilder2.toHashCode());
      assertEquals((-391219604), (int)hashCodeBuilder2.build());
      assertEquals((-391219604), hashCodeBuilder3.toHashCode());
      assertEquals((-391219604), (int)hashCodeBuilder3.build());
      assertEquals((-391219604), (int)hashCodeBuilder4.build());
      assertEquals((-391219604), hashCodeBuilder4.toHashCode());
      assertEquals((-391219604), (int)hashCodeBuilder5.build());
      assertEquals((-391219604), hashCodeBuilder5.toHashCode());
      assertNotNull(hashCodeBuilder5);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-2627), 813502937, 813502937, (-1)}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      
      int int1 = hashCodeBuilder5.toHashCode();
      assertEquals((-391219604), hashCodeBuilder0.toHashCode());
      assertEquals((-391219604), (int)hashCodeBuilder0.build());
      assertEquals((-391219604), (int)hashCodeBuilder1.build());
      assertEquals((-391219604), hashCodeBuilder1.toHashCode());
      assertEquals((-391219604), hashCodeBuilder2.toHashCode());
      assertEquals((-391219604), (int)hashCodeBuilder2.build());
      assertEquals((-391219604), hashCodeBuilder3.toHashCode());
      assertEquals((-391219604), (int)hashCodeBuilder3.build());
      assertEquals((-391219604), (int)hashCodeBuilder4.build());
      assertEquals((-391219604), hashCodeBuilder4.toHashCode());
      assertEquals((-391219604), (int)hashCodeBuilder5.build());
      assertEquals((-391219604), hashCodeBuilder5.toHashCode());
      assertEquals(4, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-391219604), int1);
      assertArrayEquals(new int[] {(-2627), 813502937, 813502937, (-1)}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-215), (-215));
      assertEquals((-215), (int)hashCodeBuilder0.build());
      assertEquals((-215), hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((byte)0);
      assertEquals(46225, (int)hashCodeBuilder0.build());
      assertEquals(46225, hashCodeBuilder0.toHashCode());
      assertEquals(46225, (int)hashCodeBuilder1.build());
      assertEquals(46225, hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((-1272));
      assertEquals((-9939647), (int)hashCodeBuilder0.build());
      assertEquals((-9939647), hashCodeBuilder0.toHashCode());
      assertEquals((-9939647), (int)hashCodeBuilder1.build());
      assertEquals((-9939647), hashCodeBuilder1.toHashCode());
      assertEquals((-9939647), hashCodeBuilder2.toHashCode());
      assertEquals((-9939647), (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      float[] floatArray0 = new float[0];
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(floatArray0);
      assertEquals((-9939647), (int)hashCodeBuilder0.build());
      assertEquals((-9939647), hashCodeBuilder0.toHashCode());
      assertEquals((-9939647), (int)hashCodeBuilder1.build());
      assertEquals((-9939647), hashCodeBuilder1.toHashCode());
      assertEquals((-9939647), hashCodeBuilder2.toHashCode());
      assertEquals((-9939647), (int)hashCodeBuilder2.build());
      assertEquals((-9939647), (int)hashCodeBuilder3.build());
      assertEquals((-9939647), hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((boolean[]) null);
      assertEquals(2137024105, (int)hashCodeBuilder0.build());
      assertEquals(2137024105, hashCodeBuilder0.toHashCode());
      assertEquals(2137024105, (int)hashCodeBuilder1.build());
      assertEquals(2137024105, hashCodeBuilder1.toHashCode());
      assertEquals(2137024105, hashCodeBuilder2.toHashCode());
      assertEquals(2137024105, (int)hashCodeBuilder2.build());
      assertEquals(2137024105, (int)hashCodeBuilder3.build());
      assertEquals(2137024105, hashCodeBuilder3.toHashCode());
      assertEquals(2137024105, (int)hashCodeBuilder4.build());
      assertEquals(2137024105, hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder4);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(false);
      assertEquals(101318098, (int)hashCodeBuilder0.build());
      assertEquals(101318098, hashCodeBuilder0.toHashCode());
      assertEquals(101318098, (int)hashCodeBuilder1.build());
      assertEquals(101318098, hashCodeBuilder1.toHashCode());
      assertEquals(101318098, (int)hashCodeBuilder2.build());
      assertEquals(101318098, hashCodeBuilder2.toHashCode());
      assertEquals(101318098, (int)hashCodeBuilder3.build());
      assertEquals(101318098, hashCodeBuilder3.toHashCode());
      assertEquals(101318098, (int)hashCodeBuilder4.build());
      assertEquals(101318098, hashCodeBuilder4.toHashCode());
      assertEquals(101318098, hashCodeBuilder5.toHashCode());
      assertEquals(101318098, (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (-215);
      longArray0[3] = (long) (-215);
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append(longArray0);
      assertEquals(1883412782, (int)hashCodeBuilder0.build());
      assertEquals(1883412782, hashCodeBuilder0.toHashCode());
      assertEquals(1883412782, (int)hashCodeBuilder1.build());
      assertEquals(1883412782, hashCodeBuilder1.toHashCode());
      assertEquals(1883412782, hashCodeBuilder2.toHashCode());
      assertEquals(1883412782, (int)hashCodeBuilder2.build());
      assertEquals(1883412782, hashCodeBuilder3.toHashCode());
      assertEquals(1883412782, (int)hashCodeBuilder3.build());
      assertEquals(1883412782, hashCodeBuilder4.toHashCode());
      assertEquals(1883412782, (int)hashCodeBuilder4.build());
      assertEquals(1883412782, hashCodeBuilder5.toHashCode());
      assertEquals(1883412782, (int)hashCodeBuilder5.build());
      assertEquals(1883412782, hashCodeBuilder6.toHashCode());
      assertEquals(1883412782, (int)hashCodeBuilder6.build());
      assertNotNull(hashCodeBuilder6);
      assertEquals(0, floatArray0.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new long[] {0L, 0L, (-215L), (-215L)}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: ";
      stringArray0[1] = ", Length: ";
      stringArray0[2] = "*ENd\"/.7u{<e B%]e";
      stringArray0[3] = ", Length: ";
      stringArray0[4] = ", Length: ";
      int int0 = HashCodeBuilder.reflectionHashCode((Object) ", Length: ", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1190840254), int0);
      
      HashCodeBuilder hashCodeBuilder7 = hashCodeBuilder1.append((int) (byte)0);
      assertEquals((-1206822306), hashCodeBuilder0.toHashCode());
      assertEquals((-1206822306), (int)hashCodeBuilder0.build());
      assertEquals((-1206822306), hashCodeBuilder1.toHashCode());
      assertEquals((-1206822306), (int)hashCodeBuilder1.build());
      assertEquals((-1206822306), (int)hashCodeBuilder7.build());
      assertEquals((-1206822306), hashCodeBuilder7.toHashCode());
      assertNotNull(hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder7, hashCodeBuilder5);
      assertSame(hashCodeBuilder7, hashCodeBuilder6);
      assertSame(hashCodeBuilder7, hashCodeBuilder0);
      assertSame(hashCodeBuilder7, hashCodeBuilder3);
      assertSame(hashCodeBuilder7, hashCodeBuilder2);
      assertSame(hashCodeBuilder7, hashCodeBuilder4);
      assertSame(hashCodeBuilder7, hashCodeBuilder1);
      
      Integer integer0 = hashCodeBuilder4.build();
      assertEquals((-1206822306), hashCodeBuilder0.toHashCode());
      assertEquals((-1206822306), (int)hashCodeBuilder0.build());
      assertEquals((-1206822306), hashCodeBuilder1.toHashCode());
      assertEquals((-1206822306), (int)hashCodeBuilder1.build());
      assertEquals((-1206822306), (int)hashCodeBuilder2.build());
      assertEquals((-1206822306), hashCodeBuilder2.toHashCode());
      assertEquals((-1206822306), (int)hashCodeBuilder3.build());
      assertEquals((-1206822306), hashCodeBuilder3.toHashCode());
      assertEquals((-1206822306), hashCodeBuilder4.toHashCode());
      assertEquals((-1206822306), (int)hashCodeBuilder4.build());
      assertNotNull(integer0);
      assertEquals(0, floatArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-1206822306), (int)integer0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder7);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder7);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder7);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      HashCodeBuilder hashCodeBuilder8 = hashCodeBuilder3.append(byteArray0);
      assertEquals((-96884530), hashCodeBuilder0.toHashCode());
      assertEquals((-96884530), (int)hashCodeBuilder0.build());
      assertEquals((-96884530), hashCodeBuilder1.toHashCode());
      assertEquals((-96884530), (int)hashCodeBuilder1.build());
      assertEquals((-96884530), (int)hashCodeBuilder2.build());
      assertEquals((-96884530), hashCodeBuilder2.toHashCode());
      assertEquals((-96884530), (int)hashCodeBuilder3.build());
      assertEquals((-96884530), hashCodeBuilder3.toHashCode());
      assertEquals((-96884530), (int)hashCodeBuilder8.build());
      assertEquals((-96884530), hashCodeBuilder8.toHashCode());
      assertNotNull(hashCodeBuilder8);
      assertEquals(0, floatArray0.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder8);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder8);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder8);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder7);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder8);
      assertSame(hashCodeBuilder3, hashCodeBuilder7);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder8, hashCodeBuilder7);
      assertSame(hashCodeBuilder8, hashCodeBuilder0);
      assertSame(hashCodeBuilder8, hashCodeBuilder6);
      assertSame(hashCodeBuilder8, hashCodeBuilder1);
      assertSame(hashCodeBuilder8, hashCodeBuilder4);
      assertSame(hashCodeBuilder8, hashCodeBuilder2);
      assertSame(hashCodeBuilder8, hashCodeBuilder5);
      assertSame(hashCodeBuilder8, hashCodeBuilder3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      assertEquals((-1), (int)hashCodeBuilder0.build());
      assertEquals((-1), hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(floatArray0);
      assertEquals((-1), (int)hashCodeBuilder0.build());
      assertEquals((-1), hashCodeBuilder0.toHashCode());
      assertEquals((-1), (int)hashCodeBuilder1.build());
      assertEquals((-1), hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((int[]) null);
      assertEquals(1, (int)hashCodeBuilder0.build());
      assertEquals(1, hashCodeBuilder0.toHashCode());
      assertEquals(1, (int)hashCodeBuilder1.build());
      assertEquals(1, hashCodeBuilder1.toHashCode());
      assertEquals(1, hashCodeBuilder2.toHashCode());
      assertEquals(1, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append('$');
      assertEquals(35, (int)hashCodeBuilder0.build());
      assertEquals(35, hashCodeBuilder0.toHashCode());
      assertEquals(35, (int)hashCodeBuilder1.build());
      assertEquals(35, hashCodeBuilder1.toHashCode());
      assertEquals(35, hashCodeBuilder2.toHashCode());
      assertEquals(35, (int)hashCodeBuilder2.build());
      assertEquals(35, (int)hashCodeBuilder3.build());
      assertEquals(35, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((-1L));
      assertEquals((-35), hashCodeBuilder0.toHashCode());
      assertEquals((-35), (int)hashCodeBuilder0.build());
      assertEquals((-35), (int)hashCodeBuilder1.build());
      assertEquals((-35), hashCodeBuilder1.toHashCode());
      assertEquals((-35), (int)hashCodeBuilder2.build());
      assertEquals((-35), hashCodeBuilder2.toHashCode());
      assertEquals((-35), (int)hashCodeBuilder3.build());
      assertEquals((-35), hashCodeBuilder3.toHashCode());
      assertEquals((-35), hashCodeBuilder4.toHashCode());
      assertEquals((-35), (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((short)0);
      assertEquals(35, (int)hashCodeBuilder0.build());
      assertEquals(35, hashCodeBuilder0.toHashCode());
      assertEquals(35, (int)hashCodeBuilder1.build());
      assertEquals(35, hashCodeBuilder1.toHashCode());
      assertEquals(35, hashCodeBuilder2.toHashCode());
      assertEquals(35, (int)hashCodeBuilder2.build());
      assertEquals(35, (int)hashCodeBuilder3.build());
      assertEquals(35, hashCodeBuilder3.toHashCode());
      assertEquals(35, (int)hashCodeBuilder4.build());
      assertEquals(35, hashCodeBuilder4.toHashCode());
      assertEquals(35, hashCodeBuilder5.toHashCode());
      assertEquals(35, (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper((-913));
      assertEquals((-284), (int)hashCodeBuilder0.build());
      assertEquals((-284), hashCodeBuilder0.toHashCode());
      assertEquals((-284), hashCodeBuilder1.toHashCode());
      assertEquals((-284), (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-913);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append((Object) "Jxr._9*+K");
      assertEquals((-10506), hashCodeBuilder0.toHashCode());
      assertEquals((-10506), (int)hashCodeBuilder0.build());
      assertEquals((-10506), (int)hashCodeBuilder2.build());
      assertEquals((-10506), hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      intArray0[2] = (-913);
      intArray0[3] = (-913);
      intArray0[4] = (-913);
      intArray0[5] = (-913);
      intArray0[6] = (-913);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder1.append(intArray0);
      assertEquals((-866716829), hashCodeBuilder0.toHashCode());
      assertEquals((-866716829), (int)hashCodeBuilder0.build());
      assertEquals((-866716829), hashCodeBuilder1.toHashCode());
      assertEquals((-866716829), (int)hashCodeBuilder1.build());
      assertEquals((-866716829), (int)hashCodeBuilder3.build());
      assertEquals((-866716829), hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-913), (-913), (-913), (-913), (-913), (-913), (-913)}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      double[] doubleArray0 = new double[0];
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(doubleArray0);
      assertEquals((-866716829), hashCodeBuilder0.toHashCode());
      assertEquals((-866716829), (int)hashCodeBuilder0.build());
      assertEquals((-866716829), hashCodeBuilder1.toHashCode());
      assertEquals((-866716829), (int)hashCodeBuilder1.build());
      assertEquals((-866716829), (int)hashCodeBuilder3.build());
      assertEquals((-866716829), hashCodeBuilder3.toHashCode());
      assertEquals((-866716829), hashCodeBuilder4.toHashCode());
      assertEquals((-866716829), (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(7, intArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new int[] {(-913), (-913), (-913), (-913), (-913), (-913), (-913)}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((boolean[]) null);
      assertEquals((-2003751601), hashCodeBuilder0.toHashCode());
      assertEquals((-2003751601), (int)hashCodeBuilder0.build());
      assertEquals((-2003751601), hashCodeBuilder1.toHashCode());
      assertEquals((-2003751601), (int)hashCodeBuilder1.build());
      assertEquals((-2003751601), hashCodeBuilder3.toHashCode());
      assertEquals((-2003751601), (int)hashCodeBuilder3.build());
      assertEquals((-2003751601), hashCodeBuilder4.toHashCode());
      assertEquals((-2003751601), (int)hashCodeBuilder4.build());
      assertEquals((-2003751601), hashCodeBuilder5.toHashCode());
      assertEquals((-2003751601), (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertEquals(7, intArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new int[] {(-913), (-913), (-913), (-913), (-913), (-913), (-913)}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append((float[]) null);
      assertEquals((-1124365205), hashCodeBuilder0.toHashCode());
      assertEquals((-1124365205), (int)hashCodeBuilder0.build());
      assertEquals((-1124365205), (int)hashCodeBuilder1.build());
      assertEquals((-1124365205), hashCodeBuilder1.toHashCode());
      assertEquals((-1124365205), hashCodeBuilder3.toHashCode());
      assertEquals((-1124365205), (int)hashCodeBuilder3.build());
      assertEquals((-1124365205), (int)hashCodeBuilder4.build());
      assertEquals((-1124365205), hashCodeBuilder4.toHashCode());
      assertEquals((-1124365205), (int)hashCodeBuilder5.build());
      assertEquals((-1124365205), hashCodeBuilder5.toHashCode());
      assertEquals((-1124365205), (int)hashCodeBuilder6.build());
      assertEquals((-1124365205), hashCodeBuilder6.toHashCode());
      assertNotNull(hashCodeBuilder6);
      assertEquals(7, intArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new int[] {(-913), (-913), (-913), (-913), (-913), (-913), (-913)}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder7 = hashCodeBuilder6.append(intArray0);
      assertEquals((-267498668), hashCodeBuilder7.toHashCode());
      assertEquals((-267498668), (int)hashCodeBuilder7.build());
      assertEquals((-267498668), hashCodeBuilder0.toHashCode());
      assertEquals((-267498668), (int)hashCodeBuilder0.build());
      assertEquals((-267498668), (int)hashCodeBuilder1.build());
      assertEquals((-267498668), hashCodeBuilder1.toHashCode());
      assertEquals((-267498668), hashCodeBuilder3.toHashCode());
      assertEquals((-267498668), (int)hashCodeBuilder3.build());
      assertEquals((-267498668), (int)hashCodeBuilder4.build());
      assertEquals((-267498668), hashCodeBuilder4.toHashCode());
      assertEquals((-267498668), hashCodeBuilder5.toHashCode());
      assertEquals((-267498668), (int)hashCodeBuilder5.build());
      assertEquals((-267498668), (int)hashCodeBuilder6.build());
      assertEquals((-267498668), hashCodeBuilder6.toHashCode());
      assertNotNull(hashCodeBuilder7);
      assertEquals(7, intArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new int[] {(-913), (-913), (-913), (-913), (-913), (-913), (-913)}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder7, hashCodeBuilder3);
      assertSame(hashCodeBuilder7, hashCodeBuilder6);
      assertSame(hashCodeBuilder7, hashCodeBuilder1);
      assertSame(hashCodeBuilder7, hashCodeBuilder0);
      assertSame(hashCodeBuilder7, hashCodeBuilder5);
      assertSame(hashCodeBuilder7, hashCodeBuilder4);
      assertSame(hashCodeBuilder7, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder7);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder7);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder7);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder8 = hashCodeBuilder4.append('-');
      assertEquals((-1307516079), (int)hashCodeBuilder0.build());
      assertEquals((-1307516079), hashCodeBuilder0.toHashCode());
      assertEquals((-1307516079), hashCodeBuilder8.toHashCode());
      assertEquals((-1307516079), (int)hashCodeBuilder8.build());
      assertEquals((-1307516079), (int)hashCodeBuilder1.build());
      assertEquals((-1307516079), hashCodeBuilder1.toHashCode());
      assertEquals((-1307516079), (int)hashCodeBuilder3.build());
      assertEquals((-1307516079), hashCodeBuilder3.toHashCode());
      assertEquals((-1307516079), (int)hashCodeBuilder4.build());
      assertEquals((-1307516079), hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder8);
      assertEquals(7, intArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new int[] {(-913), (-913), (-913), (-913), (-913), (-913), (-913)}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder8);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder8, hashCodeBuilder1);
      assertSame(hashCodeBuilder8, hashCodeBuilder5);
      assertSame(hashCodeBuilder8, hashCodeBuilder3);
      assertSame(hashCodeBuilder8, hashCodeBuilder0);
      assertSame(hashCodeBuilder8, hashCodeBuilder6);
      assertSame(hashCodeBuilder8, hashCodeBuilder7);
      assertSame(hashCodeBuilder8, hashCodeBuilder4);
      assertSame(hashCodeBuilder8, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder8);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder7);
      assertSame(hashCodeBuilder3, hashCodeBuilder8);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder8);
      assertSame(hashCodeBuilder4, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder9 = hashCodeBuilder5.append(true);
      assertEquals((-1133454667), hashCodeBuilder0.toHashCode());
      assertEquals((-1133454667), (int)hashCodeBuilder0.build());
      assertEquals((-1133454667), (int)hashCodeBuilder1.build());
      assertEquals((-1133454667), hashCodeBuilder1.toHashCode());
      assertEquals((-1133454667), hashCodeBuilder9.toHashCode());
      assertEquals((-1133454667), (int)hashCodeBuilder9.build());
      assertEquals((-1133454667), hashCodeBuilder3.toHashCode());
      assertEquals((-1133454667), (int)hashCodeBuilder3.build());
      assertEquals((-1133454667), (int)hashCodeBuilder4.build());
      assertEquals((-1133454667), hashCodeBuilder4.toHashCode());
      assertEquals((-1133454667), hashCodeBuilder5.toHashCode());
      assertEquals((-1133454667), (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder9);
      assertEquals(7, intArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new int[] {(-913), (-913), (-913), (-913), (-913), (-913), (-913)}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder9);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder8);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder9);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder8);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder9, hashCodeBuilder4);
      assertSame(hashCodeBuilder9, hashCodeBuilder7);
      assertSame(hashCodeBuilder9, hashCodeBuilder6);
      assertSame(hashCodeBuilder9, hashCodeBuilder0);
      assertSame(hashCodeBuilder9, hashCodeBuilder1);
      assertSame(hashCodeBuilder9, hashCodeBuilder3);
      assertSame(hashCodeBuilder9, hashCodeBuilder8);
      assertSame(hashCodeBuilder9, hashCodeBuilder5);
      assertSame(hashCodeBuilder9, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder7);
      assertSame(hashCodeBuilder3, hashCodeBuilder8);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder9);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder8);
      assertSame(hashCodeBuilder4, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder9);
      assertSame(hashCodeBuilder5, hashCodeBuilder8);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder9);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder7);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      
      HashCodeBuilder hashCodeBuilder10 = hashCodeBuilder7.append((-913));
      assertEquals(1011849368, (int)hashCodeBuilder7.build());
      assertEquals(1011849368, hashCodeBuilder7.toHashCode());
      assertEquals(1011849368, (int)hashCodeBuilder0.build());
      assertEquals(1011849368, hashCodeBuilder0.toHashCode());
      assertEquals(1011849368, (int)hashCodeBuilder1.build());
      assertEquals(1011849368, hashCodeBuilder1.toHashCode());
      assertEquals(1011849368, (int)hashCodeBuilder10.build());
      assertEquals(1011849368, hashCodeBuilder10.toHashCode());
      assertEquals(1011849368, (int)hashCodeBuilder3.build());
      assertEquals(1011849368, hashCodeBuilder3.toHashCode());
      assertEquals(1011849368, (int)hashCodeBuilder4.build());
      assertEquals(1011849368, hashCodeBuilder4.toHashCode());
      assertEquals(1011849368, (int)hashCodeBuilder5.build());
      assertEquals(1011849368, hashCodeBuilder5.toHashCode());
      assertEquals(1011849368, hashCodeBuilder6.toHashCode());
      assertEquals(1011849368, (int)hashCodeBuilder6.build());
      assertNotNull(hashCodeBuilder10);
      assertEquals(7, intArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new int[] {(-913), (-913), (-913), (-913), (-913), (-913), (-913)}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder7, hashCodeBuilder3);
      assertSame(hashCodeBuilder7, hashCodeBuilder6);
      assertSame(hashCodeBuilder7, hashCodeBuilder1);
      assertSame(hashCodeBuilder7, hashCodeBuilder0);
      assertSame(hashCodeBuilder7, hashCodeBuilder8);
      assertSame(hashCodeBuilder7, hashCodeBuilder10);
      assertSame(hashCodeBuilder7, hashCodeBuilder5);
      assertSame(hashCodeBuilder7, hashCodeBuilder4);
      assertSame(hashCodeBuilder7, hashCodeBuilder9);
      assertSame(hashCodeBuilder7, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder10);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder9);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder8);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder9);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder10);
      assertSame(hashCodeBuilder1, hashCodeBuilder8);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder10, hashCodeBuilder0);
      assertSame(hashCodeBuilder10, hashCodeBuilder3);
      assertSame(hashCodeBuilder10, hashCodeBuilder9);
      assertSame(hashCodeBuilder10, hashCodeBuilder2);
      assertSame(hashCodeBuilder10, hashCodeBuilder8);
      assertSame(hashCodeBuilder10, hashCodeBuilder7);
      assertSame(hashCodeBuilder10, hashCodeBuilder4);
      assertSame(hashCodeBuilder10, hashCodeBuilder5);
      assertSame(hashCodeBuilder10, hashCodeBuilder6);
      assertSame(hashCodeBuilder10, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder7);
      assertSame(hashCodeBuilder3, hashCodeBuilder8);
      assertSame(hashCodeBuilder3, hashCodeBuilder10);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder9);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder8);
      assertSame(hashCodeBuilder4, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder10);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder9);
      assertSame(hashCodeBuilder5, hashCodeBuilder8);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder9);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder10);
      assertSame(hashCodeBuilder5, hashCodeBuilder7);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder8);
      assertSame(hashCodeBuilder6, hashCodeBuilder7);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder10);
      assertSame(hashCodeBuilder6, hashCodeBuilder9);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder11 = hashCodeBuilder5.append('E');
      assertEquals((-1216278979), hashCodeBuilder0.toHashCode());
      assertEquals((-1216278979), (int)hashCodeBuilder0.build());
      assertEquals((-1216278979), (int)hashCodeBuilder1.build());
      assertEquals((-1216278979), hashCodeBuilder1.toHashCode());
      assertEquals((-1216278979), (int)hashCodeBuilder11.build());
      assertEquals((-1216278979), hashCodeBuilder11.toHashCode());
      assertEquals((-1216278979), (int)hashCodeBuilder3.build());
      assertEquals((-1216278979), hashCodeBuilder3.toHashCode());
      assertEquals((-1216278979), (int)hashCodeBuilder4.build());
      assertEquals((-1216278979), hashCodeBuilder4.toHashCode());
      assertEquals((-1216278979), hashCodeBuilder5.toHashCode());
      assertEquals((-1216278979), (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder11);
      assertEquals(7, intArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new int[] {(-913), (-913), (-913), (-913), (-913), (-913), (-913)}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder11);
      assertSame(hashCodeBuilder0, hashCodeBuilder10);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder9);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder8);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder9);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder11);
      assertSame(hashCodeBuilder1, hashCodeBuilder10);
      assertSame(hashCodeBuilder1, hashCodeBuilder8);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder11, hashCodeBuilder0);
      assertSame(hashCodeBuilder11, hashCodeBuilder9);
      assertSame(hashCodeBuilder11, hashCodeBuilder4);
      assertSame(hashCodeBuilder11, hashCodeBuilder7);
      assertSame(hashCodeBuilder11, hashCodeBuilder6);
      assertSame(hashCodeBuilder11, hashCodeBuilder8);
      assertSame(hashCodeBuilder11, hashCodeBuilder1);
      assertSame(hashCodeBuilder11, hashCodeBuilder5);
      assertSame(hashCodeBuilder11, hashCodeBuilder2);
      assertSame(hashCodeBuilder11, hashCodeBuilder3);
      assertSame(hashCodeBuilder11, hashCodeBuilder10);
      assertSame(hashCodeBuilder3, hashCodeBuilder11);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder7);
      assertSame(hashCodeBuilder3, hashCodeBuilder8);
      assertSame(hashCodeBuilder3, hashCodeBuilder10);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder9);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder11);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder8);
      assertSame(hashCodeBuilder4, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder10);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder9);
      assertSame(hashCodeBuilder5, hashCodeBuilder8);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder11);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder9);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder10);
      assertSame(hashCodeBuilder5, hashCodeBuilder7);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer((-1448));
      assertNotNull(integer0);
      assertEquals((-1448), (int)integer0);
      
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4Oz(";
      stringArray0[1] = "_";
      stringArray0[2] = "#he+Px&nf&BRa";
      stringArray0[3] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[4] = "Cannot store ";
      stringArray0[5] = "";
      int int0 = HashCodeBuilder.reflectionHashCode((-1), (-1), integer0, true, (Class<? super Integer>) class0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      IDKey iDKey0 = new IDKey(object0);
      assertNotNull(iDKey0);
      
      String[] stringArray0 = new String[0];
      int int0 = HashCodeBuilder.reflectionHashCode((Object) iDKey0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(23459, int0);
      
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(1059);
      assertEquals(1688, (int)hashCodeBuilder0.build());
      assertEquals(1688, hashCodeBuilder0.toHashCode());
      assertEquals(1688, (int)hashCodeBuilder1.build());
      assertEquals(1688, hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      long long0 = (-1223L);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((-1223L));
      assertEquals(63678, hashCodeBuilder0.toHashCode());
      assertEquals(63678, (int)hashCodeBuilder0.build());
      assertEquals(63678, hashCodeBuilder1.toHashCode());
      assertEquals(63678, (int)hashCodeBuilder1.build());
      assertEquals(63678, hashCodeBuilder2.toHashCode());
      assertEquals(63678, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      String string0 = "w2a[ Q`5CyN=C";
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((Object) "w2a[ Q`5CyN=C");
      assertEquals(2356096, (int)hashCodeBuilder0.build());
      assertEquals(2356096, hashCodeBuilder0.toHashCode());
      assertEquals(2356096, (int)hashCodeBuilder1.build());
      assertEquals(2356096, hashCodeBuilder1.toHashCode());
      assertEquals(2356096, hashCodeBuilder2.toHashCode());
      assertEquals(2356096, (int)hashCodeBuilder2.build());
      assertEquals(2356096, hashCodeBuilder3.toHashCode());
      assertEquals(2356096, (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      long[] longArray0 = new long[2];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)112;
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-3676), 4269, (Object) hashCodeBuilder0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      char[] charArray0 = new char[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(charArray0);
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder1.toHashCode());
      assertEquals(17, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "!8IIA\"|s45";
      stringArray0[1] = "e+";
      stringArray0[2] = "J]Ce";
      stringArray0[3] = "";
      stringArray0[4] = "Array element ";
      stringArray0[5] = "'jjvx";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "PZhMSO$~q> b^?REyf7";
      int int0 = HashCodeBuilder.reflectionHashCode((-2775), (-473), (Object) hashCodeBuilder0, true, (Class<? super Object>) class0, stringArray0);
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(9, stringArray0.length);
      assertEquals((-620849862), int0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      IDKey iDKey0 = new IDKey(object0);
      assertNotNull(iDKey0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "The object to build a hash code for must not be null";
      stringArray0[1] = ", '";
      stringArray0[2] = "$";
      stringArray0[3] = ".+(";
      stringArray0[4] = "";
      stringArray0[5] = "Unexpected IllegalAccessException";
      stringArray0[6] = "K/ae[sA0-LBX";
      int int0 = HashCodeBuilder.reflectionHashCode((Object) iDKey0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(23459, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(324, 576, (Object) "*T[0VbTB%6z$I<+5n", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Set<IDKey> set0 = HashCodeBuilder.getRegistry();
      assertNull(set0);
      
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      assertEquals((-1), hashCodeBuilder0.toHashCode());
      assertEquals((-1), (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(floatArray0);
      assertEquals(1082130431, hashCodeBuilder0.toHashCode());
      assertEquals(1082130431, (int)hashCodeBuilder0.build());
      assertEquals(1082130431, (int)hashCodeBuilder1.build());
      assertEquals(1082130431, hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(booleanArray0);
      assertEquals((-1082130431), hashCodeBuilder0.toHashCode());
      assertEquals((-1082130431), (int)hashCodeBuilder0.build());
      assertEquals((-1082130431), (int)hashCodeBuilder1.build());
      assertEquals((-1082130431), hashCodeBuilder1.toHashCode());
      assertEquals((-1082130431), (int)hashCodeBuilder2.build());
      assertEquals((-1082130431), hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertEquals(6, floatArray0.length);
      assertEquals(1, booleanArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(494.5724);
      assertEquals((-862327539), (int)hashCodeBuilder0.build());
      assertEquals((-862327539), hashCodeBuilder0.toHashCode());
      assertEquals((-862327539), hashCodeBuilder1.toHashCode());
      assertEquals((-862327539), (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(object0);
      assertEquals((-1841347869), hashCodeBuilder0.toHashCode());
      assertEquals((-1841347869), (int)hashCodeBuilder0.build());
      assertEquals((-1841347869), (int)hashCodeBuilder1.build());
      assertEquals((-1841347869), hashCodeBuilder1.toHashCode());
      assertEquals((-1841347869), (int)hashCodeBuilder2.build());
      assertEquals((-1841347869), hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((byte)0);
      assertEquals(589605583, hashCodeBuilder0.toHashCode());
      assertEquals(589605583, (int)hashCodeBuilder0.build());
      assertEquals(589605583, (int)hashCodeBuilder1.build());
      assertEquals(589605583, hashCodeBuilder1.toHashCode());
      assertEquals(589605583, (int)hashCodeBuilder2.build());
      assertEquals(589605583, hashCodeBuilder2.toHashCode());
      assertEquals(589605583, (int)hashCodeBuilder3.build());
      assertEquals(589605583, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)19;
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(byteArray0);
      assertEquals((-1910980666), (int)hashCodeBuilder0.build());
      assertEquals((-1910980666), hashCodeBuilder0.toHashCode());
      assertEquals((-1910980666), hashCodeBuilder1.toHashCode());
      assertEquals((-1910980666), (int)hashCodeBuilder1.build());
      assertEquals((-1910980666), hashCodeBuilder2.toHashCode());
      assertEquals((-1910980666), (int)hashCodeBuilder2.build());
      assertEquals((-1910980666), (int)hashCodeBuilder3.build());
      assertEquals((-1910980666), hashCodeBuilder3.toHashCode());
      assertEquals((-1910980666), hashCodeBuilder4.toHashCode());
      assertEquals((-1910980666), (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)19}, byteArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((short)151);
      assertEquals((-1986807755), (int)hashCodeBuilder0.build());
      assertEquals((-1986807755), hashCodeBuilder0.toHashCode());
      assertEquals((-1986807755), (int)hashCodeBuilder1.build());
      assertEquals((-1986807755), hashCodeBuilder1.toHashCode());
      assertEquals((-1986807755), (int)hashCodeBuilder2.build());
      assertEquals((-1986807755), hashCodeBuilder2.toHashCode());
      assertEquals((-1986807755), hashCodeBuilder3.toHashCode());
      assertEquals((-1986807755), (int)hashCodeBuilder3.build());
      assertEquals((-1986807755), (int)hashCodeBuilder4.build());
      assertEquals((-1986807755), hashCodeBuilder4.toHashCode());
      assertEquals((-1986807755), (int)hashCodeBuilder5.build());
      assertEquals((-1986807755), hashCodeBuilder5.toHashCode());
      assertNotNull(hashCodeBuilder5);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)19}, byteArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append((byte)92);
      assertEquals((-497442811), hashCodeBuilder0.toHashCode());
      assertEquals((-497442811), (int)hashCodeBuilder0.build());
      assertEquals((-497442811), hashCodeBuilder1.toHashCode());
      assertEquals((-497442811), (int)hashCodeBuilder1.build());
      assertEquals((-497442811), (int)hashCodeBuilder2.build());
      assertEquals((-497442811), hashCodeBuilder2.toHashCode());
      assertEquals((-497442811), hashCodeBuilder3.toHashCode());
      assertEquals((-497442811), (int)hashCodeBuilder3.build());
      assertEquals((-497442811), hashCodeBuilder4.toHashCode());
      assertEquals((-497442811), (int)hashCodeBuilder4.build());
      assertEquals((-497442811), hashCodeBuilder5.toHashCode());
      assertEquals((-497442811), (int)hashCodeBuilder5.build());
      assertEquals((-497442811), hashCodeBuilder6.toHashCode());
      assertEquals((-497442811), (int)hashCodeBuilder6.build());
      assertNotNull(hashCodeBuilder6);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)19}, byteArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      
      HashCodeBuilder hashCodeBuilder7 = hashCodeBuilder5.append((double) (byte)0);
      assertEquals((-1225514823), (int)hashCodeBuilder0.build());
      assertEquals((-1225514823), hashCodeBuilder0.toHashCode());
      assertEquals((-1225514823), hashCodeBuilder1.toHashCode());
      assertEquals((-1225514823), (int)hashCodeBuilder1.build());
      assertEquals((-1225514823), hashCodeBuilder2.toHashCode());
      assertEquals((-1225514823), (int)hashCodeBuilder2.build());
      assertEquals((-1225514823), hashCodeBuilder3.toHashCode());
      assertEquals((-1225514823), (int)hashCodeBuilder3.build());
      assertEquals((-1225514823), (int)hashCodeBuilder4.build());
      assertEquals((-1225514823), hashCodeBuilder4.toHashCode());
      assertEquals((-1225514823), (int)hashCodeBuilder5.build());
      assertEquals((-1225514823), hashCodeBuilder5.toHashCode());
      assertEquals((-1225514823), (int)hashCodeBuilder7.build());
      assertEquals((-1225514823), hashCodeBuilder7.toHashCode());
      assertNotNull(hashCodeBuilder7);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)19}, byteArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder7);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder7);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder7);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder7, hashCodeBuilder6);
      assertSame(hashCodeBuilder7, hashCodeBuilder5);
      assertSame(hashCodeBuilder7, hashCodeBuilder4);
      assertSame(hashCodeBuilder7, hashCodeBuilder3);
      assertSame(hashCodeBuilder7, hashCodeBuilder2);
      assertSame(hashCodeBuilder7, hashCodeBuilder1);
      assertSame(hashCodeBuilder7, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder8 = hashCodeBuilder0.append(byteArray0);
      assertEquals((-840000312), hashCodeBuilder0.toHashCode());
      assertEquals((-840000312), (int)hashCodeBuilder0.build());
      assertEquals((-840000312), (int)hashCodeBuilder8.build());
      assertEquals((-840000312), hashCodeBuilder8.toHashCode());
      assertNotNull(hashCodeBuilder8);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)19}, byteArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder8);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder8, hashCodeBuilder6);
      assertSame(hashCodeBuilder8, hashCodeBuilder2);
      assertSame(hashCodeBuilder8, hashCodeBuilder4);
      assertSame(hashCodeBuilder8, hashCodeBuilder0);
      assertSame(hashCodeBuilder8, hashCodeBuilder1);
      assertSame(hashCodeBuilder8, hashCodeBuilder5);
      assertSame(hashCodeBuilder8, hashCodeBuilder7);
      assertSame(hashCodeBuilder8, hashCodeBuilder3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((byte) (-42));
      assertEquals(587, hashCodeBuilder0.toHashCode());
      assertEquals(587, (int)hashCodeBuilder0.build());
      assertEquals(587, hashCodeBuilder1.toHashCode());
      assertEquals(587, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(201);
      assertEquals(21920, hashCodeBuilder0.toHashCode());
      assertEquals(21920, (int)hashCodeBuilder0.build());
      assertEquals(21920, (int)hashCodeBuilder1.build());
      assertEquals(21920, hashCodeBuilder1.toHashCode());
      assertEquals(21920, (int)hashCodeBuilder2.build());
      assertEquals(21920, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((-3381.7554F));
      assertEquals((-983581642), (int)hashCodeBuilder0.build());
      assertEquals((-983581642), hashCodeBuilder0.toHashCode());
      assertEquals((-983581642), hashCodeBuilder1.toHashCode());
      assertEquals((-983581642), (int)hashCodeBuilder1.build());
      assertEquals((-983581642), hashCodeBuilder2.toHashCode());
      assertEquals((-983581642), (int)hashCodeBuilder2.build());
      assertEquals((-983581642), (int)hashCodeBuilder3.build());
      assertEquals((-983581642), hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(booleanArray0);
      assertEquals(2096463047, (int)hashCodeBuilder0.build());
      assertEquals(2096463047, hashCodeBuilder0.toHashCode());
      assertEquals(2096463047, hashCodeBuilder1.toHashCode());
      assertEquals(2096463047, (int)hashCodeBuilder1.build());
      assertEquals(2096463047, (int)hashCodeBuilder2.build());
      assertEquals(2096463047, hashCodeBuilder2.toHashCode());
      assertEquals(2096463047, (int)hashCodeBuilder3.build());
      assertEquals(2096463047, hashCodeBuilder3.toHashCode());
      assertEquals(2096463047, hashCodeBuilder4.toHashCode());
      assertEquals(2096463047, (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(true);
      assertEquals(259721411, hashCodeBuilder0.toHashCode());
      assertEquals(259721411, (int)hashCodeBuilder0.build());
      assertEquals(259721411, hashCodeBuilder1.toHashCode());
      assertEquals(259721411, (int)hashCodeBuilder1.build());
      assertEquals(259721411, hashCodeBuilder2.toHashCode());
      assertEquals(259721411, (int)hashCodeBuilder2.build());
      assertEquals(259721411, (int)hashCodeBuilder3.build());
      assertEquals(259721411, hashCodeBuilder3.toHashCode());
      assertEquals(259721411, (int)hashCodeBuilder4.build());
      assertEquals(259721411, hashCodeBuilder4.toHashCode());
      assertEquals(259721411, hashCodeBuilder5.toHashCode());
      assertEquals(259721411, (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append(';');
      assertEquals(1019757674, hashCodeBuilder0.toHashCode());
      assertEquals(1019757674, (int)hashCodeBuilder0.build());
      assertEquals(1019757674, (int)hashCodeBuilder1.build());
      assertEquals(1019757674, hashCodeBuilder1.toHashCode());
      assertEquals(1019757674, hashCodeBuilder2.toHashCode());
      assertEquals(1019757674, (int)hashCodeBuilder2.build());
      assertEquals(1019757674, (int)hashCodeBuilder3.build());
      assertEquals(1019757674, hashCodeBuilder3.toHashCode());
      assertEquals(1019757674, (int)hashCodeBuilder4.build());
      assertEquals(1019757674, hashCodeBuilder4.toHashCode());
      assertEquals(1019757674, hashCodeBuilder5.toHashCode());
      assertEquals(1019757674, (int)hashCodeBuilder5.build());
      assertEquals(1019757674, hashCodeBuilder6.toHashCode());
      assertEquals(1019757674, (int)hashCodeBuilder6.build());
      assertNotNull(hashCodeBuilder6);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      double[] doubleArray0 = new double[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(doubleArray0);
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, (int)hashCodeBuilder1.build());
      assertEquals(17, hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-1309L);
      longArray0[2] = (-1L);
      longArray0[3] = 2297L;
      longArray0[4] = 0L;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(longArray0);
      assertEquals(1245186382, hashCodeBuilder0.toHashCode());
      assertEquals(1245186382, (int)hashCodeBuilder0.build());
      assertEquals(1245186382, hashCodeBuilder1.toHashCode());
      assertEquals(1245186382, (int)hashCodeBuilder1.build());
      assertEquals(1245186382, hashCodeBuilder2.toHashCode());
      assertEquals(1245186382, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {0L, (-1309L), (-1L), 2297L, 0L}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1415), (-1415));
      assertEquals((-1415), (int)hashCodeBuilder0.build());
      assertEquals((-1415), hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-243L));
      assertEquals(2002467, (int)hashCodeBuilder0.build());
      assertEquals(2002467, hashCodeBuilder0.toHashCode());
      assertEquals(2002467, hashCodeBuilder1.toHashCode());
      assertEquals(2002467, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((-411.0F));
      assertEquals(451533963, (int)hashCodeBuilder0.build());
      assertEquals(451533963, hashCodeBuilder0.toHashCode());
      assertEquals(451533963, (int)hashCodeBuilder1.build());
      assertEquals(451533963, hashCodeBuilder1.toHashCode());
      assertEquals(451533963, (int)hashCodeBuilder2.build());
      assertEquals(451533963, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1415);
      floatArray0[1] = 1603.764F;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(floatArray0);
      assertEquals((-458744306), (int)hashCodeBuilder0.build());
      assertEquals((-458744306), hashCodeBuilder0.toHashCode());
      assertEquals((-458744306), (int)hashCodeBuilder1.build());
      assertEquals((-458744306), hashCodeBuilder1.toHashCode());
      assertEquals((-458744306), (int)hashCodeBuilder2.build());
      assertEquals((-458744306), hashCodeBuilder2.toHashCode());
      assertEquals((-458744306), (int)hashCodeBuilder3.build());
      assertEquals((-458744306), hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1415.0F), 1603.764F}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((short)4307);
      assertEquals(583135601, hashCodeBuilder0.toHashCode());
      assertEquals(583135601, (int)hashCodeBuilder0.build());
      assertEquals(583135601, (int)hashCodeBuilder1.build());
      assertEquals(583135601, hashCodeBuilder1.toHashCode());
      assertEquals(583135601, (int)hashCodeBuilder2.build());
      assertEquals(583135601, hashCodeBuilder2.toHashCode());
      assertEquals(583135601, (int)hashCodeBuilder3.build());
      assertEquals(583135601, hashCodeBuilder3.toHashCode());
      assertEquals(583135601, hashCodeBuilder4.toHashCode());
      assertEquals(583135601, (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1415.0F), 1603.764F}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((byte) (-11));
      assertEquals((-503154594), (int)hashCodeBuilder0.build());
      assertEquals((-503154594), hashCodeBuilder0.toHashCode());
      assertEquals((-503154594), (int)hashCodeBuilder1.build());
      assertEquals((-503154594), hashCodeBuilder1.toHashCode());
      assertEquals((-503154594), (int)hashCodeBuilder2.build());
      assertEquals((-503154594), hashCodeBuilder2.toHashCode());
      assertEquals((-503154594), (int)hashCodeBuilder3.build());
      assertEquals((-503154594), hashCodeBuilder3.toHashCode());
      assertEquals((-503154594), hashCodeBuilder4.toHashCode());
      assertEquals((-503154594), (int)hashCodeBuilder4.build());
      assertEquals((-503154594), hashCodeBuilder5.toHashCode());
      assertEquals((-503154594), (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1415.0F), 1603.764F}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append(0);
      assertEquals((-1000820626), (int)hashCodeBuilder0.build());
      assertEquals((-1000820626), hashCodeBuilder0.toHashCode());
      assertEquals((-1000820626), (int)hashCodeBuilder1.build());
      assertEquals((-1000820626), hashCodeBuilder1.toHashCode());
      assertEquals((-1000820626), (int)hashCodeBuilder2.build());
      assertEquals((-1000820626), hashCodeBuilder2.toHashCode());
      assertEquals((-1000820626), (int)hashCodeBuilder3.build());
      assertEquals((-1000820626), hashCodeBuilder3.toHashCode());
      assertEquals((-1000820626), hashCodeBuilder4.toHashCode());
      assertEquals((-1000820626), (int)hashCodeBuilder4.build());
      assertEquals((-1000820626), hashCodeBuilder5.toHashCode());
      assertEquals((-1000820626), (int)hashCodeBuilder5.build());
      assertEquals((-1000820626), hashCodeBuilder6.toHashCode());
      assertEquals((-1000820626), (int)hashCodeBuilder6.build());
      assertNotNull(hashCodeBuilder6);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1415.0F), 1603.764F}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1, (-1845));
      assertEquals(1, hashCodeBuilder0.toHashCode());
      assertEquals(1, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((Object) null);
      assertEquals((-1845), (int)hashCodeBuilder0.build());
      assertEquals((-1845), hashCodeBuilder0.toHashCode());
      assertEquals((-1845), hashCodeBuilder1.toHashCode());
      assertEquals((-1845), (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      char[] charArray0 = new char[1];
      int[] intArray0 = new int[0];
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append(intArray0);
      assertEquals((-1845), (int)hashCodeBuilder0.build());
      assertEquals((-1845), hashCodeBuilder0.toHashCode());
      assertEquals((-1845), hashCodeBuilder2.toHashCode());
      assertEquals((-1845), (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder0.append('^');
      assertEquals(3404119, hashCodeBuilder0.toHashCode());
      assertEquals(3404119, (int)hashCodeBuilder0.build());
      assertEquals(3404119, hashCodeBuilder3.toHashCode());
      assertEquals(3404119, (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      charArray0[0] = '+';
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder1.append(charArray0);
      assertEquals((-1985632216), hashCodeBuilder0.toHashCode());
      assertEquals((-1985632216), (int)hashCodeBuilder0.build());
      assertEquals((-1985632216), hashCodeBuilder1.toHashCode());
      assertEquals((-1985632216), (int)hashCodeBuilder1.build());
      assertEquals((-1985632216), (int)hashCodeBuilder4.build());
      assertEquals((-1985632216), hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder4);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      
      Integer integer0 = hashCodeBuilder4.build();
      assertEquals((-1985632216), hashCodeBuilder0.toHashCode());
      assertEquals((-1985632216), (int)hashCodeBuilder0.build());
      assertEquals((-1985632216), hashCodeBuilder1.toHashCode());
      assertEquals((-1985632216), (int)hashCodeBuilder1.build());
      assertEquals((-1985632216), (int)hashCodeBuilder4.build());
      assertEquals((-1985632216), hashCodeBuilder4.toHashCode());
      assertNotNull(integer0);
      assertEquals(1, charArray0.length);
      assertEquals((-1985632216), (int)integer0);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.appendSuper((-1845));
      assertEquals((-115666813), (int)hashCodeBuilder0.build());
      assertEquals((-115666813), hashCodeBuilder0.toHashCode());
      assertEquals((-115666813), hashCodeBuilder1.toHashCode());
      assertEquals((-115666813), (int)hashCodeBuilder1.build());
      assertEquals((-115666813), hashCodeBuilder4.toHashCode());
      assertEquals((-115666813), (int)hashCodeBuilder4.build());
      assertEquals((-115666813), hashCodeBuilder5.toHashCode());
      assertEquals((-115666813), (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append(2503.267300653);
      assertEquals(1257511684, hashCodeBuilder0.toHashCode());
      assertEquals(1257511684, (int)hashCodeBuilder0.build());
      assertEquals(1257511684, (int)hashCodeBuilder1.build());
      assertEquals(1257511684, hashCodeBuilder1.toHashCode());
      assertEquals(1257511684, hashCodeBuilder4.toHashCode());
      assertEquals(1257511684, (int)hashCodeBuilder4.build());
      assertEquals(1257511684, (int)hashCodeBuilder5.build());
      assertEquals(1257511684, hashCodeBuilder5.toHashCode());
      assertEquals(1257511684, hashCodeBuilder6.toHashCode());
      assertEquals(1257511684, (int)hashCodeBuilder6.build());
      assertNotNull(hashCodeBuilder6);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder7 = hashCodeBuilder0.append(charArray0);
      assertEquals((-826717097), hashCodeBuilder0.toHashCode());
      assertEquals((-826717097), (int)hashCodeBuilder0.build());
      assertEquals((-826717097), hashCodeBuilder7.toHashCode());
      assertEquals((-826717097), (int)hashCodeBuilder7.build());
      assertNotNull(hashCodeBuilder7);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder7, hashCodeBuilder4);
      assertSame(hashCodeBuilder7, hashCodeBuilder5);
      assertSame(hashCodeBuilder7, hashCodeBuilder0);
      assertSame(hashCodeBuilder7, hashCodeBuilder6);
      assertSame(hashCodeBuilder7, hashCodeBuilder3);
      assertSame(hashCodeBuilder7, hashCodeBuilder1);
      assertSame(hashCodeBuilder7, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder8 = hashCodeBuilder4.append((byte) (-63));
      assertEquals(579653822, (int)hashCodeBuilder0.build());
      assertEquals(579653822, hashCodeBuilder0.toHashCode());
      assertEquals(579653822, hashCodeBuilder1.toHashCode());
      assertEquals(579653822, (int)hashCodeBuilder1.build());
      assertEquals(579653822, (int)hashCodeBuilder4.build());
      assertEquals(579653822, hashCodeBuilder4.toHashCode());
      assertEquals(579653822, (int)hashCodeBuilder8.build());
      assertEquals(579653822, hashCodeBuilder8.toHashCode());
      assertNotNull(hashCodeBuilder8);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder8);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder8);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder8);
      assertSame(hashCodeBuilder8, hashCodeBuilder5);
      assertSame(hashCodeBuilder8, hashCodeBuilder3);
      assertSame(hashCodeBuilder8, hashCodeBuilder0);
      assertSame(hashCodeBuilder8, hashCodeBuilder6);
      assertSame(hashCodeBuilder8, hashCodeBuilder4);
      assertSame(hashCodeBuilder8, hashCodeBuilder7);
      assertSame(hashCodeBuilder8, hashCodeBuilder1);
      assertSame(hashCodeBuilder8, hashCodeBuilder2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = HashCodeBuilder.reflectionHashCode((Object) integer0, (Collection<String>) null);
      assertEquals(633, int0);
      
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(0);
      assertEquals(629, hashCodeBuilder0.toHashCode());
      assertEquals(629, (int)hashCodeBuilder0.build());
      assertEquals(629, (int)hashCodeBuilder1.build());
      assertEquals(629, hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.appendSuper(516);
      assertEquals(23789, hashCodeBuilder0.toHashCode());
      assertEquals(23789, (int)hashCodeBuilder0.build());
      assertEquals(23789, (int)hashCodeBuilder1.build());
      assertEquals(23789, hashCodeBuilder1.toHashCode());
      assertEquals(23789, (int)hashCodeBuilder2.build());
      assertEquals(23789, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)569;
      shortArray0[2] = (short)0;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(shortArray0);
      assertEquals(1205005270, (int)hashCodeBuilder0.build());
      assertEquals(1205005270, hashCodeBuilder0.toHashCode());
      assertEquals(1205005270, hashCodeBuilder1.toHashCode());
      assertEquals(1205005270, (int)hashCodeBuilder1.build());
      assertEquals(1205005270, hashCodeBuilder2.toHashCode());
      assertEquals(1205005270, (int)hashCodeBuilder2.build());
      assertEquals(1205005270, (int)hashCodeBuilder3.build());
      assertEquals(1205005270, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)569, (short)0}, shortArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(0L);
      assertEquals(1635522030, hashCodeBuilder0.toHashCode());
      assertEquals(1635522030, (int)hashCodeBuilder0.build());
      assertEquals(1635522030, hashCodeBuilder1.toHashCode());
      assertEquals(1635522030, (int)hashCodeBuilder1.build());
      assertEquals(1635522030, (int)hashCodeBuilder2.build());
      assertEquals(1635522030, hashCodeBuilder2.toHashCode());
      assertEquals(1635522030, hashCodeBuilder3.toHashCode());
      assertEquals(1635522030, (int)hashCodeBuilder3.build());
      assertEquals(1635522030, (int)hashCodeBuilder4.build());
      assertEquals(1635522030, hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder4);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)569, (short)0}, shortArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      
      byte[] byteArray0 = new byte[0];
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(byteArray0);
      assertEquals(1635522030, hashCodeBuilder0.toHashCode());
      assertEquals(1635522030, (int)hashCodeBuilder0.build());
      assertEquals(1635522030, hashCodeBuilder1.toHashCode());
      assertEquals(1635522030, (int)hashCodeBuilder1.build());
      assertEquals(1635522030, (int)hashCodeBuilder2.build());
      assertEquals(1635522030, hashCodeBuilder2.toHashCode());
      assertEquals(1635522030, hashCodeBuilder3.toHashCode());
      assertEquals(1635522030, (int)hashCodeBuilder3.build());
      assertEquals(1635522030, (int)hashCodeBuilder4.build());
      assertEquals(1635522030, hashCodeBuilder4.toHashCode());
      assertEquals(1635522030, (int)hashCodeBuilder5.build());
      assertEquals(1635522030, hashCodeBuilder5.toHashCode());
      assertNotNull(hashCodeBuilder5);
      assertEquals(3, shortArray0.length);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)569, (short)0}, shortArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      
      long[] longArray0 = new long[0];
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append(longArray0);
      assertEquals(1635522030, hashCodeBuilder0.toHashCode());
      assertEquals(1635522030, (int)hashCodeBuilder0.build());
      assertEquals(1635522030, hashCodeBuilder1.toHashCode());
      assertEquals(1635522030, (int)hashCodeBuilder1.build());
      assertEquals(1635522030, (int)hashCodeBuilder2.build());
      assertEquals(1635522030, hashCodeBuilder2.toHashCode());
      assertEquals(1635522030, hashCodeBuilder3.toHashCode());
      assertEquals(1635522030, (int)hashCodeBuilder3.build());
      assertEquals(1635522030, (int)hashCodeBuilder4.build());
      assertEquals(1635522030, hashCodeBuilder4.toHashCode());
      assertEquals(1635522030, (int)hashCodeBuilder5.build());
      assertEquals(1635522030, hashCodeBuilder5.toHashCode());
      assertEquals(1635522030, hashCodeBuilder6.toHashCode());
      assertEquals(1635522030, (int)hashCodeBuilder6.build());
      assertNotNull(hashCodeBuilder6);
      assertEquals(3, shortArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)569, (short)0}, shortArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-3281), (-3281));
      assertEquals((-3281), hashCodeBuilder0.toHashCode());
      assertEquals((-3281), (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((byte) (-44));
      assertEquals(10764917, hashCodeBuilder0.toHashCode());
      assertEquals(10764917, (int)hashCodeBuilder0.build());
      assertEquals(10764917, hashCodeBuilder1.toHashCode());
      assertEquals(10764917, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "j9 Y:?xqmXd1O4\u0007<", false);
      assertEquals(1956219308, int0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((byte)38);
      assertEquals((-959954271), (int)hashCodeBuilder0.build());
      assertEquals((-959954271), hashCodeBuilder0.toHashCode());
      assertEquals((-959954271), (int)hashCodeBuilder1.build());
      assertEquals((-959954271), hashCodeBuilder1.toHashCode());
      assertEquals((-959954271), (int)hashCodeBuilder2.build());
      assertEquals((-959954271), hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      
      int int1 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, false);
      assertEquals((-959954271), (int)hashCodeBuilder0.build());
      assertEquals((-959954271), hashCodeBuilder0.toHashCode());
      assertFalse(int1 == int0);
      assertEquals(23692, int1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      
      boolean boolean0 = HashCodeBuilder.isRegistered(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-3281), 0, (Object) hashCodeBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((long[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
      assertEquals(629, (int)hashCodeBuilder0.build());
      assertEquals(629, hashCodeBuilder1.toHashCode());
      assertEquals(629, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)33;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(byteArray0);
      assertEquals(861171, (int)hashCodeBuilder0.build());
      assertEquals(861171, hashCodeBuilder0.toHashCode());
      assertEquals(861171, (int)hashCodeBuilder1.build());
      assertEquals(861171, hashCodeBuilder1.toHashCode());
      assertEquals(861171, hashCodeBuilder2.toHashCode());
      assertEquals(861171, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)33}, byteArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((short) (byte)1);
      assertEquals(31863328, hashCodeBuilder0.toHashCode());
      assertEquals(31863328, (int)hashCodeBuilder0.build());
      assertEquals(31863328, hashCodeBuilder1.toHashCode());
      assertEquals(31863328, (int)hashCodeBuilder1.build());
      assertEquals(31863328, hashCodeBuilder2.toHashCode());
      assertEquals(31863328, (int)hashCodeBuilder2.build());
      assertEquals(31863328, hashCodeBuilder3.toHashCode());
      assertEquals(31863328, (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)33}, byteArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      
      short[] shortArray0 = new short[0];
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(shortArray0);
      assertEquals(31863328, hashCodeBuilder0.toHashCode());
      assertEquals(31863328, (int)hashCodeBuilder0.build());
      assertEquals(31863328, hashCodeBuilder1.toHashCode());
      assertEquals(31863328, (int)hashCodeBuilder1.build());
      assertEquals(31863328, hashCodeBuilder2.toHashCode());
      assertEquals(31863328, (int)hashCodeBuilder2.build());
      assertEquals(31863328, hashCodeBuilder3.toHashCode());
      assertEquals(31863328, (int)hashCodeBuilder3.build());
      assertEquals(31863328, hashCodeBuilder4.toHashCode());
      assertEquals(31863328, (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(2, byteArray0.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)33}, byteArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = '-';
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(charArray0);
      assertEquals(671227187, hashCodeBuilder0.toHashCode());
      assertEquals(671227187, (int)hashCodeBuilder0.build());
      assertEquals(671227187, hashCodeBuilder1.toHashCode());
      assertEquals(671227187, (int)hashCodeBuilder1.build());
      assertEquals(671227187, (int)hashCodeBuilder2.build());
      assertEquals(671227187, hashCodeBuilder2.toHashCode());
      assertEquals(671227187, hashCodeBuilder3.toHashCode());
      assertEquals(671227187, (int)hashCodeBuilder3.build());
      assertEquals(671227187, (int)hashCodeBuilder4.build());
      assertEquals(671227187, hashCodeBuilder4.toHashCode());
      assertEquals(671227187, (int)hashCodeBuilder5.build());
      assertEquals(671227187, hashCodeBuilder5.toHashCode());
      assertNotNull(hashCodeBuilder5);
      assertEquals(2, byteArray0.length);
      assertEquals(0, shortArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)33}, byteArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new char[] {'n', '-'}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append(507.0660553177161);
      assertEquals((-1731650438), hashCodeBuilder0.toHashCode());
      assertEquals((-1731650438), (int)hashCodeBuilder0.build());
      assertEquals((-1731650438), hashCodeBuilder1.toHashCode());
      assertEquals((-1731650438), (int)hashCodeBuilder1.build());
      assertEquals((-1731650438), (int)hashCodeBuilder2.build());
      assertEquals((-1731650438), hashCodeBuilder2.toHashCode());
      assertEquals((-1731650438), hashCodeBuilder3.toHashCode());
      assertEquals((-1731650438), (int)hashCodeBuilder3.build());
      assertEquals((-1731650438), hashCodeBuilder4.toHashCode());
      assertEquals((-1731650438), (int)hashCodeBuilder4.build());
      assertEquals((-1731650438), hashCodeBuilder5.toHashCode());
      assertEquals((-1731650438), (int)hashCodeBuilder5.build());
      assertEquals((-1731650438), (int)hashCodeBuilder6.build());
      assertEquals((-1731650438), hashCodeBuilder6.toHashCode());
      assertNotNull(hashCodeBuilder6);
      assertEquals(2, byteArray0.length);
      assertEquals(0, shortArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)33}, byteArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new char[] {'n', '-'}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
      assertEquals(629, (int)hashCodeBuilder0.build());
      assertEquals(629, hashCodeBuilder1.toHashCode());
      assertEquals(629, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.appendSuper(1279);
      assertEquals(24552, (int)hashCodeBuilder0.build());
      assertEquals(24552, hashCodeBuilder0.toHashCode());
      assertEquals(24552, hashCodeBuilder1.toHashCode());
      assertEquals(24552, (int)hashCodeBuilder1.build());
      assertEquals(24552, hashCodeBuilder2.toHashCode());
      assertEquals(24552, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) hashCodeBuilder2;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder1.append((short)32);
      assertEquals(908456, hashCodeBuilder0.toHashCode());
      assertEquals(908456, (int)hashCodeBuilder0.build());
      assertEquals(908456, hashCodeBuilder1.toHashCode());
      assertEquals(908456, (int)hashCodeBuilder1.build());
      assertEquals(908456, hashCodeBuilder3.toHashCode());
      assertEquals(908456, (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      
      objectArray0[1] = (Object) hashCodeBuilder2;
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder2.append(objectArray0);
      assertEquals(1243676302, (int)hashCodeBuilder0.build());
      assertEquals(1243676302, hashCodeBuilder0.toHashCode());
      assertEquals(1243676302, (int)hashCodeBuilder1.build());
      assertEquals(1243676302, hashCodeBuilder1.toHashCode());
      assertEquals(1243676302, hashCodeBuilder2.toHashCode());
      assertEquals(1243676302, (int)hashCodeBuilder2.build());
      assertEquals(1243676302, hashCodeBuilder4.toHashCode());
      assertEquals(1243676302, (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(2, objectArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((double[]) null);
      assertEquals((-1228617082), (int)hashCodeBuilder0.build());
      assertEquals((-1228617082), hashCodeBuilder0.toHashCode());
      assertEquals((-1228617082), (int)hashCodeBuilder1.build());
      assertEquals((-1228617082), hashCodeBuilder1.toHashCode());
      assertEquals((-1228617082), (int)hashCodeBuilder2.build());
      assertEquals((-1228617082), hashCodeBuilder2.toHashCode());
      assertEquals((-1228617082), hashCodeBuilder4.toHashCode());
      assertEquals((-1228617082), (int)hashCodeBuilder4.build());
      assertEquals((-1228617082), hashCodeBuilder5.toHashCode());
      assertEquals((-1228617082), (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertEquals(2, objectArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append((short)0);
      assertEquals(1785808222, hashCodeBuilder0.toHashCode());
      assertEquals(1785808222, (int)hashCodeBuilder0.build());
      assertEquals(1785808222, hashCodeBuilder1.toHashCode());
      assertEquals(1785808222, (int)hashCodeBuilder1.build());
      assertEquals(1785808222, (int)hashCodeBuilder2.build());
      assertEquals(1785808222, hashCodeBuilder2.toHashCode());
      assertEquals(1785808222, (int)hashCodeBuilder4.build());
      assertEquals(1785808222, hashCodeBuilder4.toHashCode());
      assertEquals(1785808222, (int)hashCodeBuilder5.build());
      assertEquals(1785808222, hashCodeBuilder5.toHashCode());
      assertEquals(1785808222, (int)hashCodeBuilder6.build());
      assertEquals(1785808222, hashCodeBuilder6.toHashCode());
      assertNotNull(hashCodeBuilder6);
      assertEquals(2, objectArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      
      HashCodeBuilder hashCodeBuilder7 = hashCodeBuilder4.append(59L);
      assertEquals(1650394833, (int)hashCodeBuilder0.build());
      assertEquals(1650394833, hashCodeBuilder0.toHashCode());
      assertEquals(1650394833, (int)hashCodeBuilder1.build());
      assertEquals(1650394833, hashCodeBuilder1.toHashCode());
      assertEquals(1650394833, (int)hashCodeBuilder2.build());
      assertEquals(1650394833, hashCodeBuilder2.toHashCode());
      assertEquals(1650394833, (int)hashCodeBuilder4.build());
      assertEquals(1650394833, hashCodeBuilder4.toHashCode());
      assertEquals(1650394833, (int)hashCodeBuilder7.build());
      assertEquals(1650394833, hashCodeBuilder7.toHashCode());
      assertNotNull(hashCodeBuilder7);
      assertEquals(2, objectArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder7);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder7, hashCodeBuilder0);
      assertSame(hashCodeBuilder7, hashCodeBuilder5);
      assertSame(hashCodeBuilder7, hashCodeBuilder1);
      assertSame(hashCodeBuilder7, hashCodeBuilder4);
      assertSame(hashCodeBuilder7, hashCodeBuilder2);
      assertSame(hashCodeBuilder7, hashCodeBuilder3);
      assertSame(hashCodeBuilder7, hashCodeBuilder6);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Set<IDKey> set0 = HashCodeBuilder.getRegistry();
      assertNull(set0);
      
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      assertEquals((-1), (int)hashCodeBuilder0.build());
      assertEquals((-1), hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(floatArray0);
      assertEquals((-1), (int)hashCodeBuilder0.build());
      assertEquals((-1), hashCodeBuilder0.toHashCode());
      assertEquals((-1), (int)hashCodeBuilder1.build());
      assertEquals((-1), hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(booleanArray0);
      assertEquals(1, hashCodeBuilder0.toHashCode());
      assertEquals(1, (int)hashCodeBuilder0.build());
      assertEquals(1, (int)hashCodeBuilder1.build());
      assertEquals(1, hashCodeBuilder1.toHashCode());
      assertEquals(1, (int)hashCodeBuilder2.build());
      assertEquals(1, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertEquals(6, floatArray0.length);
      assertEquals(1, booleanArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-355), (-355));
      assertEquals((-355), hashCodeBuilder0.toHashCode());
      assertEquals((-355), (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-355);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(intArray0);
      assertEquals(125670, (int)hashCodeBuilder0.build());
      assertEquals(125670, hashCodeBuilder0.toHashCode());
      assertEquals(125670, hashCodeBuilder1.toHashCode());
      assertEquals(125670, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-355)}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-355);
      doubleArray0[1] = (double) (-355);
      doubleArray0[2] = (double) (-355);
      doubleArray0[3] = (double) (-355);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(doubleArray0);
      assertEquals((-1339962), (int)hashCodeBuilder0.build());
      assertEquals((-1339962), hashCodeBuilder0.toHashCode());
      assertEquals((-1339962), (int)hashCodeBuilder1.build());
      assertEquals((-1339962), hashCodeBuilder1.toHashCode());
      assertEquals((-1339962), hashCodeBuilder2.toHashCode());
      assertEquals((-1339962), (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertEquals(1, intArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new int[] {(-355)}, intArray0);
      assertArrayEquals(new double[] {(-355.0), (-355.0), (-355.0), (-355.0)}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.removeLastOccurrence(object0);
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      
      boolean boolean1 = linkedHashSet0.add("");
      assertEquals(0, linkedList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedHashSet0.contains(""));
      
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, (Collection<String>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(0);
      assertEquals(629, hashCodeBuilder0.toHashCode());
      assertEquals(629, (int)hashCodeBuilder0.build());
      assertEquals(629, (int)hashCodeBuilder1.build());
      assertEquals(629, hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(1532);
      assertEquals(24805, (int)hashCodeBuilder0.build());
      assertEquals(24805, hashCodeBuilder0.toHashCode());
      assertEquals(24805, hashCodeBuilder1.toHashCode());
      assertEquals(24805, (int)hashCodeBuilder1.build());
      assertEquals(24805, hashCodeBuilder2.toHashCode());
      assertEquals(24805, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append('z');
      assertEquals(917907, hashCodeBuilder0.toHashCode());
      assertEquals(917907, (int)hashCodeBuilder0.build());
      assertEquals(917907, (int)hashCodeBuilder1.build());
      assertEquals(917907, hashCodeBuilder1.toHashCode());
      assertEquals(917907, (int)hashCodeBuilder2.build());
      assertEquals(917907, hashCodeBuilder2.toHashCode());
      assertEquals(917907, (int)hashCodeBuilder3.build());
      assertEquals(917907, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((-580.0319F));
      assertEquals((-971555766), hashCodeBuilder0.toHashCode());
      assertEquals((-971555766), (int)hashCodeBuilder0.build());
      assertEquals((-971555766), hashCodeBuilder1.toHashCode());
      assertEquals((-971555766), (int)hashCodeBuilder1.build());
      assertEquals((-971555766), (int)hashCodeBuilder2.build());
      assertEquals((-971555766), hashCodeBuilder2.toHashCode());
      assertEquals((-971555766), (int)hashCodeBuilder3.build());
      assertEquals((-971555766), hashCodeBuilder3.toHashCode());
      assertEquals((-971555766), (int)hashCodeBuilder4.build());
      assertEquals((-971555766), hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((byte)17);
      assertEquals((-1587824957), (int)hashCodeBuilder0.build());
      assertEquals((-1587824957), hashCodeBuilder0.toHashCode());
      assertEquals((-1587824957), hashCodeBuilder1.toHashCode());
      assertEquals((-1587824957), (int)hashCodeBuilder1.build());
      assertEquals((-1587824957), hashCodeBuilder2.toHashCode());
      assertEquals((-1587824957), (int)hashCodeBuilder2.build());
      assertEquals((-1587824957), hashCodeBuilder3.toHashCode());
      assertEquals((-1587824957), (int)hashCodeBuilder3.build());
      assertEquals((-1587824957), hashCodeBuilder4.toHashCode());
      assertEquals((-1587824957), (int)hashCodeBuilder4.build());
      assertEquals((-1587824957), hashCodeBuilder5.toHashCode());
      assertEquals((-1587824957), (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append((byte[]) null);
      assertEquals(1380018735, hashCodeBuilder0.toHashCode());
      assertEquals(1380018735, (int)hashCodeBuilder0.build());
      assertEquals(1380018735, hashCodeBuilder1.toHashCode());
      assertEquals(1380018735, (int)hashCodeBuilder1.build());
      assertEquals(1380018735, (int)hashCodeBuilder2.build());
      assertEquals(1380018735, hashCodeBuilder2.toHashCode());
      assertEquals(1380018735, (int)hashCodeBuilder3.build());
      assertEquals(1380018735, hashCodeBuilder3.toHashCode());
      assertEquals(1380018735, (int)hashCodeBuilder4.build());
      assertEquals(1380018735, hashCodeBuilder4.toHashCode());
      assertEquals(1380018735, (int)hashCodeBuilder5.build());
      assertEquals(1380018735, hashCodeBuilder5.toHashCode());
      assertEquals(1380018735, hashCodeBuilder6.toHashCode());
      assertEquals(1380018735, (int)hashCodeBuilder6.build());
      assertNotNull(hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-601), (-601));
      assertEquals((-601), hashCodeBuilder0.toHashCode());
      assertEquals((-601), (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((double) (-601));
      assertEquals((-1064809743), hashCodeBuilder0.toHashCode());
      assertEquals((-1064809743), (int)hashCodeBuilder0.build());
      assertEquals((-1064809743), (int)hashCodeBuilder1.build());
      assertEquals((-1064809743), hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.appendSuper((-601));
      assertEquals(527838, hashCodeBuilder0.toHashCode());
      assertEquals(527838, (int)hashCodeBuilder0.build());
      assertEquals(527838, hashCodeBuilder1.toHashCode());
      assertEquals(527838, (int)hashCodeBuilder1.build());
      assertEquals(527838, (int)hashCodeBuilder2.build());
      assertEquals(527838, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder1.append((-578L));
      assertEquals((-317230061), (int)hashCodeBuilder0.build());
      assertEquals((-317230061), hashCodeBuilder0.toHashCode());
      assertEquals((-317230061), (int)hashCodeBuilder1.build());
      assertEquals((-317230061), hashCodeBuilder1.toHashCode());
      assertEquals((-317230061), (int)hashCodeBuilder3.build());
      assertEquals((-317230061), hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder2.append('@');
      assertEquals(1676705701, hashCodeBuilder0.toHashCode());
      assertEquals(1676705701, (int)hashCodeBuilder0.build());
      assertEquals(1676705701, (int)hashCodeBuilder1.build());
      assertEquals(1676705701, hashCodeBuilder1.toHashCode());
      assertEquals(1676705701, (int)hashCodeBuilder2.build());
      assertEquals(1676705701, hashCodeBuilder2.toHashCode());
      assertEquals(1676705701, (int)hashCodeBuilder4.build());
      assertEquals(1676705701, hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1, (-1));
      assertEquals(1, hashCodeBuilder0.toHashCode());
      assertEquals(1, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(longArray0);
      assertEquals((-1), hashCodeBuilder0.toHashCode());
      assertEquals((-1), (int)hashCodeBuilder0.build());
      assertEquals((-1), (int)hashCodeBuilder1.build());
      assertEquals((-1), hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), 1L, 1L}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((byte)0);
      assertEquals(1, hashCodeBuilder0.toHashCode());
      assertEquals(1, (int)hashCodeBuilder0.build());
      assertEquals(1, (int)hashCodeBuilder1.build());
      assertEquals(1, hashCodeBuilder1.toHashCode());
      assertEquals(1, (int)hashCodeBuilder2.build());
      assertEquals(1, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), 1L, 1L}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append('&');
      assertEquals(37, hashCodeBuilder0.toHashCode());
      assertEquals(37, (int)hashCodeBuilder0.build());
      assertEquals(37, hashCodeBuilder1.toHashCode());
      assertEquals(37, (int)hashCodeBuilder1.build());
      assertEquals(37, hashCodeBuilder2.toHashCode());
      assertEquals(37, (int)hashCodeBuilder2.build());
      assertEquals(37, (int)hashCodeBuilder3.build());
      assertEquals(37, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), 1L, 1L}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = HashCodeBuilder.reflectionHashCode(209, 209, object0);
      assertEquals(209, int0);
      
      int int1 = (-1364);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(209, (-1364), object0, true, (Class<? super Object>) class0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      int int1 = (-733);
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(0, (-733));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-592), (-592), object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-1.0));
      assertEquals((-1074789771), (int)hashCodeBuilder0.build());
      assertEquals((-1074789771), hashCodeBuilder0.toHashCode());
      assertEquals((-1074789771), hashCodeBuilder1.toHashCode());
      assertEquals((-1074789771), (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append((-1.0));
      assertEquals(2107661033, (int)hashCodeBuilder0.build());
      assertEquals(2107661033, hashCodeBuilder0.toHashCode());
      assertEquals(2107661033, (int)hashCodeBuilder2.build());
      assertEquals(2107661033, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      int int0 = HashCodeBuilder.reflectionHashCode(object0, false);
      assertEquals(17, int0);
      
      int int1 = HashCodeBuilder.reflectionHashCode(751, 751, (Object) hashCodeBuilder0);
      assertEquals(2107661033, (int)hashCodeBuilder0.build());
      assertEquals(2107661033, hashCodeBuilder0.toHashCode());
      assertFalse(int1 == int0);
      assertEquals(423570768, int1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      
      Integer integer0 = hashCodeBuilder0.build();
      assertEquals(2107661033, (int)hashCodeBuilder0.build());
      assertEquals(2107661033, hashCodeBuilder0.toHashCode());
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2107661033, (int)integer0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      
      int int2 = hashCodeBuilder0.hashCode();
      assertEquals(2107661033, (int)hashCodeBuilder0.build());
      assertEquals(2107661033, hashCodeBuilder0.toHashCode());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      
      Set<IDKey> set0 = HashCodeBuilder.getRegistry();
      assertNull(set0);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder0.append((long) 423570768);
      assertEquals(1097617661, hashCodeBuilder0.toHashCode());
      assertEquals(1097617661, (int)hashCodeBuilder0.build());
      assertEquals(1097617661, hashCodeBuilder3.toHashCode());
      assertEquals(1097617661, (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder1.append(1644L);
      assertEquals(1957149437, hashCodeBuilder0.toHashCode());
      assertEquals(1957149437, (int)hashCodeBuilder0.build());
      assertEquals(1957149437, (int)hashCodeBuilder1.build());
      assertEquals(1957149437, hashCodeBuilder1.toHashCode());
      assertEquals(1957149437, hashCodeBuilder4.toHashCode());
      assertEquals(1957149437, (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-2759), (-2759));
      assertEquals((-2759), hashCodeBuilder0.toHashCode());
      assertEquals((-2759), (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = '%';
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(charArray0);
      assertEquals(472842933, (int)hashCodeBuilder0.build());
      assertEquals(472842933, hashCodeBuilder0.toHashCode());
      assertEquals(472842933, (int)hashCodeBuilder1.build());
      assertEquals(472842933, hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'_', '%'}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((short)0);
      assertEquals(1096405837, hashCodeBuilder0.toHashCode());
      assertEquals(1096405837, (int)hashCodeBuilder0.build());
      assertEquals(1096405837, hashCodeBuilder1.toHashCode());
      assertEquals(1096405837, (int)hashCodeBuilder1.build());
      assertEquals(1096405837, hashCodeBuilder2.toHashCode());
      assertEquals(1096405837, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'_', '%'}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((byte) (-1));
      assertEquals((-1326727900), hashCodeBuilder0.toHashCode());
      assertEquals((-1326727900), (int)hashCodeBuilder0.build());
      assertEquals((-1326727900), (int)hashCodeBuilder1.build());
      assertEquals((-1326727900), hashCodeBuilder1.toHashCode());
      assertEquals((-1326727900), hashCodeBuilder2.toHashCode());
      assertEquals((-1326727900), (int)hashCodeBuilder2.build());
      assertEquals((-1326727900), (int)hashCodeBuilder3.build());
      assertEquals((-1326727900), hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'_', '%'}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((long) (byte) (-1));
      assertEquals(1130139908, (int)hashCodeBuilder0.build());
      assertEquals(1130139908, hashCodeBuilder0.toHashCode());
      assertEquals(1130139908, hashCodeBuilder1.toHashCode());
      assertEquals(1130139908, (int)hashCodeBuilder1.build());
      assertEquals(1130139908, hashCodeBuilder2.toHashCode());
      assertEquals(1130139908, (int)hashCodeBuilder2.build());
      assertEquals(1130139908, hashCodeBuilder3.toHashCode());
      assertEquals(1130139908, (int)hashCodeBuilder3.build());
      assertEquals(1130139908, hashCodeBuilder4.toHashCode());
      assertEquals(1130139908, (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'_', '%'}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((Object) integer0);
      assertEquals(90250726, (int)hashCodeBuilder0.build());
      assertEquals(90250726, hashCodeBuilder0.toHashCode());
      assertEquals(90250726, (int)hashCodeBuilder1.build());
      assertEquals(90250726, hashCodeBuilder1.toHashCode());
      assertEquals(90250726, (int)hashCodeBuilder2.build());
      assertEquals(90250726, hashCodeBuilder2.toHashCode());
      assertEquals(90250726, (int)hashCodeBuilder3.build());
      assertEquals(90250726, hashCodeBuilder3.toHashCode());
      assertEquals(90250726, (int)hashCodeBuilder4.build());
      assertEquals(90250726, hashCodeBuilder4.toHashCode());
      assertEquals(90250726, hashCodeBuilder5.toHashCode());
      assertEquals(90250726, (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'_', '%'}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append((Object) null);
      assertEquals(106350134, (int)hashCodeBuilder0.build());
      assertEquals(106350134, hashCodeBuilder0.toHashCode());
      assertEquals(106350134, (int)hashCodeBuilder1.build());
      assertEquals(106350134, hashCodeBuilder1.toHashCode());
      assertEquals(106350134, (int)hashCodeBuilder2.build());
      assertEquals(106350134, hashCodeBuilder2.toHashCode());
      assertEquals(106350134, (int)hashCodeBuilder3.build());
      assertEquals(106350134, hashCodeBuilder3.toHashCode());
      assertEquals(106350134, (int)hashCodeBuilder4.build());
      assertEquals(106350134, hashCodeBuilder4.toHashCode());
      assertEquals(106350134, (int)hashCodeBuilder5.build());
      assertEquals(106350134, hashCodeBuilder5.toHashCode());
      assertEquals(106350134, (int)hashCodeBuilder6.build());
      assertEquals(106350134, hashCodeBuilder6.toHashCode());
      assertNotNull(hashCodeBuilder6);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'_', '%'}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(0L);
      assertEquals(629, (int)hashCodeBuilder0.build());
      assertEquals(629, hashCodeBuilder0.toHashCode());
      assertEquals(629, hashCodeBuilder1.toHashCode());
      assertEquals(629, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1364;
      intArray0[1] = 37;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(intArray0);
      assertEquals(911606, (int)hashCodeBuilder0.build());
      assertEquals(911606, hashCodeBuilder0.toHashCode());
      assertEquals(911606, hashCodeBuilder1.toHashCode());
      assertEquals(911606, (int)hashCodeBuilder1.build());
      assertEquals(911606, (int)hashCodeBuilder2.build());
      assertEquals(911606, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1364, 37}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(true);
      assertEquals(33729422, hashCodeBuilder0.toHashCode());
      assertEquals(33729422, (int)hashCodeBuilder0.build());
      assertEquals(33729422, (int)hashCodeBuilder1.build());
      assertEquals(33729422, hashCodeBuilder1.toHashCode());
      assertEquals(33729422, (int)hashCodeBuilder2.build());
      assertEquals(33729422, hashCodeBuilder2.toHashCode());
      assertEquals(33729422, (int)hashCodeBuilder3.build());
      assertEquals(33729422, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1364, 37}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.appendSuper(1364);
      assertEquals(1247989978, (int)hashCodeBuilder0.build());
      assertEquals(1247989978, hashCodeBuilder0.toHashCode());
      assertEquals(1247989978, (int)hashCodeBuilder1.build());
      assertEquals(1247989978, hashCodeBuilder1.toHashCode());
      assertEquals(1247989978, hashCodeBuilder2.toHashCode());
      assertEquals(1247989978, (int)hashCodeBuilder2.build());
      assertEquals(1247989978, hashCodeBuilder3.toHashCode());
      assertEquals(1247989978, (int)hashCodeBuilder3.build());
      assertEquals(1247989978, (int)hashCodeBuilder4.build());
      assertEquals(1247989978, hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder4);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1364, 37}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((byte)36);
      assertEquals((-1069011034), (int)hashCodeBuilder0.build());
      assertEquals((-1069011034), hashCodeBuilder0.toHashCode());
      assertEquals((-1069011034), hashCodeBuilder1.toHashCode());
      assertEquals((-1069011034), (int)hashCodeBuilder1.build());
      assertEquals((-1069011034), (int)hashCodeBuilder2.build());
      assertEquals((-1069011034), hashCodeBuilder2.toHashCode());
      assertEquals((-1069011034), (int)hashCodeBuilder3.build());
      assertEquals((-1069011034), hashCodeBuilder3.toHashCode());
      assertEquals((-1069011034), (int)hashCodeBuilder4.build());
      assertEquals((-1069011034), hashCodeBuilder4.toHashCode());
      assertEquals((-1069011034), hashCodeBuilder5.toHashCode());
      assertEquals((-1069011034), (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1364, 37}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.appendSuper(1364);
      assertEquals((-898701230), (int)hashCodeBuilder0.build());
      assertEquals((-898701230), hashCodeBuilder0.toHashCode());
      assertEquals((-898701230), (int)hashCodeBuilder1.build());
      assertEquals((-898701230), hashCodeBuilder1.toHashCode());
      assertEquals((-898701230), hashCodeBuilder2.toHashCode());
      assertEquals((-898701230), (int)hashCodeBuilder2.build());
      assertEquals((-898701230), hashCodeBuilder3.toHashCode());
      assertEquals((-898701230), (int)hashCodeBuilder3.build());
      assertEquals((-898701230), (int)hashCodeBuilder4.build());
      assertEquals((-898701230), hashCodeBuilder4.toHashCode());
      assertEquals((-898701230), hashCodeBuilder5.toHashCode());
      assertEquals((-898701230), (int)hashCodeBuilder5.build());
      assertEquals((-898701230), hashCodeBuilder6.toHashCode());
      assertEquals((-898701230), (int)hashCodeBuilder6.build());
      assertNotNull(hashCodeBuilder6);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1364, 37}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder7 = hashCodeBuilder0.append((float[]) null);
      assertEquals(1107792858, (int)hashCodeBuilder0.build());
      assertEquals(1107792858, hashCodeBuilder0.toHashCode());
      assertEquals(1107792858, (int)hashCodeBuilder7.build());
      assertEquals(1107792858, hashCodeBuilder7.toHashCode());
      assertNotNull(hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder7, hashCodeBuilder2);
      assertSame(hashCodeBuilder7, hashCodeBuilder1);
      assertSame(hashCodeBuilder7, hashCodeBuilder5);
      assertSame(hashCodeBuilder7, hashCodeBuilder4);
      assertSame(hashCodeBuilder7, hashCodeBuilder0);
      assertSame(hashCodeBuilder7, hashCodeBuilder6);
      assertSame(hashCodeBuilder7, hashCodeBuilder3);
      
      Integer integer0 = new Integer(1364);
      assertNotNull(integer0);
      assertEquals(1364, (int)integer0);
      
      HashCodeBuilder hashCodeBuilder8 = hashCodeBuilder4.append((Object) integer0);
      assertEquals((-1961337212), (int)hashCodeBuilder0.build());
      assertEquals((-1961337212), hashCodeBuilder0.toHashCode());
      assertEquals((-1961337212), hashCodeBuilder1.toHashCode());
      assertEquals((-1961337212), (int)hashCodeBuilder1.build());
      assertEquals((-1961337212), (int)hashCodeBuilder2.build());
      assertEquals((-1961337212), hashCodeBuilder2.toHashCode());
      assertEquals((-1961337212), (int)hashCodeBuilder3.build());
      assertEquals((-1961337212), hashCodeBuilder3.toHashCode());
      assertEquals((-1961337212), (int)hashCodeBuilder4.build());
      assertEquals((-1961337212), hashCodeBuilder4.toHashCode());
      assertEquals((-1961337212), (int)hashCodeBuilder8.build());
      assertEquals((-1961337212), hashCodeBuilder8.toHashCode());
      assertNotNull(hashCodeBuilder8);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1364, 37}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder8);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder8);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder8);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder7);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder8);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder7);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder8);
      assertSame(hashCodeBuilder4, hashCodeBuilder7);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder8, hashCodeBuilder2);
      assertSame(hashCodeBuilder8, hashCodeBuilder7);
      assertSame(hashCodeBuilder8, hashCodeBuilder1);
      assertSame(hashCodeBuilder8, hashCodeBuilder4);
      assertSame(hashCodeBuilder8, hashCodeBuilder5);
      assertSame(hashCodeBuilder8, hashCodeBuilder0);
      assertSame(hashCodeBuilder8, hashCodeBuilder6);
      assertSame(hashCodeBuilder8, hashCodeBuilder3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-1.0));
      assertEquals((-1074789771), (int)hashCodeBuilder0.build());
      assertEquals((-1074789771), hashCodeBuilder0.toHashCode());
      assertEquals((-1074789771), hashCodeBuilder1.toHashCode());
      assertEquals((-1074789771), (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append((-1.0));
      assertEquals(2107661033, hashCodeBuilder0.toHashCode());
      assertEquals(2107661033, (int)hashCodeBuilder0.build());
      assertEquals(2107661033, hashCodeBuilder2.toHashCode());
      assertEquals(2107661033, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      
      int int0 = HashCodeBuilder.reflectionHashCode(751, 751, (Object) hashCodeBuilder0);
      assertEquals(2107661033, hashCodeBuilder0.toHashCode());
      assertEquals(2107661033, (int)hashCodeBuilder0.build());
      assertEquals(423567760, int0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      
      Integer integer0 = hashCodeBuilder0.build();
      assertEquals(2107661033, hashCodeBuilder0.toHashCode());
      assertEquals(2107661033, (int)hashCodeBuilder0.build());
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2107661033, (int)integer0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      
      int int1 = hashCodeBuilder0.hashCode();
      assertEquals(2107661033, hashCodeBuilder0.toHashCode());
      assertEquals(2107661033, (int)hashCodeBuilder0.build());
      assertFalse(int1 == int0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      
      Set<IDKey> set0 = HashCodeBuilder.getRegistry();
      assertNull(set0);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder0.append((long) 423567760);
      assertEquals(1097614653, hashCodeBuilder0.toHashCode());
      assertEquals(1097614653, (int)hashCodeBuilder0.build());
      assertEquals(1097614653, (int)hashCodeBuilder3.build());
      assertEquals(1097614653, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder1.append(1644L);
      assertEquals(1957038141, (int)hashCodeBuilder0.build());
      assertEquals(1957038141, hashCodeBuilder0.toHashCode());
      assertEquals(1957038141, (int)hashCodeBuilder1.build());
      assertEquals(1957038141, hashCodeBuilder1.toHashCode());
      assertEquals(1957038141, (int)hashCodeBuilder4.build());
      assertEquals(1957038141, hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(0);
      assertEquals(629, hashCodeBuilder0.toHashCode());
      assertEquals(629, (int)hashCodeBuilder0.build());
      assertEquals(629, hashCodeBuilder1.toHashCode());
      assertEquals(629, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(longArray0);
      assertEquals(861101, hashCodeBuilder0.toHashCode());
      assertEquals(861101, (int)hashCodeBuilder0.build());
      assertEquals(861101, hashCodeBuilder1.toHashCode());
      assertEquals(861101, (int)hashCodeBuilder1.build());
      assertEquals(861101, (int)hashCodeBuilder2.build());
      assertEquals(861101, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((long) 0);
      assertEquals(31860737, (int)hashCodeBuilder0.build());
      assertEquals(31860737, hashCodeBuilder0.toHashCode());
      assertEquals(31860737, hashCodeBuilder1.toHashCode());
      assertEquals(31860737, (int)hashCodeBuilder1.build());
      assertEquals(31860737, (int)hashCodeBuilder2.build());
      assertEquals(31860737, hashCodeBuilder2.toHashCode());
      assertEquals(31860737, hashCodeBuilder3.toHashCode());
      assertEquals(31860737, (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((Object[]) null);
      assertEquals(1178847269, (int)hashCodeBuilder0.build());
      assertEquals(1178847269, hashCodeBuilder0.toHashCode());
      assertEquals(1178847269, (int)hashCodeBuilder1.build());
      assertEquals(1178847269, hashCodeBuilder1.toHashCode());
      assertEquals(1178847269, hashCodeBuilder2.toHashCode());
      assertEquals(1178847269, (int)hashCodeBuilder2.build());
      assertEquals(1178847269, hashCodeBuilder3.toHashCode());
      assertEquals(1178847269, (int)hashCodeBuilder3.build());
      assertEquals(1178847269, (int)hashCodeBuilder4.build());
      assertEquals(1178847269, hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder4);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder3.append((Object) hashCodeBuilder2);
      assertEquals(667675994, hashCodeBuilder0.toHashCode());
      assertEquals(667675994, (int)hashCodeBuilder0.build());
      assertEquals(667675994, hashCodeBuilder1.toHashCode());
      assertEquals(667675994, (int)hashCodeBuilder1.build());
      assertEquals(667675994, (int)hashCodeBuilder2.build());
      assertEquals(667675994, hashCodeBuilder2.toHashCode());
      assertEquals(667675994, (int)hashCodeBuilder3.build());
      assertEquals(667675994, hashCodeBuilder3.toHashCode());
      assertEquals(667675994, (int)hashCodeBuilder5.build());
      assertEquals(667675994, hashCodeBuilder5.toHashCode());
      assertNotNull(hashCodeBuilder5);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder4.append((Object[]) null);
      assertEquals((-1065791998), (int)hashCodeBuilder0.build());
      assertEquals((-1065791998), hashCodeBuilder0.toHashCode());
      assertEquals((-1065791998), hashCodeBuilder1.toHashCode());
      assertEquals((-1065791998), (int)hashCodeBuilder1.build());
      assertEquals((-1065791998), (int)hashCodeBuilder2.build());
      assertEquals((-1065791998), hashCodeBuilder2.toHashCode());
      assertEquals((-1065791998), (int)hashCodeBuilder3.build());
      assertEquals((-1065791998), hashCodeBuilder3.toHashCode());
      assertEquals((-1065791998), hashCodeBuilder4.toHashCode());
      assertEquals((-1065791998), (int)hashCodeBuilder4.build());
      assertEquals((-1065791998), (int)hashCodeBuilder6.build());
      assertEquals((-1065791998), hashCodeBuilder6.toHashCode());
      assertNotNull(hashCodeBuilder6);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder7 = hashCodeBuilder3.append(0.0F);
      assertEquals((-779598262), hashCodeBuilder0.toHashCode());
      assertEquals((-779598262), (int)hashCodeBuilder0.build());
      assertEquals((-779598262), (int)hashCodeBuilder1.build());
      assertEquals((-779598262), hashCodeBuilder1.toHashCode());
      assertEquals((-779598262), (int)hashCodeBuilder2.build());
      assertEquals((-779598262), hashCodeBuilder2.toHashCode());
      assertEquals((-779598262), (int)hashCodeBuilder3.build());
      assertEquals((-779598262), hashCodeBuilder3.toHashCode());
      assertEquals((-779598262), (int)hashCodeBuilder7.build());
      assertEquals((-779598262), hashCodeBuilder7.toHashCode());
      assertNotNull(hashCodeBuilder7);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder7);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder7);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder7);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder7);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder7, hashCodeBuilder5);
      assertSame(hashCodeBuilder7, hashCodeBuilder6);
      assertSame(hashCodeBuilder7, hashCodeBuilder3);
      assertSame(hashCodeBuilder7, hashCodeBuilder2);
      assertSame(hashCodeBuilder7, hashCodeBuilder1);
      assertSame(hashCodeBuilder7, hashCodeBuilder4);
      assertSame(hashCodeBuilder7, hashCodeBuilder0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      char[] charArray0 = new char[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(charArray0);
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, hashCodeBuilder1.toHashCode());
      assertEquals(17, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.appendSuper(0);
      assertEquals(629, (int)hashCodeBuilder0.build());
      assertEquals(629, hashCodeBuilder0.toHashCode());
      assertEquals(629, (int)hashCodeBuilder1.build());
      assertEquals(629, hashCodeBuilder1.toHashCode());
      assertEquals(629, (int)hashCodeBuilder2.build());
      assertEquals(629, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((-1124L));
      assertEquals(24396, (int)hashCodeBuilder0.build());
      assertEquals(24396, hashCodeBuilder0.toHashCode());
      assertEquals(24396, (int)hashCodeBuilder1.build());
      assertEquals(24396, hashCodeBuilder1.toHashCode());
      assertEquals(24396, (int)hashCodeBuilder2.build());
      assertEquals(24396, hashCodeBuilder2.toHashCode());
      assertEquals(24396, (int)hashCodeBuilder3.build());
      assertEquals(24396, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(floatArray0);
      assertEquals(902652, (int)hashCodeBuilder0.build());
      assertEquals(902652, hashCodeBuilder0.toHashCode());
      assertEquals(902652, (int)hashCodeBuilder1.build());
      assertEquals(902652, hashCodeBuilder1.toHashCode());
      assertEquals(902652, (int)hashCodeBuilder2.build());
      assertEquals(902652, hashCodeBuilder2.toHashCode());
      assertEquals(902652, (int)hashCodeBuilder3.build());
      assertEquals(902652, hashCodeBuilder3.toHashCode());
      assertEquals(902652, (int)hashCodeBuilder4.build());
      assertEquals(902652, hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder4);
      assertEquals(0, charArray0.length);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(false);
      assertEquals(33398125, (int)hashCodeBuilder0.build());
      assertEquals(33398125, hashCodeBuilder0.toHashCode());
      assertEquals(33398125, (int)hashCodeBuilder1.build());
      assertEquals(33398125, hashCodeBuilder1.toHashCode());
      assertEquals(33398125, (int)hashCodeBuilder2.build());
      assertEquals(33398125, hashCodeBuilder2.toHashCode());
      assertEquals(33398125, hashCodeBuilder3.toHashCode());
      assertEquals(33398125, (int)hashCodeBuilder3.build());
      assertEquals(33398125, hashCodeBuilder4.toHashCode());
      assertEquals(33398125, (int)hashCodeBuilder4.build());
      assertEquals(33398125, (int)hashCodeBuilder5.build());
      assertEquals(33398125, hashCodeBuilder5.toHashCode());
      assertNotNull(hashCodeBuilder5);
      assertEquals(0, charArray0.length);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append((long[]) null);
      assertEquals(1235730625, (int)hashCodeBuilder0.build());
      assertEquals(1235730625, hashCodeBuilder0.toHashCode());
      assertEquals(1235730625, hashCodeBuilder1.toHashCode());
      assertEquals(1235730625, (int)hashCodeBuilder1.build());
      assertEquals(1235730625, hashCodeBuilder2.toHashCode());
      assertEquals(1235730625, (int)hashCodeBuilder2.build());
      assertEquals(1235730625, (int)hashCodeBuilder3.build());
      assertEquals(1235730625, hashCodeBuilder3.toHashCode());
      assertEquals(1235730625, (int)hashCodeBuilder4.build());
      assertEquals(1235730625, hashCodeBuilder4.toHashCode());
      assertEquals(1235730625, hashCodeBuilder5.toHashCode());
      assertEquals(1235730625, (int)hashCodeBuilder5.build());
      assertEquals(1235730625, (int)hashCodeBuilder6.build());
      assertEquals(1235730625, hashCodeBuilder6.toHashCode());
      assertNotNull(hashCodeBuilder6);
      assertEquals(0, charArray0.length);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode(2091, 2091, (Object) "}N-V})8`3Tt:-UO", true);
      assertEquals((-813451371), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)36;
      byteArray0[4] = (byte)0;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(byteArray0);
      assertEquals(1178896553, (int)hashCodeBuilder0.build());
      assertEquals(1178896553, hashCodeBuilder0.toHashCode());
      assertEquals(1178896553, hashCodeBuilder1.toHashCode());
      assertEquals(1178896553, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)36, (byte)0, (byte)0}, byteArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      int int0 = hashCodeBuilder1.toHashCode();
      assertEquals(1178896553, (int)hashCodeBuilder0.build());
      assertEquals(1178896553, hashCodeBuilder0.toHashCode());
      assertEquals(1178896553, hashCodeBuilder1.toHashCode());
      assertEquals(1178896553, (int)hashCodeBuilder1.build());
      assertEquals(5, byteArray0.length);
      assertEquals(1178896553, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)36, (byte)0, (byte)0}, byteArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(2461, 2461);
      assertEquals(2461, hashCodeBuilder0.toHashCode());
      assertEquals(2461, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(32);
      assertEquals(6056553, hashCodeBuilder0.toHashCode());
      assertEquals(6056553, (int)hashCodeBuilder0.build());
      assertEquals(6056553, hashCodeBuilder1.toHashCode());
      assertEquals(6056553, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((byte)127);
      assertEquals(2020275172, (int)hashCodeBuilder0.build());
      assertEquals(2020275172, hashCodeBuilder0.toHashCode());
      assertEquals(2020275172, (int)hashCodeBuilder1.build());
      assertEquals(2020275172, hashCodeBuilder1.toHashCode());
      assertEquals(2020275172, hashCodeBuilder2.toHashCode());
      assertEquals(2020275172, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2461;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 32;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(floatArray0);
      assertEquals((-985326988), hashCodeBuilder0.toHashCode());
      assertEquals((-985326988), (int)hashCodeBuilder0.build());
      assertEquals((-985326988), hashCodeBuilder1.toHashCode());
      assertEquals((-985326988), (int)hashCodeBuilder1.build());
      assertEquals((-985326988), (int)hashCodeBuilder2.build());
      assertEquals((-985326988), hashCodeBuilder2.toHashCode());
      assertEquals((-985326988), hashCodeBuilder3.toHashCode());
      assertEquals((-985326988), (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {2461.0F, 0.0F, 32.0F}, floatArray0, 0.01F);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(0L);
      assertEquals(629, hashCodeBuilder0.toHashCode());
      assertEquals(629, (int)hashCodeBuilder0.build());
      assertEquals(629, (int)hashCodeBuilder1.build());
      assertEquals(629, hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1364;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(intArray0);
      assertEquals(911569, hashCodeBuilder0.toHashCode());
      assertEquals(911569, (int)hashCodeBuilder0.build());
      assertEquals(911569, hashCodeBuilder1.toHashCode());
      assertEquals(911569, (int)hashCodeBuilder1.build());
      assertEquals(911569, (int)hashCodeBuilder2.build());
      assertEquals(911569, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1364, 0}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(true);
      assertEquals(33728053, hashCodeBuilder0.toHashCode());
      assertEquals(33728053, (int)hashCodeBuilder0.build());
      assertEquals(33728053, (int)hashCodeBuilder1.build());
      assertEquals(33728053, hashCodeBuilder1.toHashCode());
      assertEquals(33728053, (int)hashCodeBuilder2.build());
      assertEquals(33728053, hashCodeBuilder2.toHashCode());
      assertEquals(33728053, hashCodeBuilder3.toHashCode());
      assertEquals(33728053, (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1364, 0}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.appendSuper(1364);
      assertEquals(1247939325, (int)hashCodeBuilder0.build());
      assertEquals(1247939325, hashCodeBuilder0.toHashCode());
      assertEquals(1247939325, hashCodeBuilder1.toHashCode());
      assertEquals(1247939325, (int)hashCodeBuilder1.build());
      assertEquals(1247939325, (int)hashCodeBuilder2.build());
      assertEquals(1247939325, hashCodeBuilder2.toHashCode());
      assertEquals(1247939325, hashCodeBuilder3.toHashCode());
      assertEquals(1247939325, (int)hashCodeBuilder3.build());
      assertEquals(1247939325, hashCodeBuilder4.toHashCode());
      assertEquals(1247939325, (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1364, 0}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      
      Integer integer0 = new Integer(1364);
      assertNotNull(integer0);
      assertEquals(1364, (int)integer0);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((Object) integer0);
      assertEquals((-1070885229), (int)hashCodeBuilder0.build());
      assertEquals((-1070885229), hashCodeBuilder0.toHashCode());
      assertEquals((-1070885229), hashCodeBuilder1.toHashCode());
      assertEquals((-1070885229), (int)hashCodeBuilder1.build());
      assertEquals((-1070885229), hashCodeBuilder2.toHashCode());
      assertEquals((-1070885229), (int)hashCodeBuilder2.build());
      assertEquals((-1070885229), hashCodeBuilder3.toHashCode());
      assertEquals((-1070885229), (int)hashCodeBuilder3.build());
      assertEquals((-1070885229), hashCodeBuilder4.toHashCode());
      assertEquals((-1070885229), (int)hashCodeBuilder4.build());
      assertEquals((-1070885229), (int)hashCodeBuilder5.build());
      assertEquals((-1070885229), hashCodeBuilder5.toHashCode());
      assertNotNull(hashCodeBuilder5);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1364, 0}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"<";
      stringArray0[1] = "1G}LxebrT";
      stringArray0[2] = "";
      stringArray0[3] = "r,w!N";
      stringArray0[4] = "HashCodeBuilder requires an odd multiplier";
      int int0 = HashCodeBuilder.reflectionHashCode((Object) linkedList0, stringArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(5, stringArray0.length);
      assertEquals(17, int0);
      assertFalse(linkedList0.contains("\"<"));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-1.0));
      assertEquals((-1074789771), hashCodeBuilder0.toHashCode());
      assertEquals((-1074789771), (int)hashCodeBuilder0.build());
      assertEquals((-1074789771), (int)hashCodeBuilder1.build());
      assertEquals((-1074789771), hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      int int0 = HashCodeBuilder.reflectionHashCode(751, 751, (Object) hashCodeBuilder0);
      assertEquals((-1074789771), hashCodeBuilder0.toHashCode());
      assertEquals((-1074789771), (int)hashCodeBuilder0.build());
      assertEquals(423567760, int0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      
      Integer integer0 = new Integer(423567760);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(423567760, (int)integer0);
      
      int int1 = hashCodeBuilder0.hashCode();
      assertEquals((-1074789771), hashCodeBuilder0.toHashCode());
      assertEquals((-1074789771), (int)hashCodeBuilder0.build());
      assertFalse(int1 == int0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      
      Set<IDKey> set0 = HashCodeBuilder.getRegistry();
      assertNull(set0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append(1644L);
      assertEquals((-1112514219), hashCodeBuilder0.toHashCode());
      assertEquals((-1112514219), (int)hashCodeBuilder0.build());
      assertEquals((-1112514219), (int)hashCodeBuilder2.build());
      assertEquals((-1112514219), hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((short[]) null);
      assertEquals(1786646857, (int)hashCodeBuilder0.build());
      assertEquals(1786646857, hashCodeBuilder0.toHashCode());
      assertEquals(1786646857, hashCodeBuilder2.toHashCode());
      assertEquals(1786646857, (int)hashCodeBuilder2.build());
      assertEquals(1786646857, hashCodeBuilder3.toHashCode());
      assertEquals(1786646857, (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(0);
      assertEquals(629, (int)hashCodeBuilder0.build());
      assertEquals(629, hashCodeBuilder0.toHashCode());
      assertEquals(629, hashCodeBuilder1.toHashCode());
      assertEquals(629, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(longArray0);
      assertEquals(861101, (int)hashCodeBuilder0.build());
      assertEquals(861101, hashCodeBuilder0.toHashCode());
      assertEquals(861101, hashCodeBuilder1.toHashCode());
      assertEquals(861101, (int)hashCodeBuilder1.build());
      assertEquals(861101, hashCodeBuilder2.toHashCode());
      assertEquals(861101, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder1.append((Object[]) null);
      assertEquals(31860737, (int)hashCodeBuilder0.build());
      assertEquals(31860737, hashCodeBuilder0.toHashCode());
      assertEquals(31860737, (int)hashCodeBuilder1.build());
      assertEquals(31860737, hashCodeBuilder1.toHashCode());
      assertEquals(31860737, (int)hashCodeBuilder3.build());
      assertEquals(31860737, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder0.append((Object) hashCodeBuilder2);
      assertEquals(1178847270, (int)hashCodeBuilder0.build());
      assertEquals(1178847270, hashCodeBuilder0.toHashCode());
      assertEquals(1178847270, (int)hashCodeBuilder1.build());
      assertEquals(1178847270, hashCodeBuilder1.toHashCode());
      assertEquals(1178847270, hashCodeBuilder2.toHashCode());
      assertEquals(1178847270, (int)hashCodeBuilder2.build());
      assertEquals(1178847270, hashCodeBuilder4.toHashCode());
      assertEquals(1178847270, (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder3.append((Object[]) null);
      assertEquals(667676030, hashCodeBuilder0.toHashCode());
      assertEquals(667676030, (int)hashCodeBuilder0.build());
      assertEquals(667676030, hashCodeBuilder1.toHashCode());
      assertEquals(667676030, (int)hashCodeBuilder1.build());
      assertEquals(667676030, (int)hashCodeBuilder3.build());
      assertEquals(667676030, hashCodeBuilder3.toHashCode());
      assertEquals(667676030, (int)hashCodeBuilder5.build());
      assertEquals(667676030, hashCodeBuilder5.toHashCode());
      assertNotNull(hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder1.append((float) 0L);
      assertEquals((-1065790666), (int)hashCodeBuilder0.build());
      assertEquals((-1065790666), hashCodeBuilder0.toHashCode());
      assertEquals((-1065790666), hashCodeBuilder1.toHashCode());
      assertEquals((-1065790666), (int)hashCodeBuilder1.build());
      assertEquals((-1065790666), hashCodeBuilder6.toHashCode());
      assertEquals((-1065790666), (int)hashCodeBuilder6.build());
      assertNotNull(hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(0);
      assertEquals(629, (int)hashCodeBuilder0.build());
      assertEquals(629, hashCodeBuilder0.toHashCode());
      assertEquals(629, (int)hashCodeBuilder1.build());
      assertEquals(629, hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(1532);
      assertEquals(24805, hashCodeBuilder0.toHashCode());
      assertEquals(24805, (int)hashCodeBuilder0.build());
      assertEquals(24805, hashCodeBuilder1.toHashCode());
      assertEquals(24805, (int)hashCodeBuilder1.build());
      assertEquals(24805, (int)hashCodeBuilder2.build());
      assertEquals(24805, hashCodeBuilder2.toHashCode());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append('z');
      assertEquals(917907, (int)hashCodeBuilder0.build());
      assertEquals(917907, hashCodeBuilder0.toHashCode());
      assertEquals(917907, (int)hashCodeBuilder1.build());
      assertEquals(917907, hashCodeBuilder1.toHashCode());
      assertEquals(917907, hashCodeBuilder2.toHashCode());
      assertEquals(917907, (int)hashCodeBuilder2.build());
      assertEquals(917907, hashCodeBuilder3.toHashCode());
      assertEquals(917907, (int)hashCodeBuilder3.build());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((float) 1532);
      assertEquals(1187363391, hashCodeBuilder0.toHashCode());
      assertEquals(1187363391, (int)hashCodeBuilder0.build());
      assertEquals(1187363391, hashCodeBuilder1.toHashCode());
      assertEquals(1187363391, (int)hashCodeBuilder1.build());
      assertEquals(1187363391, hashCodeBuilder2.toHashCode());
      assertEquals(1187363391, (int)hashCodeBuilder2.build());
      assertEquals(1187363391, hashCodeBuilder3.toHashCode());
      assertEquals(1187363391, (int)hashCodeBuilder3.build());
      assertEquals(1187363391, (int)hashCodeBuilder4.build());
      assertEquals(1187363391, hashCodeBuilder4.toHashCode());
      assertNotNull(hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((byte)17);
      assertEquals(982772524, (int)hashCodeBuilder0.build());
      assertEquals(982772524, hashCodeBuilder0.toHashCode());
      assertEquals(982772524, (int)hashCodeBuilder1.build());
      assertEquals(982772524, hashCodeBuilder1.toHashCode());
      assertEquals(982772524, (int)hashCodeBuilder2.build());
      assertEquals(982772524, hashCodeBuilder2.toHashCode());
      assertEquals(982772524, (int)hashCodeBuilder3.build());
      assertEquals(982772524, hashCodeBuilder3.toHashCode());
      assertEquals(982772524, (int)hashCodeBuilder4.build());
      assertEquals(982772524, hashCodeBuilder4.toHashCode());
      assertEquals(982772524, hashCodeBuilder5.toHashCode());
      assertEquals(982772524, (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append((byte[]) null);
      assertEquals(2002845020, (int)hashCodeBuilder0.build());
      assertEquals(2002845020, hashCodeBuilder0.toHashCode());
      assertEquals(2002845020, (int)hashCodeBuilder1.build());
      assertEquals(2002845020, hashCodeBuilder1.toHashCode());
      assertEquals(2002845020, hashCodeBuilder2.toHashCode());
      assertEquals(2002845020, (int)hashCodeBuilder2.build());
      assertEquals(2002845020, (int)hashCodeBuilder3.build());
      assertEquals(2002845020, hashCodeBuilder3.toHashCode());
      assertEquals(2002845020, hashCodeBuilder4.toHashCode());
      assertEquals(2002845020, (int)hashCodeBuilder4.build());
      assertEquals(2002845020, hashCodeBuilder5.toHashCode());
      assertEquals(2002845020, (int)hashCodeBuilder5.build());
      assertEquals(2002845020, (int)hashCodeBuilder6.build());
      assertEquals(2002845020, hashCodeBuilder6.toHashCode());
      assertNotNull(hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder6);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder6);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder6);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      assertSame(hashCodeBuilder5, hashCodeBuilder6);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      byte[] byteArray0 = new byte[1];
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) hashCodeBuilder0;
      objectArray0[1] = (Object) "HashCodeBuilder requires an odd multiplier";
      objectArray0[2] = (Object) "HashCodeBuilder requires an odd multiplier";
      objectArray0[3] = (Object) hashCodeBuilder0;
      objectArray0[4] = (Object) "HashCodeBuilder requires an odd multiplier";
      objectArray0[5] = (Object) hashCodeBuilder0;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(objectArray0);
      assertEquals(740921749, (int)hashCodeBuilder0.build());
      assertEquals(740921749, hashCodeBuilder0.toHashCode());
      assertEquals(740921749, hashCodeBuilder1.toHashCode());
      assertEquals(740921749, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertEquals(6, objectArray0.length);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      Class<String> class0 = String.class;
      int int0 = HashCodeBuilder.reflectionHashCode(37, 37, "HashCodeBuilder requires an odd multiplier", false, (Class<? super String>) class0, (String[]) null);
      assertEquals(1342994408, int0);
      
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-1764), (-1764), (Object) hashCodeBuilder0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 373;
      intArray0[1] = 6;
      intArray0[2] = 952;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(intArray0);
      assertEquals(1372912, (int)hashCodeBuilder0.build());
      assertEquals(1372912, hashCodeBuilder0.toHashCode());
      assertEquals(1372912, hashCodeBuilder1.toHashCode());
      assertEquals(1372912, (int)hashCodeBuilder1.build());
      assertNotNull(hashCodeBuilder1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {373, 6, 952}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(']');
      assertEquals(50797837, (int)hashCodeBuilder0.build());
      assertEquals(50797837, hashCodeBuilder0.toHashCode());
      assertEquals(50797837, hashCodeBuilder1.toHashCode());
      assertEquals(50797837, (int)hashCodeBuilder1.build());
      assertEquals(50797837, hashCodeBuilder2.toHashCode());
      assertEquals(50797837, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {373, 6, 952}, intArray0);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 373;
      doubleArray0[1] = 1501.0750483327;
      doubleArray0[2] = (double) 952;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 373;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(doubleArray0);
      assertEquals(1095642052, (int)hashCodeBuilder0.build());
      assertEquals(1095642052, hashCodeBuilder0.toHashCode());
      assertEquals(1095642052, (int)hashCodeBuilder1.build());
      assertEquals(1095642052, hashCodeBuilder1.toHashCode());
      assertEquals(1095642052, hashCodeBuilder2.toHashCode());
      assertEquals(1095642052, (int)hashCodeBuilder2.build());
      assertEquals(1095642052, (int)hashCodeBuilder3.build());
      assertEquals(1095642052, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertEquals(3, intArray0.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new int[] {373, 6, 952}, intArray0);
      assertArrayEquals(new double[] {373.0, 1501.0750483327, 952.0, 6.0, 373.0}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((float[]) null);
      assertEquals(1884050260, hashCodeBuilder0.toHashCode());
      assertEquals(1884050260, (int)hashCodeBuilder0.build());
      assertEquals(1884050260, hashCodeBuilder1.toHashCode());
      assertEquals(1884050260, (int)hashCodeBuilder1.build());
      assertEquals(1884050260, (int)hashCodeBuilder2.build());
      assertEquals(1884050260, hashCodeBuilder2.toHashCode());
      assertEquals(1884050260, hashCodeBuilder3.toHashCode());
      assertEquals(1884050260, (int)hashCodeBuilder3.build());
      assertEquals(1884050260, hashCodeBuilder4.toHashCode());
      assertEquals(1884050260, (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertEquals(3, intArray0.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new int[] {373, 6, 952}, intArray0);
      assertArrayEquals(new double[] {373.0, 1501.0750483327, 952.0, 6.0, 373.0}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(0.0);
      assertEquals(990382884, (int)hashCodeBuilder0.build());
      assertEquals(990382884, hashCodeBuilder0.toHashCode());
      assertEquals(990382884, (int)hashCodeBuilder1.build());
      assertEquals(990382884, hashCodeBuilder1.toHashCode());
      assertEquals(990382884, hashCodeBuilder2.toHashCode());
      assertEquals(990382884, (int)hashCodeBuilder2.build());
      assertEquals(990382884, (int)hashCodeBuilder3.build());
      assertEquals(990382884, hashCodeBuilder3.toHashCode());
      assertEquals(990382884, hashCodeBuilder4.toHashCode());
      assertEquals(990382884, (int)hashCodeBuilder4.build());
      assertEquals(990382884, hashCodeBuilder5.toHashCode());
      assertEquals(990382884, (int)hashCodeBuilder5.build());
      assertNotNull(hashCodeBuilder5);
      assertEquals(3, intArray0.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new int[] {373, 6, 952}, intArray0);
      assertArrayEquals(new double[] {373.0, 1501.0750483327, 952.0, 6.0, 373.0}, doubleArray0, 0.01);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder5);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short) (-3496));
      assertEquals((-2867), hashCodeBuilder0.toHashCode());
      assertEquals((-2867), (int)hashCodeBuilder0.build());
      assertEquals((-2867), (int)hashCodeBuilder1.build());
      assertEquals((-2867), hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((short) (-526));
      assertEquals((-106605), hashCodeBuilder0.toHashCode());
      assertEquals((-106605), (int)hashCodeBuilder0.build());
      assertEquals((-106605), hashCodeBuilder1.toHashCode());
      assertEquals((-106605), (int)hashCodeBuilder1.build());
      assertEquals((-106605), hashCodeBuilder2.toHashCode());
      assertEquals((-106605), (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder1.append((Object) "");
      assertEquals((-3944383), (int)hashCodeBuilder0.build());
      assertEquals((-3944383), hashCodeBuilder0.toHashCode());
      assertEquals((-3944383), (int)hashCodeBuilder1.build());
      assertEquals((-3944383), hashCodeBuilder1.toHashCode());
      assertEquals((-3944383), (int)hashCodeBuilder3.build());
      assertEquals((-3944383), hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      Set<IDKey> set0 = HashCodeBuilder.getRegistry();
      assertNull(set0);
      
      Set<IDKey> set1 = HashCodeBuilder.getRegistry();
      assertNull(set1);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((int[]) null);
      assertEquals((-145942171), hashCodeBuilder0.toHashCode());
      assertEquals((-145942171), (int)hashCodeBuilder0.build());
      assertEquals((-145942171), (int)hashCodeBuilder1.build());
      assertEquals((-145942171), hashCodeBuilder1.toHashCode());
      assertEquals((-145942171), hashCodeBuilder3.toHashCode());
      assertEquals((-145942171), (int)hashCodeBuilder3.build());
      assertEquals((-145942171), hashCodeBuilder4.toHashCode());
      assertEquals((-145942171), (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder4);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      
      Integer integer0 = new Integer((short) (-3496));
      assertNotNull(integer0);
      assertEquals((-3496), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertNotNull(hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append('M');
      assertEquals(706, (int)hashCodeBuilder0.build());
      assertEquals(706, hashCodeBuilder0.toHashCode());
      assertEquals(706, (int)hashCodeBuilder1.build());
      assertEquals(706, hashCodeBuilder1.toHashCode());
      assertNotNull(hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((char[]) null);
      assertEquals(26122, hashCodeBuilder0.toHashCode());
      assertEquals(26122, (int)hashCodeBuilder0.build());
      assertEquals(26122, (int)hashCodeBuilder1.build());
      assertEquals(26122, hashCodeBuilder1.toHashCode());
      assertEquals(26122, hashCodeBuilder2.toHashCode());
      assertEquals(26122, (int)hashCodeBuilder2.build());
      assertNotNull(hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder0.appendSuper((-594));
      assertEquals(965920, hashCodeBuilder0.toHashCode());
      assertEquals(965920, (int)hashCodeBuilder0.build());
      assertEquals(965920, (int)hashCodeBuilder3.build());
      assertEquals(965920, hashCodeBuilder3.toHashCode());
      assertNotNull(hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder3, hashCodeBuilder0);
      assertSame(hashCodeBuilder3, hashCodeBuilder1);
      assertSame(hashCodeBuilder3, hashCodeBuilder2);
      
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder2.append((short)0);
      assertEquals(35739040, (int)hashCodeBuilder0.build());
      assertEquals(35739040, hashCodeBuilder0.toHashCode());
      assertEquals(35739040, hashCodeBuilder1.toHashCode());
      assertEquals(35739040, (int)hashCodeBuilder1.build());
      assertEquals(35739040, (int)hashCodeBuilder2.build());
      assertEquals(35739040, hashCodeBuilder2.toHashCode());
      assertEquals(35739040, hashCodeBuilder4.toHashCode());
      assertEquals(35739040, (int)hashCodeBuilder4.build());
      assertNotNull(hashCodeBuilder4);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append('7');
      assertEquals(1322344535, hashCodeBuilder0.toHashCode());
      assertEquals(1322344535, (int)hashCodeBuilder0.build());
      assertEquals(1322344535, (int)hashCodeBuilder1.build());
      assertEquals(1322344535, hashCodeBuilder1.toHashCode());
      assertEquals(1322344535, (int)hashCodeBuilder2.build());
      assertEquals(1322344535, hashCodeBuilder2.toHashCode());
      assertEquals(1322344535, (int)hashCodeBuilder4.build());
      assertEquals(1322344535, hashCodeBuilder4.toHashCode());
      assertEquals(1322344535, (int)hashCodeBuilder5.build());
      assertEquals(1322344535, hashCodeBuilder5.toHashCode());
      assertNotNull(hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder1, hashCodeBuilder5);
      assertSame(hashCodeBuilder1, hashCodeBuilder2);
      assertSame(hashCodeBuilder1, hashCodeBuilder0);
      assertSame(hashCodeBuilder1, hashCodeBuilder3);
      assertSame(hashCodeBuilder1, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder3);
      assertSame(hashCodeBuilder2, hashCodeBuilder0);
      assertSame(hashCodeBuilder2, hashCodeBuilder4);
      assertSame(hashCodeBuilder2, hashCodeBuilder5);
      assertSame(hashCodeBuilder2, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder3);
      assertSame(hashCodeBuilder4, hashCodeBuilder5);
      assertSame(hashCodeBuilder4, hashCodeBuilder2);
      assertSame(hashCodeBuilder4, hashCodeBuilder1);
      assertSame(hashCodeBuilder4, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder1);
      assertSame(hashCodeBuilder5, hashCodeBuilder2);
      assertSame(hashCodeBuilder5, hashCodeBuilder0);
      assertSame(hashCodeBuilder5, hashCodeBuilder3);
      assertSame(hashCodeBuilder5, hashCodeBuilder4);
      
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder0.append('M');
      assertEquals(1682107616, (int)hashCodeBuilder0.build());
      assertEquals(1682107616, hashCodeBuilder0.toHashCode());
      assertEquals(1682107616, (int)hashCodeBuilder6.build());
      assertEquals(1682107616, hashCodeBuilder6.toHashCode());
      assertNotNull(hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder6);
      assertSame(hashCodeBuilder0, hashCodeBuilder2);
      assertSame(hashCodeBuilder0, hashCodeBuilder5);
      assertSame(hashCodeBuilder0, hashCodeBuilder1);
      assertSame(hashCodeBuilder0, hashCodeBuilder3);
      assertSame(hashCodeBuilder0, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder0);
      assertSame(hashCodeBuilder6, hashCodeBuilder3);
      assertSame(hashCodeBuilder6, hashCodeBuilder4);
      assertSame(hashCodeBuilder6, hashCodeBuilder1);
      assertSame(hashCodeBuilder6, hashCodeBuilder5);
      assertSame(hashCodeBuilder6, hashCodeBuilder2);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, (Collection<String>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      char[] charArray0 = new char[0];
      hashCodeBuilder0.append(charArray0);
      HashCodeBuilder.getRegistry();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[28];
      stringArray0[0] = "!8IIA\"|s45";
      stringArray0[1] = "e+";
      stringArray0[3] = "";
      stringArray0[4] = "Array element ";
      stringArray0[5] = "'jjvx";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "PZhMSO$~q> b^?REyf7";
      int int0 = HashCodeBuilder.reflectionHashCode((-2775), (-473), (Object) hashCodeBuilder0, true, (Class<? super Object>) class0, stringArray0);
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals((-620849862), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1, (-1823));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((Object) null);
      char[] charArray0 = new char[1];
      int[] intArray0 = new int[0];
      hashCodeBuilder0.append(intArray0);
      hashCodeBuilder0.append('^');
      charArray0[0] = '^';
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(charArray0);
      hashCodeBuilder2.build();
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.appendSuper((-1823));
      hashCodeBuilder3.append((double) (-1823));
      hashCodeBuilder0.append(charArray0);
      hashCodeBuilder2.append((byte) (-63));
      assertEquals(1111732477, (int)hashCodeBuilder0.build());
      assertEquals(1111732477, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashCodeBuilder.getRegistry();
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((long[]) null);
      Object object0 = new Object();
      HashCodeBuilder.isRegistered(object0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append((-1290.5656F));
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      HashCodeBuilder.getRegistry();
      charArray0[1] = 'i';
      charArray0[2] = '>';
      hashCodeBuilder0.appendSuper('i');
      charArray0[3] = 'i';
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(charArray0);
      short[] shortArray0 = new short[3];
      HashCodeBuilder.getRegistry();
      shortArray0[0] = (short) (-1204);
      shortArray0[1] = (short) (-1749);
      shortArray0[2] = (short)0;
      hashCodeBuilder3.append(shortArray0);
      hashCodeBuilder1.append((-1290.5656F));
      assertEquals((-562804441), (int)hashCodeBuilder1.build());
      
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "Cannot store ", false);
      assertEquals((-2009355594), int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-4539), (-4003));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(true);
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      hashCodeBuilder1.append((double[]) null);
      longArray0[1] = (long) (-4003);
      longArray0[2] = (long) (-4003);
      longArray0[3] = (long) (-4003);
      longArray0[4] = (long) (-4003);
      longArray0[5] = (long) (-4003);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(longArray0);
      Object object0 = new Object();
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(413);
      hashCodeBuilder0.append((float) (-4003));
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((boolean[]) null);
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(0L);
      IDKey iDKey0 = new IDKey((Object) null);
      hashCodeBuilder5.append((Object) iDKey0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      hashCodeBuilder5.append(byteArray0);
      hashCodeBuilder3.append('.');
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)1;
      hashCodeBuilder1.append((int) (byte)37);
      assertEquals((-1198445646), (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "s0 GaJrR%qs+D/~1";
      HashCodeBuilder.reflectionHashCode(object0, stringArray0);
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[4] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(booleanArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(true);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((byte)0);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(813L);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 17;
      floatArray0[1] = (float) 17;
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(floatArray0);
      int int0 = hashCodeBuilder5.toHashCode();
      assertEquals(1674841355, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-3281), (-3281));
      HashCodeBuilder.reflectionHashCode((Object) "j9 Y:?xqmXd1O4\u0007<", false);
      Integer integer0 = new Integer((-13));
      Integer.getInteger("j9 Y:?xqmXd1O4\u0007<", integer0);
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-3281), 0, (Object) hashCodeBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
}
