/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:56:06 GMT 2019
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompareToBuilder_ESTest extends CompareToBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "2B9&A~d";
      stringArray0[3] = "U`F9x|";
      stringArray0[4] = "";
      stringArray0[5] = "6(&Gxw*Q";
      int int0 = CompareToBuilder.reflectionCompare(object0, object1, stringArray0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(0, int0);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertEquals(6, stringArray0.length);
      
      int int1 = CompareToBuilder.reflectionCompare((Object) "", (Object) "2B9&A~d", stringArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(6, stringArray0.length);
      
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((int[]) null, (int[]) null);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((Object[]) stringArray0, (Object[]) stringArray0, (Comparator<?>) comparator0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertEquals(6, stringArray0.length);
      assertNotNull(compareToBuilder2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(floatArray0, floatArray0);
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, stringArray0.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(compareToBuilder3);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, stringArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(compareToBuilder4);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-7);
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(shortArray0, shortArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertArrayEquals(new short[] {(short) (-7)}, shortArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, stringArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, shortArray0.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((short)1459, (short)369);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertArrayEquals(new short[] {(short) (-7)}, shortArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, stringArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, shortArray0.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "", (Object) "org.apache.commons.lang3.builder.CompareToBuilder");
      assertEquals((-1), int0);
      
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) compareToBuilder0;
      objectArray0[2] = (Object) "org.apache.commons.lang3.builder.CompareToBuilder";
      objectArray0[3] = (Object) compareToBuilder0;
      objectArray0[4] = (Object) compareToBuilder0;
      objectArray0[5] = (Object) compareToBuilder0;
      objectArray0[6] = (Object) "org.apache.commons.lang3.builder.CompareToBuilder";
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(true, true);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((-1), 3495);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append('E', 'E');
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'E';
      longArray0[1] = (long) 'E';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 3495;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(longArray0, longArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertArrayEquals(new long[] {69L, 69L, (-1L), 3495L}, longArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(4, longArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((-1607.0), (double) 3495L);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertArrayEquals(new long[] {69L, 69L, (-1L), 3495L}, longArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(4, longArray0.length);
      assertNotNull(compareToBuilder6);
      
      CompareToBuilder compareToBuilder7 = compareToBuilder6.append((float) 3495, (float) (-1L));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertEquals((-1), compareToBuilder7.toComparison());
      assertEquals((-1), (int)compareToBuilder7.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertArrayEquals(new long[] {69L, 69L, (-1L), 3495L}, longArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(4, longArray0.length);
      assertNotNull(compareToBuilder7);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder8 = compareToBuilder7.append((Object) compareToBuilder2, (Object) null, (Comparator<?>) comparator0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertEquals((-1), compareToBuilder7.toComparison());
      assertEquals((-1), (int)compareToBuilder7.build());
      assertEquals((-1), (int)compareToBuilder8.build());
      assertEquals((-1), compareToBuilder8.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder8);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder8);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder8);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder1);
      assertSame(compareToBuilder8, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder0);
      assertSame(compareToBuilder8, compareToBuilder3);
      assertSame(compareToBuilder8, compareToBuilder7);
      assertSame(compareToBuilder8, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder5);
      assertSame(compareToBuilder8, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder8);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertArrayEquals(new long[] {69L, 69L, (-1L), 3495L}, longArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(4, longArray0.length);
      assertNotNull(compareToBuilder8);
      
      int int1 = CompareToBuilder.reflectionCompare((Object) "", objectArray0[2], true);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CompareToBuilder compareToBuilder1 = new CompareToBuilder();
      assertFalse(compareToBuilder1.equals((Object)compareToBuilder0));
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertNotNull(compareToBuilder1);
      
      Integer integer0 = new Integer((-1681));
      assertEquals((-1681), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1681));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1681), (int)integer1);
      assertNotNull(integer1);
      
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, true);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-4139.641), (-4139.641));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-350);
      intArray0[1] = 2111;
      intArray0[2] = (-1);
      intArray0[3] = 1;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((int[]) null, intArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new int[] {(-350), 2111, (-1), 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(1938.317F, (float) (-350));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new int[] {(-350), 2111, (-1), 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(compareToBuilder3);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2879;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-425);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)2905;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)2861;
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(shortArray0, shortArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new int[] {(-350), 2111, (-1), 1}, intArray0);
      assertArrayEquals(new short[] {(short)2879, (short) (-1), (short)0, (short) (-425), (short)1, (short)0, (short)2905, (short)0, (short)2861}, shortArray0);
      assertEquals(4, intArray0.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append('`', 'D');
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new int[] {(-350), 2111, (-1), 1}, intArray0);
      assertArrayEquals(new short[] {(short)2879, (short) (-1), (short)0, (short) (-425), (short)1, (short)0, (short)2905, (short)0, (short)2861}, shortArray0);
      assertEquals(4, intArray0.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(compareToBuilder5);
      
      Integer integer0 = compareToBuilder5.build();
      assertEquals((-1), (int)integer0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new int[] {(-350), 2111, (-1), 1}, intArray0);
      assertArrayEquals(new short[] {(short)2879, (short) (-1), (short)0, (short) (-425), (short)1, (short)0, (short)2905, (short)0, (short)2861}, shortArray0);
      assertEquals(4, intArray0.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(compareToBuilder1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(doubleArray0, doubleArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) compareToBuilder0;
      objectArray0[2] = (Object) compareToBuilder1;
      objectArray0[3] = (Object) (-1.0);
      objectArray0[4] = (Object) (-1.0);
      objectArray0[5] = (Object) compareToBuilder2;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, (Object[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((short) (-581), (short)2);
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(0L, (long) (-1));
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(doubleArray0, doubleArray0);
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(compareToBuilder6);
      
      CompareToBuilder compareToBuilder7 = compareToBuilder6.append((byte)19, (byte)1);
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder7.toComparison());
      assertEquals(1, (int)compareToBuilder7.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(compareToBuilder7);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)19;
      CompareToBuilder compareToBuilder8 = compareToBuilder6.append(byteArray0, byteArray0);
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder8.toComparison());
      assertEquals(1, (int)compareToBuilder8.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder8);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder8);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder8);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder8);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder8, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder7);
      assertSame(compareToBuilder8, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder1);
      assertSame(compareToBuilder8, compareToBuilder3);
      assertSame(compareToBuilder8, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder5);
      assertSame(compareToBuilder8, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)19, (byte)1, (byte)97, (byte)19, (byte) (-100), (byte)1, (byte)19}, byteArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(compareToBuilder8);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) compareToBuilder0;
      objectArray0[1] = (Object) compareToBuilder0;
      objectArray0[2] = (Object) compareToBuilder0;
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) compareToBuilder0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[1] = object0;
      objectArray1[2] = (Object) compareToBuilder0;
      // Undeclared exception!
      try { 
        compareToBuilder0.append(objectArray0, objectArray1, (Comparator<?>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.builder.CompareToBuilder cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-189L);
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-189L);
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(compareToBuilder1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-189L);
      floatArray0[1] = (float) (-189L);
      floatArray0[2] = (float) (-189L);
      floatArray0[3] = 1210.23F;
      floatArray0[4] = (float) (-189L);
      floatArray0[5] = (float) (-189L);
      floatArray0[6] = (float) (-189L);
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(floatArray0, floatArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-189.0F);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray0, comparator0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(false, false);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(objectArray0[0], (Object) compareToBuilder0, (Comparator<?>) comparator1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder5);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "", (Object) "org.apache.commons.lang3.builder.CompareToBuilder");
      assertEquals((-1), int0);
      
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) compareToBuilder0;
      objectArray0[2] = (Object) "org.apache.commons.lang3.builder.CompareToBuilder";
      objectArray0[3] = (Object) compareToBuilder0;
      objectArray0[4] = (Object) compareToBuilder0;
      objectArray0[5] = (Object) compareToBuilder0;
      objectArray0[6] = (Object) "org.apache.commons.lang3.builder.CompareToBuilder";
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(false, false);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((-1), 3495);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append('E', 'E');
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'E';
      longArray0[1] = (long) 'E';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 3495;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(longArray0, longArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new long[] {69L, 69L, (-1L), 3495L}, longArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(4, longArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((-1607.0), (double) 3495L);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new long[] {69L, 69L, (-1L), 3495L}, longArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(4, longArray0.length);
      assertNotNull(compareToBuilder6);
      
      int int1 = CompareToBuilder.reflectionCompare((Object) "", objectArray0[2], false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-189L);
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-189L);
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(compareToBuilder1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-189L);
      floatArray0[1] = (float) (-189L);
      floatArray0[2] = (float) (-189L);
      floatArray0[3] = 1210.23F;
      floatArray0[4] = (float) (-189L);
      floatArray0[5] = (float) (-189L);
      floatArray0[6] = (float) (-189L);
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(floatArray0, floatArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-189.0F);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray0, comparator0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(false, false);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder5 = compareToBuilder3.append(objectArray0, objectArray0, comparator1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder5.build());
      assertEquals(0, compareToBuilder5.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(116).when(comparator2).compare(anyInt() , anyInt());
      CompareToBuilder compareToBuilder6 = compareToBuilder4.append(objectArray0[0], (Object) compareToBuilder0, (Comparator<?>) comparator2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder6.build());
      assertEquals(0, compareToBuilder6.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder6);
      
      Object[] objectArray1 = new Object[1];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (-189L);
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder7 = compareToBuilder6.append((Object[]) null, objectArray1, comparator3);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertEquals((-1), (int)compareToBuilder7.build());
      assertEquals((-1), compareToBuilder7.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray1.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder7);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1917L);
      longArray0[1] = 4059L;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((long[]) null, longArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new long[] {(-1917L), 4059L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(compareToBuilder1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1917L);
      floatArray0[1] = (-1.0F);
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(floatArray0, floatArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new long[] {(-1917L), 4059L}, longArray0);
      assertArrayEquals(new float[] {(-1917.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, longArray0.length);
      assertEquals(2, floatArray0.length);
      assertNotNull(compareToBuilder2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('d', 'd');
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      int int0 = CompareToBuilder.reflectionCompare((Object) "", (Object) "");
      assertEquals(0, int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'd';
      intArray0[1] = (-62);
      intArray0[2] = 0;
      intArray0[3] = (int) 'd';
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'd';
      intArray0[6] = 0;
      intArray0[7] = 0;
      CompareToBuilder compareToBuilder2 = compareToBuilder0.append(intArray0, intArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new int[] {100, (-62), 0, 100, 100, 100, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(compareToBuilder2);
      
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%$gsbE_zSt";
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, (Object) compareToBuilder0, false, (Class<?>) class0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-934.99603), (-934.99603));
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2971;
      shortArray0[2] = (short) (-1769);
      shortArray0[3] = (short) (-2077);
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(shortArray0, shortArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new short[] {(short) (-1), (short)2971, (short) (-1769), (short) (-2077)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) compareToBuilder2;
      objectArray0[1] = (Object) compareToBuilder2;
      objectArray0[2] = (Object) compareToBuilder0;
      objectArray0[3] = (Object) (short) (-1);
      objectArray0[4] = (Object) compareToBuilder1;
      objectArray0[5] = (Object) (short)2971;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new short[] {(short) (-1), (short)2971, (short) (-1769), (short) (-2077)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-2077);
      floatArray0[1] = (float) (short) (-1);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (short) (-2077);
      floatArray0[4] = (float) (short) (-1769);
      floatArray0[5] = (-1.0F);
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(floatArray0, floatArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new float[] {(-2077.0F), (-1.0F), (-1.0F), (-2077.0F), (-1769.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new short[] {(short) (-1), (short)2971, (short) (-1769), (short) (-2077)}, shortArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(4, shortArray0.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[0] = object0;
      objectArray1[1] = (Object) (-2077.0F);
      objectArray1[2] = (Object) compareToBuilder3;
      objectArray1[3] = (Object) compareToBuilder3;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(objectArray0, objectArray1, comparator0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new float[] {(-2077.0F), (-1.0F), (-1.0F), (-2077.0F), (-1769.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new short[] {(short) (-1), (short)2971, (short) (-1769), (short) (-2077)}, shortArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(4, shortArray0.length);
      assertEquals(4, objectArray1.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (short) (-1769);
      floatArray1[1] = (float) (short)2971;
      floatArray1[2] = (float) (short) (-1769);
      floatArray1[3] = 0.0F;
      floatArray1[4] = (float) (short) (-1769);
      floatArray1[5] = (float) (short)2971;
      floatArray1[6] = 0.0F;
      floatArray1[7] = (float) (short) (-2077);
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new float[] {(-1769.0F), 2971.0F, (-1769.0F), 0.0F, (-1769.0F), 2971.0F, 0.0F, (-2077.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2077.0F), (-1.0F), (-1.0F), (-2077.0F), (-1769.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new short[] {(short) (-1), (short)2971, (short) (-1769), (short) (-2077)}, shortArray0);
      assertEquals(8, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertEquals(4, shortArray0.length);
      assertEquals(4, objectArray1.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4416.785659213063);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2952.8408664486;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1278.0522558;
      doubleArray0[6] = 149.157;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(compareToBuilder1);
      
      short[] shortArray0 = new short[0];
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(shortArray0, shortArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 2952.8408664486;
      objectArray0[1] = (Object) 2952.8408664486;
      objectArray0[2] = (Object) compareToBuilder1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) 2952.8408664486;
      objectArray0[6] = (Object) 1278.0522558;
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 1.0;
      objectArray1[1] = (Object) 1278.0522558;
      objectArray1[2] = (Object) (-4416.785659213063);
      objectArray1[3] = object1;
      objectArray1[4] = (Object) compareToBuilder1;
      objectArray1[5] = (Object) (-4416.785659213063);
      objectArray1[6] = object0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(comparator0).compare(any() , any());
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray1, comparator0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(10, (int)compareToBuilder0.build());
      assertEquals(10, compareToBuilder0.toComparison());
      assertEquals(10, compareToBuilder1.toComparison());
      assertEquals(10, (int)compareToBuilder1.build());
      assertEquals(10, compareToBuilder2.toComparison());
      assertEquals(10, (int)compareToBuilder2.build());
      assertEquals(10, compareToBuilder3.toComparison());
      assertEquals(10, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-3610L);
      longArray0[1] = (-3170L);
      longArray0[2] = 0L;
      longArray0[3] = (-2510L);
      longArray0[4] = 0L;
      longArray0[5] = 2874L;
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(longArray0, longArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(10, (int)compareToBuilder0.build());
      assertEquals(10, compareToBuilder0.toComparison());
      assertEquals(10, compareToBuilder4.toComparison());
      assertEquals(10, (int)compareToBuilder4.build());
      assertEquals(10, compareToBuilder1.toComparison());
      assertEquals(10, (int)compareToBuilder1.build());
      assertEquals(10, compareToBuilder2.toComparison());
      assertEquals(10, (int)compareToBuilder2.build());
      assertEquals(10, compareToBuilder3.toComparison());
      assertEquals(10, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new long[] {(-3610L), (-3170L), 0L, (-2510L), 0L, 2874L}, longArray0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((int[]) null, (int[]) null);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(10, (int)compareToBuilder0.build());
      assertEquals(10, compareToBuilder0.toComparison());
      assertEquals(10, compareToBuilder4.toComparison());
      assertEquals(10, (int)compareToBuilder4.build());
      assertEquals(10, compareToBuilder5.toComparison());
      assertEquals(10, (int)compareToBuilder5.build());
      assertEquals(10, compareToBuilder1.toComparison());
      assertEquals(10, (int)compareToBuilder1.build());
      assertEquals(10, compareToBuilder2.toComparison());
      assertEquals(10, (int)compareToBuilder2.build());
      assertEquals(10, compareToBuilder3.toComparison());
      assertEquals(10, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new long[] {(-3610L), (-3170L), 0L, (-2510L), 0L, 2874L}, longArray0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(2262.466F, 1.0F);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(10, (int)compareToBuilder0.build());
      assertEquals(10, compareToBuilder0.toComparison());
      assertEquals(10, compareToBuilder4.toComparison());
      assertEquals(10, (int)compareToBuilder4.build());
      assertEquals(10, compareToBuilder5.toComparison());
      assertEquals(10, (int)compareToBuilder5.build());
      assertEquals(10, (int)compareToBuilder6.build());
      assertEquals(10, compareToBuilder6.toComparison());
      assertEquals(10, compareToBuilder1.toComparison());
      assertEquals(10, (int)compareToBuilder1.build());
      assertEquals(10, compareToBuilder2.toComparison());
      assertEquals(10, (int)compareToBuilder2.build());
      assertEquals(10, compareToBuilder3.toComparison());
      assertEquals(10, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new long[] {(-3610L), (-3170L), 0L, (-2510L), 0L, 2874L}, longArray0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(object0, object0, comparator0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(byteArray0, byteArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(compareToBuilder2);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) (byte) (-1);
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(doubleArray0, doubleArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, byteArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder2.appendSuper(0);
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder1.append((byte) (-1), (byte) (-1));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder5.build());
      assertEquals(0, compareToBuilder5.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((-1.0F), (float) (byte) (-1));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder5.build());
      assertEquals(0, compareToBuilder5.toComparison());
      assertEquals(0, compareToBuilder6.toComparison());
      assertEquals(0, (int)compareToBuilder6.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertNotNull(compareToBuilder6);
      
      CompareToBuilder compareToBuilder7 = compareToBuilder5.appendSuper(0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder5.build());
      assertEquals(0, compareToBuilder5.toComparison());
      assertEquals(0, compareToBuilder7.toComparison());
      assertEquals(0, (int)compareToBuilder7.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertNotNull(compareToBuilder7);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'a';
      charArray0[1] = '%';
      charArray0[2] = '=';
      charArray0[3] = 'G';
      charArray0[4] = 'Q';
      charArray0[5] = '\"';
      charArray0[6] = 'n';
      charArray0[7] = 'v';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'Q';
      charArray1[1] = 'G';
      charArray1[2] = 'G';
      charArray1[3] = '^';
      charArray1[4] = 'Q';
      charArray1[5] = 'n';
      CompareToBuilder compareToBuilder8 = compareToBuilder1.append(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder8.toComparison());
      assertEquals(1, (int)compareToBuilder8.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder5);
      assertSame(compareToBuilder8, compareToBuilder1);
      assertSame(compareToBuilder8, compareToBuilder0);
      assertSame(compareToBuilder8, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder3);
      assertSame(compareToBuilder8, compareToBuilder7);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'a', '%', '=', 'G', 'Q', '\"', 'n', 'v'}, charArray0);
      assertArrayEquals(new char[] {'Q', 'G', 'G', '^', 'Q', 'n'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotNull(compareToBuilder8);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) null, (Object) null, (Comparator<?>) null);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) compareToBuilder0;
      objectArray0[2] = (Object) compareToBuilder0;
      objectArray0[3] = (Object) compareToBuilder0;
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) compareToBuilder0;
      objectArray0[7] = (Object) compareToBuilder1;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(objectArray0, objectArray0, (Comparator<?>) null);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertEquals(8, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = ',';
      charArray0[2] = 'z';
      charArray0[3] = '=';
      charArray0[4] = 'f';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertNotSame(charArray1, charArray0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'$', ',', 'z', '=', 'f'}, charArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(5, charArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((boolean[]) null, (boolean[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertNotSame(charArray1, charArray0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'$', ',', 'z', '=', 'f'}, charArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(5, charArray0.length);
      assertNotNull(compareToBuilder4);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '$';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 'f';
      doubleArray0[3] = (double) 'f';
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(doubleArray0, doubleArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertNotSame(charArray1, charArray0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new double[] {36.0, 0.0, 102.0, 102.0}, doubleArray0, 0.01);
      assertArrayEquals(new char[] {'$', ',', 'z', '=', 'f'}, charArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, charArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((long[]) null, (long[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertNotSame(charArray1, charArray0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new double[] {36.0, 0.0, 102.0, 102.0}, doubleArray0, 0.01);
      assertArrayEquals(new char[] {'$', ',', 'z', '=', 'f'}, charArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, charArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte[]) null, (byte[]) null);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = '$';
      charArray0[2] = '/';
      charArray0[3] = 'e';
      charArray0[4] = 'Y';
      charArray0[5] = '~';
      charArray0[6] = 'H';
      charArray0[7] = '}';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '}';
      charArray1[1] = '~';
      charArray1[2] = '~';
      charArray1[3] = '}';
      charArray1[4] = 'n';
      charArray1[5] = '}';
      charArray1[6] = '[';
      charArray1[7] = '[';
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-34), compareToBuilder0.toComparison());
      assertEquals((-34), (int)compareToBuilder0.build());
      assertEquals((-34), compareToBuilder1.toComparison());
      assertEquals((-34), (int)compareToBuilder1.build());
      assertEquals((-34), compareToBuilder2.toComparison());
      assertEquals((-34), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertNotSame(charArray0, charArray1);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'[', '$', '/', 'e', 'Y', '~', 'H', '}'}, charArray0);
      assertArrayEquals(new char[] {'}', '~', '~', '}', 'n', '}', '[', '['}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((Object) compareToBuilder0, (Object) "K_b<*QKZ|]/oDq cAT");
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-34), compareToBuilder0.toComparison());
      assertEquals((-34), (int)compareToBuilder0.build());
      assertEquals((-34), compareToBuilder1.toComparison());
      assertEquals((-34), (int)compareToBuilder1.build());
      assertEquals((-34), compareToBuilder2.toComparison());
      assertEquals((-34), (int)compareToBuilder2.build());
      assertEquals((-34), (int)compareToBuilder3.build());
      assertEquals((-34), compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertNotSame(charArray0, charArray1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'[', '$', '/', 'e', 'Y', '~', 'H', '}'}, charArray0);
      assertArrayEquals(new char[] {'}', '~', '~', '}', 'n', '}', '[', '['}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(0L, (-2661L));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-34), compareToBuilder0.toComparison());
      assertEquals((-34), (int)compareToBuilder0.build());
      assertEquals((-34), compareToBuilder1.toComparison());
      assertEquals((-34), (int)compareToBuilder1.build());
      assertEquals((-34), compareToBuilder2.toComparison());
      assertEquals((-34), (int)compareToBuilder2.build());
      assertEquals((-34), (int)compareToBuilder3.build());
      assertEquals((-34), compareToBuilder3.toComparison());
      assertEquals((-34), (int)compareToBuilder4.build());
      assertEquals((-34), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertNotSame(charArray0, charArray1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'[', '$', '/', 'e', 'Y', '~', 'H', '}'}, charArray0);
      assertArrayEquals(new char[] {'}', '~', '~', '}', 'n', '}', '[', '['}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((byte) (-10), (byte) (-108));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-34), compareToBuilder0.toComparison());
      assertEquals((-34), (int)compareToBuilder0.build());
      assertEquals((-34), compareToBuilder1.toComparison());
      assertEquals((-34), (int)compareToBuilder1.build());
      assertEquals((-34), compareToBuilder2.toComparison());
      assertEquals((-34), (int)compareToBuilder2.build());
      assertEquals((-34), (int)compareToBuilder3.build());
      assertEquals((-34), compareToBuilder3.toComparison());
      assertEquals((-34), (int)compareToBuilder4.build());
      assertEquals((-34), compareToBuilder4.toComparison());
      assertEquals((-34), compareToBuilder5.toComparison());
      assertEquals((-34), (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertNotSame(charArray0, charArray1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'[', '$', '/', 'e', 'Y', '~', 'H', '}'}, charArray0);
      assertArrayEquals(new char[] {'}', '~', '~', '}', 'n', '}', '[', '['}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((float) (byte) (-10), (float) 0L);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-34), compareToBuilder0.toComparison());
      assertEquals((-34), (int)compareToBuilder0.build());
      assertEquals((-34), compareToBuilder1.toComparison());
      assertEquals((-34), (int)compareToBuilder1.build());
      assertEquals((-34), compareToBuilder2.toComparison());
      assertEquals((-34), (int)compareToBuilder2.build());
      assertEquals((-34), (int)compareToBuilder3.build());
      assertEquals((-34), compareToBuilder3.toComparison());
      assertEquals((-34), (int)compareToBuilder4.build());
      assertEquals((-34), compareToBuilder4.toComparison());
      assertEquals((-34), compareToBuilder5.toComparison());
      assertEquals((-34), (int)compareToBuilder5.build());
      assertEquals((-34), compareToBuilder6.toComparison());
      assertEquals((-34), (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertNotSame(charArray0, charArray1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'[', '$', '/', 'e', 'Y', '~', 'H', '}'}, charArray0);
      assertArrayEquals(new char[] {'}', '~', '~', '}', 'n', '}', '[', '['}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4416.785659213063);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2952.8408664486;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1278.0522558;
      doubleArray0[6] = 149.157;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(compareToBuilder1);
      
      short[] shortArray0 = new short[0];
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(shortArray0, shortArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 2952.8408664486;
      objectArray0[1] = (Object) 2952.8408664486;
      objectArray0[2] = (Object) compareToBuilder1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) 2952.8408664486;
      objectArray0[6] = (Object) 1278.0522558;
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 1.0;
      objectArray1[1] = (Object) 1278.0522558;
      objectArray1[2] = (Object) (-4416.785659213063);
      objectArray1[3] = object1;
      objectArray1[4] = (Object) compareToBuilder1;
      objectArray1[5] = (Object) (-4416.785659213063);
      objectArray1[6] = object0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-5405)).when(comparator0).compare(any() , any());
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray1, comparator0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals((-5405), (int)compareToBuilder0.build());
      assertEquals((-5405), compareToBuilder0.toComparison());
      assertEquals((-5405), (int)compareToBuilder1.build());
      assertEquals((-5405), compareToBuilder1.toComparison());
      assertEquals((-5405), (int)compareToBuilder2.build());
      assertEquals((-5405), compareToBuilder2.toComparison());
      assertEquals((-5405), compareToBuilder3.toComparison());
      assertEquals((-5405), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-3610L);
      longArray0[1] = (-3170L);
      longArray0[2] = 0L;
      longArray0[3] = (-2510L);
      longArray0[4] = 0L;
      longArray0[5] = 2874L;
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(longArray0, longArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals((-5405), (int)compareToBuilder0.build());
      assertEquals((-5405), compareToBuilder0.toComparison());
      assertEquals((-5405), compareToBuilder4.toComparison());
      assertEquals((-5405), (int)compareToBuilder4.build());
      assertEquals((-5405), (int)compareToBuilder1.build());
      assertEquals((-5405), compareToBuilder1.toComparison());
      assertEquals((-5405), (int)compareToBuilder2.build());
      assertEquals((-5405), compareToBuilder2.toComparison());
      assertEquals((-5405), compareToBuilder3.toComparison());
      assertEquals((-5405), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new long[] {(-3610L), (-3170L), 0L, (-2510L), 0L, 2874L}, longArray0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((int[]) null, (int[]) null);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals((-5405), (int)compareToBuilder0.build());
      assertEquals((-5405), compareToBuilder0.toComparison());
      assertEquals((-5405), compareToBuilder4.toComparison());
      assertEquals((-5405), (int)compareToBuilder4.build());
      assertEquals((-5405), (int)compareToBuilder5.build());
      assertEquals((-5405), compareToBuilder5.toComparison());
      assertEquals((-5405), (int)compareToBuilder1.build());
      assertEquals((-5405), compareToBuilder1.toComparison());
      assertEquals((-5405), (int)compareToBuilder2.build());
      assertEquals((-5405), compareToBuilder2.toComparison());
      assertEquals((-5405), compareToBuilder3.toComparison());
      assertEquals((-5405), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new long[] {(-3610L), (-3170L), 0L, (-2510L), 0L, 2874L}, longArray0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(2262.466F, 1.0F);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals((-5405), (int)compareToBuilder0.build());
      assertEquals((-5405), compareToBuilder0.toComparison());
      assertEquals((-5405), compareToBuilder4.toComparison());
      assertEquals((-5405), (int)compareToBuilder4.build());
      assertEquals((-5405), (int)compareToBuilder5.build());
      assertEquals((-5405), compareToBuilder5.toComparison());
      assertEquals((-5405), compareToBuilder6.toComparison());
      assertEquals((-5405), (int)compareToBuilder6.build());
      assertEquals((-5405), (int)compareToBuilder1.build());
      assertEquals((-5405), compareToBuilder1.toComparison());
      assertEquals((-5405), (int)compareToBuilder2.build());
      assertEquals((-5405), compareToBuilder2.toComparison());
      assertEquals((-5405), compareToBuilder3.toComparison());
      assertEquals((-5405), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new long[] {(-3610L), (-3170L), 0L, (-2510L), 0L, 2874L}, longArray0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      byte byte0 = (byte)0;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)0, (byte)0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder2 = compareToBuilder0.append((Object) null, object0, comparator0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((double[]) null, (double[]) null);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertNotNull(compareToBuilder3);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      CompareToBuilder compareToBuilder4 = compareToBuilder2.append(true, true);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertNotNull(compareToBuilder4);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare(object1, (Object) null, (Collection<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare(object0, (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(486.04801, 486.04801);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) compareToBuilder1;
      objectArray0[1] = (Object) compareToBuilder0;
      objectArray0[2] = (Object) compareToBuilder1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(objectArray0, objectArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertEquals(4, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1164.8207F);
      floatArray0[2] = 1101.84F;
      floatArray0[3] = 2080.121F;
      floatArray0[4] = 223.1629F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1164.8207F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-1164.8207F);
      floatArray1[3] = 2080.121F;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertNotSame(floatArray1, floatArray0);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1164.8207F), 0.0F, (-1164.8207F), 2080.121F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1164.8207F), 1101.84F, 2080.121F, 223.1629F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, objectArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.appendSuper(1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertNotSame(floatArray1, floatArray0);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1164.8207F), 0.0F, (-1164.8207F), 2080.121F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1164.8207F), 1101.84F, 2080.121F, 223.1629F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, objectArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((-3793L), 596L);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertNotSame(floatArray1, floatArray0);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1164.8207F), 0.0F, (-1164.8207F), 2080.121F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1164.8207F), 1101.84F, 2080.121F, 223.1629F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, objectArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(compareToBuilder5);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1539);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-3832);
      shortArray0[4] = (short)0;
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(shortArray0, shortArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertNotSame(floatArray1, floatArray0);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotSame(floatArray0, floatArray1);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertArrayEquals(new float[] {(-1164.8207F), 0.0F, (-1164.8207F), 2080.121F}, floatArray1, 0.01F);
      assertArrayEquals(new short[] {(short) (-1539), (short)0, (short)0, (short) (-3832), (short)0}, shortArray0);
      assertArrayEquals(new float[] {0.0F, (-1164.8207F), 1101.84F, 2080.121F, 223.1629F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, objectArray0.length);
      assertEquals(5, shortArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(486.04801, 486.04801);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) compareToBuilder1;
      objectArray0[1] = (Object) compareToBuilder0;
      objectArray0[2] = (Object) compareToBuilder1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(objectArray0, objectArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertEquals(4, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1101.84F;
      floatArray0[3] = 2080.121F;
      floatArray0[4] = 223.1629F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 2080.121F;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertNotSame(floatArray1, floatArray0);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2080.121F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1101.84F, 2080.121F, 223.1629F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, objectArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.appendSuper(1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertNotSame(floatArray1, floatArray0);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2080.121F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1101.84F, 2080.121F, 223.1629F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, objectArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((-3793L), 596L);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertNotSame(floatArray1, floatArray0);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2080.121F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1101.84F, 2080.121F, 223.1629F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, objectArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(compareToBuilder5);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1539);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-3832);
      shortArray0[4] = (short)0;
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(shortArray0, shortArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertNotSame(floatArray1, floatArray0);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertNotSame(floatArray0, floatArray1);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2080.121F}, floatArray1, 0.01F);
      assertArrayEquals(new short[] {(short) (-1539), (short)0, (short)0, (short) (-3832), (short)0}, shortArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1101.84F, 2080.121F, 223.1629F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, objectArray0.length);
      assertEquals(5, shortArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte) (-84), (byte) (-84));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-84);
      intArray0[1] = (int) (byte) (-84);
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(intArray0, (int[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new int[] {(-84), (-84)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((float) (byte) (-84), (float) (-84));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new int[] {(-84), (-84)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(compareToBuilder3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(object0, (Object) "");
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new int[] {(-84), (-84)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(compareToBuilder4);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte) (-84);
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(byteArray0, byteArray0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new int[] {(-84), (-84)}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-84), (byte) (-84), (byte) (-84), (byte) (-84), (byte) (-84), (byte) (-84), (byte)47, (byte) (-84)}, byteArray0);
      assertEquals(2, intArray0.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((byte) (-84), (byte)109);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new int[] {(-84), (-84)}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-84), (byte) (-84), (byte) (-84), (byte) (-84), (byte) (-84), (byte) (-84), (byte)47, (byte) (-84)}, byteArray0);
      assertEquals(2, intArray0.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-189L);
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-189L);
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(compareToBuilder1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-189L);
      floatArray0[1] = (float) (-189L);
      floatArray0[2] = (float) (-189L);
      floatArray0[3] = 1210.23F;
      floatArray0[4] = (float) (-189L);
      floatArray0[5] = (float) (-189L);
      floatArray0[6] = (float) (-189L);
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(floatArray0, floatArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-189.0F);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray0, comparator0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(false, false);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(objectArray0[0], (Object) compareToBuilder0, (Comparator<?>) comparator1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, compareToBuilder5.toComparison());
      assertEquals(0, (int)compareToBuilder5.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder5);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) compareToBuilder0;
      Object[] objectArray1 = new Object[9];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) compareToBuilder0;
      objectArray1[1] = (Object) compareToBuilder0;
      objectArray1[2] = (Object) compareToBuilder0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[3] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray1[4] = object1;
      objectArray1[5] = (Object) compareToBuilder0;
      objectArray1[6] = (Object) compareToBuilder0;
      objectArray1[7] = (Object) compareToBuilder0;
      objectArray1[8] = (Object) compareToBuilder0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray1, comparator0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(9, objectArray1.length);
      assertNotNull(compareToBuilder1);
      
      boolean[] booleanArray0 = new boolean[0];
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(booleanArray0, booleanArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotSame(objectArray1, objectArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(9, objectArray1.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertNotSame(objectArray1, objectArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(9, objectArray1.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(booleanArray0, booleanArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(9, objectArray1.length);
      assertNotNull(compareToBuilder4);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) compareToBuilder0;
      objectArray0[1] = (Object) compareToBuilder0;
      objectArray0[2] = (Object) compareToBuilder0;
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) compareToBuilder0;
      objectArray1[1] = (Object) compareToBuilder0;
      objectArray1[2] = (Object) compareToBuilder0;
      objectArray1[3] = (Object) compareToBuilder0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[4] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray1[5] = object1;
      objectArray1[6] = (Object) compareToBuilder0;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertEquals(3, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertNotNull(compareToBuilder1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(byteArray0, byteArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertArrayEquals(new byte[] {(byte)52}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertNotNull(compareToBuilder2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(booleanArray0, booleanArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertArrayEquals(new byte[] {(byte)52}, byteArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false, false}, booleanArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(8, booleanArray0.length);
      assertEquals(7, objectArray1.length);
      assertNotNull(compareToBuilder3);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)52;
      intArray0[1] = (int) (byte)52;
      intArray0[2] = (int) (byte)52;
      intArray0[3] = (int) (byte)52;
      intArray0[4] = (int) (byte)52;
      intArray0[5] = (int) (byte)52;
      intArray0[6] = (int) (byte)52;
      intArray0[7] = (int) (byte)52;
      intArray0[8] = (int) (byte)52;
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(intArray0, intArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertArrayEquals(new byte[] {(byte)52}, byteArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false, false}, booleanArray0));
      assertArrayEquals(new int[] {52, 52, 52, 52, 52, 52, 52, 52, 52}, intArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(8, booleanArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(9, intArray0.length);
      assertNotNull(compareToBuilder4);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)52;
      shortArray0[1] = (short) (byte)52;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(shortArray0, shortArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertArrayEquals(new byte[] {(byte)52}, byteArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false, false}, booleanArray0));
      assertArrayEquals(new short[] {(short)52, (short)52}, shortArray0);
      assertArrayEquals(new int[] {52, 52, 52, 52, 52, 52, 52, 52, 52}, intArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(8, booleanArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(2, shortArray0.length);
      assertEquals(9, intArray0.length);
      assertNotNull(compareToBuilder5);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)52;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (short)52;
      doubleArray0[3] = (double) 52;
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(doubleArray0, doubleArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertArrayEquals(new byte[] {(byte)52}, byteArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false, false}, booleanArray0));
      assertArrayEquals(new short[] {(short)52, (short)52}, shortArray0);
      assertArrayEquals(new double[] {52.0, 0.0, 52.0, 52.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {52, 52, 52, 52, 52, 52, 52, 52, 52}, intArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(8, booleanArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(2, shortArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, intArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = (-70);
      Integer integer0 = new Integer((-70));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-70), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger((String) null, (-429));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-429), (int)integer1);
      assertNotNull(integer1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) integer0, (Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0, 0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = 598L;
      longArray0[4] = (long) 0;
      longArray0[5] = 0L;
      longArray0[6] = (long) 0;
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 598L;
      longArray1[1] = 0L;
      longArray1[2] = (long) 0;
      longArray1[3] = 598L;
      longArray1[4] = (long) 0;
      longArray1[5] = 0L;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 598L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {598L, 0L, 0L, 598L, 0L, 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((Object) compareToBuilder1, (Object) compareToBuilder0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 598L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {598L, 0L, 0L, 598L, 0L, 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((byte)17, (byte)17);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 598L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {598L, 0L, 0L, 598L, 0L, 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(compareToBuilder4);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 598L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(floatArray0, floatArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertArrayEquals(new long[] {0L, 0L, 0L, 598L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 598.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new long[] {598L, 0L, 0L, 598L, 0L, 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, floatArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((Object) compareToBuilder4, (Object) compareToBuilder2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertArrayEquals(new long[] {0L, 0L, 0L, 598L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 598.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new long[] {598L, 0L, 0L, 598L, 0L, 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, floatArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      char char0 = '';
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('', '');
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Integer integer0 = new Integer(1716);
      assertEquals(1716, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        compareToBuilder1.append((Object) compareToBuilder0, (Object) integer0, (Comparator<?>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.builder.CompareToBuilder cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(0, 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((short) (-1), (short)2006);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(compareToBuilder3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)0, (byte)0, (byte)0, (byte)84, (byte) (-104), (byte) (-56), (byte)0, (byte)1}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder0.append(false, false);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotNull(compareToBuilder2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short) (byte) (-100);
      shortArray0[5] = (short) (byte)0;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(shortArray0, shortArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1, (short)1, (short) (-100), (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNotNull(compareToBuilder3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[0];
      int int0 = CompareToBuilder.reflectionCompare(object0, object1, false, class0, stringArray0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(0, int0);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "BWvWxkGZI),Pc+,";
      stringArray0[1] = "u?=vkd):2S3\"Lwe";
      stringArray0[2] = "mRSp:<.>etb_BCZ<r";
      stringArray0[3] = "BD1TwyS";
      stringArray0[4] = "N(!26j6";
      stringArray0[5] = "$";
      stringArray0[6] = "org.apache.commons.lang3.builder.CompareToBuilder";
      int int0 = CompareToBuilder.reflectionCompare(object0, object0, true, class0, stringArray0);
      assertEquals(0, int0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(object0, (Object) null, comparator0);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) compareToBuilder0;
      objectArray0[1] = (Object) compareToBuilder1;
      objectArray0[2] = null;
      objectArray0[3] = (Object) compareToBuilder0;
      objectArray0[4] = (Object) comparator0;
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) compareToBuilder0;
      objectArray1[1] = object0;
      objectArray1[2] = (Object) compareToBuilder1;
      objectArray1[3] = object0;
      objectArray1[4] = (Object) compareToBuilder1;
      objectArray1[5] = object0;
      objectArray1[6] = (Object) compareToBuilder0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(objectArray0, objectArray1, comparator1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append('x', ' ');
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertNotNull(compareToBuilder3);
      
      int[] intArray0 = new int[0];
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(intArray0, intArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertNotSame(objectArray1, objectArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(7, objectArray1.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(false, false);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertNotSame(objectArray1, objectArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(7, objectArray1.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.appendSuper(0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertNotSame(objectArray1, objectArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(7, objectArray1.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertNotNull(compareToBuilder1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 266.058;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 266.058, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true}, booleanArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(7, booleanArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(compareToBuilder2);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)669;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1308;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(shortArray0, shortArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 266.058, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true}, booleanArray0));
      assertArrayEquals(new short[] {(short)669, (short)0, (short)0, (short)1308}, shortArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(7, booleanArray0.length);
      assertEquals(4, shortArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append('?', '9');
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 266.058, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true}, booleanArray0));
      assertArrayEquals(new short[] {(short)669, (short)0, (short)0, (short)1308}, shortArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(7, booleanArray0.length);
      assertEquals(4, shortArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(compareToBuilder4);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(objectArray0, objectArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 266.058, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true}, booleanArray0));
      assertArrayEquals(new short[] {(short)669, (short)0, (short)0, (short)1308}, shortArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(7, booleanArray0.length);
      assertEquals(4, shortArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      int int0 = compareToBuilder5.toComparison();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, int0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 266.058, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true}, booleanArray0));
      assertArrayEquals(new short[] {(short)669, (short)0, (short)0, (short)1308}, shortArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(7, booleanArray0.length);
      assertEquals(4, shortArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1241.821F;
      floatArray0[1] = 2098.17F;
      floatArray0[2] = 994.551F;
      floatArray0[3] = 3705.392F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((float[]) null, floatArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new float[] {1241.821F, 2098.17F, 994.551F, 3705.392F, (-1.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(compareToBuilder1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 966;
      intArray0[2] = (-348);
      intArray0[3] = 2272;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 138;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(intArray0, intArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new float[] {1241.821F, 2098.17F, 994.551F, 3705.392F, (-1.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0, 966, (-348), 2272, 0, 0, 138}, intArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, intArray0.length);
      assertNotNull(compareToBuilder2);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2350);
      shortArray0[1] = (short)370;
      shortArray0[2] = (short)5328;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(shortArray0, shortArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertArrayEquals(new float[] {1241.821F, 2098.17F, 994.551F, 3705.392F, (-1.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new short[] {(short) (-2350), (short)370, (short)5328}, shortArray0);
      assertArrayEquals(new int[] {0, 966, (-348), 2272, 0, 0, 138}, intArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(3, shortArray0.length);
      assertEquals(7, intArray0.length);
      assertNotNull(compareToBuilder3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(966);
      assertEquals(966, (int)integer0);
      assertNotNull(integer0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(object0, (Object) integer0, (Comparator<?>) comparator0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertArrayEquals(new float[] {1241.821F, 2098.17F, 994.551F, 3705.392F, (-1.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new short[] {(short) (-2350), (short)370, (short)5328}, shortArray0);
      assertArrayEquals(new int[] {0, 966, (-348), 2272, 0, 0, 138}, intArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(3, shortArray0.length);
      assertEquals(7, intArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.appendSuper(966);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertArrayEquals(new float[] {1241.821F, 2098.17F, 994.551F, 3705.392F, (-1.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new short[] {(short) (-2350), (short)370, (short)5328}, shortArray0);
      assertArrayEquals(new int[] {0, 966, (-348), 2272, 0, 0, 138}, intArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(3, shortArray0.length);
      assertEquals(7, intArray0.length);
      assertNotNull(compareToBuilder5);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)0;
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(byteArray0, byteArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertArrayEquals(new float[] {1241.821F, 2098.17F, 994.551F, 3705.392F, (-1.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new short[] {(short) (-2350), (short)370, (short)5328}, shortArray0);
      assertArrayEquals(new int[] {0, 966, (-348), 2272, 0, 0, 138}, intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-50), (byte)63, (byte)110, (byte)2, (byte) (-37), (byte)0}, byteArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(3, shortArray0.length);
      assertEquals(7, intArray0.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(compareToBuilder1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1644);
      shortArray0[1] = (short)1875;
      shortArray0[2] = (short)2166;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)3086;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)0;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(shortArray0, shortArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertArrayEquals(new short[] {(short) (-1644), (short)1875, (short)2166, (short)0, (short)0, (short)3086, (short)1, (short)0}, shortArray0);
      assertEquals(1, charArray0.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(compareToBuilder2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (float) (short)1;
      floatArray1[2] = (float) (short)0;
      floatArray1[3] = (float) 'H';
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertNotSame(floatArray1, floatArray0);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 72.0F}, floatArray1, 0.01F);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertArrayEquals(new short[] {(short) (-1644), (short)1875, (short)2166, (short)0, (short)0, (short)3086, (short)1, (short)0}, shortArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(1, charArray0.length);
      assertEquals(8, shortArray0.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((-2451.0F), (-406.4F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertNotSame(floatArray1, floatArray0);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 72.0F}, floatArray1, 0.01F);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertArrayEquals(new short[] {(short) (-1644), (short)1875, (short)2166, (short)0, (short)0, (short)3086, (short)1, (short)0}, shortArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(1, charArray0.length);
      assertEquals(8, shortArray0.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(compareToBuilder4);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)3086;
      longArray0[1] = (long) 'H';
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(longArray0, longArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertNotSame(floatArray1, floatArray0);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 72.0F}, floatArray1, 0.01F);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertArrayEquals(new short[] {(short) (-1644), (short)1875, (short)2166, (short)0, (short)0, (short)3086, (short)1, (short)0}, shortArray0);
      assertArrayEquals(new long[] {3086L, 72L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(1, charArray0.length);
      assertEquals(8, shortArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((Object) compareToBuilder3, (Object) compareToBuilder4);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertNotSame(floatArray1, floatArray0);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 72.0F}, floatArray1, 0.01F);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertArrayEquals(new short[] {(short) (-1644), (short)1875, (short)2166, (short)0, (short)0, (short)3086, (short)1, (short)0}, shortArray0);
      assertArrayEquals(new long[] {3086L, 72L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(1, charArray0.length);
      assertEquals(8, shortArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = new Integer((-847));
      assertEquals((-847), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-847));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-847), (int)integer1);
      assertNotNull(integer1);
      
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, false);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, int0);
      
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(1.0, 1.0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)98;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(byteArray0, (byte[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)1, (byte)0, (byte)0, (byte)98}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(false, false);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)1, (byte)0, (byte)0, (byte)98}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((int[]) null, (int[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)1, (byte)0, (byte)0, (byte)98}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((byte)0, (byte)50);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)1, (byte)0, (byte)0, (byte)98}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((byte) (-72), (byte) (-17));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)1, (byte)0, (byte)0, (byte)98}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      int int0 = (-1610);
      int int1 = (-4699);
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-1610), (-4699));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.appendSuper((-1610));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((short)1, (short) (-29));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((-1416L), (-4250L));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertNotNull(compareToBuilder4);
      
      byte[] byteArray0 = new byte[0];
      CompareToBuilder compareToBuilder5 = compareToBuilder3.append(byteArray0, byteArray0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(compareToBuilder5);
      
      String string0 = "$";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder6 = compareToBuilder4.append((Object) "$", (Object) compareToBuilder3, (Comparator<?>) comparator0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertNotNull(compareToBuilder6);
      
      CompareToBuilder compareToBuilder7 = compareToBuilder6.append((float) (-1416L), (float) (-4699));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder7.toComparison());
      assertEquals(1, (int)compareToBuilder7.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertNotNull(compareToBuilder7);
      
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$";
      stringArray0[1] = "$";
      stringArray0[2] = "$";
      stringArray0[3] = "$";
      stringArray0[4] = "$";
      stringArray0[5] = "$";
      stringArray0[6] = "$";
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) compareToBuilder3, (Object) null, true, (Class<?>) class0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-5228);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-2669);
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1);
      shortArray1[1] = (short) (-2669);
      shortArray1[2] = (short)1;
      shortArray1[3] = (short) (-1);
      shortArray1[4] = (short) (-1);
      shortArray1[5] = (short) (-2669);
      shortArray1[6] = (short) (-5228);
      shortArray1[7] = (short) (-1);
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new short[] {(short) (-5228), (short)1, (short) (-1), (short) (-2669)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2669), (short)1, (short) (-1), (short) (-1), (short) (-2669), (short) (-5228), (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(compareToBuilder1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(object0, object1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertNotSame(object0, object1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(object1, object0);
      assertNotSame(shortArray0, shortArray1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new short[] {(short) (-5228), (short)1, (short) (-1), (short) (-2669)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2669), (short)1, (short) (-1), (short) (-1), (short) (-2669), (short) (-5228), (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(compareToBuilder2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(doubleArray0, doubleArray0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertNotSame(object0, object1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(object1, object0);
      assertNotSame(shortArray0, shortArray1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertNotSame(shortArray1, shortArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new short[] {(short) (-5228), (short)1, (short) (-1), (short) (-2669)}, shortArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2669), (short)1, (short) (-1), (short) (-1), (short) (-2669), (short) (-5228), (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(compareToBuilder3);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(object2, (Object) "!X>i-", (Comparator<?>) null);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertNotSame(shortArray0, shortArray1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertNotSame(shortArray1, shortArray0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new short[] {(short) (-5228), (short)1, (short) (-1), (short) (-2669)}, shortArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2669), (short)1, (short) (-1), (short) (-1), (short) (-2669), (short) (-5228), (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.appendSuper(2);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertNotSame(shortArray0, shortArray1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertNotSame(shortArray1, shortArray0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new short[] {(short) (-5228), (short)1, (short) (-1), (short) (-2669)}, shortArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2669), (short)1, (short) (-1), (short) (-1), (short) (-2669), (short) (-5228), (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((Object) "!X>i-", (Object) compareToBuilder4, (Comparator<?>) null);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertArrayEquals(new short[] {(short) (-5228), (short)1, (short) (-1), (short) (-2669)}, shortArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2669), (short)1, (short) (-1), (short) (-1), (short) (-2669), (short) (-5228), (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(true, true);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((byte)1, (byte)1);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotNull(compareToBuilder2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)1;
      doubleArray1[1] = (double) (byte)1;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) (byte)1;
      doubleArray1[4] = (double) (byte)1;
      doubleArray1[5] = (double) (byte)1;
      doubleArray1[6] = (double) (byte)1;
      doubleArray1[7] = (double) (byte)1;
      doubleArray1[8] = (double) (byte)1;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((short)1686, (short) (byte)1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(compareToBuilder4);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(byteArray0, byteArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(1, byteArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(false, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(1, byteArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(compareToBuilder6);
      
      CompareToBuilder compareToBuilder7 = compareToBuilder1.append((long) (byte)1, (-121L));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), compareToBuilder7.toComparison());
      assertEquals((-1), (int)compareToBuilder7.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertNotNull(compareToBuilder7);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((boolean[]) null, (boolean[]) null);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) compareToBuilder1;
      objectArray0[1] = (Object) compareToBuilder1;
      objectArray0[2] = (Object) compareToBuilder1;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(objectArray0, objectArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertEquals(3, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((Object) null, (Object) "");
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertEquals(3, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((-1536), (-1536));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertEquals(3, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((float) (-1536), 453.1F);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertEquals(3, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      Integer integer0 = compareToBuilder5.build();
      assertEquals((-1), (int)integer0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertEquals(3, objectArray0.length);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "M9o).GZ";
      stringArray0[1] = "M9o).GZ";
      stringArray0[2] = "M9o).GZ";
      stringArray0[3] = "M9o).GZ";
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "M9o).GZ", object0, stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "+*X2|14SSkj";
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare(1, 1499);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "+*X2|14SSkj", (Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      Integer integer0 = new Integer(597);
      assertEquals(597, (int)integer0);
      assertNotNull(integer0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) "$IB$Nq6kS", (Object) integer0, (Comparator<?>) comparator0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(1360, 1360);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotNull(compareToBuilder2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = ' ';
      charArray0[2] = 'v';
      charArray0[3] = 'W';
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((char[]) null, charArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new char[] {'.', ' ', 'v', 'W'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((short) (-1), (short)0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new char[] {'.', ' ', 'v', 'W'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append('%', ' ');
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertArrayEquals(new char[] {'.', ' ', 'v', 'W'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((-1888.089976), 419.51);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertArrayEquals(new char[] {'.', ' ', 'v', 'W'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = true;
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append('d', 'd');
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(compareToBuilder2);
      
      byte byte0 = (byte)0;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((byte)0, (byte)0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(compareToBuilder3);
      
      short[] shortArray0 = new short[0];
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(shortArray0, shortArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((long[]) null, (long[]) null);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, compareToBuilder5.toComparison());
      assertEquals(0, (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(compareToBuilder5);
      
      Object[] objectArray0 = new Object[0];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(objectArray0, objectArray0, comparator0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, compareToBuilder5.toComparison());
      assertEquals(0, (int)compareToBuilder5.build());
      assertEquals(0, (int)compareToBuilder6.build());
      assertEquals(0, compareToBuilder6.toComparison());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(compareToBuilder6);
      
      CompareToBuilder compareToBuilder7 = compareToBuilder5.append(booleanArray0, booleanArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, compareToBuilder5.toComparison());
      assertEquals(0, (int)compareToBuilder5.build());
      assertEquals(0, compareToBuilder7.toComparison());
      assertEquals(0, (int)compareToBuilder7.build());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(compareToBuilder7);
      
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = Integer.toUnsignedString((int) (byte)0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) compareToBuilder3, (Object) integer0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      boolean boolean0 = true;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(true, true);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(byteArray0, byteArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(compareToBuilder2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)2;
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(compareToBuilder3);
      
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      CompareToBuilder compareToBuilder4 = compareToBuilder1.append(byteArray0, byteArray0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)1}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(compareToBuilder4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(object0, object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object0.equals((Object)object1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertNotSame(object1, object0);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertNotSame(object0, object1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)1}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(' ', '3');
      assertFalse(object1.equals((Object)object0));
      assertFalse(object0.equals((Object)object1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertNotSame(object1, object0);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertNotSame(object0, object1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)1}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(compareToBuilder6);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      CompareToBuilder compareToBuilder7 = compareToBuilder6.append(booleanArray0, booleanArray0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object0.equals((Object)object1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder7.toComparison());
      assertEquals(1, (int)compareToBuilder7.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertNotSame(object1, object0);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertNotSame(object0, object1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)1}, byteArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(compareToBuilder7);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare(object2, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-1626L), (-1626L));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-1626L);
      longArray0[1] = (-1626L);
      longArray0[2] = (-1626L);
      longArray0[3] = (-1626L);
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(longArray0, longArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new long[] {(-1626L), (-1626L), (-1626L), (-1626L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(false, false);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new long[] {(-1626L), (-1626L), (-1626L), (-1626L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(compareToBuilder3);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1072);
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertArrayEquals(new long[] {(-1626L), (-1626L), (-1626L), (-1626L)}, longArray0);
      assertArrayEquals(new short[] {(short) (-1072)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, longArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(compareToBuilder4);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(booleanArray0, booleanArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertArrayEquals(new long[] {(-1626L), (-1626L), (-1626L), (-1626L)}, longArray0);
      assertArrayEquals(new short[] {(short) (-1072)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(4, longArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(2572.14F, (-1.0F));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertArrayEquals(new long[] {(-1626L), (-1626L), (-1626L), (-1626L)}, longArray0);
      assertArrayEquals(new short[] {(short) (-1072)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(4, longArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) compareToBuilder0;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)0;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(byteArray0, byteArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte) (-36), (byte)0, (byte)37, (byte)27, (byte)35, (byte)44, (byte) (-99), (byte)0}, byteArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(compareToBuilder2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)44;
      doubleArray0[3] = (double) (byte)35;
      doubleArray0[4] = (double) (byte)0;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(doubleArray0, doubleArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertArrayEquals(new byte[] {(byte) (-36), (byte)0, (byte)37, (byte)27, (byte)35, (byte)44, (byte) (-99), (byte)0}, byteArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 44.0, 35.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, objectArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.appendSuper((-3790));
      assertEquals((-3790), (int)compareToBuilder0.build());
      assertEquals((-3790), compareToBuilder0.toComparison());
      assertEquals((-3790), compareToBuilder1.toComparison());
      assertEquals((-3790), (int)compareToBuilder1.build());
      assertEquals((-3790), (int)compareToBuilder3.build());
      assertEquals((-3790), compareToBuilder3.toComparison());
      assertEquals((-3790), (int)compareToBuilder4.build());
      assertEquals((-3790), compareToBuilder4.toComparison());
      assertEquals((-3790), (int)compareToBuilder2.build());
      assertEquals((-3790), compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertArrayEquals(new byte[] {(byte) (-36), (byte)0, (byte)37, (byte)27, (byte)35, (byte)44, (byte) (-99), (byte)0}, byteArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 44.0, 35.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, objectArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append('J', '4');
      assertEquals((-3790), (int)compareToBuilder0.build());
      assertEquals((-3790), compareToBuilder0.toComparison());
      assertEquals((-3790), compareToBuilder1.toComparison());
      assertEquals((-3790), (int)compareToBuilder1.build());
      assertEquals((-3790), (int)compareToBuilder3.build());
      assertEquals((-3790), compareToBuilder3.toComparison());
      assertEquals((-3790), (int)compareToBuilder4.build());
      assertEquals((-3790), compareToBuilder4.toComparison());
      assertEquals((-3790), (int)compareToBuilder5.build());
      assertEquals((-3790), compareToBuilder5.toComparison());
      assertEquals((-3790), (int)compareToBuilder2.build());
      assertEquals((-3790), compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertArrayEquals(new byte[] {(byte) (-36), (byte)0, (byte)37, (byte)27, (byte)35, (byte)44, (byte) (-99), (byte)0}, byteArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 44.0, 35.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, objectArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(compareToBuilder5);
      
      int int0 = compareToBuilder5.toComparison();
      assertEquals((-3790), int0);
      assertEquals((-3790), (int)compareToBuilder0.build());
      assertEquals((-3790), compareToBuilder0.toComparison());
      assertEquals((-3790), compareToBuilder1.toComparison());
      assertEquals((-3790), (int)compareToBuilder1.build());
      assertEquals((-3790), (int)compareToBuilder3.build());
      assertEquals((-3790), compareToBuilder3.toComparison());
      assertEquals((-3790), (int)compareToBuilder4.build());
      assertEquals((-3790), compareToBuilder4.toComparison());
      assertEquals((-3790), (int)compareToBuilder5.build());
      assertEquals((-3790), compareToBuilder5.toComparison());
      assertEquals((-3790), (int)compareToBuilder2.build());
      assertEquals((-3790), compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertArrayEquals(new byte[] {(byte) (-36), (byte)0, (byte)37, (byte)27, (byte)35, (byte)44, (byte) (-99), (byte)0}, byteArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 44.0, 35.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, objectArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short)1821, (short)0);
      assertEquals(1821, compareToBuilder0.toComparison());
      assertEquals(1821, (int)compareToBuilder0.build());
      assertEquals(1821, compareToBuilder1.toComparison());
      assertEquals(1821, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-374.545);
      doubleArray0[1] = (double) (short)0;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(doubleArray0, doubleArray0);
      assertEquals(1821, compareToBuilder0.toComparison());
      assertEquals(1821, (int)compareToBuilder0.build());
      assertEquals(1821, compareToBuilder1.toComparison());
      assertEquals(1821, (int)compareToBuilder1.build());
      assertEquals(1821, compareToBuilder2.toComparison());
      assertEquals(1821, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new double[] {(-374.545), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-374.545);
      objectArray0[1] = (Object) compareToBuilder1;
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0.0;
      objectArray1[1] = (Object) compareToBuilder2;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray1, (Comparator<?>) null);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1821, compareToBuilder0.toComparison());
      assertEquals(1821, (int)compareToBuilder0.build());
      assertEquals(1821, compareToBuilder1.toComparison());
      assertEquals(1821, (int)compareToBuilder1.build());
      assertEquals(1821, compareToBuilder2.toComparison());
      assertEquals(1821, (int)compareToBuilder2.build());
      assertEquals(1821, compareToBuilder3.toComparison());
      assertEquals(1821, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new double[] {(-374.545), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((long) (short)1821, (long) (short)1821);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1821, compareToBuilder0.toComparison());
      assertEquals(1821, (int)compareToBuilder0.build());
      assertEquals(1821, compareToBuilder1.toComparison());
      assertEquals(1821, (int)compareToBuilder1.build());
      assertEquals(1821, compareToBuilder2.toComparison());
      assertEquals(1821, (int)compareToBuilder2.build());
      assertEquals(1821, compareToBuilder3.toComparison());
      assertEquals(1821, (int)compareToBuilder3.build());
      assertEquals(1821, compareToBuilder4.toComparison());
      assertEquals(1821, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertArrayEquals(new double[] {(-374.545), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(compareToBuilder4);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(booleanArray0, booleanArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1821, compareToBuilder0.toComparison());
      assertEquals(1821, (int)compareToBuilder0.build());
      assertEquals(1821, compareToBuilder1.toComparison());
      assertEquals(1821, (int)compareToBuilder1.build());
      assertEquals(1821, compareToBuilder2.toComparison());
      assertEquals(1821, (int)compareToBuilder2.build());
      assertEquals(1821, compareToBuilder5.toComparison());
      assertEquals(1821, (int)compareToBuilder5.build());
      assertEquals(1821, compareToBuilder3.toComparison());
      assertEquals(1821, (int)compareToBuilder3.build());
      assertEquals(1821, compareToBuilder4.toComparison());
      assertEquals(1821, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertArrayEquals(new double[] {(-374.545), 0.0}, doubleArray0, 0.01);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false, true, true}, booleanArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((short)1821, (short) (-1332));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1821, compareToBuilder0.toComparison());
      assertEquals(1821, (int)compareToBuilder0.build());
      assertEquals(1821, compareToBuilder1.toComparison());
      assertEquals(1821, (int)compareToBuilder1.build());
      assertEquals(1821, compareToBuilder2.toComparison());
      assertEquals(1821, (int)compareToBuilder2.build());
      assertEquals(1821, compareToBuilder5.toComparison());
      assertEquals(1821, (int)compareToBuilder5.build());
      assertEquals(1821, (int)compareToBuilder6.build());
      assertEquals(1821, compareToBuilder6.toComparison());
      assertEquals(1821, compareToBuilder3.toComparison());
      assertEquals(1821, (int)compareToBuilder3.build());
      assertEquals(1821, compareToBuilder4.toComparison());
      assertEquals(1821, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertArrayEquals(new double[] {(-374.545), 0.0}, doubleArray0, 0.01);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false, true, true}, booleanArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short)2, (short)3999);
      assertEquals((-3997), (int)compareToBuilder0.build());
      assertEquals((-3997), compareToBuilder0.toComparison());
      assertEquals((-3997), compareToBuilder1.toComparison());
      assertEquals((-3997), (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((long) (short)3999, 0L);
      assertEquals((-3997), (int)compareToBuilder0.build());
      assertEquals((-3997), compareToBuilder0.toComparison());
      assertEquals((-3997), compareToBuilder1.toComparison());
      assertEquals((-3997), (int)compareToBuilder1.build());
      assertEquals((-3997), compareToBuilder2.toComparison());
      assertEquals((-3997), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((int) (short)3999, 0);
      assertEquals((-3997), (int)compareToBuilder0.build());
      assertEquals((-3997), compareToBuilder0.toComparison());
      assertEquals((-3997), compareToBuilder1.toComparison());
      assertEquals((-3997), (int)compareToBuilder1.build());
      assertEquals((-3997), compareToBuilder2.toComparison());
      assertEquals((-3997), (int)compareToBuilder2.build());
      assertEquals((-3997), compareToBuilder3.toComparison());
      assertEquals((-3997), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.appendSuper((short)2);
      assertEquals((-3997), (int)compareToBuilder0.build());
      assertEquals((-3997), compareToBuilder0.toComparison());
      assertEquals((-3997), compareToBuilder1.toComparison());
      assertEquals((-3997), (int)compareToBuilder1.build());
      assertEquals((-3997), compareToBuilder2.toComparison());
      assertEquals((-3997), (int)compareToBuilder2.build());
      assertEquals((-3997), compareToBuilder3.toComparison());
      assertEquals((-3997), (int)compareToBuilder3.build());
      assertEquals((-3997), compareToBuilder4.toComparison());
      assertEquals((-3997), (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append('k', 'u');
      assertEquals((-3997), (int)compareToBuilder0.build());
      assertEquals((-3997), compareToBuilder0.toComparison());
      assertEquals((-3997), compareToBuilder1.toComparison());
      assertEquals((-3997), (int)compareToBuilder1.build());
      assertEquals((-3997), compareToBuilder2.toComparison());
      assertEquals((-3997), (int)compareToBuilder2.build());
      assertEquals((-3997), compareToBuilder3.toComparison());
      assertEquals((-3997), (int)compareToBuilder3.build());
      assertEquals((-3997), compareToBuilder4.toComparison());
      assertEquals((-3997), (int)compareToBuilder4.build());
      assertEquals((-3997), compareToBuilder5.toComparison());
      assertEquals((-3997), (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertNotNull(compareToBuilder5);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)17;
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(byteArray0, byteArray0);
      assertEquals((-3997), (int)compareToBuilder0.build());
      assertEquals((-3997), compareToBuilder0.toComparison());
      assertEquals((-3997), compareToBuilder1.toComparison());
      assertEquals((-3997), (int)compareToBuilder1.build());
      assertEquals((-3997), compareToBuilder2.toComparison());
      assertEquals((-3997), (int)compareToBuilder2.build());
      assertEquals((-3997), compareToBuilder3.toComparison());
      assertEquals((-3997), (int)compareToBuilder3.build());
      assertEquals((-3997), compareToBuilder4.toComparison());
      assertEquals((-3997), (int)compareToBuilder4.build());
      assertEquals((-3997), compareToBuilder5.toComparison());
      assertEquals((-3997), (int)compareToBuilder5.build());
      assertEquals((-3997), (int)compareToBuilder6.build());
      assertEquals((-3997), compareToBuilder6.toComparison());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)115, (byte)17}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(object0, object0, comparator0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      int int0 = 1;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(1, 1);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((long) 1, (long) 1);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertNotNull(compareToBuilder3);
      
      short[] shortArray0 = new short[0];
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(shortArray0, shortArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(compareToBuilder4);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) compareToBuilder4;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) comparator0;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(objectArray0, objectArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, compareToBuilder5.toComparison());
      assertEquals(0, (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      short short0 = (short)501;
      CompareToBuilder compareToBuilder6 = compareToBuilder4.append((short)501, (short)501);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, compareToBuilder6.toComparison());
      assertEquals(0, (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(compareToBuilder6);
      
      String string0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, objectArray0[0], (Collection<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      Integer integer0 = compareToBuilder0.build();
      assertEquals(0, (int)integer0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        compareToBuilder0.append((Object) integer0, (Object) "(\"Wrp$s7#Hb nh>n", (Comparator<?>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) compareToBuilder0;
      objectArray0[1] = (Object) compareToBuilder0;
      objectArray0[2] = (Object) compareToBuilder0;
      objectArray0[3] = (Object) compareToBuilder0;
      objectArray0[4] = (Object) compareToBuilder0;
      objectArray0[5] = (Object) compareToBuilder0;
      objectArray0[6] = (Object) compareToBuilder0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) compareToBuilder0;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0, (Comparator<?>) null);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertEquals(9, objectArray0.length);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((-1465.784F), (-1465.784F));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertEquals(9, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      int int0 = compareToBuilder1.toComparison();
      assertEquals(0, int0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertEquals(9, objectArray0.length);
      
      int int1 = compareToBuilder0.toComparison();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder1.append((byte)0, (byte)0);
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertEquals(9, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      Integer integer0 = new Integer((byte)0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) integer0, objectArray0[5], (Collection<String>) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) compareToBuilder0;
      objectArray0[1] = (Object) compareToBuilder0;
      objectArray0[2] = (Object) compareToBuilder0;
      objectArray0[3] = (Object) compareToBuilder0;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0, (Comparator<?>) null);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertEquals(4, objectArray0.length);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(0.0, 0.0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertEquals(4, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertEquals(4, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotNull(compareToBuilder3);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare((-1), 129);
      assertEquals((-1), int0);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((Object) compareToBuilder0, (Object) integer0, (Comparator<?>) null);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotNull(compareToBuilder4);
      
      Object[] objectArray2 = new Object[5];
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      
      objectArray2[0] = (Object) compareToBuilder1;
      objectArray2[1] = (Object) compareToBuilder1;
      objectArray2[2] = (Object) compareToBuilder4;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray2[3] = object0;
      objectArray2[4] = (Object) compareToBuilder1;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(objectArray2, objectArray0);
      assertFalse(objectArray0.equals((Object)objectArray2));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray1.equals((Object)objectArray2));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(objectArray0, objectArray2);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray1, objectArray2);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertEquals(5, objectArray2.length);
      assertNotNull(compareToBuilder5);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      int int1 = CompareToBuilder.reflectionCompare(object1, objectArray2[0], false);
      assertFalse(object1.equals((Object)object0));
      assertFalse(int1 == int0);
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertEquals(0, int1);
      assertNotSame(object1, object0);
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertEquals(5, objectArray2.length);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare(object2, (Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('n', '^');
      assertEquals(16, (int)compareToBuilder0.build());
      assertEquals(16, compareToBuilder0.toComparison());
      assertEquals(16, compareToBuilder1.toComparison());
      assertEquals(16, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((double[]) null, (double[]) null);
      assertEquals(16, (int)compareToBuilder0.build());
      assertEquals(16, compareToBuilder0.toComparison());
      assertEquals(16, compareToBuilder1.toComparison());
      assertEquals(16, (int)compareToBuilder1.build());
      assertEquals(16, compareToBuilder2.toComparison());
      assertEquals(16, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder1.append(3800.4, 3800.4);
      assertEquals(16, (int)compareToBuilder0.build());
      assertEquals(16, compareToBuilder0.toComparison());
      assertEquals(16, compareToBuilder1.toComparison());
      assertEquals(16, (int)compareToBuilder1.build());
      assertEquals(16, compareToBuilder3.toComparison());
      assertEquals(16, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((-1L), 4218L);
      assertEquals(16, (int)compareToBuilder0.build());
      assertEquals(16, compareToBuilder0.toComparison());
      assertEquals(16, compareToBuilder1.toComparison());
      assertEquals(16, (int)compareToBuilder1.build());
      assertEquals(16, compareToBuilder3.toComparison());
      assertEquals(16, (int)compareToBuilder3.build());
      assertEquals(16, compareToBuilder4.toComparison());
      assertEquals(16, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(0.0F, (-3963.51F));
      assertEquals(16, (int)compareToBuilder0.build());
      assertEquals(16, compareToBuilder0.toComparison());
      assertEquals(16, compareToBuilder1.toComparison());
      assertEquals(16, (int)compareToBuilder1.build());
      assertEquals(16, compareToBuilder3.toComparison());
      assertEquals(16, (int)compareToBuilder3.build());
      assertEquals(16, compareToBuilder4.toComparison());
      assertEquals(16, (int)compareToBuilder4.build());
      assertEquals(16, (int)compareToBuilder5.build());
      assertEquals(16, compareToBuilder5.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.appendSuper(0);
      assertEquals(16, (int)compareToBuilder0.build());
      assertEquals(16, compareToBuilder0.toComparison());
      assertEquals(16, compareToBuilder1.toComparison());
      assertEquals(16, (int)compareToBuilder1.build());
      assertEquals(16, compareToBuilder3.toComparison());
      assertEquals(16, (int)compareToBuilder3.build());
      assertEquals(16, compareToBuilder4.toComparison());
      assertEquals(16, (int)compareToBuilder4.build());
      assertEquals(16, (int)compareToBuilder5.build());
      assertEquals(16, compareToBuilder5.toComparison());
      assertEquals(16, compareToBuilder6.toComparison());
      assertEquals(16, (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertNotNull(compareToBuilder6);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = 4218L;
      CompareToBuilder compareToBuilder7 = compareToBuilder6.append(longArray0, longArray0);
      assertEquals(16, (int)compareToBuilder0.build());
      assertEquals(16, compareToBuilder0.toComparison());
      assertEquals(16, compareToBuilder1.toComparison());
      assertEquals(16, (int)compareToBuilder1.build());
      assertEquals(16, compareToBuilder3.toComparison());
      assertEquals(16, (int)compareToBuilder3.build());
      assertEquals(16, compareToBuilder4.toComparison());
      assertEquals(16, (int)compareToBuilder4.build());
      assertEquals(16, (int)compareToBuilder5.build());
      assertEquals(16, compareToBuilder5.toComparison());
      assertEquals(16, compareToBuilder6.toComparison());
      assertEquals(16, (int)compareToBuilder6.build());
      assertEquals(16, compareToBuilder7.toComparison());
      assertEquals(16, (int)compareToBuilder7.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertArrayEquals(new long[] {0L, 4218L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(compareToBuilder7);
      
      CompareToBuilder compareToBuilder8 = compareToBuilder6.append((short)0, (short) (-825));
      assertEquals(16, (int)compareToBuilder0.build());
      assertEquals(16, compareToBuilder0.toComparison());
      assertEquals(16, compareToBuilder1.toComparison());
      assertEquals(16, (int)compareToBuilder1.build());
      assertEquals(16, compareToBuilder3.toComparison());
      assertEquals(16, (int)compareToBuilder3.build());
      assertEquals(16, compareToBuilder4.toComparison());
      assertEquals(16, (int)compareToBuilder4.build());
      assertEquals(16, (int)compareToBuilder5.build());
      assertEquals(16, compareToBuilder5.toComparison());
      assertEquals(16, compareToBuilder6.toComparison());
      assertEquals(16, (int)compareToBuilder6.build());
      assertEquals(16, compareToBuilder8.toComparison());
      assertEquals(16, (int)compareToBuilder8.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder8);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder8);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder8);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder5);
      assertSame(compareToBuilder8, compareToBuilder7);
      assertSame(compareToBuilder8, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder3);
      assertSame(compareToBuilder8, compareToBuilder0);
      assertSame(compareToBuilder8, compareToBuilder1);
      assertNotNull(compareToBuilder8);
      
      CompareToBuilder compareToBuilder9 = compareToBuilder1.append((Object) compareToBuilder3, (Object) compareToBuilder7);
      assertEquals(16, (int)compareToBuilder0.build());
      assertEquals(16, compareToBuilder0.toComparison());
      assertEquals(16, compareToBuilder1.toComparison());
      assertEquals(16, (int)compareToBuilder1.build());
      assertEquals(16, compareToBuilder3.toComparison());
      assertEquals(16, (int)compareToBuilder3.build());
      assertEquals(16, compareToBuilder4.toComparison());
      assertEquals(16, (int)compareToBuilder4.build());
      assertEquals(16, (int)compareToBuilder5.build());
      assertEquals(16, compareToBuilder5.toComparison());
      assertEquals(16, compareToBuilder6.toComparison());
      assertEquals(16, (int)compareToBuilder6.build());
      assertEquals(16, compareToBuilder7.toComparison());
      assertEquals(16, (int)compareToBuilder7.build());
      assertEquals(16, compareToBuilder9.toComparison());
      assertEquals(16, (int)compareToBuilder9.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder9);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder9);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder9);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder9);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder8);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder8);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder9);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder9);
      assertSame(compareToBuilder6, compareToBuilder8);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder8);
      assertSame(compareToBuilder7, compareToBuilder9);
      assertSame(compareToBuilder9, compareToBuilder8);
      assertSame(compareToBuilder9, compareToBuilder0);
      assertSame(compareToBuilder9, compareToBuilder5);
      assertSame(compareToBuilder9, compareToBuilder1);
      assertSame(compareToBuilder9, compareToBuilder4);
      assertSame(compareToBuilder9, compareToBuilder6);
      assertSame(compareToBuilder9, compareToBuilder7);
      assertSame(compareToBuilder9, compareToBuilder3);
      assertSame(compareToBuilder9, compareToBuilder2);
      assertArrayEquals(new long[] {0L, 4218L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(compareToBuilder9);
      
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      CompareToBuilder compareToBuilder10 = compareToBuilder3.append((Object) null, (Object) compareToBuilder0);
      assertEquals(16, (int)compareToBuilder0.build());
      assertEquals(16, compareToBuilder0.toComparison());
      assertEquals(16, compareToBuilder1.toComparison());
      assertEquals(16, (int)compareToBuilder1.build());
      assertEquals(16, compareToBuilder3.toComparison());
      assertEquals(16, (int)compareToBuilder3.build());
      assertEquals(16, compareToBuilder10.toComparison());
      assertEquals(16, (int)compareToBuilder10.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder10);
      assertSame(compareToBuilder0, compareToBuilder9);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder10);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder9);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder9);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder10);
      assertSame(compareToBuilder10, compareToBuilder4);
      assertSame(compareToBuilder10, compareToBuilder6);
      assertSame(compareToBuilder10, compareToBuilder7);
      assertSame(compareToBuilder10, compareToBuilder1);
      assertSame(compareToBuilder10, compareToBuilder0);
      assertSame(compareToBuilder10, compareToBuilder8);
      assertSame(compareToBuilder10, compareToBuilder9);
      assertSame(compareToBuilder10, compareToBuilder2);
      assertSame(compareToBuilder10, compareToBuilder5);
      assertSame(compareToBuilder10, compareToBuilder3);
      assertNotNull(compareToBuilder10);
      
      CompareToBuilder compareToBuilder11 = compareToBuilder10.append('n', 'R');
      assertEquals(16, (int)compareToBuilder0.build());
      assertEquals(16, compareToBuilder0.toComparison());
      assertEquals(16, compareToBuilder1.toComparison());
      assertEquals(16, (int)compareToBuilder1.build());
      assertEquals(16, compareToBuilder3.toComparison());
      assertEquals(16, (int)compareToBuilder3.build());
      assertEquals(16, compareToBuilder10.toComparison());
      assertEquals(16, (int)compareToBuilder10.build());
      assertEquals(16, (int)compareToBuilder11.build());
      assertEquals(16, compareToBuilder11.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder10);
      assertSame(compareToBuilder0, compareToBuilder11);
      assertSame(compareToBuilder0, compareToBuilder9);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder10);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder11);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder9);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder11);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder9);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder10);
      assertSame(compareToBuilder10, compareToBuilder4);
      assertSame(compareToBuilder10, compareToBuilder6);
      assertSame(compareToBuilder10, compareToBuilder11);
      assertSame(compareToBuilder10, compareToBuilder7);
      assertSame(compareToBuilder10, compareToBuilder1);
      assertSame(compareToBuilder10, compareToBuilder0);
      assertSame(compareToBuilder10, compareToBuilder8);
      assertSame(compareToBuilder10, compareToBuilder9);
      assertSame(compareToBuilder10, compareToBuilder2);
      assertSame(compareToBuilder10, compareToBuilder5);
      assertSame(compareToBuilder10, compareToBuilder3);
      assertSame(compareToBuilder11, compareToBuilder5);
      assertSame(compareToBuilder11, compareToBuilder8);
      assertSame(compareToBuilder11, compareToBuilder3);
      assertSame(compareToBuilder11, compareToBuilder7);
      assertSame(compareToBuilder11, compareToBuilder9);
      assertSame(compareToBuilder11, compareToBuilder2);
      assertSame(compareToBuilder11, compareToBuilder4);
      assertSame(compareToBuilder11, compareToBuilder1);
      assertSame(compareToBuilder11, compareToBuilder10);
      assertSame(compareToBuilder11, compareToBuilder6);
      assertSame(compareToBuilder11, compareToBuilder0);
      assertNotNull(compareToBuilder11);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertNotNull(linkedList0);
      
      int int0 = CompareToBuilder.reflectionCompare((Object) compareToBuilder2, (Object) compareToBuilder8, (Collection<String>) linkedList0);
      assertEquals(0, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(16, (int)compareToBuilder0.build());
      assertEquals(16, compareToBuilder0.toComparison());
      assertEquals(16, compareToBuilder1.toComparison());
      assertEquals(16, (int)compareToBuilder1.build());
      assertEquals(16, compareToBuilder2.toComparison());
      assertEquals(16, (int)compareToBuilder2.build());
      assertEquals(16, compareToBuilder3.toComparison());
      assertEquals(16, (int)compareToBuilder3.build());
      assertEquals(16, compareToBuilder4.toComparison());
      assertEquals(16, (int)compareToBuilder4.build());
      assertEquals(16, (int)compareToBuilder5.build());
      assertEquals(16, compareToBuilder5.toComparison());
      assertEquals(16, compareToBuilder6.toComparison());
      assertEquals(16, (int)compareToBuilder6.build());
      assertEquals(16, compareToBuilder8.toComparison());
      assertEquals(16, (int)compareToBuilder8.build());
      assertFalse(linkedList0.contains(""));
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder10);
      assertSame(compareToBuilder0, compareToBuilder11);
      assertSame(compareToBuilder0, compareToBuilder9);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder10);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder11);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder9);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder2, compareToBuilder11);
      assertSame(compareToBuilder2, compareToBuilder10);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder8);
      assertSame(compareToBuilder2, compareToBuilder9);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder11);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder9);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder10);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder11);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder10);
      assertSame(compareToBuilder4, compareToBuilder9);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder8);
      assertSame(compareToBuilder5, compareToBuilder10);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder11);
      assertSame(compareToBuilder5, compareToBuilder8);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder9);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder11);
      assertSame(compareToBuilder6, compareToBuilder10);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder9);
      assertSame(compareToBuilder6, compareToBuilder8);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder11);
      assertSame(compareToBuilder8, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder5);
      assertSame(compareToBuilder8, compareToBuilder7);
      assertSame(compareToBuilder8, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder3);
      assertSame(compareToBuilder8, compareToBuilder0);
      assertSame(compareToBuilder8, compareToBuilder9);
      assertSame(compareToBuilder8, compareToBuilder10);
      assertSame(compareToBuilder8, compareToBuilder1);
      
      byte[] byteArray0 = new byte[0];
      CompareToBuilder compareToBuilder12 = compareToBuilder2.append(byteArray0, byteArray0);
      assertEquals(16, (int)compareToBuilder0.build());
      assertEquals(16, compareToBuilder0.toComparison());
      assertEquals(16, compareToBuilder1.toComparison());
      assertEquals(16, (int)compareToBuilder1.build());
      assertEquals(16, compareToBuilder2.toComparison());
      assertEquals(16, (int)compareToBuilder2.build());
      assertEquals(16, compareToBuilder12.toComparison());
      assertEquals(16, (int)compareToBuilder12.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder12);
      assertSame(compareToBuilder0, compareToBuilder10);
      assertSame(compareToBuilder0, compareToBuilder11);
      assertSame(compareToBuilder0, compareToBuilder9);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder10);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder12);
      assertSame(compareToBuilder1, compareToBuilder11);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder9);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder2, compareToBuilder11);
      assertSame(compareToBuilder2, compareToBuilder10);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder8);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder9);
      assertSame(compareToBuilder2, compareToBuilder12);
      assertSame(compareToBuilder12, compareToBuilder7);
      assertSame(compareToBuilder12, compareToBuilder6);
      assertSame(compareToBuilder12, compareToBuilder10);
      assertSame(compareToBuilder12, compareToBuilder2);
      assertSame(compareToBuilder12, compareToBuilder5);
      assertSame(compareToBuilder12, compareToBuilder3);
      assertSame(compareToBuilder12, compareToBuilder4);
      assertSame(compareToBuilder12, compareToBuilder0);
      assertSame(compareToBuilder12, compareToBuilder1);
      assertSame(compareToBuilder12, compareToBuilder9);
      assertSame(compareToBuilder12, compareToBuilder11);
      assertSame(compareToBuilder12, compareToBuilder8);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(compareToBuilder12);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = CompareToBuilder.reflectionCompare(object0, (Object) "", (Collection<String>) linkedList0);
      assertEquals(0, int0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((boolean[]) null, booleanArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder0.append(0L, (long) 0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotNull(compareToBuilder2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 'P';
      charArray0[2] = '@';
      CompareToBuilder compareToBuilder3 = compareToBuilder1.append(charArray0, charArray0);
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true}, booleanArray0));
      assertArrayEquals(new char[] {'t', 'P', '@'}, charArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(compareToBuilder3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(false, true);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) compareToBuilder0;
      objectArray0[1] = (Object) compareToBuilder1;
      objectArray0[2] = (Object) compareToBuilder1;
      objectArray0[3] = (Object) compareToBuilder0;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(objectArray0, objectArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertEquals(4, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder1.append((Object) compareToBuilder0, (Object) compareToBuilder0, (Comparator<?>) null);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertNotNull(compareToBuilder3);
      
      Object[] objectArray1 = new Object[1];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) compareToBuilder2;
      CompareToBuilder compareToBuilder4 = compareToBuilder2.append(objectArray1, objectArray0, (Comparator<?>) null);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertEquals(4, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder2.append((-2008.59814), (-1.0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertEquals(4, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder0.appendSuper(0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertNotNull(compareToBuilder6);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      CompareToBuilder compareToBuilder7 = compareToBuilder3.append(floatArray0, floatArray0);
      assertEquals((-1), (int)compareToBuilder7.build());
      assertEquals((-1), compareToBuilder7.toComparison());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(compareToBuilder7);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      CompareToBuilder compareToBuilder8 = compareToBuilder1.append(doubleArray0, doubleArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder8.toComparison());
      assertEquals((-1), (int)compareToBuilder8.build());
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder8, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder3);
      assertSame(compareToBuilder8, compareToBuilder1);
      assertSame(compareToBuilder8, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder0);
      assertSame(compareToBuilder8, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder5);
      assertSame(compareToBuilder8, compareToBuilder7);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(compareToBuilder8);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(true, false);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)2752;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2095);
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(shortArray0, shortArray0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2, (short)1, (short) (-1), (short)2752, (short)0, (short) (-2095)}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)2752;
      objectArray0[1] = (Object) compareToBuilder0;
      objectArray0[2] = (Object) (short)0;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray0);
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2, (short)1, (short) (-1), (short)2752, (short)0, (short) (-2095)}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(true, true);
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2, (short)1, (short) (-1), (short)2752, (short)0, (short) (-2095)}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(compareToBuilder4);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte) (-1), (byte)28);
      assertEquals((-29), (int)compareToBuilder0.build());
      assertEquals((-29), compareToBuilder0.toComparison());
      assertEquals((-29), (int)compareToBuilder1.build());
      assertEquals((-29), compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) compareToBuilder1;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(objectArray0, objectArray0);
      assertEquals((-29), (int)compareToBuilder0.build());
      assertEquals((-29), compareToBuilder0.toComparison());
      assertEquals((-29), (int)compareToBuilder1.build());
      assertEquals((-29), compareToBuilder1.toComparison());
      assertEquals((-29), (int)compareToBuilder2.build());
      assertEquals((-29), compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertEquals(2, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.appendSuper((-1));
      assertEquals((-29), (int)compareToBuilder0.build());
      assertEquals((-29), compareToBuilder0.toComparison());
      assertEquals((-29), (int)compareToBuilder1.build());
      assertEquals((-29), compareToBuilder1.toComparison());
      assertEquals((-29), (int)compareToBuilder2.build());
      assertEquals((-29), compareToBuilder2.toComparison());
      assertEquals((-29), compareToBuilder3.toComparison());
      assertEquals((-29), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertEquals(2, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(true, true);
      assertEquals((-29), (int)compareToBuilder0.build());
      assertEquals((-29), compareToBuilder0.toComparison());
      assertEquals((-29), (int)compareToBuilder1.build());
      assertEquals((-29), compareToBuilder1.toComparison());
      assertEquals((-29), (int)compareToBuilder2.build());
      assertEquals((-29), compareToBuilder2.toComparison());
      assertEquals((-29), compareToBuilder3.toComparison());
      assertEquals((-29), (int)compareToBuilder3.build());
      assertEquals((-29), compareToBuilder4.toComparison());
      assertEquals((-29), (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertEquals(2, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      boolean[] booleanArray0 = new boolean[0];
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(booleanArray0, booleanArray0);
      assertEquals((-29), (int)compareToBuilder0.build());
      assertEquals((-29), compareToBuilder0.toComparison());
      assertEquals((-29), (int)compareToBuilder1.build());
      assertEquals((-29), compareToBuilder1.toComparison());
      assertEquals((-29), (int)compareToBuilder2.build());
      assertEquals((-29), compareToBuilder2.toComparison());
      assertEquals((-29), compareToBuilder3.toComparison());
      assertEquals((-29), (int)compareToBuilder3.build());
      assertEquals((-29), compareToBuilder4.toComparison());
      assertEquals((-29), (int)compareToBuilder4.build());
      assertEquals((-29), (int)compareToBuilder5.build());
      assertEquals((-29), compareToBuilder5.toComparison());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(2, objectArray0.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((int) (byte)28, 0);
      assertEquals((-29), (int)compareToBuilder0.build());
      assertEquals((-29), compareToBuilder0.toComparison());
      assertEquals((-29), (int)compareToBuilder1.build());
      assertEquals((-29), compareToBuilder1.toComparison());
      assertEquals((-29), (int)compareToBuilder2.build());
      assertEquals((-29), compareToBuilder2.toComparison());
      assertEquals((-29), compareToBuilder3.toComparison());
      assertEquals((-29), (int)compareToBuilder3.build());
      assertEquals((-29), compareToBuilder4.toComparison());
      assertEquals((-29), (int)compareToBuilder4.build());
      assertEquals((-29), (int)compareToBuilder5.build());
      assertEquals((-29), compareToBuilder5.toComparison());
      assertEquals((-29), (int)compareToBuilder6.build());
      assertEquals((-29), compareToBuilder6.toComparison());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(2, objectArray0.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(compareToBuilder6);
      
      CompareToBuilder compareToBuilder7 = compareToBuilder1.appendSuper((-1));
      assertEquals((-29), (int)compareToBuilder0.build());
      assertEquals((-29), compareToBuilder0.toComparison());
      assertEquals((-29), (int)compareToBuilder1.build());
      assertEquals((-29), compareToBuilder1.toComparison());
      assertEquals((-29), compareToBuilder7.toComparison());
      assertEquals((-29), (int)compareToBuilder7.build());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertNotNull(compareToBuilder7);
      
      CompareToBuilder compareToBuilder8 = compareToBuilder1.append((-1), (-1));
      assertEquals((-29), (int)compareToBuilder0.build());
      assertEquals((-29), compareToBuilder0.toComparison());
      assertEquals((-29), (int)compareToBuilder1.build());
      assertEquals((-29), compareToBuilder1.toComparison());
      assertEquals((-29), (int)compareToBuilder8.build());
      assertEquals((-29), compareToBuilder8.toComparison());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder8, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder0);
      assertSame(compareToBuilder8, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder7);
      assertSame(compareToBuilder8, compareToBuilder1);
      assertSame(compareToBuilder8, compareToBuilder5);
      assertSame(compareToBuilder8, compareToBuilder3);
      assertSame(compareToBuilder8, compareToBuilder4);
      assertNotNull(compareToBuilder8);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)28;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte)28;
      longArray0[3] = (-4076L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      CompareToBuilder compareToBuilder9 = compareToBuilder7.append(longArray0, longArray0);
      assertEquals((-29), (int)compareToBuilder0.build());
      assertEquals((-29), compareToBuilder0.toComparison());
      assertEquals((-29), (int)compareToBuilder1.build());
      assertEquals((-29), compareToBuilder1.toComparison());
      assertEquals((-29), (int)compareToBuilder9.build());
      assertEquals((-29), compareToBuilder9.toComparison());
      assertEquals((-29), compareToBuilder7.toComparison());
      assertEquals((-29), (int)compareToBuilder7.build());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder9);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder9);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder9, compareToBuilder0);
      assertSame(compareToBuilder9, compareToBuilder8);
      assertSame(compareToBuilder9, compareToBuilder4);
      assertSame(compareToBuilder9, compareToBuilder7);
      assertSame(compareToBuilder9, compareToBuilder5);
      assertSame(compareToBuilder9, compareToBuilder1);
      assertSame(compareToBuilder9, compareToBuilder2);
      assertSame(compareToBuilder9, compareToBuilder6);
      assertSame(compareToBuilder9, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder9);
      assertSame(compareToBuilder7, compareToBuilder8);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertArrayEquals(new long[] {28L, (-1L), 28L, (-4076L), 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertNotNull(compareToBuilder9);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) compareToBuilder0;
      objectArray0[1] = (Object) compareToBuilder0;
      objectArray0[2] = (Object) compareToBuilder0;
      objectArray0[3] = (Object) compareToBuilder0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertEquals(5, objectArray0.length);
      assertNotNull(compareToBuilder1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)35;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(byteArray0, byteArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-64), (byte)35}, byteArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append('A', 'A');
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-64), (byte)35}, byteArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((int) (byte)35, 25);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-64), (byte)35}, byteArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((short[]) null, (short[]) null);
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-64), (byte)35}, byteArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(compareToBuilder5);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-64);
      intArray0[2] = (int) (byte)35;
      intArray0[3] = (int) (byte)35;
      intArray0[4] = (int) (byte)0;
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(intArray0, intArray0);
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertArrayEquals(new int[] {(-64), 0, 35, 35, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-64), (byte)35}, byteArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, objectArray0.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('s', 'W');
      assertEquals(28, compareToBuilder0.toComparison());
      assertEquals(28, (int)compareToBuilder0.build());
      assertEquals(28, compareToBuilder1.toComparison());
      assertEquals(28, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(0.0, 0.0);
      assertEquals(28, compareToBuilder0.toComparison());
      assertEquals(28, (int)compareToBuilder0.build());
      assertEquals(28, compareToBuilder1.toComparison());
      assertEquals(28, (int)compareToBuilder1.build());
      assertEquals(28, (int)compareToBuilder2.build());
      assertEquals(28, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotNull(compareToBuilder2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = '-';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'W';
      charArray1[1] = '-';
      charArray1[2] = '-';
      charArray1[3] = '-';
      charArray1[4] = 'W';
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(28, compareToBuilder0.toComparison());
      assertEquals(28, (int)compareToBuilder0.build());
      assertEquals(28, compareToBuilder1.toComparison());
      assertEquals(28, (int)compareToBuilder1.build());
      assertEquals(28, (int)compareToBuilder2.build());
      assertEquals(28, compareToBuilder2.toComparison());
      assertEquals(28, (int)compareToBuilder3.build());
      assertEquals(28, compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new char[] {'s', '-', 'W', 'W'}, charArray0);
      assertArrayEquals(new char[] {'W', '-', '-', '-', 'W'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((byte)0, (byte)0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(28, compareToBuilder0.toComparison());
      assertEquals(28, (int)compareToBuilder0.build());
      assertEquals(28, compareToBuilder1.toComparison());
      assertEquals(28, (int)compareToBuilder1.build());
      assertEquals(28, (int)compareToBuilder2.build());
      assertEquals(28, compareToBuilder2.toComparison());
      assertEquals(28, (int)compareToBuilder3.build());
      assertEquals(28, compareToBuilder3.toComparison());
      assertEquals(28, compareToBuilder4.toComparison());
      assertEquals(28, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new char[] {'s', '-', 'W', 'W'}, charArray0);
      assertArrayEquals(new char[] {'W', '-', '-', '-', 'W'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.appendSuper((byte)0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(28, (int)compareToBuilder5.build());
      assertEquals(28, compareToBuilder5.toComparison());
      assertEquals(28, compareToBuilder0.toComparison());
      assertEquals(28, (int)compareToBuilder0.build());
      assertEquals(28, compareToBuilder1.toComparison());
      assertEquals(28, (int)compareToBuilder1.build());
      assertEquals(28, (int)compareToBuilder2.build());
      assertEquals(28, compareToBuilder2.toComparison());
      assertEquals(28, (int)compareToBuilder3.build());
      assertEquals(28, compareToBuilder3.toComparison());
      assertEquals(28, compareToBuilder4.toComparison());
      assertEquals(28, (int)compareToBuilder4.build());
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new char[] {'s', '-', 'W', 'W'}, charArray0);
      assertArrayEquals(new char[] {'W', '-', '-', '-', 'W'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append('<', '<');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(28, (int)compareToBuilder5.build());
      assertEquals(28, compareToBuilder5.toComparison());
      assertEquals(28, compareToBuilder0.toComparison());
      assertEquals(28, (int)compareToBuilder0.build());
      assertEquals(28, compareToBuilder6.toComparison());
      assertEquals(28, (int)compareToBuilder6.build());
      assertEquals(28, compareToBuilder1.toComparison());
      assertEquals(28, (int)compareToBuilder1.build());
      assertEquals(28, (int)compareToBuilder2.build());
      assertEquals(28, compareToBuilder2.toComparison());
      assertEquals(28, (int)compareToBuilder3.build());
      assertEquals(28, compareToBuilder3.toComparison());
      assertEquals(28, compareToBuilder4.toComparison());
      assertEquals(28, (int)compareToBuilder4.build());
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new char[] {'s', '-', 'W', 'W'}, charArray0);
      assertArrayEquals(new char[] {'W', '-', '-', '-', 'W'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      int int0 = CompareToBuilder.reflectionCompare(object0, object1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(0, int0);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)1, (byte) (-10));
      assertEquals(11, compareToBuilder0.toComparison());
      assertEquals(11, (int)compareToBuilder0.build());
      assertEquals(11, (int)compareToBuilder1.build());
      assertEquals(11, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((short)0, (short)0);
      assertEquals(11, compareToBuilder0.toComparison());
      assertEquals(11, (int)compareToBuilder0.build());
      assertEquals(11, (int)compareToBuilder1.build());
      assertEquals(11, compareToBuilder1.toComparison());
      assertEquals(11, (int)compareToBuilder2.build());
      assertEquals(11, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) compareToBuilder1;
      objectArray0[1] = (Object) compareToBuilder0;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      objectArray0[3] = (Object) compareToBuilder0;
      objectArray0[4] = (Object) compareToBuilder0;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray0);
      assertEquals(11, compareToBuilder0.toComparison());
      assertEquals(11, (int)compareToBuilder0.build());
      assertEquals(11, (int)compareToBuilder1.build());
      assertEquals(11, compareToBuilder1.toComparison());
      assertEquals(11, (int)compareToBuilder2.build());
      assertEquals(11, compareToBuilder2.toComparison());
      assertEquals(11, compareToBuilder3.toComparison());
      assertEquals(11, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertEquals(5, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(0, (-1));
      assertEquals(11, compareToBuilder0.toComparison());
      assertEquals(11, (int)compareToBuilder0.build());
      assertEquals(11, (int)compareToBuilder1.build());
      assertEquals(11, compareToBuilder1.toComparison());
      assertEquals(11, (int)compareToBuilder2.build());
      assertEquals(11, compareToBuilder2.toComparison());
      assertEquals(11, compareToBuilder3.toComparison());
      assertEquals(11, (int)compareToBuilder3.build());
      assertEquals(11, compareToBuilder4.toComparison());
      assertEquals(11, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertEquals(5, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((float) (byte)1, 526.8906F);
      assertEquals(11, compareToBuilder0.toComparison());
      assertEquals(11, (int)compareToBuilder0.build());
      assertEquals(11, (int)compareToBuilder1.build());
      assertEquals(11, compareToBuilder1.toComparison());
      assertEquals(11, (int)compareToBuilder2.build());
      assertEquals(11, compareToBuilder2.toComparison());
      assertEquals(11, compareToBuilder3.toComparison());
      assertEquals(11, (int)compareToBuilder3.build());
      assertEquals(11, compareToBuilder4.toComparison());
      assertEquals(11, (int)compareToBuilder4.build());
      assertEquals(11, compareToBuilder5.toComparison());
      assertEquals(11, (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertEquals(5, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      Integer integer0 = compareToBuilder5.build();
      assertFalse(integer0.equals((Object)int0));
      assertEquals(11, (int)integer0);
      assertEquals(11, compareToBuilder0.toComparison());
      assertEquals(11, (int)compareToBuilder0.build());
      assertEquals(11, (int)compareToBuilder1.build());
      assertEquals(11, compareToBuilder1.toComparison());
      assertEquals(11, (int)compareToBuilder2.build());
      assertEquals(11, compareToBuilder2.toComparison());
      assertEquals(11, compareToBuilder3.toComparison());
      assertEquals(11, (int)compareToBuilder3.build());
      assertEquals(11, compareToBuilder4.toComparison());
      assertEquals(11, (int)compareToBuilder4.build());
      assertEquals(11, compareToBuilder5.toComparison());
      assertEquals(11, (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertEquals(5, objectArray0.length);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) compareToBuilder0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) compareToBuilder0;
      objectArray0[3] = (Object) compareToBuilder1;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(objectArray0, objectArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertEquals(4, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((byte) (-36), (byte) (-85));
      assertEquals(49, compareToBuilder0.toComparison());
      assertEquals(49, (int)compareToBuilder0.build());
      assertEquals(49, compareToBuilder1.toComparison());
      assertEquals(49, (int)compareToBuilder1.build());
      assertEquals(49, compareToBuilder2.toComparison());
      assertEquals(49, (int)compareToBuilder2.build());
      assertEquals(49, (int)compareToBuilder3.build());
      assertEquals(49, compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertEquals(4, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      byte[] byteArray0 = new byte[1];
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-85);
      shortArray0[1] = (short) (byte) (-85);
      shortArray0[2] = (short) (byte) (-85);
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(shortArray0, shortArray0);
      assertEquals(49, compareToBuilder0.toComparison());
      assertEquals(49, (int)compareToBuilder0.build());
      assertEquals(49, compareToBuilder1.toComparison());
      assertEquals(49, (int)compareToBuilder1.build());
      assertEquals(49, compareToBuilder2.toComparison());
      assertEquals(49, (int)compareToBuilder2.build());
      assertEquals(49, (int)compareToBuilder3.build());
      assertEquals(49, compareToBuilder3.toComparison());
      assertEquals(49, compareToBuilder4.toComparison());
      assertEquals(49, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertArrayEquals(new short[] {(short) (-85), (short) (-85), (short) (-85)}, shortArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(3, shortArray0.length);
      assertNotNull(compareToBuilder4);
      
      byteArray0[0] = (byte) (-85);
      CompareToBuilder compareToBuilder5 = compareToBuilder3.append(byteArray0, byteArray0);
      assertEquals(49, compareToBuilder0.toComparison());
      assertEquals(49, (int)compareToBuilder0.build());
      assertEquals(49, compareToBuilder5.toComparison());
      assertEquals(49, (int)compareToBuilder5.build());
      assertEquals(49, compareToBuilder1.toComparison());
      assertEquals(49, (int)compareToBuilder1.build());
      assertEquals(49, compareToBuilder2.toComparison());
      assertEquals(49, (int)compareToBuilder2.build());
      assertEquals(49, (int)compareToBuilder3.build());
      assertEquals(49, compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte) (-85)}, byteArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((int) (byte) (-85), (int) (byte) (-85));
      assertEquals(49, compareToBuilder0.toComparison());
      assertEquals(49, (int)compareToBuilder0.build());
      assertEquals(49, compareToBuilder5.toComparison());
      assertEquals(49, (int)compareToBuilder5.build());
      assertEquals(49, compareToBuilder1.toComparison());
      assertEquals(49, (int)compareToBuilder1.build());
      assertEquals(49, (int)compareToBuilder6.build());
      assertEquals(49, compareToBuilder6.toComparison());
      assertEquals(49, compareToBuilder2.toComparison());
      assertEquals(49, (int)compareToBuilder2.build());
      assertEquals(49, (int)compareToBuilder3.build());
      assertEquals(49, compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte) (-85)}, byteArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotNull(compareToBuilder6);
      
      CompareToBuilder compareToBuilder7 = compareToBuilder6.append('a', '@');
      assertEquals(49, compareToBuilder0.toComparison());
      assertEquals(49, (int)compareToBuilder0.build());
      assertEquals(49, compareToBuilder5.toComparison());
      assertEquals(49, (int)compareToBuilder5.build());
      assertEquals(49, compareToBuilder1.toComparison());
      assertEquals(49, (int)compareToBuilder1.build());
      assertEquals(49, (int)compareToBuilder6.build());
      assertEquals(49, compareToBuilder6.toComparison());
      assertEquals(49, compareToBuilder7.toComparison());
      assertEquals(49, (int)compareToBuilder7.build());
      assertEquals(49, compareToBuilder2.toComparison());
      assertEquals(49, (int)compareToBuilder2.build());
      assertEquals(49, (int)compareToBuilder3.build());
      assertEquals(49, compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte) (-85)}, byteArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotNull(compareToBuilder7);
      
      CompareToBuilder compareToBuilder8 = compareToBuilder6.append('5', 'a');
      assertEquals(49, compareToBuilder0.toComparison());
      assertEquals(49, (int)compareToBuilder0.build());
      assertEquals(49, compareToBuilder5.toComparison());
      assertEquals(49, (int)compareToBuilder5.build());
      assertEquals(49, compareToBuilder1.toComparison());
      assertEquals(49, (int)compareToBuilder1.build());
      assertEquals(49, (int)compareToBuilder6.build());
      assertEquals(49, compareToBuilder6.toComparison());
      assertEquals(49, (int)compareToBuilder8.build());
      assertEquals(49, compareToBuilder8.toComparison());
      assertEquals(49, compareToBuilder2.toComparison());
      assertEquals(49, (int)compareToBuilder2.build());
      assertEquals(49, (int)compareToBuilder3.build());
      assertEquals(49, compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder8);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder8);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder3);
      assertSame(compareToBuilder8, compareToBuilder1);
      assertSame(compareToBuilder8, compareToBuilder0);
      assertSame(compareToBuilder8, compareToBuilder7);
      assertSame(compareToBuilder8, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder8);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte) (-85)}, byteArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotNull(compareToBuilder8);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((double[]) null, (double[]) null);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Object[] objectArray0 = new Object[0];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(objectArray0, objectArray0, comparator0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertEquals(0, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((Object) compareToBuilder0, object0, (Comparator<?>) comparator1);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertEquals(0, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        compareToBuilder3.append((Object) compareToBuilder2, (Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.builder.CompareToBuilder cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('?', '?');
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      int int0 = CompareToBuilder.reflectionCompare(object0, object1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(0, int0);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(0L, 0L);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotNull(compareToBuilder2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0L;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(doubleArray0, doubleArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(compareToBuilder3);
      
      String string0 = "~%O+%7\"pWXnQ4Otw";
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "~%O+%7\"pWXnQ4Otw", object1, false, (Class<?>) class0, stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)41, (byte)41);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append('C', 'y');
      assertEquals((-54), compareToBuilder0.toComparison());
      assertEquals((-54), (int)compareToBuilder0.build());
      assertEquals((-54), compareToBuilder1.toComparison());
      assertEquals((-54), (int)compareToBuilder1.build());
      assertEquals((-54), (int)compareToBuilder2.build());
      assertEquals((-54), compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotNull(compareToBuilder2);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'C';
      floatArray0[1] = (float) 'C';
      floatArray0[2] = (float) 'C';
      floatArray0[3] = 550.0F;
      floatArray0[4] = (float) 'C';
      floatArray0[5] = (float) 'y';
      floatArray0[6] = (float) 'C';
      floatArray0[7] = 1970.4792F;
      floatArray0[8] = (-1850.0F);
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(floatArray0, floatArray0);
      assertEquals((-54), compareToBuilder0.toComparison());
      assertEquals((-54), (int)compareToBuilder0.build());
      assertEquals((-54), compareToBuilder1.toComparison());
      assertEquals((-54), (int)compareToBuilder1.build());
      assertEquals((-54), (int)compareToBuilder2.build());
      assertEquals((-54), compareToBuilder2.toComparison());
      assertEquals((-54), (int)compareToBuilder3.build());
      assertEquals((-54), compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new float[] {67.0F, 67.0F, 67.0F, 550.0F, 67.0F, 121.0F, 67.0F, 1970.4792F, (-1850.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(70, 0);
      assertEquals((-54), compareToBuilder0.toComparison());
      assertEquals((-54), (int)compareToBuilder0.build());
      assertEquals((-54), compareToBuilder1.toComparison());
      assertEquals((-54), (int)compareToBuilder1.build());
      assertEquals((-54), (int)compareToBuilder2.build());
      assertEquals((-54), compareToBuilder2.toComparison());
      assertEquals((-54), (int)compareToBuilder3.build());
      assertEquals((-54), compareToBuilder3.toComparison());
      assertEquals((-54), (int)compareToBuilder4.build());
      assertEquals((-54), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new float[] {67.0F, 67.0F, 67.0F, 550.0F, 67.0F, 121.0F, 67.0F, 1970.4792F, (-1850.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(true, true);
      assertEquals((-54), compareToBuilder0.toComparison());
      assertEquals((-54), (int)compareToBuilder0.build());
      assertEquals((-54), compareToBuilder1.toComparison());
      assertEquals((-54), (int)compareToBuilder1.build());
      assertEquals((-54), (int)compareToBuilder2.build());
      assertEquals((-54), compareToBuilder2.toComparison());
      assertEquals((-54), (int)compareToBuilder3.build());
      assertEquals((-54), compareToBuilder3.toComparison());
      assertEquals((-54), (int)compareToBuilder4.build());
      assertEquals((-54), compareToBuilder4.toComparison());
      assertEquals((-54), compareToBuilder5.toComparison());
      assertEquals((-54), (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertArrayEquals(new float[] {67.0F, 67.0F, 67.0F, 550.0F, 67.0F, 121.0F, 67.0F, 1970.4792F, (-1850.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((int) (byte)41, 0);
      assertEquals((-54), (int)compareToBuilder6.build());
      assertEquals((-54), compareToBuilder6.toComparison());
      assertEquals((-54), compareToBuilder0.toComparison());
      assertEquals((-54), (int)compareToBuilder0.build());
      assertEquals((-54), compareToBuilder1.toComparison());
      assertEquals((-54), (int)compareToBuilder1.build());
      assertEquals((-54), (int)compareToBuilder2.build());
      assertEquals((-54), compareToBuilder2.toComparison());
      assertEquals((-54), (int)compareToBuilder3.build());
      assertEquals((-54), compareToBuilder3.toComparison());
      assertEquals((-54), (int)compareToBuilder4.build());
      assertEquals((-54), compareToBuilder4.toComparison());
      assertEquals((-54), compareToBuilder5.toComparison());
      assertEquals((-54), (int)compareToBuilder5.build());
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertArrayEquals(new float[] {67.0F, 67.0F, 67.0F, 550.0F, 67.0F, 121.0F, 67.0F, 1970.4792F, (-1850.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) integer0, (Object) integer0, (Comparator<?>) null);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(2114.01107526633, (-1124.0));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((char[]) null, (char[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertNotNull(compareToBuilder3);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      CompareToBuilder compareToBuilder4 = compareToBuilder1.append(byteArray0, byteArray0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(compareToBuilder4);
      
      int int0 = CompareToBuilder.reflectionCompare((Object) null, (Object) null, stringArray0);
      assertEquals(0, int0);
      assertEquals(4, stringArray0.length);
      
      Integer integer1 = new Integer((-531));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-531), (int)integer1);
      assertNotNull(integer1);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder1.append((Object) compareToBuilder0, (Object) integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertNotNull(compareToBuilder5);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      CompareToBuilder compareToBuilder6 = compareToBuilder4.append(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(1, byteArray0.length);
      assertNotNull(compareToBuilder6);
      
      int int1 = CompareToBuilder.reflectionCompare((Object) stringArray0[0], (Object) null, stringArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(4, stringArray0.length);
      
      CompareToBuilder compareToBuilder7 = compareToBuilder4.append((Object) null, (Object) null);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder7.toComparison());
      assertEquals(1, (int)compareToBuilder7.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(compareToBuilder7);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      int int0 = CompareToBuilder.reflectionCompare(object0, object1, true);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(0, int0);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      Object[] objectArray0 = new Object[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertEquals(0, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertEquals(0, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder2.append((-164L), 0L);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertEquals(0, objectArray0.length);
      assertNotNull(compareToBuilder4);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0L, 0L);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = 'P';
      charArray0[2] = 'U';
      charArray0[3] = '.';
      charArray0[4] = '(';
      charArray0[5] = 'V';
      charArray0[6] = 'g';
      charArray0[7] = 'F';
      charArray0[8] = '%';
      CompareToBuilder compareToBuilder2 = compareToBuilder0.append(charArray0, charArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new char[] {'z', 'P', 'U', '.', '(', 'V', 'g', 'F', '%'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(compareToBuilder2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper((-1091));
      assertEquals((-1091), compareToBuilder0.toComparison());
      assertEquals((-1091), (int)compareToBuilder0.build());
      assertEquals((-1091), compareToBuilder1.toComparison());
      assertEquals((-1091), (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append('`', '`');
      assertEquals((-1091), compareToBuilder0.toComparison());
      assertEquals((-1091), (int)compareToBuilder0.build());
      assertEquals((-1091), compareToBuilder1.toComparison());
      assertEquals((-1091), (int)compareToBuilder1.build());
      assertEquals((-1091), compareToBuilder2.toComparison());
      assertEquals((-1091), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((Object) compareToBuilder0, (Object) compareToBuilder1);
      assertEquals((-1091), compareToBuilder0.toComparison());
      assertEquals((-1091), (int)compareToBuilder0.build());
      assertEquals((-1091), compareToBuilder1.toComparison());
      assertEquals((-1091), (int)compareToBuilder1.build());
      assertEquals((-1091), compareToBuilder2.toComparison());
      assertEquals((-1091), (int)compareToBuilder2.build());
      assertEquals((-1091), (int)compareToBuilder3.build());
      assertEquals((-1091), compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertNotNull(compareToBuilder3);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1091);
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(intArray0, intArray0);
      assertEquals((-1091), compareToBuilder0.toComparison());
      assertEquals((-1091), (int)compareToBuilder0.build());
      assertEquals((-1091), compareToBuilder1.toComparison());
      assertEquals((-1091), (int)compareToBuilder1.build());
      assertEquals((-1091), compareToBuilder2.toComparison());
      assertEquals((-1091), (int)compareToBuilder2.build());
      assertEquals((-1091), (int)compareToBuilder3.build());
      assertEquals((-1091), compareToBuilder3.toComparison());
      assertEquals((-1091), (int)compareToBuilder4.build());
      assertEquals((-1091), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertArrayEquals(new int[] {(-1091)}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder3.appendSuper((-1091));
      assertEquals((-1091), compareToBuilder0.toComparison());
      assertEquals((-1091), (int)compareToBuilder0.build());
      assertEquals((-1091), compareToBuilder1.toComparison());
      assertEquals((-1091), (int)compareToBuilder1.build());
      assertEquals((-1091), compareToBuilder2.toComparison());
      assertEquals((-1091), (int)compareToBuilder2.build());
      assertEquals((-1091), (int)compareToBuilder3.build());
      assertEquals((-1091), compareToBuilder3.toComparison());
      assertEquals((-1091), compareToBuilder5.toComparison());
      assertEquals((-1091), (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertNotNull(compareToBuilder5);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) '`';
      intArray1[1] = (int) '`';
      CompareToBuilder compareToBuilder6 = compareToBuilder2.append((long) (-1091), 4727L);
      assertEquals((-1091), compareToBuilder0.toComparison());
      assertEquals((-1091), (int)compareToBuilder0.build());
      assertEquals((-1091), compareToBuilder1.toComparison());
      assertEquals((-1091), (int)compareToBuilder1.build());
      assertEquals((-1091), compareToBuilder2.toComparison());
      assertEquals((-1091), (int)compareToBuilder2.build());
      assertEquals((-1091), compareToBuilder6.toComparison());
      assertEquals((-1091), (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertNotNull(compareToBuilder6);
      
      intArray1[2] = (-1091);
      intArray1[3] = (int) '`';
      intArray1[4] = (-1091);
      CompareToBuilder compareToBuilder7 = compareToBuilder5.append(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1091), compareToBuilder0.toComparison());
      assertEquals((-1091), (int)compareToBuilder0.build());
      assertEquals((-1091), compareToBuilder1.toComparison());
      assertEquals((-1091), (int)compareToBuilder1.build());
      assertEquals((-1091), compareToBuilder2.toComparison());
      assertEquals((-1091), (int)compareToBuilder2.build());
      assertEquals((-1091), (int)compareToBuilder3.build());
      assertEquals((-1091), compareToBuilder3.toComparison());
      assertEquals((-1091), compareToBuilder5.toComparison());
      assertEquals((-1091), (int)compareToBuilder5.build());
      assertEquals((-1091), compareToBuilder7.toComparison());
      assertEquals((-1091), (int)compareToBuilder7.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertNotSame(intArray0, intArray1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertNotSame(intArray1, intArray0);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertArrayEquals(new int[] {(-1091)}, intArray0);
      assertArrayEquals(new int[] {96, 96, (-1091), 96, (-1091)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(compareToBuilder7);
      
      CompareToBuilder compareToBuilder8 = compareToBuilder4.append((byte)92, (byte)92);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals((-1091), compareToBuilder8.toComparison());
      assertEquals((-1091), (int)compareToBuilder8.build());
      assertEquals((-1091), compareToBuilder0.toComparison());
      assertEquals((-1091), (int)compareToBuilder0.build());
      assertEquals((-1091), compareToBuilder1.toComparison());
      assertEquals((-1091), (int)compareToBuilder1.build());
      assertEquals((-1091), compareToBuilder2.toComparison());
      assertEquals((-1091), (int)compareToBuilder2.build());
      assertEquals((-1091), (int)compareToBuilder3.build());
      assertEquals((-1091), compareToBuilder3.toComparison());
      assertEquals((-1091), (int)compareToBuilder4.build());
      assertEquals((-1091), compareToBuilder4.toComparison());
      assertSame(compareToBuilder8, compareToBuilder0);
      assertSame(compareToBuilder8, compareToBuilder5);
      assertSame(compareToBuilder8, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder7);
      assertSame(compareToBuilder8, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder3);
      assertSame(compareToBuilder8, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder8);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertNotSame(intArray0, intArray1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder8);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertArrayEquals(new int[] {(-1091)}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(compareToBuilder8);
      
      CompareToBuilder compareToBuilder9 = compareToBuilder8.append(false, true);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals((-1091), compareToBuilder8.toComparison());
      assertEquals((-1091), (int)compareToBuilder8.build());
      assertEquals((-1091), compareToBuilder0.toComparison());
      assertEquals((-1091), (int)compareToBuilder0.build());
      assertEquals((-1091), compareToBuilder9.toComparison());
      assertEquals((-1091), (int)compareToBuilder9.build());
      assertEquals((-1091), compareToBuilder1.toComparison());
      assertEquals((-1091), (int)compareToBuilder1.build());
      assertEquals((-1091), compareToBuilder2.toComparison());
      assertEquals((-1091), (int)compareToBuilder2.build());
      assertEquals((-1091), (int)compareToBuilder3.build());
      assertEquals((-1091), compareToBuilder3.toComparison());
      assertEquals((-1091), (int)compareToBuilder4.build());
      assertEquals((-1091), compareToBuilder4.toComparison());
      assertSame(compareToBuilder8, compareToBuilder0);
      assertSame(compareToBuilder8, compareToBuilder9);
      assertSame(compareToBuilder8, compareToBuilder5);
      assertSame(compareToBuilder8, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder7);
      assertSame(compareToBuilder8, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder3);
      assertSame(compareToBuilder8, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder9);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder9, compareToBuilder4);
      assertSame(compareToBuilder9, compareToBuilder1);
      assertSame(compareToBuilder9, compareToBuilder2);
      assertSame(compareToBuilder9, compareToBuilder8);
      assertSame(compareToBuilder9, compareToBuilder3);
      assertSame(compareToBuilder9, compareToBuilder0);
      assertSame(compareToBuilder9, compareToBuilder7);
      assertSame(compareToBuilder9, compareToBuilder6);
      assertSame(compareToBuilder9, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder9);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder9);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder8);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder9);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertNotSame(intArray0, intArray1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder9);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder8);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertArrayEquals(new int[] {(-1091)}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(compareToBuilder9);
      
      CompareToBuilder compareToBuilder10 = compareToBuilder1.append('`', '!');
      assertEquals((-1091), compareToBuilder0.toComparison());
      assertEquals((-1091), (int)compareToBuilder0.build());
      assertEquals((-1091), compareToBuilder1.toComparison());
      assertEquals((-1091), (int)compareToBuilder1.build());
      assertEquals((-1091), (int)compareToBuilder10.build());
      assertEquals((-1091), compareToBuilder10.toComparison());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder9);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder10);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder9);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder10);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder10, compareToBuilder2);
      assertSame(compareToBuilder10, compareToBuilder8);
      assertSame(compareToBuilder10, compareToBuilder9);
      assertSame(compareToBuilder10, compareToBuilder4);
      assertSame(compareToBuilder10, compareToBuilder6);
      assertSame(compareToBuilder10, compareToBuilder1);
      assertSame(compareToBuilder10, compareToBuilder5);
      assertSame(compareToBuilder10, compareToBuilder0);
      assertSame(compareToBuilder10, compareToBuilder3);
      assertSame(compareToBuilder10, compareToBuilder7);
      assertNotNull(compareToBuilder10);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0.0, 0.0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((short)0, (short)385);
      assertEquals((-385), compareToBuilder0.toComparison());
      assertEquals((-385), (int)compareToBuilder0.build());
      assertEquals((-385), compareToBuilder1.toComparison());
      assertEquals((-385), (int)compareToBuilder1.build());
      assertEquals((-385), compareToBuilder2.toComparison());
      assertEquals((-385), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.appendSuper(1);
      assertEquals((-385), compareToBuilder0.toComparison());
      assertEquals((-385), (int)compareToBuilder0.build());
      assertEquals((-385), compareToBuilder1.toComparison());
      assertEquals((-385), (int)compareToBuilder1.build());
      assertEquals((-385), compareToBuilder2.toComparison());
      assertEquals((-385), (int)compareToBuilder2.build());
      assertEquals((-385), compareToBuilder3.toComparison());
      assertEquals((-385), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((Object) compareToBuilder1, (Object) compareToBuilder0);
      assertEquals((-385), compareToBuilder0.toComparison());
      assertEquals((-385), (int)compareToBuilder0.build());
      assertEquals((-385), compareToBuilder1.toComparison());
      assertEquals((-385), (int)compareToBuilder1.build());
      assertEquals((-385), compareToBuilder2.toComparison());
      assertEquals((-385), (int)compareToBuilder2.build());
      assertEquals((-385), compareToBuilder3.toComparison());
      assertEquals((-385), (int)compareToBuilder3.build());
      assertEquals((-385), compareToBuilder4.toComparison());
      assertEquals((-385), (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertNotNull(compareToBuilder4);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)385;
      shortArray0[1] = (short)385;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)385;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(shortArray0, shortArray0);
      assertEquals((-385), compareToBuilder0.toComparison());
      assertEquals((-385), (int)compareToBuilder0.build());
      assertEquals((-385), compareToBuilder1.toComparison());
      assertEquals((-385), (int)compareToBuilder1.build());
      assertEquals((-385), compareToBuilder2.toComparison());
      assertEquals((-385), (int)compareToBuilder2.build());
      assertEquals((-385), compareToBuilder3.toComparison());
      assertEquals((-385), (int)compareToBuilder3.build());
      assertEquals((-385), compareToBuilder4.toComparison());
      assertEquals((-385), (int)compareToBuilder4.build());
      assertEquals((-385), compareToBuilder5.toComparison());
      assertEquals((-385), (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertArrayEquals(new short[] {(short)385, (short)385, (short)0, (short)0, (short)385}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.appendSuper(Integer.MAX_VALUE);
      assertEquals((-385), compareToBuilder0.toComparison());
      assertEquals((-385), (int)compareToBuilder0.build());
      assertEquals((-385), compareToBuilder1.toComparison());
      assertEquals((-385), (int)compareToBuilder1.build());
      assertEquals((-385), compareToBuilder2.toComparison());
      assertEquals((-385), (int)compareToBuilder2.build());
      assertEquals((-385), compareToBuilder3.toComparison());
      assertEquals((-385), (int)compareToBuilder3.build());
      assertEquals((-385), compareToBuilder4.toComparison());
      assertEquals((-385), (int)compareToBuilder4.build());
      assertEquals((-385), compareToBuilder5.toComparison());
      assertEquals((-385), (int)compareToBuilder5.build());
      assertEquals((-385), compareToBuilder6.toComparison());
      assertEquals((-385), (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertArrayEquals(new short[] {(short)385, (short)385, (short)0, (short)0, (short)385}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) null, (Object) null);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(0.0, 1106.0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotNull(compareToBuilder2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1031.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 828.614F;
      floatArray0[3] = 0.0F;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(floatArray0, floatArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new float[] {(-1031.0F), (-1.0F), 828.614F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((boolean[]) null, (boolean[]) null);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new float[] {(-1031.0F), (-1.0F), 828.614F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append('v', ']');
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertArrayEquals(new float[] {(-1031.0F), (-1.0F), 828.614F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((-641), (-641));
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertArrayEquals(new float[] {(-1031.0F), (-1.0F), 828.614F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(1, 0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) compareToBuilder1;
      objectArray0[2] = (Object) compareToBuilder0;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(objectArray0, objectArray0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertEquals(3, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((Object) compareToBuilder0, objectArray0[1]);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertEquals(3, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((byte) (-1), (byte) (-1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertEquals(3, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append('3', '&');
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertEquals(3, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((double[]) null, (double[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertEquals(3, objectArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0L, (-3296L));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      byte[] byteArray0 = new byte[0];
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(byteArray0, byteArray0);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder1.append((byte)122, (byte)122);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertNotNull(compareToBuilder3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) compareToBuilder0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertEquals(2, objectArray0.length);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((byte)56, (byte)118);
      assertEquals((-62), compareToBuilder0.toComparison());
      assertEquals((-62), (int)compareToBuilder0.build());
      assertEquals((-62), compareToBuilder1.toComparison());
      assertEquals((-62), (int)compareToBuilder1.build());
      assertEquals((-62), (int)compareToBuilder2.build());
      assertEquals((-62), compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertEquals(2, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((short)1, (short)1);
      assertEquals((-62), compareToBuilder0.toComparison());
      assertEquals((-62), (int)compareToBuilder0.build());
      assertEquals((-62), compareToBuilder1.toComparison());
      assertEquals((-62), (int)compareToBuilder1.build());
      assertEquals((-62), (int)compareToBuilder2.build());
      assertEquals((-62), compareToBuilder2.toComparison());
      assertEquals((-62), compareToBuilder3.toComparison());
      assertEquals((-62), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertEquals(2, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.appendSuper(927);
      assertEquals((-62), compareToBuilder0.toComparison());
      assertEquals((-62), (int)compareToBuilder0.build());
      assertEquals((-62), compareToBuilder1.toComparison());
      assertEquals((-62), (int)compareToBuilder1.build());
      assertEquals((-62), (int)compareToBuilder2.build());
      assertEquals((-62), compareToBuilder2.toComparison());
      assertEquals((-62), compareToBuilder3.toComparison());
      assertEquals((-62), (int)compareToBuilder3.build());
      assertEquals((-62), compareToBuilder4.toComparison());
      assertEquals((-62), (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertEquals(2, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.appendSuper((byte)118);
      assertEquals((-62), compareToBuilder0.toComparison());
      assertEquals((-62), (int)compareToBuilder0.build());
      assertEquals((-62), compareToBuilder1.toComparison());
      assertEquals((-62), (int)compareToBuilder1.build());
      assertEquals((-62), (int)compareToBuilder2.build());
      assertEquals((-62), compareToBuilder2.toComparison());
      assertEquals((-62), compareToBuilder3.toComparison());
      assertEquals((-62), (int)compareToBuilder3.build());
      assertEquals((-62), compareToBuilder4.toComparison());
      assertEquals((-62), (int)compareToBuilder4.build());
      assertEquals((-62), compareToBuilder5.toComparison());
      assertEquals((-62), (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertEquals(2, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)118;
      longArray0[1] = (long) (short)1;
      CompareToBuilder compareToBuilder6 = compareToBuilder4.append(longArray0, longArray0);
      assertEquals((-62), compareToBuilder0.toComparison());
      assertEquals((-62), (int)compareToBuilder0.build());
      assertEquals((-62), compareToBuilder1.toComparison());
      assertEquals((-62), (int)compareToBuilder1.build());
      assertEquals((-62), (int)compareToBuilder2.build());
      assertEquals((-62), compareToBuilder2.toComparison());
      assertEquals((-62), compareToBuilder3.toComparison());
      assertEquals((-62), (int)compareToBuilder3.build());
      assertEquals((-62), compareToBuilder4.toComparison());
      assertEquals((-62), (int)compareToBuilder4.build());
      assertEquals((-62), (int)compareToBuilder6.build());
      assertEquals((-62), compareToBuilder6.toComparison());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertArrayEquals(new long[] {118L, 1L}, longArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, longArray0.length);
      assertNotNull(compareToBuilder6);
      
      CompareToBuilder compareToBuilder7 = compareToBuilder4.append((float) (byte)56, (float) (byte)56);
      assertEquals((-62), compareToBuilder0.toComparison());
      assertEquals((-62), (int)compareToBuilder0.build());
      assertEquals((-62), compareToBuilder1.toComparison());
      assertEquals((-62), (int)compareToBuilder1.build());
      assertEquals((-62), (int)compareToBuilder2.build());
      assertEquals((-62), compareToBuilder2.toComparison());
      assertEquals((-62), compareToBuilder3.toComparison());
      assertEquals((-62), (int)compareToBuilder3.build());
      assertEquals((-62), compareToBuilder4.toComparison());
      assertEquals((-62), (int)compareToBuilder4.build());
      assertEquals((-62), compareToBuilder7.toComparison());
      assertEquals((-62), (int)compareToBuilder7.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertEquals(2, objectArray0.length);
      assertNotNull(compareToBuilder7);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      CompareToBuilder compareToBuilder8 = compareToBuilder7.append(object1, (Object) null);
      assertFalse(object1.equals((Object)object0));
      assertEquals((-62), compareToBuilder8.toComparison());
      assertEquals((-62), (int)compareToBuilder8.build());
      assertEquals((-62), compareToBuilder0.toComparison());
      assertEquals((-62), (int)compareToBuilder0.build());
      assertEquals((-62), compareToBuilder1.toComparison());
      assertEquals((-62), (int)compareToBuilder1.build());
      assertEquals((-62), (int)compareToBuilder2.build());
      assertEquals((-62), compareToBuilder2.toComparison());
      assertEquals((-62), compareToBuilder3.toComparison());
      assertEquals((-62), (int)compareToBuilder3.build());
      assertEquals((-62), compareToBuilder4.toComparison());
      assertEquals((-62), (int)compareToBuilder4.build());
      assertEquals((-62), compareToBuilder7.toComparison());
      assertEquals((-62), (int)compareToBuilder7.build());
      assertSame(compareToBuilder8, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder3);
      assertSame(compareToBuilder8, compareToBuilder7);
      assertSame(compareToBuilder8, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder5);
      assertSame(compareToBuilder8, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder1);
      assertSame(compareToBuilder8, compareToBuilder0);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder8);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder8);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder8);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertNotSame(object1, object0);
      assertEquals(2, objectArray0.length);
      assertNotNull(compareToBuilder8);
      
      CompareToBuilder compareToBuilder9 = compareToBuilder5.append((double) 1L, 0.0);
      assertEquals((-62), compareToBuilder0.toComparison());
      assertEquals((-62), (int)compareToBuilder0.build());
      assertEquals((-62), (int)compareToBuilder9.build());
      assertEquals((-62), compareToBuilder9.toComparison());
      assertEquals((-62), compareToBuilder1.toComparison());
      assertEquals((-62), (int)compareToBuilder1.build());
      assertEquals((-62), (int)compareToBuilder2.build());
      assertEquals((-62), compareToBuilder2.toComparison());
      assertEquals((-62), compareToBuilder3.toComparison());
      assertEquals((-62), (int)compareToBuilder3.build());
      assertEquals((-62), compareToBuilder4.toComparison());
      assertEquals((-62), (int)compareToBuilder4.build());
      assertEquals((-62), compareToBuilder5.toComparison());
      assertEquals((-62), (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder9);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder9, compareToBuilder6);
      assertSame(compareToBuilder9, compareToBuilder5);
      assertSame(compareToBuilder9, compareToBuilder4);
      assertSame(compareToBuilder9, compareToBuilder2);
      assertSame(compareToBuilder9, compareToBuilder8);
      assertSame(compareToBuilder9, compareToBuilder7);
      assertSame(compareToBuilder9, compareToBuilder3);
      assertSame(compareToBuilder9, compareToBuilder1);
      assertSame(compareToBuilder9, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder9);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder9);
      assertSame(compareToBuilder2, compareToBuilder8);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder9);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder9);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder8);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder9);
      assertSame(compareToBuilder5, compareToBuilder8);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertEquals(2, objectArray0.length);
      assertNotNull(compareToBuilder9);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      assertFalse(function1.equals((Object)function0));
      assertNotNull(function1);
      
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      assertFalse(function1.equals((Object)function0));
      assertFalse(function2.equals((Object)function0));
      assertFalse(function2.equals((Object)function1));
      assertNotNull(function2);
      
      Function<String, String> function3 = function2.compose((Function<? super String, ?>) function1);
      assertFalse(function1.equals((Object)function0));
      assertFalse(function1.equals((Object)function2));
      assertFalse(function2.equals((Object)function0));
      assertFalse(function2.equals((Object)function1));
      assertNotNull(function3);
      
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      assertFalse(function1.equals((Object)function0));
      assertFalse(function1.equals((Object)function2));
      assertFalse(function2.equals((Object)function0));
      assertFalse(function2.equals((Object)function1));
      assertFalse(function4.equals((Object)function0));
      assertFalse(function4.equals((Object)function2));
      assertFalse(function4.equals((Object)function1));
      assertNotSame(function1, function4);
      assertNotSame(function4, function1);
      assertNotNull(function4);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "", object0, (Collection<String>) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      long[] longArray0 = new long[0];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(compareToBuilder1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1771.0F;
      floatArray0[1] = 3603.692F;
      floatArray0[2] = (-530.691F);
      floatArray0[3] = (-985.524F);
      floatArray0[4] = 1164.2394F;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(floatArray0, floatArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new float[] {1771.0F, 3603.692F, (-530.691F), (-985.524F), 1164.2394F}, floatArray0, 0.01F);
      assertEquals(0, longArray0.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((Object) compareToBuilder1, (Object) compareToBuilder1);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new float[] {1771.0F, 3603.692F, (-530.691F), (-985.524F), 1164.2394F}, floatArray0, 0.01F);
      assertEquals(0, longArray0.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((byte) (-58), (byte)0);
      assertEquals((-58), compareToBuilder0.toComparison());
      assertEquals((-58), (int)compareToBuilder0.build());
      assertEquals((-58), (int)compareToBuilder1.build());
      assertEquals((-58), compareToBuilder1.toComparison());
      assertEquals((-58), (int)compareToBuilder2.build());
      assertEquals((-58), compareToBuilder2.toComparison());
      assertEquals((-58), compareToBuilder3.toComparison());
      assertEquals((-58), (int)compareToBuilder3.build());
      assertEquals((-58), compareToBuilder4.toComparison());
      assertEquals((-58), (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new float[] {1771.0F, 3603.692F, (-530.691F), (-985.524F), 1164.2394F}, floatArray0, 0.01F);
      assertEquals(0, longArray0.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((int) (byte)0, 2103);
      assertEquals((-58), compareToBuilder0.toComparison());
      assertEquals((-58), (int)compareToBuilder0.build());
      assertEquals((-58), (int)compareToBuilder1.build());
      assertEquals((-58), compareToBuilder1.toComparison());
      assertEquals((-58), (int)compareToBuilder2.build());
      assertEquals((-58), compareToBuilder2.toComparison());
      assertEquals((-58), compareToBuilder3.toComparison());
      assertEquals((-58), (int)compareToBuilder3.build());
      assertEquals((-58), compareToBuilder4.toComparison());
      assertEquals((-58), (int)compareToBuilder4.build());
      assertEquals((-58), compareToBuilder5.toComparison());
      assertEquals((-58), (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new float[] {1771.0F, 3603.692F, (-530.691F), (-985.524F), 1164.2394F}, floatArray0, 0.01F);
      assertEquals(0, longArray0.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append('8', '8');
      assertEquals((-58), compareToBuilder0.toComparison());
      assertEquals((-58), (int)compareToBuilder0.build());
      assertEquals((-58), (int)compareToBuilder1.build());
      assertEquals((-58), compareToBuilder1.toComparison());
      assertEquals((-58), (int)compareToBuilder2.build());
      assertEquals((-58), compareToBuilder2.toComparison());
      assertEquals((-58), compareToBuilder3.toComparison());
      assertEquals((-58), (int)compareToBuilder3.build());
      assertEquals((-58), compareToBuilder4.toComparison());
      assertEquals((-58), (int)compareToBuilder4.build());
      assertEquals((-58), compareToBuilder5.toComparison());
      assertEquals((-58), (int)compareToBuilder5.build());
      assertEquals((-58), compareToBuilder6.toComparison());
      assertEquals((-58), (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new float[] {1771.0F, 3603.692F, (-530.691F), (-985.524F), 1164.2394F}, floatArray0, 0.01F);
      assertEquals(0, longArray0.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object[]) null, (Object[]) null);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.appendSuper((-1356));
      assertEquals((-1356), compareToBuilder0.toComparison());
      assertEquals((-1356), (int)compareToBuilder0.build());
      assertEquals((-1356), (int)compareToBuilder1.build());
      assertEquals((-1356), compareToBuilder1.toComparison());
      assertEquals((-1356), compareToBuilder2.toComparison());
      assertEquals((-1356), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertNotNull(compareToBuilder2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = '?';
      charArray0[2] = 'l';
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(charArray0, charArray0);
      assertEquals((-1356), compareToBuilder0.toComparison());
      assertEquals((-1356), (int)compareToBuilder0.build());
      assertEquals((-1356), (int)compareToBuilder1.build());
      assertEquals((-1356), compareToBuilder1.toComparison());
      assertEquals((-1356), compareToBuilder2.toComparison());
      assertEquals((-1356), (int)compareToBuilder2.build());
      assertEquals((-1356), compareToBuilder3.toComparison());
      assertEquals((-1356), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new char[] {'P', '?', 'l'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((byte)88, (byte)88);
      assertEquals((-1356), compareToBuilder0.toComparison());
      assertEquals((-1356), (int)compareToBuilder0.build());
      assertEquals((-1356), (int)compareToBuilder1.build());
      assertEquals((-1356), compareToBuilder1.toComparison());
      assertEquals((-1356), compareToBuilder2.toComparison());
      assertEquals((-1356), (int)compareToBuilder2.build());
      assertEquals((-1356), compareToBuilder3.toComparison());
      assertEquals((-1356), (int)compareToBuilder3.build());
      assertEquals((-1356), (int)compareToBuilder4.build());
      assertEquals((-1356), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertArrayEquals(new char[] {'P', '?', 'l'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((short) (byte)88, (short) (-697));
      assertEquals((-1356), compareToBuilder0.toComparison());
      assertEquals((-1356), (int)compareToBuilder0.build());
      assertEquals((-1356), (int)compareToBuilder1.build());
      assertEquals((-1356), compareToBuilder1.toComparison());
      assertEquals((-1356), compareToBuilder2.toComparison());
      assertEquals((-1356), (int)compareToBuilder2.build());
      assertEquals((-1356), compareToBuilder3.toComparison());
      assertEquals((-1356), (int)compareToBuilder3.build());
      assertEquals((-1356), (int)compareToBuilder4.build());
      assertEquals((-1356), compareToBuilder4.toComparison());
      assertEquals((-1356), compareToBuilder5.toComparison());
      assertEquals((-1356), (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertArrayEquals(new char[] {'P', '?', 'l'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append('u', 'R');
      assertEquals((-1356), compareToBuilder0.toComparison());
      assertEquals((-1356), (int)compareToBuilder0.build());
      assertEquals((-1356), (int)compareToBuilder1.build());
      assertEquals((-1356), compareToBuilder1.toComparison());
      assertEquals((-1356), compareToBuilder2.toComparison());
      assertEquals((-1356), (int)compareToBuilder2.build());
      assertEquals((-1356), compareToBuilder3.toComparison());
      assertEquals((-1356), (int)compareToBuilder3.build());
      assertEquals((-1356), (int)compareToBuilder4.build());
      assertEquals((-1356), compareToBuilder4.toComparison());
      assertEquals((-1356), compareToBuilder5.toComparison());
      assertEquals((-1356), (int)compareToBuilder5.build());
      assertEquals((-1356), compareToBuilder6.toComparison());
      assertEquals((-1356), (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertArrayEquals(new char[] {'P', '?', 'l'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(56, 56);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        compareToBuilder1.append((Object) compareToBuilder0, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.builder.CompareToBuilder cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "C'aGr~x,k", (Object) "C'aGr~x,k");
      assertEquals(0, int0);
      
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)24, (byte)24);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)24;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(longArray0, (long[]) null);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new long[] {24L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((int[]) null, (int[]) null);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new long[] {24L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(true, true);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertArrayEquals(new long[] {24L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((float[]) null, (float[]) null);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertArrayEquals(new long[] {24L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((byte)24, (byte)24);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertArrayEquals(new long[] {24L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      boolean boolean0 = false;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(false, false);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        compareToBuilder1.append((Object) compareToBuilder0, (Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.builder.CompareToBuilder cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare(object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0L, 0L);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(1.0, 0.0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotNull(compareToBuilder2);
      
      int int0 = compareToBuilder2.toComparison();
      assertEquals(1, int0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "sIQIUrQ*JhV<tc1*o~b", (Object) integer0, false, (Class<?>) class0, stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, (Object) "", (Collection<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = new Integer((-3045));
      assertEquals((-3045), (int)integer0);
      assertNotNull(integer0);
      
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "CVEswy";
      stringArray0[2] = "";
      stringArray0[3] = "7jO.x1";
      stringArray0[4] = "";
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer0, true, (Class<?>) class0, stringArray0);
      assertEquals(0, int0);
      assertEquals(5, stringArray0.length);
      
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-3045);
      longArray0[1] = (long) (-3045);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-3045);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (-3045);
      longArray0[8] = (long) 0;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray0);
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertArrayEquals(new long[] {(-3045L), (-3045L), 0L, 0L, (-3045L), 0L, 0L, (-3045L), 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(compareToBuilder1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-3045L);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) (-3045L);
      doubleArray1[3] = (double) (-3045L);
      CompareToBuilder compareToBuilder2 = compareToBuilder0.append(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new double[] {0.0, (-3045.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-3045.0), (-3045.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(compareToBuilder2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(object0, object0, comparator0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((Object) null, object0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotNull(compareToBuilder2);
      
      int[] intArray0 = null;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((int[]) null, (int[]) null);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertNotNull(compareToBuilder3);
      
      long[] longArray0 = new long[0];
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(longArray0, longArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(2358.2497182865986, 2358.2497182865986);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(2358.2497182865986, 2358.2497182865986);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(compareToBuilder6);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2358.2497182865986;
      doubleArray0[1] = 2358.2497182865986;
      doubleArray0[2] = 2358.2497182865986;
      doubleArray0[3] = 2080.100908049135;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 2358.2497182865986;
      doubleArray0[6] = 2358.2497182865986;
      doubleArray0[7] = 2358.2497182865986;
      doubleArray0[8] = 2358.2497182865986;
      CompareToBuilder compareToBuilder7 = compareToBuilder6.append(doubleArray0, doubleArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), (int)compareToBuilder7.build());
      assertEquals((-1), compareToBuilder7.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new double[] {2358.2497182865986, 2358.2497182865986, 2358.2497182865986, 2080.100908049135, (-1.0), 2358.2497182865986, 2358.2497182865986, 2358.2497182865986, 2358.2497182865986}, doubleArray0, 0.01);
      assertEquals(0, longArray0.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(compareToBuilder7);
      
      CompareToBuilder compareToBuilder8 = compareToBuilder5.append(longArray0, longArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder8.toComparison());
      assertEquals((-1), (int)compareToBuilder8.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder8);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder8, compareToBuilder3);
      assertSame(compareToBuilder8, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder5);
      assertSame(compareToBuilder8, compareToBuilder0);
      assertSame(compareToBuilder8, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder1);
      assertSame(compareToBuilder8, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder8);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder8);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(compareToBuilder8);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2358.2497182865986;
      doubleArray1[1] = 2358.2497182865986;
      doubleArray1[2] = 2358.2497182865986;
      doubleArray1[3] = 2358.2497182865986;
      doubleArray1[4] = 2358.2497182865986;
      CompareToBuilder compareToBuilder9 = compareToBuilder8.append(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder8.toComparison());
      assertEquals((-1), (int)compareToBuilder8.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), (int)compareToBuilder9.build());
      assertEquals((-1), compareToBuilder9.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder9);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder9);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder8);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder9);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder8, compareToBuilder3);
      assertSame(compareToBuilder8, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder5);
      assertSame(compareToBuilder8, compareToBuilder0);
      assertSame(compareToBuilder8, compareToBuilder9);
      assertSame(compareToBuilder8, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder1);
      assertSame(compareToBuilder8, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder9);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder8);
      assertSame(compareToBuilder4, compareToBuilder9);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder9);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder8);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder9, compareToBuilder2);
      assertSame(compareToBuilder9, compareToBuilder8);
      assertSame(compareToBuilder9, compareToBuilder7);
      assertSame(compareToBuilder9, compareToBuilder5);
      assertSame(compareToBuilder9, compareToBuilder1);
      assertSame(compareToBuilder9, compareToBuilder4);
      assertSame(compareToBuilder9, compareToBuilder0);
      assertSame(compareToBuilder9, compareToBuilder3);
      assertSame(compareToBuilder9, compareToBuilder6);
      assertArrayEquals(new double[] {2358.2497182865986, 2358.2497182865986, 2358.2497182865986, 2358.2497182865986, 2358.2497182865986}, doubleArray1, 0.01);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(5, doubleArray1.length);
      assertEquals(0, longArray0.length);
      assertNotNull(compareToBuilder9);
      
      CompareToBuilder compareToBuilder10 = compareToBuilder3.append(longArray0, longArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder10.toComparison());
      assertEquals((-1), (int)compareToBuilder10.build());
      assertSame(compareToBuilder0, compareToBuilder10);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder9);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder10);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder9);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder10);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder8);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder9);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder9);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder10);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder10, compareToBuilder6);
      assertSame(compareToBuilder10, compareToBuilder3);
      assertSame(compareToBuilder10, compareToBuilder1);
      assertSame(compareToBuilder10, compareToBuilder0);
      assertSame(compareToBuilder10, compareToBuilder9);
      assertSame(compareToBuilder10, compareToBuilder5);
      assertSame(compareToBuilder10, compareToBuilder2);
      assertSame(compareToBuilder10, compareToBuilder7);
      assertSame(compareToBuilder10, compareToBuilder4);
      assertSame(compareToBuilder10, compareToBuilder8);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(compareToBuilder10);
      
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2211.2526555066493);
      doubleArray0[2] = 1479.138;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1153.12846933038;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1153.12846933038;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new double[] {0.0, (-2211.2526555066493), 1479.138, 1.0, 0.0, 0.0, 1153.12846933038}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1153.12846933038}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((byte) (-82), (byte) (-82));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new double[] {0.0, (-2211.2526555066493), 1479.138, 1.0, 0.0, 0.0, 1153.12846933038}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1153.12846933038}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(compareToBuilder2);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-82);
      shortArray0[1] = (short) (byte) (-82);
      shortArray0[2] = (short) (byte) (-82);
      shortArray0[3] = (short) (byte) (-82);
      shortArray0[4] = (short) (byte) (-82);
      shortArray0[5] = (short) (byte) (-82);
      shortArray0[6] = (short) (byte) (-82);
      shortArray0[7] = (short) (byte) (-82);
      shortArray0[8] = (short) (byte) (-82);
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte) (-82);
      shortArray1[1] = (short) (byte) (-82);
      shortArray1[2] = (short) (byte) (-82);
      shortArray1[3] = (short) (byte) (-82);
      shortArray1[4] = (short) (byte) (-82);
      shortArray1[5] = (short) (byte) (-82);
      shortArray1[6] = (short) (byte) (-82);
      shortArray1[7] = (short) (byte) (-82);
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(shortArray0, shortArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new double[] {0.0, (-2211.2526555066493), 1479.138, 1.0, 0.0, 0.0, 1153.12846933038}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {(short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82)}, shortArray1);
      assertArrayEquals(new double[] {1153.12846933038}, doubleArray1, 0.01);
      assertArrayEquals(new short[] {(short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82)}, shortArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(compareToBuilder3);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(booleanArray0, booleanArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotSame(shortArray0, shortArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertArrayEquals(new double[] {0.0, (-2211.2526555066493), 1479.138, 1.0, 0.0, 0.0, 1153.12846933038}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {(short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82)}, shortArray1);
      assertArrayEquals(new double[] {1153.12846933038}, doubleArray1, 0.01);
      assertArrayEquals(new short[] {(short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82)}, shortArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(compareToBuilder4);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((Object) compareToBuilder2, (Object) "", (Comparator<?>) comparator0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertNotSame(shortArray0, shortArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertArrayEquals(new double[] {0.0, (-2211.2526555066493), 1479.138, 1.0, 0.0, 0.0, 1153.12846933038}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {(short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82)}, shortArray1);
      assertArrayEquals(new double[] {1153.12846933038}, doubleArray1, 0.01);
      assertArrayEquals(new short[] {(short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82)}, shortArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(shortArray1, shortArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertNotSame(shortArray0, shortArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertArrayEquals(new double[] {0.0, (-2211.2526555066493), 1479.138, 1.0, 0.0, 0.0, 1153.12846933038}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {(short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82)}, shortArray1);
      assertArrayEquals(new double[] {1153.12846933038}, doubleArray1, 0.01);
      assertArrayEquals(new short[] {(short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82), (short) (-82)}, shortArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      short[] shortArray0 = new short[0];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, shortArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((short)1483, (short) (-2239));
      assertEquals(3722, compareToBuilder0.toComparison());
      assertEquals(3722, (int)compareToBuilder0.build());
      assertEquals(3722, (int)compareToBuilder1.build());
      assertEquals(3722, compareToBuilder1.toComparison());
      assertEquals(3722, compareToBuilder2.toComparison());
      assertEquals(3722, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(compareToBuilder2);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-2239);
      longArray0[1] = (long) (short)1483;
      longArray0[2] = (long) (short) (-2239);
      longArray0[3] = (long) (short)1483;
      longArray0[4] = (long) (short)1483;
      longArray0[5] = (long) (short) (-2239);
      longArray0[6] = (long) (short)1483;
      longArray0[7] = (long) (short) (-2239);
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(longArray0, longArray0);
      assertEquals(3722, compareToBuilder0.toComparison());
      assertEquals(3722, (int)compareToBuilder0.build());
      assertEquals(3722, (int)compareToBuilder1.build());
      assertEquals(3722, compareToBuilder1.toComparison());
      assertEquals(3722, compareToBuilder2.toComparison());
      assertEquals(3722, (int)compareToBuilder2.build());
      assertEquals(3722, compareToBuilder3.toComparison());
      assertEquals(3722, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new long[] {(-2239L), 1483L, (-2239L), 1483L, 1483L, (-2239L), 1483L, (-2239L)}, longArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(8, longArray0.length);
      assertNotNull(compareToBuilder3);
      
      Integer integer0 = new Integer((-125));
      assertEquals((-125), (int)integer0);
      assertNotNull(integer0);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((Object) null, (Object) integer0);
      assertEquals(3722, compareToBuilder0.toComparison());
      assertEquals(3722, (int)compareToBuilder0.build());
      assertEquals(3722, (int)compareToBuilder1.build());
      assertEquals(3722, compareToBuilder1.toComparison());
      assertEquals(3722, compareToBuilder2.toComparison());
      assertEquals(3722, (int)compareToBuilder2.build());
      assertEquals(3722, compareToBuilder3.toComparison());
      assertEquals(3722, (int)compareToBuilder3.build());
      assertEquals(3722, compareToBuilder4.toComparison());
      assertEquals(3722, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new long[] {(-2239L), 1483L, (-2239L), 1483L, 1483L, (-2239L), 1483L, (-2239L)}, longArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(8, longArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((byte) (-1), (byte)88);
      assertEquals(3722, (int)compareToBuilder5.build());
      assertEquals(3722, compareToBuilder5.toComparison());
      assertEquals(3722, compareToBuilder0.toComparison());
      assertEquals(3722, (int)compareToBuilder0.build());
      assertEquals(3722, (int)compareToBuilder1.build());
      assertEquals(3722, compareToBuilder1.toComparison());
      assertEquals(3722, compareToBuilder2.toComparison());
      assertEquals(3722, (int)compareToBuilder2.build());
      assertEquals(3722, compareToBuilder3.toComparison());
      assertEquals(3722, (int)compareToBuilder3.build());
      assertEquals(3722, compareToBuilder4.toComparison());
      assertEquals(3722, (int)compareToBuilder4.build());
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new long[] {(-2239L), 1483L, (-2239L), 1483L, 1483L, (-2239L), 1483L, (-2239L)}, longArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(8, longArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(shortArray0, shortArray0);
      assertEquals(3722, (int)compareToBuilder5.build());
      assertEquals(3722, compareToBuilder5.toComparison());
      assertEquals(3722, compareToBuilder0.toComparison());
      assertEquals(3722, (int)compareToBuilder0.build());
      assertEquals(3722, compareToBuilder6.toComparison());
      assertEquals(3722, (int)compareToBuilder6.build());
      assertEquals(3722, (int)compareToBuilder1.build());
      assertEquals(3722, compareToBuilder1.toComparison());
      assertEquals(3722, compareToBuilder2.toComparison());
      assertEquals(3722, (int)compareToBuilder2.build());
      assertEquals(3722, compareToBuilder3.toComparison());
      assertEquals(3722, (int)compareToBuilder3.build());
      assertEquals(3722, compareToBuilder4.toComparison());
      assertEquals(3722, (int)compareToBuilder4.build());
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new long[] {(-2239L), 1483L, (-2239L), 1483L, 1483L, (-2239L), 1483L, (-2239L)}, longArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(8, longArray0.length);
      assertNotNull(compareToBuilder6);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = CompareToBuilder.reflectionCompare((Object) compareToBuilder1, (Object) compareToBuilder4, (Collection<String>) linkedList0);
      assertEquals(0, int0);
      assertEquals(3722, compareToBuilder0.toComparison());
      assertEquals(3722, (int)compareToBuilder0.build());
      assertEquals(0, linkedList0.size());
      assertEquals(3722, (int)compareToBuilder1.build());
      assertEquals(3722, compareToBuilder1.toComparison());
      assertEquals(3722, compareToBuilder2.toComparison());
      assertEquals(3722, (int)compareToBuilder2.build());
      assertEquals(3722, compareToBuilder3.toComparison());
      assertEquals(3722, (int)compareToBuilder3.build());
      assertEquals(3722, compareToBuilder4.toComparison());
      assertEquals(3722, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new long[] {(-2239L), 1483L, (-2239L), 1483L, 1483L, (-2239L), 1483L, (-2239L)}, longArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(8, longArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 36;
      intArray0[2] = 0;
      intArray0[3] = 10;
      intArray0[4] = (int) (byte)88;
      intArray0[5] = (int) (short) (-2239);
      intArray0[6] = 2196;
      intArray0[7] = (int) (byte) (-1);
      intArray0[8] = 0;
      CompareToBuilder compareToBuilder7 = compareToBuilder4.append(intArray0, intArray0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(3722, compareToBuilder0.toComparison());
      assertEquals(3722, (int)compareToBuilder0.build());
      assertEquals(3722, (int)compareToBuilder1.build());
      assertEquals(3722, compareToBuilder1.toComparison());
      assertEquals(3722, compareToBuilder2.toComparison());
      assertEquals(3722, (int)compareToBuilder2.build());
      assertEquals(3722, compareToBuilder3.toComparison());
      assertEquals(3722, (int)compareToBuilder3.build());
      assertEquals(3722, (int)compareToBuilder7.build());
      assertEquals(3722, compareToBuilder7.toComparison());
      assertEquals(3722, compareToBuilder4.toComparison());
      assertEquals(3722, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new int[] {0, 36, 0, 10, 88, (-2239), 2196, (-1), 0}, intArray0);
      assertArrayEquals(new long[] {(-2239L), 1483L, (-2239L), 1483L, 1483L, (-2239L), 1483L, (-2239L)}, longArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(9, intArray0.length);
      assertEquals(8, longArray0.length);
      assertNotNull(compareToBuilder7);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = new CompareToBuilder();
      assertFalse(compareToBuilder1.equals((Object)compareToBuilder0));
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertNotNull(compareToBuilder1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-350);
      intArray0[1] = 2111;
      intArray0[2] = (-1);
      intArray0[3] = 1;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((int[]) null, intArray0);
      assertFalse(compareToBuilder1.equals((Object)compareToBuilder0));
      assertFalse(compareToBuilder2.equals((Object)compareToBuilder0));
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertSame(compareToBuilder1, compareToBuilder2);
      assertNotSame(compareToBuilder1, compareToBuilder0);
      assertNotSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new int[] {(-350), 2111, (-1), 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(1938.317F, (float) (-350));
      assertFalse(compareToBuilder1.equals((Object)compareToBuilder0));
      assertFalse(compareToBuilder2.equals((Object)compareToBuilder0));
      assertFalse(compareToBuilder3.equals((Object)compareToBuilder0));
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder1, compareToBuilder2);
      assertNotSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertNotSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertNotSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new int[] {(-350), 2111, (-1), 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(compareToBuilder3);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2879;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[1] = (short) (-425);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)2905;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)2861;
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(shortArray0, shortArray0);
      assertFalse(compareToBuilder1.equals((Object)compareToBuilder0));
      assertFalse(compareToBuilder4.equals((Object)compareToBuilder0));
      assertFalse(compareToBuilder2.equals((Object)compareToBuilder0));
      assertFalse(compareToBuilder3.equals((Object)compareToBuilder0));
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertNotSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertNotSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertNotSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new int[] {(-350), 2111, (-1), 1}, intArray0);
      assertArrayEquals(new short[] {(short)2879, (short) (-425), (short)0, (short)0, (short)1, (short)0, (short)2905, (short)0, (short)2861}, shortArray0);
      assertEquals(4, intArray0.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append('`', 'D');
      assertFalse(compareToBuilder1.equals((Object)compareToBuilder0));
      assertFalse(compareToBuilder4.equals((Object)compareToBuilder0));
      assertFalse(compareToBuilder5.equals((Object)compareToBuilder0));
      assertFalse(compareToBuilder2.equals((Object)compareToBuilder0));
      assertFalse(compareToBuilder3.equals((Object)compareToBuilder0));
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertNotSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertNotSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertNotSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertNotSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertNotSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new int[] {(-350), 2111, (-1), 1}, intArray0);
      assertArrayEquals(new short[] {(short)2879, (short) (-425), (short)0, (short)0, (short)1, (short)0, (short)2905, (short)0, (short)2861}, shortArray0);
      assertEquals(4, intArray0.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(compareToBuilder5);
      
      Integer integer0 = compareToBuilder5.build();
      assertFalse(compareToBuilder1.equals((Object)compareToBuilder0));
      assertFalse(compareToBuilder4.equals((Object)compareToBuilder0));
      assertFalse(compareToBuilder5.equals((Object)compareToBuilder0));
      assertFalse(compareToBuilder2.equals((Object)compareToBuilder0));
      assertFalse(compareToBuilder3.equals((Object)compareToBuilder0));
      assertEquals((-1), (int)integer0);
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertNotSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertNotSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertNotSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertNotSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertNotSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new int[] {(-350), 2111, (-1), 1}, intArray0);
      assertArrayEquals(new short[] {(short)2879, (short) (-425), (short)0, (short)0, (short)1, (short)0, (short)2905, (short)0, (short)2861}, shortArray0);
      assertEquals(4, intArray0.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(compareToBuilder1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1644);
      shortArray0[2] = (short)2166;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short)1;
      shortArray0[4] = (short)0;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(shortArray0, shortArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertArrayEquals(new short[] {(short) (-1644), (short)0, (short)2166, (short)0, (short)0, (short)0, (short)1, (short)0}, shortArray0);
      assertEquals(1, charArray0.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(compareToBuilder2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (float) (short)1;
      floatArray1[2] = (float) (short)0;
      floatArray1[3] = (float) 'H';
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertArrayEquals(new short[] {(short) (-1644), (short)0, (short)2166, (short)0, (short)0, (short)0, (short)1, (short)0}, shortArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 72.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, charArray0.length);
      assertEquals(8, shortArray0.length);
      assertEquals(1, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((-2451.0F), (-406.4F));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertArrayEquals(new short[] {(short) (-1644), (short)0, (short)2166, (short)0, (short)0, (short)0, (short)1, (short)0}, shortArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 72.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, charArray0.length);
      assertEquals(8, shortArray0.length);
      assertEquals(1, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(compareToBuilder4);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 'H';
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(longArray0, longArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertArrayEquals(new short[] {(short) (-1644), (short)0, (short)2166, (short)0, (short)0, (short)0, (short)1, (short)0}, shortArray0);
      assertArrayEquals(new long[] {0L, 72L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 72.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, charArray0.length);
      assertEquals(8, shortArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((Object) compareToBuilder3, (Object) compareToBuilder4);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertArrayEquals(new short[] {(short) (-1644), (short)0, (short)2166, (short)0, (short)0, (short)0, (short)1, (short)0}, shortArray0);
      assertArrayEquals(new long[] {0L, 72L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 72.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, charArray0.length);
      assertEquals(8, shortArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "", (Object) "org.apache.commons.lang3.builder.CompareToBuilder");
      assertEquals((-1), int0);
      
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertNotNull(compareToBuilder0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) compareToBuilder0;
      objectArray0[2] = (Object) "org.apache.commons.lang3.builder.CompareToBuilder";
      objectArray0[3] = (Object) compareToBuilder0;
      objectArray0[4] = (Object) compareToBuilder0;
      objectArray0[5] = (Object) compareToBuilder0;
      objectArray0[6] = (Object) "org.apache.commons.lang3.builder.CompareToBuilder";
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(false, false);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((-1), 3495);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append('E', 'E');
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'E';
      longArray0[1] = (long) 'E';
      longArray0[0] = (long) (-1);
      longArray0[3] = (long) 3495;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(longArray0, longArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertArrayEquals(new long[] {(-1L), 69L, 0L, 3495L}, longArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(4, longArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append((-1607.0), (double) 3495L);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder5.build());
      assertEquals((-1), compareToBuilder5.toComparison());
      assertEquals((-1), compareToBuilder6.toComparison());
      assertEquals((-1), (int)compareToBuilder6.build());
      assertEquals((-1), compareToBuilder1.toComparison());
      assertEquals((-1), (int)compareToBuilder1.build());
      assertEquals((-1), compareToBuilder2.toComparison());
      assertEquals((-1), (int)compareToBuilder2.build());
      assertEquals((-1), compareToBuilder3.toComparison());
      assertEquals((-1), (int)compareToBuilder3.build());
      assertEquals((-1), (int)compareToBuilder4.build());
      assertEquals((-1), compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertArrayEquals(new long[] {(-1L), 69L, 0L, 3495L}, longArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(4, longArray0.length);
      assertNotNull(compareToBuilder6);
      
      int int1 = CompareToBuilder.reflectionCompare((Object) "", objectArray0[2], false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(object0, object0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((short)551, (short) (-1645));
      assertEquals(2196, compareToBuilder0.toComparison());
      assertEquals(2196, (int)compareToBuilder0.build());
      assertEquals(2196, (int)compareToBuilder1.build());
      assertEquals(2196, compareToBuilder1.toComparison());
      assertEquals(2196, compareToBuilder2.toComparison());
      assertEquals(2196, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((byte)0, (byte) (-71));
      assertEquals(2196, compareToBuilder0.toComparison());
      assertEquals(2196, (int)compareToBuilder0.build());
      assertEquals(2196, (int)compareToBuilder1.build());
      assertEquals(2196, compareToBuilder1.toComparison());
      assertEquals(2196, compareToBuilder2.toComparison());
      assertEquals(2196, (int)compareToBuilder2.build());
      assertEquals(2196, (int)compareToBuilder3.build());
      assertEquals(2196, compareToBuilder3.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.appendSuper((byte) (-71));
      assertEquals(2196, compareToBuilder0.toComparison());
      assertEquals(2196, (int)compareToBuilder0.build());
      assertEquals(2196, (int)compareToBuilder1.build());
      assertEquals(2196, compareToBuilder1.toComparison());
      assertEquals(2196, compareToBuilder2.toComparison());
      assertEquals(2196, (int)compareToBuilder2.build());
      assertEquals(2196, (int)compareToBuilder3.build());
      assertEquals(2196, compareToBuilder3.toComparison());
      assertEquals(2196, (int)compareToBuilder4.build());
      assertEquals(2196, compareToBuilder4.toComparison());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(1L, (long) (byte)0);
      assertEquals(2196, compareToBuilder0.toComparison());
      assertEquals(2196, (int)compareToBuilder0.build());
      assertEquals(2196, (int)compareToBuilder1.build());
      assertEquals(2196, compareToBuilder1.toComparison());
      assertEquals(2196, compareToBuilder2.toComparison());
      assertEquals(2196, (int)compareToBuilder2.build());
      assertEquals(2196, (int)compareToBuilder3.build());
      assertEquals(2196, compareToBuilder3.toComparison());
      assertEquals(2196, (int)compareToBuilder4.build());
      assertEquals(2196, compareToBuilder4.toComparison());
      assertEquals(2196, (int)compareToBuilder5.build());
      assertEquals(2196, compareToBuilder5.toComparison());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertNotNull(compareToBuilder5);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = 1L;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "KB-?U ;-618W1gepQ";
      stringArray0[1] = "{}";
      stringArray0[2] = "/VUOIQgaE;g3~k`+,";
      stringArray0[3] = "/VUOIQgaE;g3~k`+,";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      int int0 = CompareToBuilder.reflectionCompare(object1, (Object) compareToBuilder0, stringArray0);
      assertFalse(object1.equals((Object)object0));
      assertEquals(0, int0);
      assertEquals(2196, compareToBuilder0.toComparison());
      assertEquals(2196, (int)compareToBuilder0.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(object1, object0);
      assertEquals(7, stringArray0.length);
      
      longArray0[3] = (long) (byte)0;
      longArray0[4] = 1L;
      longArray0[5] = (long) (byte) (-71);
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) (short)551;
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(longArray0, longArray0);
      assertFalse(object0.equals((Object)object1));
      assertEquals(2196, compareToBuilder0.toComparison());
      assertEquals(2196, (int)compareToBuilder0.build());
      assertEquals(2196, (int)compareToBuilder1.build());
      assertEquals(2196, compareToBuilder1.toComparison());
      assertEquals(2196, compareToBuilder2.toComparison());
      assertEquals(2196, (int)compareToBuilder2.build());
      assertEquals(2196, (int)compareToBuilder3.build());
      assertEquals(2196, compareToBuilder3.toComparison());
      assertEquals(2196, (int)compareToBuilder4.build());
      assertEquals(2196, compareToBuilder4.toComparison());
      assertEquals(2196, (int)compareToBuilder5.build());
      assertEquals(2196, compareToBuilder5.toComparison());
      assertEquals(2196, compareToBuilder6.toComparison());
      assertEquals(2196, (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(object0, object1);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertArrayEquals(new long[] {0L, 0L, 1L, 0L, 1L, (-71L), 0L, 551L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(compareToBuilder6);
      
      CompareToBuilder compareToBuilder7 = compareToBuilder5.append((float[]) null, (float[]) null);
      assertFalse(object0.equals((Object)object1));
      assertEquals(2196, compareToBuilder0.toComparison());
      assertEquals(2196, (int)compareToBuilder0.build());
      assertEquals(2196, (int)compareToBuilder1.build());
      assertEquals(2196, compareToBuilder1.toComparison());
      assertEquals(2196, compareToBuilder2.toComparison());
      assertEquals(2196, (int)compareToBuilder2.build());
      assertEquals(2196, (int)compareToBuilder3.build());
      assertEquals(2196, compareToBuilder3.toComparison());
      assertEquals(2196, (int)compareToBuilder4.build());
      assertEquals(2196, compareToBuilder4.toComparison());
      assertEquals(2196, (int)compareToBuilder5.build());
      assertEquals(2196, compareToBuilder5.toComparison());
      assertEquals(2196, compareToBuilder7.toComparison());
      assertEquals(2196, (int)compareToBuilder7.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(object0, object1);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertNotNull(compareToBuilder7);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4416.785659213063);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2952.8408664486;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1278.0522558;
      doubleArray0[6] = 149.157;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(compareToBuilder1);
      
      short[] shortArray0 = new short[0];
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(shortArray0, shortArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 2952.8408664486;
      objectArray0[1] = (Object) 2952.8408664486;
      objectArray0[2] = (Object) compareToBuilder1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) 2952.8408664486;
      objectArray0[6] = (Object) 1278.0522558;
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 1.0;
      objectArray1[1] = (Object) 1278.0522558;
      objectArray1[2] = (Object) (-4416.785659213063);
      objectArray1[3] = object1;
      objectArray1[4] = (Object) compareToBuilder1;
      objectArray1[5] = (Object) (-4416.785659213063);
      objectArray1[6] = object0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray1, comparator0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-3610L);
      longArray0[1] = (-3170L);
      longArray0[2] = 0L;
      longArray0[3] = (-2510L);
      longArray0[4] = 0L;
      longArray0[5] = 2874L;
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(longArray0, longArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new long[] {(-3610L), (-3170L), 0L, (-2510L), 0L, 2874L}, longArray0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((int[]) null, (int[]) null);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder5.build());
      assertEquals(0, compareToBuilder5.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new long[] {(-3610L), (-3170L), 0L, (-2510L), 0L, 2874L}, longArray0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(2262.466F, 1.0F);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertArrayEquals(new long[] {(-3610L), (-3170L), 0L, (-2510L), 0L, 2874L}, longArray0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4416.785659213063);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2952.8408664486;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1278.0522558;
      doubleArray0[6] = 149.157;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(compareToBuilder1);
      
      short[] shortArray0 = new short[0];
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(shortArray0, shortArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 2952.8408664486;
      objectArray0[1] = (Object) 2952.8408664486;
      objectArray0[2] = (Object) compareToBuilder1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) 2952.8408664486;
      objectArray0[6] = (Object) 1278.0522558;
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 1.0;
      objectArray1[1] = (Object) 1278.0522558;
      objectArray1[2] = (Object) (-4416.785659213063);
      objectArray1[3] = object1;
      objectArray1[4] = (Object) compareToBuilder1;
      objectArray1[5] = (Object) (-4416.785659213063);
      objectArray1[6] = object0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(244).when(comparator0).compare(any() , any());
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray1, comparator0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(244, compareToBuilder0.toComparison());
      assertEquals(244, (int)compareToBuilder0.build());
      assertEquals(244, (int)compareToBuilder1.build());
      assertEquals(244, compareToBuilder1.toComparison());
      assertEquals(244, compareToBuilder2.toComparison());
      assertEquals(244, (int)compareToBuilder2.build());
      assertEquals(244, compareToBuilder3.toComparison());
      assertEquals(244, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-3610L);
      longArray0[1] = (-3170L);
      longArray0[2] = 0L;
      longArray0[3] = (-2510L);
      longArray0[4] = 0L;
      longArray0[5] = 2874L;
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(longArray0, longArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(244, compareToBuilder0.toComparison());
      assertEquals(244, (int)compareToBuilder0.build());
      assertEquals(244, compareToBuilder4.toComparison());
      assertEquals(244, (int)compareToBuilder4.build());
      assertEquals(244, (int)compareToBuilder1.build());
      assertEquals(244, compareToBuilder1.toComparison());
      assertEquals(244, compareToBuilder2.toComparison());
      assertEquals(244, (int)compareToBuilder2.build());
      assertEquals(244, compareToBuilder3.toComparison());
      assertEquals(244, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertArrayEquals(new long[] {(-3610L), (-3170L), 0L, (-2510L), 0L, 2874L}, longArray0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((int[]) null, (int[]) null);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(244, compareToBuilder0.toComparison());
      assertEquals(244, (int)compareToBuilder0.build());
      assertEquals(244, compareToBuilder4.toComparison());
      assertEquals(244, (int)compareToBuilder4.build());
      assertEquals(244, compareToBuilder5.toComparison());
      assertEquals(244, (int)compareToBuilder5.build());
      assertEquals(244, (int)compareToBuilder1.build());
      assertEquals(244, compareToBuilder1.toComparison());
      assertEquals(244, compareToBuilder2.toComparison());
      assertEquals(244, (int)compareToBuilder2.build());
      assertEquals(244, compareToBuilder3.toComparison());
      assertEquals(244, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertArrayEquals(new long[] {(-3610L), (-3170L), 0L, (-2510L), 0L, 2874L}, longArray0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(2262.466F, 1.0F);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(244, compareToBuilder0.toComparison());
      assertEquals(244, (int)compareToBuilder0.build());
      assertEquals(244, compareToBuilder4.toComparison());
      assertEquals(244, (int)compareToBuilder4.build());
      assertEquals(244, compareToBuilder5.toComparison());
      assertEquals(244, (int)compareToBuilder5.build());
      assertEquals(244, compareToBuilder6.toComparison());
      assertEquals(244, (int)compareToBuilder6.build());
      assertEquals(244, (int)compareToBuilder1.build());
      assertEquals(244, compareToBuilder1.toComparison());
      assertEquals(244, compareToBuilder2.toComparison());
      assertEquals(244, (int)compareToBuilder2.build());
      assertEquals(244, compareToBuilder3.toComparison());
      assertEquals(244, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertNotSame(objectArray1, objectArray0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertArrayEquals(new long[] {(-3610L), (-3170L), 0L, (-2510L), 0L, 2874L}, longArray0);
      assertArrayEquals(new double[] {0.0, (-4416.785659213063), 1.0, 2952.8408664486, 1.0, 1278.0522558, 149.157}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, objectArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-189L);
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-189L);
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(compareToBuilder1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-189L);
      floatArray0[1] = (float) (-189L);
      floatArray0[3] = (-189.0F);
      floatArray0[5] = (float) (-189L);
      floatArray0[6] = (float) (-189L);
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(floatArray0, floatArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), 0.0F, (-189.0F), 0.0F, (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-189.0F);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray0, comparator0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), 0.0F, (-189.0F), 0.0F, (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(false, false);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), 0.0F, (-189.0F), 0.0F, (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1720).when(comparator1).compare(anyInt() , anyInt());
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(objectArray0[0], (Object) compareToBuilder0, (Comparator<?>) comparator1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, compareToBuilder5.toComparison());
      assertEquals(0, (int)compareToBuilder5.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), 0.0F, (-189.0F), 0.0F, (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder5);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-189L);
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-189L);
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(compareToBuilder1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-189L);
      floatArray0[1] = (float) (-189L);
      floatArray0[2] = (float) (-189L);
      floatArray0[3] = 1210.23F;
      floatArray0[4] = (float) (-189L);
      floatArray0[5] = (float) (-189L);
      floatArray0[6] = (float) (-189L);
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(floatArray0, floatArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(compareToBuilder2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-189.0F);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(objectArray0, objectArray0, comparator0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(false, false);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1083)).when(comparator1).compare(anyInt() , anyInt());
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(objectArray0[0], (Object) compareToBuilder0, (Comparator<?>) comparator1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder3.toComparison());
      assertEquals(0, (int)compareToBuilder3.build());
      assertEquals(0, compareToBuilder4.toComparison());
      assertEquals(0, (int)compareToBuilder4.build());
      assertEquals(0, (int)compareToBuilder5.build());
      assertEquals(0, compareToBuilder5.toComparison());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder1.append((-1.0), (double) (-189.0F));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(compareToBuilder6);
      
      CompareToBuilder compareToBuilder7 = compareToBuilder6.append((-189L), (-3077L));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, compareToBuilder6.toComparison());
      assertEquals(1, (int)compareToBuilder6.build());
      assertEquals(1, compareToBuilder7.toComparison());
      assertEquals(1, (int)compareToBuilder7.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder7);
      assertSame(compareToBuilder7, compareToBuilder3);
      assertSame(compareToBuilder7, compareToBuilder4);
      assertSame(compareToBuilder7, compareToBuilder2);
      assertSame(compareToBuilder7, compareToBuilder1);
      assertSame(compareToBuilder7, compareToBuilder6);
      assertSame(compareToBuilder7, compareToBuilder0);
      assertSame(compareToBuilder7, compareToBuilder5);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(compareToBuilder7);
      
      CompareToBuilder compareToBuilder8 = compareToBuilder5.append(false, false);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder3.build());
      assertEquals(1, compareToBuilder3.toComparison());
      assertEquals(1, compareToBuilder4.toComparison());
      assertEquals(1, (int)compareToBuilder4.build());
      assertEquals(1, (int)compareToBuilder5.build());
      assertEquals(1, compareToBuilder5.toComparison());
      assertEquals(1, compareToBuilder1.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, (int)compareToBuilder8.build());
      assertEquals(1, compareToBuilder8.toComparison());
      assertEquals(1, compareToBuilder2.toComparison());
      assertEquals(1, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder7);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder8);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertNotSame(longArray0, longArray1);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder8);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder7);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder8);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder7);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertNotSame(longArray1, longArray0);
      assertSame(compareToBuilder5, compareToBuilder8);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder8);
      assertSame(compareToBuilder1, compareToBuilder7);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder8, compareToBuilder5);
      assertSame(compareToBuilder8, compareToBuilder2);
      assertSame(compareToBuilder8, compareToBuilder4);
      assertSame(compareToBuilder8, compareToBuilder7);
      assertSame(compareToBuilder8, compareToBuilder6);
      assertSame(compareToBuilder8, compareToBuilder1);
      assertSame(compareToBuilder8, compareToBuilder0);
      assertSame(compareToBuilder8, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder7);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder8);
      assertArrayEquals(new long[] {(-189L)}, longArray0);
      assertArrayEquals(new long[] {(-189L)}, longArray1);
      assertArrayEquals(new float[] {(-189.0F), (-189.0F), (-189.0F), 1210.23F, (-189.0F), (-189.0F), (-189.0F)}, floatArray0, 0.01F);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(compareToBuilder8);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1171.9F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 460.3F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 1234.9888F;
      floatArray0[8] = 1.0F;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new float[] {(-1171.9F), 0.0F, 0.0F, 0.0F, 460.3F, 1.0F, 1.0F, 1234.9888F, 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotNull(compareToBuilder1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) compareToBuilder1;
      objectArray0[2] = (Object) 1.0F;
      objectArray0[3] = (Object) 1.0F;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(objectArray0, objectArray0, (Comparator<?>) null);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new float[] {(-1171.9F), 0.0F, 0.0F, 0.0F, 460.3F, 1.0F, 1.0F, 1234.9888F, 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(4, objectArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.appendSuper(434);
      assertEquals(434, (int)compareToBuilder0.build());
      assertEquals(434, compareToBuilder0.toComparison());
      assertEquals(434, compareToBuilder2.toComparison());
      assertEquals(434, (int)compareToBuilder2.build());
      assertEquals(434, (int)compareToBuilder3.build());
      assertEquals(434, compareToBuilder3.toComparison());
      assertEquals(434, compareToBuilder1.toComparison());
      assertEquals(434, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new float[] {(-1171.9F), 0.0F, 0.0F, 0.0F, 460.3F, 1.0F, 1.0F, 1234.9888F, 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(4, objectArray0.length);
      assertNotNull(compareToBuilder3);
      
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((-1.0), 0.0);
      assertEquals(434, (int)compareToBuilder0.build());
      assertEquals(434, compareToBuilder0.toComparison());
      assertEquals(434, compareToBuilder2.toComparison());
      assertEquals(434, (int)compareToBuilder2.build());
      assertEquals(434, (int)compareToBuilder3.build());
      assertEquals(434, compareToBuilder3.toComparison());
      assertEquals(434, (int)compareToBuilder4.build());
      assertEquals(434, compareToBuilder4.toComparison());
      assertEquals(434, compareToBuilder1.toComparison());
      assertEquals(434, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new float[] {(-1171.9F), 0.0F, 0.0F, 0.0F, 460.3F, 1.0F, 1.0F, 1234.9888F, 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(4, objectArray0.length);
      assertNotNull(compareToBuilder4);
      
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append('J', 'J');
      assertEquals(434, (int)compareToBuilder0.build());
      assertEquals(434, compareToBuilder0.toComparison());
      assertEquals(434, compareToBuilder2.toComparison());
      assertEquals(434, (int)compareToBuilder2.build());
      assertEquals(434, (int)compareToBuilder3.build());
      assertEquals(434, compareToBuilder3.toComparison());
      assertEquals(434, (int)compareToBuilder4.build());
      assertEquals(434, compareToBuilder4.toComparison());
      assertEquals(434, compareToBuilder5.toComparison());
      assertEquals(434, (int)compareToBuilder5.build());
      assertEquals(434, compareToBuilder1.toComparison());
      assertEquals(434, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertArrayEquals(new float[] {(-1171.9F), 0.0F, 0.0F, 0.0F, 460.3F, 1.0F, 1.0F, 1234.9888F, 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(4, objectArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(0.0F, 0.0F);
      assertEquals(434, (int)compareToBuilder0.build());
      assertEquals(434, compareToBuilder0.toComparison());
      assertEquals(434, compareToBuilder2.toComparison());
      assertEquals(434, (int)compareToBuilder2.build());
      assertEquals(434, (int)compareToBuilder3.build());
      assertEquals(434, compareToBuilder3.toComparison());
      assertEquals(434, (int)compareToBuilder4.build());
      assertEquals(434, compareToBuilder4.toComparison());
      assertEquals(434, compareToBuilder5.toComparison());
      assertEquals(434, (int)compareToBuilder5.build());
      assertEquals(434, compareToBuilder6.toComparison());
      assertEquals(434, (int)compareToBuilder6.build());
      assertEquals(434, compareToBuilder1.toComparison());
      assertEquals(434, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertArrayEquals(new float[] {(-1171.9F), 0.0F, 0.0F, 0.0F, 460.3F, 1.0F, 1.0F, 1234.9888F, 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(4, objectArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertNotNull(compareToBuilder0);
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('d', 'd');
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertNotNull(compareToBuilder1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(byteArray0, byteArray0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, compareToBuilder1.toComparison());
      assertEquals(0, (int)compareToBuilder1.build());
      assertEquals(0, compareToBuilder2.toComparison());
      assertEquals(0, (int)compareToBuilder2.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)1, (byte) (-1), (byte)121, (byte)0, (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(compareToBuilder2);
      
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((byte)113, (byte)108);
      assertEquals(5, (int)compareToBuilder0.build());
      assertEquals(5, compareToBuilder0.toComparison());
      assertEquals(5, compareToBuilder1.toComparison());
      assertEquals(5, (int)compareToBuilder1.build());
      assertEquals(5, compareToBuilder2.toComparison());
      assertEquals(5, (int)compareToBuilder2.build());
      assertEquals(5, compareToBuilder3.toComparison());
      assertEquals(5, (int)compareToBuilder3.build());
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)1, (byte) (-1), (byte)121, (byte)0, (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(compareToBuilder3);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (byte)0;
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(longArray0, longArray0);
      assertEquals(5, (int)compareToBuilder0.build());
      assertEquals(5, compareToBuilder0.toComparison());
      assertEquals(5, compareToBuilder1.toComparison());
      assertEquals(5, (int)compareToBuilder1.build());
      assertEquals(5, compareToBuilder2.toComparison());
      assertEquals(5, (int)compareToBuilder2.build());
      assertEquals(5, compareToBuilder3.toComparison());
      assertEquals(5, (int)compareToBuilder3.build());
      assertEquals(5, compareToBuilder4.toComparison());
      assertEquals(5, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)1, (byte) (-1), (byte)121, (byte)0, (byte)1}, byteArray0);
      assertArrayEquals(new long[] {1L, 0L}, longArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(2, longArray0.length);
      assertNotNull(compareToBuilder4);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(booleanArray0, booleanArray0);
      assertEquals(5, (int)compareToBuilder0.build());
      assertEquals(5, compareToBuilder0.toComparison());
      assertEquals(5, compareToBuilder1.toComparison());
      assertEquals(5, (int)compareToBuilder1.build());
      assertEquals(5, (int)compareToBuilder5.build());
      assertEquals(5, compareToBuilder5.toComparison());
      assertEquals(5, compareToBuilder2.toComparison());
      assertEquals(5, (int)compareToBuilder2.build());
      assertEquals(5, compareToBuilder3.toComparison());
      assertEquals(5, (int)compareToBuilder3.build());
      assertEquals(5, compareToBuilder4.toComparison());
      assertEquals(5, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, true}, booleanArray0));
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)1, (byte) (-1), (byte)121, (byte)0, (byte)1}, byteArray0);
      assertArrayEquals(new long[] {1L, 0L}, longArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, byteArray0.length);
      assertEquals(2, longArray0.length);
      assertNotNull(compareToBuilder5);
      
      CompareToBuilder compareToBuilder6 = compareToBuilder5.append(longArray0, longArray0);
      assertEquals(5, (int)compareToBuilder0.build());
      assertEquals(5, compareToBuilder0.toComparison());
      assertEquals(5, compareToBuilder1.toComparison());
      assertEquals(5, (int)compareToBuilder1.build());
      assertEquals(5, (int)compareToBuilder5.build());
      assertEquals(5, compareToBuilder5.toComparison());
      assertEquals(5, compareToBuilder6.toComparison());
      assertEquals(5, (int)compareToBuilder6.build());
      assertEquals(5, compareToBuilder2.toComparison());
      assertEquals(5, (int)compareToBuilder2.build());
      assertEquals(5, compareToBuilder3.toComparison());
      assertEquals(5, (int)compareToBuilder3.build());
      assertEquals(5, compareToBuilder4.toComparison());
      assertEquals(5, (int)compareToBuilder4.build());
      assertSame(compareToBuilder0, compareToBuilder4);
      assertSame(compareToBuilder0, compareToBuilder1);
      assertSame(compareToBuilder0, compareToBuilder3);
      assertSame(compareToBuilder0, compareToBuilder5);
      assertSame(compareToBuilder0, compareToBuilder2);
      assertSame(compareToBuilder0, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder6);
      assertSame(compareToBuilder1, compareToBuilder3);
      assertSame(compareToBuilder1, compareToBuilder4);
      assertSame(compareToBuilder1, compareToBuilder5);
      assertSame(compareToBuilder1, compareToBuilder2);
      assertSame(compareToBuilder1, compareToBuilder0);
      assertSame(compareToBuilder5, compareToBuilder4);
      assertSame(compareToBuilder5, compareToBuilder6);
      assertSame(compareToBuilder5, compareToBuilder3);
      assertSame(compareToBuilder5, compareToBuilder2);
      assertSame(compareToBuilder5, compareToBuilder1);
      assertSame(compareToBuilder5, compareToBuilder0);
      assertSame(compareToBuilder6, compareToBuilder5);
      assertSame(compareToBuilder6, compareToBuilder3);
      assertSame(compareToBuilder6, compareToBuilder4);
      assertSame(compareToBuilder6, compareToBuilder1);
      assertSame(compareToBuilder6, compareToBuilder2);
      assertSame(compareToBuilder6, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder3);
      assertSame(compareToBuilder2, compareToBuilder4);
      assertSame(compareToBuilder2, compareToBuilder1);
      assertSame(compareToBuilder2, compareToBuilder5);
      assertSame(compareToBuilder2, compareToBuilder0);
      assertSame(compareToBuilder2, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder6);
      assertSame(compareToBuilder3, compareToBuilder2);
      assertSame(compareToBuilder3, compareToBuilder0);
      assertSame(compareToBuilder3, compareToBuilder4);
      assertSame(compareToBuilder3, compareToBuilder5);
      assertSame(compareToBuilder3, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder2);
      assertSame(compareToBuilder4, compareToBuilder5);
      assertSame(compareToBuilder4, compareToBuilder1);
      assertSame(compareToBuilder4, compareToBuilder3);
      assertSame(compareToBuilder4, compareToBuilder6);
      assertSame(compareToBuilder4, compareToBuilder0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, true}, booleanArray0));
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)1, (byte) (-1), (byte)121, (byte)0, (byte)1}, byteArray0);
      assertArrayEquals(new long[] {1L, 0L}, longArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, byteArray0.length);
      assertEquals(2, longArray0.length);
      assertNotNull(compareToBuilder6);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(booleanArray0, booleanArray0);
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append((short[]) null, (short[]) null);
      assertEquals(0, (int)compareToBuilder3.build());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-43);
      byteArray1[5] = (byte)32;
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(byteArray0, byteArray1);
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((byte)0, (byte) (-72));
      compareToBuilder5.append((-1), (-2087));
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short)0, (short)0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = new boolean[7];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(booleanArray0, booleanArray1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (-1230.915F);
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(floatArray0, floatArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      intArray0[8] = (int) (short)0;
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append(intArray0, intArray0);
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append((Object) "TG&X.#7]42", object0, (Comparator<?>) comparator0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) 0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder5.append(objectArray0, objectArray0, comparator1);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray0);
      Object object0 = new Object();
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(object0, object0);
      char[] charArray0 = new char[9];
      charArray0[1] = 'k';
      charArray0[2] = 'Z';
      charArray0[3] = ':';
      charArray0[4] = '+';
      charArray0[5] = '\'';
      charArray0[6] = '`';
      charArray0[7] = 'H';
      charArray0[8] = 'Z';
      compareToBuilder1.append((byte) (-1), (byte)89);
      compareToBuilder2.append(charArray0, charArray0);
      compareToBuilder0.append(charArray0, charArray0);
      assertEquals((-90), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-72);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte) (-110);
      byteArray1[3] = (byte) (-110);
      byteArray1[4] = (byte) (-72);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-110);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (byte) (-72);
      doubleArray0[4] = (double) (byte)1;
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append(doubleArray0, doubleArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '/';
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(charArray0, charArray0);
      CompareToBuilder compareToBuilder4 = compareToBuilder3.appendSuper(1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-110);
      objectArray0[1] = (Object) 1.0;
      objectArray0[2] = (Object) (-110.0);
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(objectArray0, objectArray0, (Comparator<?>) null);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (float) (byte) (-72);
      floatArray0[2] = (float) (byte) (-110);
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) (byte)0;
      compareToBuilder5.append(floatArray0, floatArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1597);
      intArray0[1] = 254;
      intArray0[2] = (-3058);
      int[] intArray1 = new int[4];
      intArray1[0] = 254;
      intArray1[1] = (-1597);
      intArray1[2] = 0;
      intArray1[3] = (-3058);
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder2 = compareToBuilder1.append((Object) compareToBuilder0, (Object) compareToBuilder0, (Comparator<?>) comparator0);
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = 'f';
      charArray0[2] = 'a';
      char[] charArray1 = new char[9];
      charArray1[0] = 'f';
      charArray1[1] = 'a';
      charArray1[2] = ' ';
      charArray1[3] = ' ';
      charArray1[4] = 'a';
      charArray1[5] = 'a';
      charArray1[6] = 'a';
      charArray1[7] = 'f';
      charArray1[8] = ' ';
      CompareToBuilder compareToBuilder3 = compareToBuilder2.append(charArray0, charArray1);
      CompareToBuilder compareToBuilder4 = compareToBuilder3.append((-1.0F), 0.0F);
      CompareToBuilder compareToBuilder5 = compareToBuilder4.append(' ', 'a');
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) ' ';
      longArray0[2] = (long) (-1597);
      longArray0[3] = (long) ' ';
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 'a';
      longArray1[1] = (long) 254;
      longArray1[2] = (long) 254;
      longArray1[3] = (long) ' ';
      compareToBuilder5.append(longArray0, longArray1);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }
}
