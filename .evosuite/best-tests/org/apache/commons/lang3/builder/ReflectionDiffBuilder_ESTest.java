/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:07:55 GMT 2019
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.builder.Diff;
import org.apache.commons.lang3.builder.DiffResult;
import org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle;
import org.apache.commons.lang3.builder.RecursiveToStringStyle;
import org.apache.commons.lang3.builder.ReflectionDiffBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectionDiffBuilder_ESTest extends ReflectionDiffBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      ReflectionDiffBuilder<String> reflectionDiffBuilder0 = null;
      try {
        reflectionDiffBuilder0 = new ReflectionDiffBuilder<String>((String) null, (String) null, multilineRecursiveToStringStyle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lhs cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      StringBuffer stringBuffer0 = new StringBuffer();
      Integer integer0 = new Integer(37);
      ReflectionDiffBuilder<Integer> reflectionDiffBuilder0 = new ReflectionDiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = reflectionDiffBuilder0.build();
      ReflectionDiffBuilder<Object> reflectionDiffBuilder1 = new ReflectionDiffBuilder<Object>(stringBuffer0, diffResult0, recursiveToStringStyle0);
      // Undeclared exception!
      try { 
        reflectionDiffBuilder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      Diff<Object> diff0 = (Diff<Object>) mock(Diff.class, new ViolatedAssumptionAnswer());
      Diff<Object> diff1 = (Diff<Object>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ReflectionDiffBuilder<Diff<Object>> reflectionDiffBuilder0 = new ReflectionDiffBuilder<Diff<Object>>(diff0, diff1, recursiveToStringStyle0);
      DiffResult<Diff<Object>> diffResult0 = reflectionDiffBuilder0.build();
      assertEquals(1, diffResult0.getNumberOfDiffs());
  }
}
