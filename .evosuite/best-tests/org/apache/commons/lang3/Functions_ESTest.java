/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:18:32 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.lang.reflect.Array;
import java.lang.reflect.UndeclaredThrowableException;
import java.util.concurrent.Callable;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BiPredicate;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import org.apache.commons.lang3.Functions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Functions_ESTest extends Functions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Functions.FailableRunnable<RuntimeException> functions_FailableRunnable0 = (Functions.FailableRunnable<RuntimeException>) mock(Functions.FailableRunnable.class, new ViolatedAssumptionAnswer());
      functions_FailableRunnable0.run();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Functions.FailablePredicate<Object, Error> functions_FailablePredicate0 = (Functions.FailablePredicate<Object, Error>) mock(Functions.FailablePredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(functions_FailablePredicate0).test(any());
      Object object0 = new Object();
      boolean boolean0 = Functions.test(functions_FailablePredicate0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Functions.FailableBiPredicate<Object, String, Error> functions_FailableBiPredicate0 = (Functions.FailableBiPredicate<Object, String, Error>) mock(Functions.FailableBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(functions_FailableBiPredicate0).test(any() , anyString());
      MockThrowable mockThrowable0 = new MockThrowable("OS");
      boolean boolean0 = Functions.test(functions_FailableBiPredicate0, (Object) mockThrowable0, "OS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Functions.FailableSupplier<Object, Error> functions_FailableSupplier0 = (Functions.FailableSupplier<Object, Error>) mock(Functions.FailableSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(functions_FailableSupplier0).get();
      Object object0 = Functions.get(functions_FailableSupplier0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("sgaYvl7PlMa!4.)9g0");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockThrowable0);
      Functions.FailableCallable<RuntimeException, Error> functions_FailableCallable0 = (Functions.FailableCallable<RuntimeException, Error>) mock(Functions.FailableCallable.class, new ViolatedAssumptionAnswer());
      doReturn(mockRuntimeException0).when(functions_FailableCallable0).call();
      RuntimeException runtimeException0 = Functions.call(functions_FailableCallable0);
      assertSame(runtimeException0, mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockError mockError0 = new MockError("A resource action must not be null.");
      Functions.FailableFunction<String, Error, RuntimeException> functions_FailableFunction0 = (Functions.FailableFunction<String, Error, RuntimeException>) mock(Functions.FailableFunction.class, new ViolatedAssumptionAnswer());
      doReturn(mockError0).when(functions_FailableFunction0).apply(anyString());
      Error error0 = Functions.apply(functions_FailableFunction0, "6[,Y+@^=cibX~F@r");
      assertSame(error0, mockError0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Functions functions0 = new Functions();
      MockError mockError0 = new MockError((Throwable) null);
      MockIOException mockIOException0 = new MockIOException("avCMa2FBG$", mockError0);
      Functions.FailableBiFunction<String, Object, IOException, RuntimeException> functions_FailableBiFunction0 = (Functions.FailableBiFunction<String, Object, IOException, RuntimeException>) mock(Functions.FailableBiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(mockIOException0).when(functions_FailableBiFunction0).apply(anyString() , any());
      IOException iOException0 = Functions.apply(functions_FailableBiFunction0, "", (Object) functions0);
      assertSame(mockIOException0, iOException0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(3714);
      // Undeclared exception!
      try { 
        Functions.test((Functions.FailablePredicate<Integer, Error>) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.test((Functions.FailableBiPredicate<Error, Throwable, IOException>) null, (Error) null, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.run((Functions.FailableRunnable<RuntimeException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.get((Functions.FailableSupplier<Object, RuntimeException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.call((Functions.FailableCallable<Error, IOException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
      try { 
        Functions.apply((Functions.FailableFunction<Error, IOException, Throwable>) null, (Error) mockError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        Functions.apply((Functions.FailableBiFunction<Object, Object, Object, RuntimeException>) null, (Object) mockIOException0, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Functions.FailableFunction<Integer, Error, RuntimeException> functions_FailableFunction0 = (Functions.FailableFunction<Integer, Error, RuntimeException>) mock(Functions.FailableFunction.class, new ViolatedAssumptionAnswer());
      Function<Integer, Error> function0 = Functions.asFunction((Functions.FailableFunction<Integer, Error, ?>) functions_FailableFunction0);
      MockIOException mockIOException0 = new MockIOException("}XQ}W2Pbh^]%i");
      // Undeclared exception!
      try { 
        Functions.accept((Functions.FailableBiConsumer<Object, Object, Throwable>) null, (Object) function0, (Object) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      // Undeclared exception!
      try { 
        Functions.rethrow(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Functions.FailableRunnable<RuntimeException> functions_FailableRunnable0 = (Functions.FailableRunnable<RuntimeException>) mock(Functions.FailableRunnable.class, new ViolatedAssumptionAnswer());
      Functions.FailableRunnable<RuntimeException>[] functions_FailableRunnableArray0 = (Functions.FailableRunnable<RuntimeException>[]) Array.newInstance(Functions.FailableRunnable.class, 7);
      functions_FailableRunnableArray0[0] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[1] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[2] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[3] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[4] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[5] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[6] = functions_FailableRunnable0;
      Functions.tryWithResources(functions_FailableRunnable0, (Functions.FailableConsumer<Throwable, ? extends Throwable>) null, functions_FailableRunnableArray0);
      assertEquals(7, functions_FailableRunnableArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Functions.FailableConsumer<Throwable, RuntimeException> functions_FailableConsumer0 = (Functions.FailableConsumer<Throwable, RuntimeException>) mock(Functions.FailableConsumer.class, new ViolatedAssumptionAnswer());
      Functions.tryWithResources((Functions.FailableRunnable<? extends Throwable>) null, functions_FailableConsumer0, (Functions.FailableRunnable<? extends Throwable>[]) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Functions.FailableRunnable<RuntimeException> functions_FailableRunnable0 = (Functions.FailableRunnable<RuntimeException>) mock(Functions.FailableRunnable.class, new ViolatedAssumptionAnswer());
      Functions.FailableRunnable<RuntimeException>[] functions_FailableRunnableArray0 = (Functions.FailableRunnable<RuntimeException>[]) Array.newInstance(Functions.FailableRunnable.class, 7);
      // Undeclared exception!
      try { 
        Functions.tryWithResources(functions_FailableRunnable0, (Functions.FailableConsumer<Throwable, ? extends Throwable>) null, functions_FailableRunnableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A resource action must not be null.
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("OS");
      // Undeclared exception!
      try { 
        Functions.rethrow(mockThrowable0);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        Functions.rethrow(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        Functions.rethrow(mockIOException0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.rethrow((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Throwable must not be null.
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Functions.FailableRunnable<RuntimeException> functions_FailableRunnable0 = (Functions.FailableRunnable<RuntimeException>) mock(Functions.FailableRunnable.class, new ViolatedAssumptionAnswer());
      Functions.FailableRunnable<RuntimeException>[] functions_FailableRunnableArray0 = (Functions.FailableRunnable<RuntimeException>[]) Array.newInstance(Functions.FailableRunnable.class, 3);
      functions_FailableRunnableArray0[0] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[1] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[2] = functions_FailableRunnable0;
      // Undeclared exception!
      try { 
        Functions.tryWithResources((Functions.FailableRunnable<? extends Throwable>) null, functions_FailableRunnableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Functions.FailableRunnable<RuntimeException> functions_FailableRunnable0 = (Functions.FailableRunnable<RuntimeException>) mock(Functions.FailableRunnable.class, new ViolatedAssumptionAnswer());
      Functions.FailableRunnable<Error> functions_FailableRunnable1 = (Functions.FailableRunnable<Error>) mock(Functions.FailableRunnable.class, new ViolatedAssumptionAnswer());
      Functions.FailableRunnable<RuntimeException>[] functions_FailableRunnableArray0 = (Functions.FailableRunnable<RuntimeException>[]) Array.newInstance(Functions.FailableRunnable.class, 7);
      functions_FailableRunnableArray0[0] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[1] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[2] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[3] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[4] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[5] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[6] = functions_FailableRunnable0;
      Functions.tryWithResources(functions_FailableRunnable1, functions_FailableRunnableArray0);
      assertEquals(7, functions_FailableRunnableArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Functions.FailablePredicate<RuntimeException, Error> functions_FailablePredicate0 = (Functions.FailablePredicate<RuntimeException, Error>) mock(Functions.FailablePredicate.class, new ViolatedAssumptionAnswer());
      Predicate<RuntimeException> predicate0 = Functions.asPredicate((Functions.FailablePredicate<RuntimeException, ?>) functions_FailablePredicate0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Functions.FailableCallable<Error, IOException> functions_FailableCallable0 = (Functions.FailableCallable<Error, IOException>) mock(Functions.FailableCallable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(functions_FailableCallable0).call();
      Error error0 = Functions.call(functions_FailableCallable0);
      assertNull(error0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Functions.FailableConsumer<IOException, IOException> functions_FailableConsumer0 = (Functions.FailableConsumer<IOException, IOException>) mock(Functions.FailableConsumer.class, new ViolatedAssumptionAnswer());
      Consumer<IOException> consumer0 = Functions.asConsumer((Functions.FailableConsumer<IOException, ?>) functions_FailableConsumer0);
      assertNotNull(consumer0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Functions.FailableSupplier<RuntimeException, RuntimeException> functions_FailableSupplier0 = (Functions.FailableSupplier<RuntimeException, RuntimeException>) mock(Functions.FailableSupplier.class, new ViolatedAssumptionAnswer());
      Supplier<RuntimeException> supplier0 = Functions.asSupplier((Functions.FailableSupplier<RuntimeException, ?>) functions_FailableSupplier0);
      assertNotNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Functions functions0 = new Functions();
      // Undeclared exception!
      try { 
        Functions.accept((Functions.FailableConsumer<Object, Error>) null, (Object) functions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Functions.FailableBiConsumer<Throwable, Integer, IOException> functions_FailableBiConsumer0 = (Functions.FailableBiConsumer<Throwable, Integer, IOException>) mock(Functions.FailableBiConsumer.class, new ViolatedAssumptionAnswer());
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      Integer integer0 = new Integer(0);
      Functions.accept(functions_FailableBiConsumer0, (Throwable) mockIOException0, integer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Functions.FailableBiFunction<RuntimeException, RuntimeException, Error, RuntimeException> functions_FailableBiFunction0 = (Functions.FailableBiFunction<RuntimeException, RuntimeException, Error, RuntimeException>) mock(Functions.FailableBiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(functions_FailableBiFunction0).apply(any(java.lang.RuntimeException.class) , any(java.lang.RuntimeException.class));
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Error error0 = Functions.apply(functions_FailableBiFunction0, (RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      assertNull(error0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Functions.FailableCallable<String, Error> functions_FailableCallable0 = (Functions.FailableCallable<String, Error>) mock(Functions.FailableCallable.class, new ViolatedAssumptionAnswer());
      Callable<String> callable0 = Functions.asCallable((Functions.FailableCallable<String, ?>) functions_FailableCallable0);
      assertNotNull(callable0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Functions.FailableSupplier<Object, RuntimeException> functions_FailableSupplier0 = (Functions.FailableSupplier<Object, RuntimeException>) mock(Functions.FailableSupplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(functions_FailableSupplier0).get();
      Object object0 = Functions.get(functions_FailableSupplier0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      Functions.FailableBiPredicate<IOException, String, RuntimeException> functions_FailableBiPredicate0 = (Functions.FailableBiPredicate<IOException, String, RuntimeException>) mock(Functions.FailableBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(functions_FailableBiPredicate0).test(any(java.io.IOException.class) , anyString());
      boolean boolean0 = Functions.test(functions_FailableBiPredicate0, (IOException) mockIOException0, "l4O");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Functions.FailableBiPredicate<IOException, RuntimeException, Error> functions_FailableBiPredicate0 = (Functions.FailableBiPredicate<IOException, RuntimeException, Error>) mock(Functions.FailableBiPredicate.class, new ViolatedAssumptionAnswer());
      BiPredicate<IOException, RuntimeException> biPredicate0 = Functions.asBiPredicate((Functions.FailableBiPredicate<IOException, RuntimeException, ?>) functions_FailableBiPredicate0);
      assertNotNull(biPredicate0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Functions.FailableBiFunction<RuntimeException, Error, RuntimeException, IOException> functions_FailableBiFunction0 = (Functions.FailableBiFunction<RuntimeException, Error, RuntimeException, IOException>) mock(Functions.FailableBiFunction.class, new ViolatedAssumptionAnswer());
      BiFunction<RuntimeException, Error, RuntimeException> biFunction0 = Functions.asBiFunction((Functions.FailableBiFunction<RuntimeException, Error, RuntimeException, ?>) functions_FailableBiFunction0);
      assertNotNull(biFunction0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Functions.FailableConsumer<String, RuntimeException> functions_FailableConsumer0 = (Functions.FailableConsumer<String, RuntimeException>) mock(Functions.FailableConsumer.class, new ViolatedAssumptionAnswer());
      Functions.accept(functions_FailableConsumer0, "");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Functions.FailableBiConsumer<IOException, Integer, Throwable> functions_FailableBiConsumer0 = (Functions.FailableBiConsumer<IOException, Integer, Throwable>) mock(Functions.FailableBiConsumer.class, new ViolatedAssumptionAnswer());
      BiConsumer<IOException, Integer> biConsumer0 = Functions.asBiConsumer((Functions.FailableBiConsumer<IOException, Integer, ?>) functions_FailableBiConsumer0);
      assertNotNull(biConsumer0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Functions.FailableRunnable<Throwable>[] functions_FailableRunnableArray0 = (Functions.FailableRunnable<Throwable>[]) Array.newInstance(Functions.FailableRunnable.class, 7);
      Runnable runnable0 = Functions.asRunnable(functions_FailableRunnableArray0[1]);
      assertNotNull(runnable0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Functions.FailableRunnable<RuntimeException> functions_FailableRunnable0 = (Functions.FailableRunnable<RuntimeException>) mock(Functions.FailableRunnable.class, new ViolatedAssumptionAnswer());
      Functions.run(functions_FailableRunnable0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Functions.FailablePredicate<Object, RuntimeException> functions_FailablePredicate0 = (Functions.FailablePredicate<Object, RuntimeException>) mock(Functions.FailablePredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(functions_FailablePredicate0).test(any());
      boolean boolean0 = Functions.test(functions_FailablePredicate0, (Object) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Functions.FailableFunction<Object, Object, Error> functions_FailableFunction0 = (Functions.FailableFunction<Object, Object, Error>) mock(Functions.FailableFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(functions_FailableFunction0).apply(any());
      Object object0 = Functions.apply(functions_FailableFunction0, (Object) null);
      assertNull(object0);
  }
}
