/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:49:20 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.CharUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharUtils_ESTest extends CharUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphanumeric('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlpha('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphaLower('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphaUpper('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphanumeric('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiControl('\uDC00');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiControl(' ');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiPrintable('\uD7BF');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiPrintable(' ');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = CharUtils.toString('w');
      assertEquals("w", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Character character0 = Character.valueOf('i');
      int int0 = CharUtils.toIntValue(character0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject('X');
      assertEquals('X', (char)character0);
      
      int int0 = CharUtils.toIntValue(character0, (-236));
      assertEquals((-236), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Character character0 = Character.valueOf('1');
      int int0 = CharUtils.toIntValue(character0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = CharUtils.toIntValue('(', 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = CharUtils.toIntValue('3');
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char char0 = CharUtils.toChar("|eF;E", 'F');
      assertEquals('|', char0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char char0 = CharUtils.toChar(" is not in the range '0' - '9'");
      assertEquals(' ', char0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char char0 = CharUtils.toChar("DN~01{vu^FJ%|KIP,IN");
      assertEquals('D', char0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject('3');
      char char0 = CharUtils.toChar(character0, 'p');
      assertEquals('3', char0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject('i');
      char char0 = CharUtils.toChar(character0, 'i');
      assertEquals('i', char0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Character character0 = Character.valueOf('4');
      char char0 = CharUtils.toChar(character0);
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Character character0 = Character.valueOf('s');
      char char0 = CharUtils.toChar(character0);
      assertEquals('s', char0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = CharUtils.compare('<', '4');
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = CharUtils.compare('E', '|');
      assertEquals((-55), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtils.toChar("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String must not be empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiNumeric('\u0000');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiNumeric('Z');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiNumeric('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphaLower('D');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphaUpper('x');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphaUpper(' ');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlpha('H');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlpha(',');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = CharUtils.toString('\u0080');
      assertEquals("\u0080", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = CharUtils.toIntValue('0');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphanumeric('^');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphaLower('\u0080');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiControl('');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiControl('\u000F');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiPrintable('');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiPrintable('\r');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = CharUtils.isAscii('C');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = CharUtils.isAscii('\uDC7F');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = CharUtils.unicodeEscaped((Character) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject('');
      String string0 = CharUtils.unicodeEscaped(character0);
      assertEquals("\\u007f", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = CharUtils.toString((Character) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Character character0 = new Character('\uD7BF');
      String string0 = CharUtils.toString(character0);
      assertNotNull(string0);
      assertEquals("\uD7BF", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = CharUtils.toIntValue((Character) null, 526);
      assertEquals(526, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtils.toIntValue((Character) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The character must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = CharUtils.toIntValue('\u0000', (-5571));
      assertEquals((-5571), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = CharUtils.toIntValue('8', (int) 'b');
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtils.toIntValue('B');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The character B is not in the range '0' - '9'
         //
         verifyException("org.apache.commons.lang3.CharUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Character character0 = new Character('0');
      int int0 = CharUtils.toIntValue(character0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char char0 = CharUtils.toChar((String) null, 'b');
      assertEquals('b', char0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char char0 = CharUtils.toChar("3A jtGu*Wo3G@", 'b');
      assertEquals('3', char0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char char0 = CharUtils.toChar((Character) null, '');
      assertEquals('', char0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char char0 = CharUtils.toChar((Character) '\r');
      assertEquals('\r', char0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtils.toChar((Character) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Character must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject((String) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject("3A jtGu*Wo3G@");
      assertNotNull(character0);
      assertEquals('3', (char)character0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharUtils charUtils0 = new CharUtils();
      char char0 = CharUtils.toChar((Character) charUtils0.LF, '\r');
      assertEquals('\n', char0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = CharUtils.unicodeEscaped('T');
      assertEquals("\\u0054", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char char0 = CharUtils.toChar("6h-T:)9@;:-C1");
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = CharUtils.compare('L', 'L');
      assertEquals(0, int0);
  }
}
