/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 01:43:43 GMT 2019
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableTriple_ESTest extends MutableTriple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableTriple<String, Object, Object> mutableTriple0 = MutableTriple.of("^7%T(^1.uCAfTH{i/", (Object) integer0, (Object) "^7%T(^1.uCAfTH{i/");
      MutableTriple<Integer, Object, String> mutableTriple1 = MutableTriple.of(integer0, (Object) mutableTriple0, "Ei");
      Integer integer1 = mutableTriple1.getLeft();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MutableTriple<String, String, Object> mutableTriple0 = new MutableTriple<String, String, Object>();
      Object object0 = mutableTriple0.getRight();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableTriple<String, MutableTriple<String, Object, Object>, Integer> mutableTriple0 = MutableTriple.of(")", (MutableTriple<String, Object, Object>) null, integer0);
      MutableTriple<String, Object, Object> mutableTriple1 = mutableTriple0.getMiddle();
      assertNull(mutableTriple1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MutableTriple<String, String, String> mutableTriple0 = MutableTriple.of((String) null, (String) null, (String) null);
      String string0 = mutableTriple0.getLeft();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(1283);
      MutableTriple<Object, String, Integer> mutableTriple0 = MutableTriple.of((Object) "", "", integer0);
      Integer integer1 = mutableTriple0.getRight();
      assertEquals(1283, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MutableTriple<Object, String, String> mutableTriple0 = MutableTriple.of((Object) null, "ZIx7T", "O\"W*#y=@]L)");
      MutableTriple<String, MutableTriple<Object, String, String>, Object> mutableTriple1 = new MutableTriple<String, MutableTriple<Object, String, String>, Object>("", mutableTriple0, (Object) null);
      Object object0 = mutableTriple1.getMiddle();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MutableTriple<Object, Integer, String> mutableTriple0 = new MutableTriple<Object, Integer, String>();
      mutableTriple0.setRight("G9\"\".pKh.vu|9;V/v{");
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MutableTriple<Object, Integer, String> mutableTriple0 = new MutableTriple<Object, Integer, String>();
      mutableTriple0.setLeft("G9\"\".pKh.vu|9;V/v{");
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MutableTriple<MutableTriple<Object, String, String>, Object, Object> mutableTriple0 = new MutableTriple<MutableTriple<Object, String, String>, Object, Object>();
      mutableTriple0.setMiddle("G9\"\".pKh.vu|9;V/v{");
  }
}
