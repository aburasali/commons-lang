/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:06:40 GMT 2019
 */

package org.apache.commons.lang3.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.UndeclaredThrowableException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Set;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExceptionUtils_ESTest extends ExceptionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockRuntimeException0, "Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", undeclaredThrowableException0.toString());
      assertNotNull(undeclaredThrowableException0);
      
      MockError mockError0 = new MockError("Search and Replace array lengths don't match: ", undeclaredThrowableException0);
      assertNotNull(mockError0);
      
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockError0);
      assertEquals("Search and Replace array lengths don't match: ", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", undeclaredThrowableException0.toString());
      assertEquals("Search and Replace array lengths don't match: ", throwable0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", throwable0.toString());
      assertSame(undeclaredThrowableException0, throwable0);
      assertSame(throwable0, undeclaredThrowableException0);
      assertNotNull(throwable0);
      
      List<String> list0 = ExceptionUtils.getStackFrameList(throwable0);
      assertEquals("Search and Replace array lengths don't match: ", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", undeclaredThrowableException0.toString());
      assertEquals("Search and Replace array lengths don't match: ", throwable0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", throwable0.toString());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains("Search and Replace array lengths don't match: "));
      assertSame(undeclaredThrowableException0, throwable0);
      assertSame(throwable0, undeclaredThrowableException0);
      assertNotNull(list0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Search and Replace array lengths don't match: ");
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockError0, (PrintWriter) mockPrintWriter0);
      assertEquals("Search and Replace array lengths don't match: ", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", undeclaredThrowableException0.toString());
      assertSame(undeclaredThrowableException0, throwable0);
      
      String string0 = ExceptionUtils.getMessage(undeclaredThrowableException0);
      assertEquals("UndeclaredThrowableException: Search and Replace array lengths don't match: ", string0);
      assertEquals("Search and Replace array lengths don't match: ", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", undeclaredThrowableException0.toString());
      assertSame(undeclaredThrowableException0, throwable0);
      assertNotNull(string0);
      
      MockError mockError1 = ExceptionUtils.throwableOfThrowable((Throwable) mockError0, (Class<MockError>) null, (-2));
      assertEquals("Search and Replace array lengths don't match: ", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", undeclaredThrowableException0.toString());
      assertSame(undeclaredThrowableException0, throwable0);
      assertNull(mockError1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.offer((String) null);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = linkedList0.offerLast(")YG|;iOrc/@k-KW&");
      assertTrue(boolean2);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(")YG|;iOrc/@k-KW&"));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.removeCommonFrames(linkedList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      String[] stringArray0 = new String[5];
      Throwable[] throwableArray0 = mockError0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      mockError0.printStackTrace();
      StackTraceElement[] stackTraceElementArray0 = mockError0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      Class<Error> class0 = Error.class;
      Throwable throwable0 = ExceptionUtils.getRootCause(mockError0);
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      assertNotNull(throwable0);
      
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockError0, (Class<?>) null);
      assertEquals((-1), int0);
      assertSame(mockError0, throwable0);
      
      Error error0 = ExceptionUtils.throwableOfThrowable((Throwable) mockError0, class0, 0);
      assertSame(mockError0, throwable0);
      assertNull(error0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      assertNotNull(mockRuntimeException0);
      
      MockThrowable mockThrowable0 = new MockThrowable((String) null, mockRuntimeException0);
      assertNotNull(mockThrowable0);
      
      Class<Throwable> class0 = Throwable.class;
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      
      List<Throwable> list0 = ExceptionUtils.getThrowableList(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      String string0 = ExceptionUtils.getRootCauseMessage(mockRuntimeException0);
      assertEquals("MockRuntimeException: ", string0);
      assertNotNull(string0);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockRuntimeException0);
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockRuntimeException0, (Class<?>) null);
      assertEquals((-1), int0);
      
      int int1 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<?>) class0, (-1));
      assertEquals((-1), int1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      assertNotNull(mockRuntimeException0);
      
      MockThrowable mockThrowable0 = new MockThrowable((String) null, mockRuntimeException0);
      assertNotNull(mockThrowable0);
      
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfThrowable((Throwable) mockThrowable0, class0, (-161));
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(throwable0);
      
      Throwable throwable1 = ExceptionUtils.getRootCause((Throwable) null);
      assertNull(throwable1);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      
      List<Throwable> list0 = ExceptionUtils.getThrowableList(mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Throwable throwable2 = mockThrowable0.fillInStackTrace();
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(throwable2.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable2.toString());
      assertSame(mockThrowable0, throwable2);
      assertSame(throwable2, mockThrowable0);
      assertNotNull(throwable2);
      
      String string0 = ExceptionUtils.getRootCauseMessage(mockRuntimeException0);
      assertEquals("MockRuntimeException: ", string0);
      assertNotNull(string0);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockRuntimeException0);
      String string1 = ExceptionUtils.getMessage((Throwable) null);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) null, class0);
      assertEquals((-1), int0);
      
      int int1 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<?>) class0, (-1));
      assertEquals((-1), int1);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertSame(mockThrowable0, throwable2);
      assertTrue(int1 == int0);
      
      Class<MockRuntimeException> class1 = MockRuntimeException.class;
      int int2 = ExceptionUtils.indexOfType(throwable2, class1);
      assertEquals(1, int2);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(throwable2.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable2.toString());
      assertSame(mockThrowable0, throwable2);
      assertSame(throwable2, mockThrowable0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Class<Object> class2 = Object.class;
      int int3 = ExceptionUtils.indexOfType((Throwable) mockRuntimeException0, (Class<?>) class2);
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockRuntimeException0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertNotNull(undeclaredThrowableException0);
      
      String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace(undeclaredThrowableException0);
      assertEquals(2, stringArray0.length);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertNotNull(stringArray0);
      
      mockRuntimeException0.printStackTrace();
      String[] stringArray1 = ExceptionUtils.getRootCauseStackTrace(mockRuntimeException0);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      undeclaredThrowableException0.addSuppressed(mockRuntimeException0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = undeclaredThrowableException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertNotNull(stackTraceElementArray0);
      
      Class<MockError> class0 = MockError.class;
      boolean boolean1 = ExceptionUtils.hasCause(undeclaredThrowableException0, class0);
      assertFalse(boolean1);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertFalse(boolean1 == boolean0);
      
      String string0 = "0o^i]+";
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      try { 
        MockFile.createTempFile("0o^i]+", "0o^i]+");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "e5G.l_Wnxk&gRiP";
      String[] stringArray0 = ExceptionUtils.getStackFrames("e5G.l_Wnxk&gRiP");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      StackTraceElement[] stackTraceElementArray0 = mockRuntimeException0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      Class<Integer> class0 = Integer.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockRuntimeException0, (Class<?>) class0);
      assertEquals((-1), int0);
      
      StackTraceElement[] stackTraceElementArray1 = mockRuntimeException0.getStackTrace();
      assertEquals(3, stackTraceElementArray1.length);
      assertSame(stackTraceElementArray1, stackTraceElementArray0);
      assertNotNull(stackTraceElementArray1);
      
      int int1 = ExceptionUtils.indexOfThrowable((Throwable) mockRuntimeException0, (Class<?>) class0, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Class<Error> class1 = Error.class;
      int int2 = ExceptionUtils.indexOfType((Throwable) mockRuntimeException0, (Class<?>) class1);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.printRootCauseStackTrace((Throwable) mockRuntimeException0, (PrintStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The PrintStream must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      MockError mockError0 = new MockError("B!Bk{IyQ0 3R+");
      assertNotNull(mockError0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockError0);
      assertNull(undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNotNull(undeclaredThrowableException0);
      
      undeclaredThrowableException0.addSuppressed(mockError0);
      assertNull(undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfType((Throwable) undeclaredThrowableException0, class0, (-266));
      assertNull(undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(throwable0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException", throwable0.toString());
      assertSame(undeclaredThrowableException0, throwable0);
      assertSame(throwable0, undeclaredThrowableException0);
      assertNotNull(throwable0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.printRootCauseStackTrace(throwable0, (PrintStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The PrintStream must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockError mockError0 = new MockError("bMl");
      assertNotNull(mockError0);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockError0);
      Throwable[] throwableArray0 = ExceptionUtils.getThrowables(mockError0);
      assertEquals(1, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      Class<Throwable> class0 = Throwable.class;
      Throwable[] throwableArray1 = mockError0.getSuppressed();
      assertEquals(0, throwableArray1.length);
      assertNotSame(throwableArray1, throwableArray0);
      assertNotNull(throwableArray1);
      assertFalse(throwableArray1.equals((Object)throwableArray0));
      
      int int0 = ExceptionUtils.indexOfType((Throwable) mockError0, (Class<?>) class0, 1477);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "bMl";
      stringArray0[1] = "bMl";
      stringArray0[2] = "bMl";
      stringArray0[3] = "bMl";
      MockPrintStream mockPrintStream0 = new MockPrintStream("bMl");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "xF$xJ", (Object[]) throwableArray0);
      assertEquals(1, throwableArray0.length);
      assertNotSame(throwableArray0, throwableArray1);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      assertFalse(throwableArray0.equals((Object)throwableArray1));
      
      mockError0.printStackTrace(printStream0);
      assertEquals(1, throwableArray0.length);
      assertNotSame(throwableArray0, throwableArray1);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertFalse(throwableArray0.equals((Object)throwableArray1));
      
      stringArray0[4] = "bMl";
      stringArray0[5] = "bMl";
      stringArray0[6] = "bMl";
      stringArray0[7] = "bMl";
      stringArray0[8] = "bMl";
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockError0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertNull(throwable0);
      
      Class<MockError> class1 = MockError.class;
      int int1 = ExceptionUtils.indexOfThrowable((Throwable) mockError0, (Class<?>) class1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockRuntimeException0, "org.apache.commons.lang3.Validate");
      assertEquals("java.lang.reflect.UndeclaredThrowableException: org.apache.commons.lang3.Validate", undeclaredThrowableException0.toString());
      assertEquals("org.apache.commons.lang3.Validate", undeclaredThrowableException0.getMessage());
      assertNotNull(undeclaredThrowableException0);
      
      MockError mockError0 = new MockError("Search and Replace array lengths don't match: ", undeclaredThrowableException0);
      assertNotNull(mockError0);
      
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockError0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: org.apache.commons.lang3.Validate", undeclaredThrowableException0.toString());
      assertEquals("org.apache.commons.lang3.Validate", undeclaredThrowableException0.getMessage());
      assertEquals("org.apache.commons.lang3.Validate", throwable0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: org.apache.commons.lang3.Validate", throwable0.toString());
      assertSame(undeclaredThrowableException0, throwable0);
      assertSame(throwable0, undeclaredThrowableException0);
      assertNotNull(throwable0);
      
      List<String> list0 = ExceptionUtils.getStackFrameList(throwable0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: org.apache.commons.lang3.Validate", undeclaredThrowableException0.toString());
      assertEquals("org.apache.commons.lang3.Validate", undeclaredThrowableException0.getMessage());
      assertEquals("org.apache.commons.lang3.Validate", throwable0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: org.apache.commons.lang3.Validate", throwable0.toString());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains("org.apache.commons.lang3.Validate"));
      assertSame(undeclaredThrowableException0, throwable0);
      assertSame(throwable0, undeclaredThrowableException0);
      assertNotNull(list0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Search and Replace array lengths don't match: ");
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockError0, (PrintWriter) mockPrintWriter0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: org.apache.commons.lang3.Validate", undeclaredThrowableException0.toString());
      assertEquals("org.apache.commons.lang3.Validate", undeclaredThrowableException0.getMessage());
      assertSame(undeclaredThrowableException0, throwable0);
      
      String string0 = ExceptionUtils.getMessage(undeclaredThrowableException0);
      assertEquals("UndeclaredThrowableException: org.apache.commons.lang3.Validate", string0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: org.apache.commons.lang3.Validate", undeclaredThrowableException0.toString());
      assertEquals("org.apache.commons.lang3.Validate", undeclaredThrowableException0.getMessage());
      assertSame(undeclaredThrowableException0, throwable0);
      assertNotNull(string0);
      
      Class<MockError> class0 = MockError.class;
      MockError mockError1 = ExceptionUtils.throwableOfThrowable((Throwable) mockError0, class0, (-2));
      assertEquals("java.lang.reflect.UndeclaredThrowableException: org.apache.commons.lang3.Validate", undeclaredThrowableException0.toString());
      assertEquals("org.apache.commons.lang3.Validate", undeclaredThrowableException0.getMessage());
      assertSame(undeclaredThrowableException0, throwable0);
      assertSame(mockError0, mockError1);
      assertSame(mockError1, mockError0);
      assertNotNull(mockError1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockError mockError0 = new MockError("%e]mWApN/u'<", mockThrowable0);
      assertNotNull(mockError0);
      
      mockError0.addSuppressed(mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      
      mockError0.addSuppressed(mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      assertNotNull(mockRuntimeException0);
      
      Class<MockRuntimeException> class0 = MockRuntimeException.class;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("%e]mWApN/u'<", "%e]mWApN/u'<", "X>rJM^)", (-4072));
      assertEquals((-4072), stackTraceElement0.getLineNumber());
      assertEquals("%e]mWApN/u'<", stackTraceElement0.getMethodName());
      assertEquals("%e]mWApN/u'<", stackTraceElement0.getClassName());
      assertEquals("%e]mWApN/u'<.%e]mWApN/u'<(X>rJM^))", stackTraceElement0.toString());
      assertEquals("X>rJM^)", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("X>rJM^)", "%e]mWApN/u'<", "%e]mWApN/u'<", 2270);
      assertEquals("X>rJM^).%e]mWApN/u'<(%e]mWApN/u'<:2270)", stackTraceElement1.toString());
      assertEquals("X>rJM^)", stackTraceElement1.getClassName());
      assertEquals("%e]mWApN/u'<", stackTraceElement1.getMethodName());
      assertEquals(2270, stackTraceElement1.getLineNumber());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("%e]mWApN/u'<", stackTraceElement1.getFileName());
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Of=", "cwe+Rt4.", "The List must not be null", 11);
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("The List must not be null", stackTraceElement2.getFileName());
      assertEquals("Of=", stackTraceElement2.getClassName());
      assertEquals("Of=.cwe+Rt4.(The List must not be null:11)", stackTraceElement2.toString());
      assertEquals("cwe+Rt4.", stackTraceElement2.getMethodName());
      assertEquals(11, stackTraceElement2.getLineNumber());
      assertNotNull(stackTraceElement2);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("l}zhGOK r\"de", "Of=", "tR8r:AM RO]D", 1459);
      assertEquals("tR8r:AM RO]D", stackTraceElement3.getFileName());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("l}zhGOK r\"de.Of=(tR8r:AM RO]D:1459)", stackTraceElement3.toString());
      assertEquals("Of=", stackTraceElement3.getMethodName());
      assertEquals("l}zhGOK r\"de", stackTraceElement3.getClassName());
      assertEquals(1459, stackTraceElement3.getLineNumber());
      assertNotNull(stackTraceElement3);
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("getThrowable", "The List must not be null", "w", 11);
      assertEquals("getThrowable", stackTraceElement4.getClassName());
      assertEquals("getThrowable.The List must not be null(w:11)", stackTraceElement4.toString());
      assertEquals("The List must not be null", stackTraceElement4.getMethodName());
      assertEquals(11, stackTraceElement4.getLineNumber());
      assertEquals("w", stackTraceElement4.getFileName());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertNotNull(stackTraceElement4);
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement(";", "Of=", "#k92", (-4072));
      assertEquals(";.Of=(#k92)", stackTraceElement5.toString());
      assertEquals("#k92", stackTraceElement5.getFileName());
      assertEquals(";", stackTraceElement5.getClassName());
      assertFalse(stackTraceElement5.isNativeMethod());
      assertEquals("Of=", stackTraceElement5.getMethodName());
      assertEquals((-4072), stackTraceElement5.getLineNumber());
      assertNotNull(stackTraceElement5);
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("QTm4", "X>rJM^)", "*#y2U$/", (-105));
      assertEquals("QTm4", stackTraceElement6.getClassName());
      assertEquals("*#y2U$/", stackTraceElement6.getFileName());
      assertEquals("X>rJM^)", stackTraceElement6.getMethodName());
      assertEquals((-105), stackTraceElement6.getLineNumber());
      assertFalse(stackTraceElement6.isNativeMethod());
      assertEquals("QTm4.X>rJM^)(*#y2U$/)", stackTraceElement6.toString());
      assertNotNull(stackTraceElement6);
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement5));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement4));
      
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("M|AU0_BF~<#t)[8c", "Of=", "getThrowable", (-105));
      assertEquals((-105), stackTraceElement7.getLineNumber());
      assertFalse(stackTraceElement7.isNativeMethod());
      assertEquals("M|AU0_BF~<#t)[8c.Of=(getThrowable)", stackTraceElement7.toString());
      assertEquals("getThrowable", stackTraceElement7.getFileName());
      assertEquals("M|AU0_BF~<#t)[8c", stackTraceElement7.getClassName());
      assertEquals("Of=", stackTraceElement7.getMethodName());
      assertNotNull(stackTraceElement7);
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement6));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement5));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement3));
      
      stackTraceElementArray0[7] = stackTraceElement7;
      mockError0.setStackTrace(stackTraceElementArray0);
      assertEquals(8, stackTraceElementArray0.length);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockRuntimeException0, (Class<?>) class0, (-141));
      assertEquals(0, int0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockError mockError0 = new MockError("7mFGc");
      assertNotNull(mockError0);
      
      Throwable[] throwableArray0 = ExceptionUtils.getThrowables(mockError0);
      assertEquals(1, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      MockThrowable mockThrowable0 = new MockThrowable(mockError0);
      assertNotNull(mockThrowable0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[");
      assertFalse(boolean0);
      
      Throwable throwable0 = mockError0.initCause(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: 7mFGc", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 7mFGc", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 7mFGc", throwable0.toString());
      assertEquals("7mFGc", throwable0.getMessage());
      assertNotSame(mockThrowable0, throwable0);
      assertNotSame(throwable0, mockThrowable0);
      assertNotNull(throwable0);
      assertFalse(throwable0.equals((Object)mockThrowable0));
      
      Class<String> class0 = String.class;
      List<Throwable> list0 = ExceptionUtils.getThrowableList(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: 7mFGc", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 7mFGc", mockThrowable0.getMessage());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(mockThrowable0, throwable0);
      assertNotNull(list0);
      assertFalse(mockThrowable0.equals((Object)throwable0));
      
      int int0 = ExceptionUtils.indexOfType((Throwable) mockError0, (Class<?>) class0, (-365));
      assertEquals((-1), int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("["));
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getStackFrames("getCause");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("getCause");
      assertNotNull(mockRuntimeException0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockRuntimeException0, "4yQ#A0_h)\"cZ8/g");
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertNotNull(undeclaredThrowableException0);
      
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) undeclaredThrowableException0);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      assertNotNull(throwable0);
      
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable1 = ExceptionUtils.throwableOfThrowable(throwable0, class0, (-1035));
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      assertNull(throwable1);
      
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException("getCause", (Throwable) null);
      assertNotNull(mockRuntimeException1);
      assertFalse(mockRuntimeException1.equals((Object)throwable0));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      
      String string0 = mockRuntimeException1.getMessage();
      assertEquals("getCause", string0);
      assertNotSame(mockRuntimeException1, throwable0);
      assertNotSame(mockRuntimeException1, mockRuntimeException0);
      assertNotNull(string0);
      assertFalse(mockRuntimeException1.equals((Object)throwable0));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      
      List<String> list0 = ExceptionUtils.getStackFrameList(mockRuntimeException1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(string0));
      assertNotSame(mockRuntimeException1, throwable0);
      assertNotSame(mockRuntimeException1, mockRuntimeException0);
      assertNotNull(list0);
      assertFalse(mockRuntimeException1.equals((Object)throwable0));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      
      String string1 = ExceptionUtils.getRootCauseMessage(undeclaredThrowableException0);
      assertEquals("MockRuntimeException: getCause", string1);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertSame(mockRuntimeException0, throwable0);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertNotNull(string1);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = ExceptionUtils.getRootCauseStackTrace(throwable0);
      assertEquals(1, stringArray1.length);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertSame(mockRuntimeException0, throwable0);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertNotSame(throwable0, mockRuntimeException1);
      assertSame(throwable0, mockRuntimeException0);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable0.equals((Object)mockRuntimeException1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Class<Throwable> class1 = Throwable.class;
      int int0 = ExceptionUtils.indexOfType(throwable0, class1, 2093);
      assertEquals((-1), int0);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertSame(mockRuntimeException0, throwable0);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertNotSame(throwable0, mockRuntimeException1);
      assertSame(throwable0, mockRuntimeException0);
      assertSame(class1, class0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable0.equals((Object)mockRuntimeException1));
      
      String string2 = ExceptionUtils.getStackTrace((Throwable) null);
      assertEquals("<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = ExceptionUtils.indexOfType((Throwable) undeclaredThrowableException0, (Class<?>) class1);
      assertEquals(0, int1);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertSame(mockRuntimeException0, throwable0);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(class1, class0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(int1 == int0);
      
      String[] stringArray2 = ExceptionUtils.getStackFrames(mockRuntimeException0);
      assertEquals(6, stringArray2.length);
      assertSame(mockRuntimeException0, throwable0);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$y%O:byZc");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockRuntimeException0, throwable0);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertNotSame(throwable0, mockRuntimeException1);
      assertSame(throwable0, mockRuntimeException0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotNull(printWriter0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable0.equals((Object)mockRuntimeException1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockRuntimeException0, printWriter0);
      assertEquals(1, stringArray1.length);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockRuntimeException0, throwable0);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertNotSame(throwable0, mockRuntimeException1);
      assertSame(throwable0, mockRuntimeException0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable0.equals((Object)mockRuntimeException1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      
      Throwable throwable2 = ExceptionUtils.getCause((Throwable) undeclaredThrowableException0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(mockRuntimeException0, throwable2);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(throwable2, mockRuntimeException0);
      assertSame(throwable2, throwable0);
      assertNotSame(throwable2, mockRuntimeException1);
      assertNotNull(throwable2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable2.equals((Object)mockRuntimeException1));
      
      int int2 = ExceptionUtils.indexOfThrowable(throwable2, class0);
      assertEquals((-1), int2);
      assertEquals(1, stringArray0.length);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(mockRuntimeException0, throwable2);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(throwable2, mockRuntimeException0);
      assertSame(throwable2, throwable0);
      assertNotSame(throwable2, mockRuntimeException1);
      assertSame(class0, class1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable2.equals((Object)mockRuntimeException1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = ExceptionUtils.getRootCauseMessage(throwable0);
      assertEquals("MockRuntimeException: getCause", string3);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertSame(mockRuntimeException0, throwable0);
      assertSame(mockRuntimeException0, throwable2);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertNotSame(throwable0, mockRuntimeException1);
      assertSame(throwable0, throwable2);
      assertSame(throwable0, mockRuntimeException0);
      assertNotNull(string3);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable0.equals((Object)mockRuntimeException1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String[] stringArray3 = ExceptionUtils.getDefaultCauseMethodNames();
      assertEquals(12, stringArray3.length);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotNull(stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      MockError mockError0 = new MockError("MockRuntimeException: getCause");
      assertNotNull(mockError0);
      
      Throwable throwable3 = ExceptionUtils.getRootCause(mockError0);
      assertSame(mockError0, throwable3);
      assertSame(throwable3, mockError0);
      assertNotNull(throwable3);
      
      Throwable throwable4 = ExceptionUtils.getRootCause(throwable3);
      assertSame(mockError0, throwable4);
      assertSame(mockError0, throwable3);
      assertSame(throwable3, mockError0);
      assertSame(throwable3, throwable4);
      assertSame(throwable4, throwable3);
      assertSame(throwable4, mockError0);
      assertNotNull(throwable4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExceptionUtils exceptionUtils0 = new ExceptionUtils();
      assertNotNull(exceptionUtils0);
      
      MockError mockError0 = new MockError((String) null);
      assertNotNull(mockError0);
      
      MockError mockError1 = new MockError((String) null, mockError0);
      assertNotNull(mockError1);
      assertFalse(mockError1.equals((Object)mockError0));
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockError1);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertNotNull(undeclaredThrowableException0);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(mockError1.equals((Object)mockError0));
      
      Class<MockError> class0 = MockError.class;
      MockError mockError2 = ExceptionUtils.throwableOfThrowable((Throwable) undeclaredThrowableException0, class0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertNotSame(mockError0, mockError1);
      assertNotSame(mockError0, mockError2);
      assertSame(mockError1, mockError2);
      assertNotSame(mockError1, mockError0);
      assertSame(mockError2, mockError1);
      assertNotSame(mockError2, mockError0);
      assertNotNull(mockError2);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(mockError1.equals((Object)mockError0));
      assertFalse(mockError2.equals((Object)mockError0));
      
      MockError mockError3 = new MockError();
      assertNotNull(mockError3);
      assertFalse(mockError3.equals((Object)mockError1));
      assertFalse(mockError3.equals((Object)mockError2));
      assertFalse(mockError3.equals((Object)mockError0));
      
      Throwable throwable0 = ExceptionUtils.getRootCause(mockError3);
      assertNotSame(mockError3, mockError1);
      assertNotSame(mockError3, mockError2);
      assertSame(mockError3, throwable0);
      assertNotSame(mockError3, mockError0);
      assertNotSame(throwable0, mockError0);
      assertSame(throwable0, mockError3);
      assertNotSame(throwable0, mockError2);
      assertNotSame(throwable0, mockError1);
      assertNotNull(throwable0);
      assertFalse(mockError3.equals((Object)mockError1));
      assertFalse(mockError3.equals((Object)mockError2));
      assertFalse(mockError3.equals((Object)mockError0));
      assertFalse(throwable0.equals((Object)mockError0));
      assertFalse(throwable0.equals((Object)mockError2));
      assertFalse(throwable0.equals((Object)mockError1));
      
      String string0 = ExceptionUtils.getMessage(throwable0);
      assertEquals("MockError: ", string0);
      assertNotSame(mockError3, mockError1);
      assertNotSame(mockError3, mockError2);
      assertSame(mockError3, throwable0);
      assertNotSame(mockError3, mockError0);
      assertNotSame(throwable0, mockError0);
      assertSame(throwable0, mockError3);
      assertNotSame(throwable0, mockError2);
      assertNotSame(throwable0, mockError1);
      assertNotNull(string0);
      assertFalse(mockError3.equals((Object)mockError1));
      assertFalse(mockError3.equals((Object)mockError2));
      assertFalse(mockError3.equals((Object)mockError0));
      assertFalse(throwable0.equals((Object)mockError0));
      assertFalse(throwable0.equals((Object)mockError2));
      assertFalse(throwable0.equals((Object)mockError1));
      
      Throwable throwable1 = null;
      Class<Throwable> class1 = Throwable.class;
      Throwable throwable2 = ExceptionUtils.throwableOfThrowable((Throwable) null, class1);
      assertNull(throwable2);
      
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) null, class1);
      assertEquals((-1), int0);
      
      List<Throwable> list0 = ExceptionUtils.getThrowableList((Throwable) null);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)108;
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow(throwable0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("", (Throwable) null);
      assertNotNull(mockThrowable0);
      
      String[] stringArray0 = ExceptionUtils.getStackFrames(mockThrowable0);
      assertEquals(6, stringArray0.length);
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertNotNull(stringArray0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ExceptionUtils.throwableOfType((Throwable) null, class0);
      assertNull(runtimeException0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) mockThrowable0);
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      Throwable throwable0 = mockError0.fillInStackTrace();
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      assertNotNull(throwable0);
      
      List<String> list0 = ExceptionUtils.getStackFrameList(mockError0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(mockError0, throwable0);
      assertNotNull(list0);
      
      MockError mockError1 = new MockError(throwable0);
      assertNotNull(mockError1);
      assertFalse(mockError1.equals((Object)mockError0));
      assertFalse(mockError1.equals((Object)throwable0));
      
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ExceptionUtils.throwableOfThrowable((Throwable) mockError1, class0, 3395);
      assertSame(mockError0, throwable0);
      assertNotSame(mockError0, mockError1);
      assertSame(throwable0, mockError0);
      assertNotSame(throwable0, mockError1);
      assertNotSame(mockError1, mockError0);
      assertNotSame(mockError1, throwable0);
      assertNull(runtimeException0);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(throwable0.equals((Object)mockError1));
      assertFalse(mockError1.equals((Object)mockError0));
      assertFalse(mockError1.equals((Object)throwable0));
      
      MockFile mockFile0 = new MockFile("@/t", "@/t");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) throwable0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) class0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      assertEquals(4, objectArray0.length);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/aburasali/Documents/Research/commons-lang/@/t/@", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("t", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/aburasali/Documents/Research/commons-lang/@/t/@/t", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      ExceptionUtils.printRootCauseStackTrace(throwable0, printStream0);
      assertEquals(4, objectArray0.length);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/aburasali/Documents/Research/commons-lang/@/t/@", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("t", mockFile0.getName());
      assertEquals(50L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/aburasali/Documents/Research/commons-lang/@/t/@/t", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertSame(mockError0, throwable0);
      assertNotSame(mockError0, mockError1);
      assertSame(throwable0, mockError0);
      assertNotSame(throwable0, mockError1);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(throwable0.equals((Object)mockError1));
      
      Class<UndeclaredThrowableException> class1 = UndeclaredThrowableException.class;
      UndeclaredThrowableException undeclaredThrowableException0 = ExceptionUtils.throwableOfType((Throwable) null, class1, 4116);
      assertNull(undeclaredThrowableException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExceptionUtils exceptionUtils0 = new ExceptionUtils();
      assertNotNull(exceptionUtils0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Cannot store ");
      assertNotNull(mockRuntimeException0);
      
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfThrowable((Throwable) mockRuntimeException0, class0, 1);
      assertNull(throwable0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException((Throwable) null);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertNotNull(undeclaredThrowableException0);
      
      String string0 = undeclaredThrowableException0.getLocalizedMessage();
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertNull(string0);
      
      Class<Error> class1 = Error.class;
      Error error0 = ExceptionUtils.throwableOfType((Throwable) undeclaredThrowableException0, class1);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertNull(error0);
      
      Class<String> class2 = String.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) null, class2, (-1222));
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "getTargetException";
      stringArray0[1] = "L";
      stringArray0[2] = "-rrh]olir7} hgz.f/J";
      stringArray0[3] = "";
      stringArray0[4] = "j.TIQBa@`~q/NnB";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "*74\"kw";
      stringArray0[8] = "(,SG,mL4p";
      Throwable throwable1 = ExceptionUtils.getCause((Throwable) null, stringArray0);
      assertEquals(9, stringArray0.length);
      assertNull(throwable1);
      
      int int1 = ExceptionUtils.indexOfType((Throwable) null, class2, 859);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = ExceptionUtils.getRootCauseStackTrace((Throwable) null);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Throwable[] throwableArray0 = ExceptionUtils.getThrowables((Throwable) null);
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) null);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Throwable throwable0 = null;
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException((Throwable) null);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertNotNull(undeclaredThrowableException0);
      
      Class<UndeclaredThrowableException> class0 = UndeclaredThrowableException.class;
      UndeclaredThrowableException undeclaredThrowableException1 = ExceptionUtils.throwableOfType((Throwable) undeclaredThrowableException0, class0, 0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException1.toString());
      assertNull(undeclaredThrowableException1.getMessage());
      assertSame(undeclaredThrowableException0, undeclaredThrowableException1);
      assertSame(undeclaredThrowableException1, undeclaredThrowableException0);
      assertNotNull(undeclaredThrowableException1);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) undeclaredThrowableException0);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockRuntimeException0, (String[]) null);
      assertNull(throwable0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException((Throwable) null, "");
      assertEquals("", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertNotNull(undeclaredThrowableException0);
      
      // Undeclared exception!
      try { 
        undeclaredThrowableException0.printStackTrace((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Throwable throwable0 = null;
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable1 = ExceptionUtils.throwableOfThrowable((Throwable) null, class0);
      assertNull(throwable1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("mVnF7;$9X2=.r");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.write(0);
      ExceptionUtils.printRootCauseStackTrace((Throwable) null, (PrintWriter) mockPrintWriter0);
      Class<Error> class1 = Error.class;
      Error error0 = ExceptionUtils.throwableOfThrowable((Throwable) null, class1, 91);
      assertNull(error0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        ExceptionUtils.getStackFrames((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockError mockError0 = new MockError("T.sn5q+:O]");
      assertNotNull(mockError0);
      
      MockThrowable mockThrowable0 = new MockThrowable("T.sn5q+:O]", mockError0);
      assertNotNull(mockThrowable0);
      
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      mockError0.printStackTrace();
      StackTraceElement stackTraceElement0 = new StackTraceElement("o", "o", "\"", (-776));
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals((-776), stackTraceElement0.getLineNumber());
      assertEquals("o.o(\")", stackTraceElement0.toString());
      assertEquals("o", stackTraceElement0.getClassName());
      assertEquals("\"", stackTraceElement0.getFileName());
      assertEquals("o", stackTraceElement0.getMethodName());
      assertNotNull(stackTraceElement0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T.sn5q+:O]");
      assertNotNull(mockPrintWriter0);
      
      MockThrowable.replacement_printStackTrace((Throwable) mockThrowable0, (PrintWriter) mockPrintWriter0);
      assertEquals("T.sn5q+:O]", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: T.sn5q+:O]", mockThrowable0.toString());
      
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      assertEquals("T.sn5q+:O]", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: T.sn5q+:O]", mockThrowable0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals((-776), stackTraceElement0.getLineNumber());
      assertEquals("o.o(\")", stackTraceElement0.toString());
      assertEquals("o", stackTraceElement0.getClassName());
      assertEquals("\"", stackTraceElement0.getFileName());
      assertEquals("o", stackTraceElement0.getMethodName());
      
      Class<UndeclaredThrowableException> class0 = UndeclaredThrowableException.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<?>) class0);
      assertEquals((-1), int0);
      assertEquals("T.sn5q+:O]", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: T.sn5q+:O]", mockThrowable0.toString());
      
      Class<Error> class1 = Error.class;
      Error error0 = ExceptionUtils.throwableOfThrowable((Throwable) mockError0, class1);
      assertNull(error0);
      
      List<Throwable> list0 = ExceptionUtils.getThrowableList((Throwable) null);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String[] stringArray0 = ExceptionUtils.getStackFrames((Throwable) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException((Throwable) null);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertNotNull(undeclaredThrowableException0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) undeclaredThrowableException0);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "HXUv9=@3+sl)?";
      stringArray0[1] = "h;bL4%f";
      stringArray0[2] = "double";
      stringArray0[3] = "D]";
      stringArray0[4] = "";
      stringArray0[5] = "2u";
      stringArray0[6] = "void";
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockError0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNull(throwable0);
      
      Throwable throwable1 = mockError0.initCause((Throwable) null);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable1.toString());
      assertNull(throwable1.getMessage());
      assertNotNull(throwable1);
      
      String string0 = ExceptionUtils.getRootCauseMessage(mockError0);
      assertEquals("MockError: ", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.printRootCauseStackTrace(throwable1, (PrintWriter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The PrintWriter must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Throwable throwable0 = null;
      String string0 = ExceptionUtils.getRootCauseMessage((Throwable) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = ExceptionUtils.getRootCauseMessage((Throwable) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.removeCommonFrames((List<String>) null, (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The List must not be null
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      ExceptionUtils.removeCommonFrames(linkedList0, linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = ExceptionUtils.getDefaultCauseMethodNames();
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) null, (String[]) null);
      assertNull(throwable0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, (Throwable) null);
      assertNotNull(mockRuntimeException0);
      
      MockThrowable mockThrowable0 = new MockThrowable(mockRuntimeException0);
      assertNotNull(mockThrowable0);
      
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable1 = ExceptionUtils.throwableOfType((Throwable) mockThrowable0, class0, (-421));
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", throwable1.toString());
      assertSame(mockThrowable0, throwable1);
      assertSame(throwable1, mockThrowable0);
      assertNotNull(throwable1);
      
      ExceptionUtils.printRootCauseStackTrace(throwable1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", throwable1.toString());
      assertSame(mockThrowable0, throwable1);
      assertSame(throwable1, mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException("T8Fh~ZWg", mockRuntimeException0);
      assertNotNull(mockRuntimeException1);
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      
      MockRuntimeException mockRuntimeException2 = new MockRuntimeException(mockRuntimeException1);
      assertNotNull(mockRuntimeException2);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      assertFalse(mockRuntimeException2.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException2.equals((Object)mockRuntimeException0));
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockRuntimeException2);
      assertNull(undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNotNull(undeclaredThrowableException0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException2));
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException2));
      assertFalse(mockRuntimeException2.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException2.equals((Object)mockRuntimeException0));
      
      MockThrowable mockThrowable0 = new MockThrowable(undeclaredThrowableException0);
      assertNotNull(mockThrowable0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException2));
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException2));
      assertFalse(mockRuntimeException2.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException2.equals((Object)mockRuntimeException0));
      
      Class<Throwable> class0 = Throwable.class;
      boolean boolean0 = ExceptionUtils.hasCause(mockThrowable0, class0);
      assertTrue(boolean0);
      assertNull(undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertEquals("java.lang.reflect.UndeclaredThrowableException", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.lang.reflect.UndeclaredThrowableException", mockThrowable0.toString());
      assertNotSame(mockRuntimeException0, mockRuntimeException2);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertNotSame(mockRuntimeException1, mockRuntimeException0);
      assertNotSame(mockRuntimeException1, mockRuntimeException2);
      assertNotSame(mockRuntimeException2, mockRuntimeException1);
      assertNotSame(mockRuntimeException2, mockRuntimeException0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException2));
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException2));
      assertFalse(mockRuntimeException2.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException2.equals((Object)mockRuntimeException0));
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("y(IW&=", false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockRuntimeException2, (PrintWriter) mockPrintWriter0);
      assertNotSame(mockRuntimeException0, mockRuntimeException2);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertNotSame(mockRuntimeException1, mockRuntimeException0);
      assertNotSame(mockRuntimeException1, mockRuntimeException2);
      assertNotSame(mockRuntimeException2, mockRuntimeException1);
      assertNotSame(mockRuntimeException2, mockRuntimeException0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException2));
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException2));
      assertFalse(mockRuntimeException2.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException2.equals((Object)mockRuntimeException0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      MockThrowable mockThrowable0 = new MockThrowable("", mockError0);
      assertNotNull(mockThrowable0);
      
      mockError0.addSuppressed(mockThrowable0);
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      
      Throwable throwable0 = ExceptionUtils.getRootCause(mockError0);
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      assertNotNull(throwable0);
      
      Class<UndeclaredThrowableException> class0 = UndeclaredThrowableException.class;
      UndeclaredThrowableException undeclaredThrowableException0 = ExceptionUtils.throwableOfThrowable(throwable0, class0, 751);
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      assertNull(undeclaredThrowableException0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("1jU%Y_2A77QO5");
      assertNotNull(mockThrowable0);
      
      mockThrowable0.printStackTrace();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 1jU%Y_2A77QO5", mockThrowable0.toString());
      assertEquals("1jU%Y_2A77QO5", mockThrowable0.getMessage());
      
      Throwable throwable0 = mockThrowable0.fillInStackTrace();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 1jU%Y_2A77QO5", mockThrowable0.toString());
      assertEquals("1jU%Y_2A77QO5", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 1jU%Y_2A77QO5", throwable0.toString());
      assertEquals("1jU%Y_2A77QO5", throwable0.getMessage());
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      assertNotNull(throwable0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1jU%Y_2A77QO5";
      stringArray0[1] = "1jU%Y_2A77QO5";
      stringArray0[2] = "1jU%Y_2A77QO5";
      stringArray0[3] = "1jU%Y_2A77QO5";
      stringArray0[4] = "1jU%Y_2A77QO5";
      stringArray0[6] = "1jU%Y_2A77QO5";
      Throwable throwable1 = ExceptionUtils.getCause((Throwable) mockThrowable0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 1jU%Y_2A77QO5", mockThrowable0.toString());
      assertEquals("1jU%Y_2A77QO5", mockThrowable0.getMessage());
      assertSame(mockThrowable0, throwable0);
      assertNull(throwable1);
      
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.replacement_getStackTrace((Throwable) null);
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      String[] stringArray1 = ExceptionUtils.getStackFrames((Throwable) null);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = ExceptionUtils.getStackFrames("1jU%Y_2A77QO5");
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String[] stringArray3 = ExceptionUtils.getDefaultCauseMethodNames();
      assertEquals(12, stringArray3.length);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotNull(stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfType((Throwable) null, class0);
      assertNull(throwable0);
      
      Throwable throwable1 = ExceptionUtils.getCause((Throwable) null);
      assertNull(throwable1);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException((Throwable) null, "");
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertEquals("", undeclaredThrowableException0.getMessage());
      assertNotNull(undeclaredThrowableException0);
      
      MockError mockError0 = new MockError("", undeclaredThrowableException0);
      assertNotNull(mockError0);
      
      StackTraceElement[] stackTraceElementArray0 = mockError0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertEquals("", undeclaredThrowableException0.getMessage());
      assertNotNull(stackTraceElementArray0);
      
      Throwable[] throwableArray0 = mockError0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertEquals("", undeclaredThrowableException0.getMessage());
      assertNotNull(throwableArray0);
      
      String string0 = ExceptionUtils.getMessage(mockError0);
      assertEquals("MockError: ", string0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertEquals("", undeclaredThrowableException0.getMessage());
      assertNotNull(string0);
      
      Throwable throwable2 = mockError0.fillInStackTrace();
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertEquals("", undeclaredThrowableException0.getMessage());
      assertSame(mockError0, throwable2);
      assertSame(throwable2, mockError0);
      assertNotNull(throwable2);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) null);
      Throwable[] throwableArray1 = undeclaredThrowableException0.getSuppressed();
      assertEquals(0, throwableArray1.length);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertEquals("", undeclaredThrowableException0.getMessage());
      assertSame(throwableArray1, throwableArray0);
      assertNotNull(throwableArray1);
      
      Throwable throwable3 = ExceptionUtils.getRootCause((Throwable) null);
      assertNull(throwable3);
      
      MockError mockError1 = new MockError("MockError: ");
      assertNotNull(mockError1);
      assertFalse(mockError1.equals((Object)throwable2));
      assertFalse(mockError1.equals((Object)mockError0));
      
      StackTraceElement[] stackTraceElementArray1 = mockError0.getStackTrace();
      assertEquals(3, stackTraceElementArray1.length);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertEquals("", undeclaredThrowableException0.getMessage());
      assertNotSame(mockError0, mockError1);
      assertSame(mockError0, throwable2);
      assertSame(stackTraceElementArray1, stackTraceElementArray0);
      assertNotNull(stackTraceElementArray1);
      assertFalse(mockError0.equals((Object)mockError1));
      
      Class<Object> class1 = Object.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockError1, (Class<?>) class1);
      assertEquals(0, int0);
      assertNotSame(mockError1, throwable2);
      assertNotSame(mockError1, mockError0);
      assertFalse(mockError1.equals((Object)throwable2));
      assertFalse(mockError1.equals((Object)mockError0));
      
      Throwable throwable4 = mockError0.fillInStackTrace();
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertEquals("", undeclaredThrowableException0.getMessage());
      assertSame(throwable4, throwable2);
      assertSame(throwable4, mockError0);
      assertNotSame(throwable4, mockError1);
      assertNotSame(mockError0, mockError1);
      assertSame(mockError0, throwable4);
      assertSame(mockError0, throwable2);
      assertNotNull(throwable4);
      assertFalse(throwable4.equals((Object)mockError1));
      assertFalse(mockError0.equals((Object)mockError1));
      
      StackTraceElement[] stackTraceElementArray2 = undeclaredThrowableException0.getStackTrace();
      assertEquals(13, stackTraceElementArray2.length);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertEquals("", undeclaredThrowableException0.getMessage());
      assertNotSame(stackTraceElementArray2, stackTraceElementArray1);
      assertNotSame(stackTraceElementArray2, stackTraceElementArray0);
      assertNotNull(stackTraceElementArray2);
      assertFalse(stackTraceElementArray2.equals((Object)stackTraceElementArray1));
      assertFalse(stackTraceElementArray2.equals((Object)stackTraceElementArray0));
      
      List<Throwable> list0 = ExceptionUtils.getThrowableList(mockError0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertEquals("", undeclaredThrowableException0.getMessage());
      assertNotSame(mockError0, mockError1);
      assertSame(mockError0, throwable4);
      assertSame(mockError0, throwable2);
      assertNotNull(list0);
      assertFalse(mockError0.equals((Object)mockError1));
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) undeclaredThrowableException0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertEquals("", undeclaredThrowableException0.getMessage());
      
      Class<Error> class2 = Error.class;
      Error error0 = ExceptionUtils.throwableOfThrowable((Throwable) mockError0, class2);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertEquals("", undeclaredThrowableException0.getMessage());
      assertNotSame(mockError0, mockError1);
      assertSame(mockError0, throwable4);
      assertSame(mockError0, throwable2);
      assertNull(error0);
      assertFalse(mockError0.equals((Object)mockError1));
      
      String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace((Throwable) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      List<String> list1 = ExceptionUtils.getStackFrameList((Throwable) null);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(list1.contains(""));
      assertNotNull(list1);
      
      Class<UndeclaredThrowableException> class3 = UndeclaredThrowableException.class;
      UndeclaredThrowableException undeclaredThrowableException1 = ExceptionUtils.throwableOfType(throwable2, class3);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertEquals("", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException1.toString());
      assertEquals("", undeclaredThrowableException1.getMessage());
      assertSame(undeclaredThrowableException0, undeclaredThrowableException1);
      assertNotSame(mockError0, mockError1);
      assertSame(mockError0, throwable4);
      assertSame(mockError0, throwable2);
      assertNotSame(throwable2, mockError1);
      assertSame(throwable2, throwable4);
      assertSame(throwable2, mockError0);
      assertSame(undeclaredThrowableException1, undeclaredThrowableException0);
      assertNotNull(undeclaredThrowableException1);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(throwable2.equals((Object)mockError1));
      
      String[] stringArray1 = ExceptionUtils.getRootCauseStackTrace((Throwable) null);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      Throwable[] throwableArray2 = ExceptionUtils.getThrowables((Throwable) null);
      assertEquals(0, throwableArray2.length);
      assertNotSame(throwableArray2, throwableArray1);
      assertNotSame(throwableArray2, throwableArray0);
      assertNotNull(throwableArray2);
      assertFalse(throwableArray2.equals((Object)throwableArray1));
      assertFalse(throwableArray2.equals((Object)throwableArray0));
      
      String string1 = ExceptionUtils.getStackTrace((Throwable) null);
      assertEquals("<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<RuntimeException> class4 = RuntimeException.class;
      RuntimeException runtimeException0 = ExceptionUtils.throwableOfType((Throwable) mockError1, class4, 6);
      assertNotSame(mockError1, throwable2);
      assertNotSame(mockError1, throwable4);
      assertNotSame(mockError1, mockError0);
      assertNull(runtimeException0);
      assertFalse(mockError1.equals((Object)throwable2));
      assertFalse(mockError1.equals((Object)throwable4));
      assertFalse(mockError1.equals((Object)mockError0));
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) null);
      List<String> list2 = ExceptionUtils.getStackFrameList(undeclaredThrowableException0);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: ", undeclaredThrowableException0.toString());
      assertEquals("", undeclaredThrowableException0.getMessage());
      assertFalse(list2.contains(""));
      assertNotSame(list2, list1);
      assertSame(undeclaredThrowableException0, undeclaredThrowableException1);
      assertNotNull(list2);
      assertTrue(list2.equals((Object)list1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ExceptionUtils.removeCommonFrames(linkedList0, linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ExceptionUtils.throwableOfType((Throwable) mockError0, class0);
      assertNull(runtimeException0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "@=QMxPj3A0");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      PrintWriter printWriter0 = mockPrintWriter0.append('C');
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("/@=QMxPj3A0", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("@=QMxPj3A0", mockFile1.getName());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canExecute());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException("", mockRuntimeException0);
      assertNotNull(mockRuntimeException1);
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfThrowable((Throwable) mockRuntimeException1, class0);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertNotSame(mockRuntimeException1, mockRuntimeException0);
      assertNull(throwable0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Throwable[] throwableArray0 = mockRuntimeException1.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertNotSame(mockRuntimeException1, mockRuntimeException0);
      assertNotNull(throwableArray0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      Throwable throwable1 = ExceptionUtils.getCause((Throwable) null, stringArray0);
      assertEquals(9, stringArray0.length);
      assertNull(throwable1);
      
      MockRuntimeException mockRuntimeException2 = new MockRuntimeException((Throwable) null);
      assertNotNull(mockRuntimeException2);
      assertFalse(mockRuntimeException2.equals((Object)mockRuntimeException0));
      assertFalse(mockRuntimeException2.equals((Object)mockRuntimeException1));
      
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) mockRuntimeException2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = ExceptionUtils.getRootCauseMessage((Throwable) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<UndeclaredThrowableException> class0 = UndeclaredThrowableException.class;
      UndeclaredThrowableException undeclaredThrowableException0 = ExceptionUtils.throwableOfType((Throwable) null, class0);
      assertNull(undeclaredThrowableException0);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) null, (PrintWriter) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExceptionUtils.printRootCauseStackTrace((Throwable) null, (PrintStream) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ExceptionUtils.throwableOfThrowable((Throwable) null, class0, (-1));
      assertNull(runtimeException0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("jy ");
      assertNotNull(mockRuntimeException0);
      
      Class<Integer> class0 = Integer.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockRuntimeException0, (Class<?>) class0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("dH|*");
      assertNotNull(mockRuntimeException0);
      
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockRuntimeException0);
      assertNull(throwable0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "dH|*";
      stringArray0[1] = "dH|*";
      stringArray0[2] = "dH|*";
      stringArray0[3] = "dH|*";
      stringArray0[4] = "dH|*";
      stringArray0[5] = "dH|*";
      Throwable throwable1 = ExceptionUtils.getCause((Throwable) null, stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(throwable1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getDefaultCauseMethodNames();
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("");
      assertNotNull(mockRuntimeException0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockRuntimeException0);
      assertNull(undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNotNull(undeclaredThrowableException0);
      
      String string0 = ExceptionUtils.getRootCauseMessage(undeclaredThrowableException0);
      assertEquals("MockRuntimeException: ", string0);
      assertNull(undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Throwable throwable0 = null;
      Throwable throwable1 = ExceptionUtils.getRootCause((Throwable) null);
      assertNull(throwable1);
      
      ExceptionUtils exceptionUtils0 = new ExceptionUtils();
      assertNotNull(exceptionUtils0);
      
      String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace((Throwable) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      MockThrowable mockThrowable0 = new MockThrowable("getTargetException");
      assertNotNull(mockThrowable0);
      
      Throwable throwable2 = ExceptionUtils.getCause((Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: getTargetException", mockThrowable0.toString());
      assertEquals("getTargetException", mockThrowable0.getMessage());
      assertNull(throwable2);
      
      Throwable throwable3 = mockThrowable0.initCause((Throwable) null);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: getTargetException", mockThrowable0.toString());
      assertEquals("getTargetException", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: getTargetException", throwable3.toString());
      assertEquals("getTargetException", throwable3.getMessage());
      assertSame(mockThrowable0, throwable3);
      assertSame(throwable3, mockThrowable0);
      assertNotNull(throwable3);
      
      String string0 = ExceptionUtils.getStackTrace(mockThrowable0);
      assertEquals("sun.reflect.GeneratedConstructorAccessor45.newInstance(Unknown Source)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: getTargetException", mockThrowable0.toString());
      assertEquals("getTargetException", mockThrowable0.getMessage());
      assertSame(mockThrowable0, throwable3);
      assertNotNull(string0);
      
      Class<Integer> class0 = Integer.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) null, class0, (-2948));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfThrowable((Throwable) mockRuntimeException0, class0);
      assertNull(throwable0);
      
      int int0 = ExceptionUtils.indexOfType((Throwable) mockRuntimeException0, (Class<?>) class0, (-231));
      assertEquals(0, int0);
      
      String[] stringArray0 = ExceptionUtils.getDefaultCauseMethodNames();
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      Throwable throwable1 = ExceptionUtils.getCause((Throwable) mockRuntimeException0, stringArray0);
      assertEquals(12, stringArray0.length);
      assertNull(throwable1);
      
      String[] stringArray1 = ExceptionUtils.getStackFrames((Throwable) null);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = ExceptionUtils.getRootCauseStackTrace((Throwable) null);
      assertEquals(0, stringArray2.length);
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockThrowable0);
      assertNotNull(mockRuntimeException0);
      
      mockThrowable0.addSuppressed(mockRuntimeException0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ExceptionUtils.throwableOfThrowable((Throwable) mockRuntimeException0, class0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(runtimeException0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      String string0 = mockRuntimeException0.getLocalizedMessage();
      assertNull(string0);
      
      Throwable[] throwableArray0 = mockRuntimeException0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      String[] stringArray0 = ExceptionUtils.getStackFrames(mockRuntimeException0);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = ExceptionUtils.getDefaultCauseMethodNames();
      assertEquals(12, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      List<Throwable> list0 = ExceptionUtils.getThrowableList(mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      MockThrowable mockThrowable1 = new MockThrowable("$E^24v;_y", mockThrowable0);
      assertNotNull(mockThrowable1);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      
      // Undeclared exception!
      try { 
        ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable0, (PrintWriter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The PrintWriter must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getStackFrames("Ht{W=mTd");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = ExceptionUtils.getStackTrace((Throwable) null);
      assertEquals("<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string0);
      assertNotNull(string0);
      
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) null);
      assertNull(throwable0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) null, class0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = ExceptionUtils.getStackTrace((Throwable) null);
      assertEquals("<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string0);
      assertNotNull(string0);
      
      int int0 = ExceptionUtils.getThrowableCount((Throwable) null);
      assertEquals(0, int0);
      
      Class<UndeclaredThrowableException> class0 = UndeclaredThrowableException.class;
      int int1 = ExceptionUtils.indexOfType((Throwable) null, class0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = ExceptionUtils.indexOfThrowable((Throwable) null, class0);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string1 = "";
      String[] stringArray0 = ExceptionUtils.getStackFrames("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      int int3 = 0;
      RuntimeException runtimeException0 = ExceptionUtils.throwableOfType((Throwable) null, class1, 0);
      assertNull(runtimeException0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<String> list0 = ExceptionUtils.getStackFrameList((Throwable) null);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(list0.contains(string0));
      assertFalse(list1.contains(string0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      
      ExceptionUtils.removeCommonFrames(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(list0.contains(string0));
      assertFalse(list1.contains(string0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.flush();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true, "<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // <evosuite>.<evosuite>(<evosuite>)
         // <evosuite>.<evosuite>(<evosuite>)
         // <evosuite>.<evosuite>(<evosuite>)
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("ZuHI]J`w77)[>_");
      assertNotNull(mockRuntimeException0);
      
      mockRuntimeException0.printStackTrace();
      Throwable[] throwableArray0 = mockRuntimeException0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      MockThrowable mockThrowable0 = new MockThrowable(mockRuntimeException0);
      assertNotNull(mockThrowable0);
      
      Throwable throwable0 = mockRuntimeException0.initCause(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ZuHI]J`w77)[>_", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: ZuHI]J`w77)[>_", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ZuHI]J`w77)[>_", throwable0.toString());
      assertEquals("ZuHI]J`w77)[>_", throwable0.getMessage());
      assertNotSame(mockThrowable0, throwable0);
      assertNotSame(throwable0, mockThrowable0);
      assertNotNull(throwable0);
      assertFalse(throwable0.equals((Object)mockThrowable0));
      
      String string0 = mockRuntimeException0.toString();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ZuHI]J`w77)[>_", string0);
      assertNotNull(string0);
      
      List<String> list0 = ExceptionUtils.getStackFrameList(mockRuntimeException0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains("ZuHI]J`w77)[>_"));
      assertNotNull(list0);
      
      ExceptionUtils exceptionUtils0 = new ExceptionUtils();
      assertNotNull(exceptionUtils0);
      
      Throwable throwable1 = ExceptionUtils.getCause((Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ZuHI]J`w77)[>_", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: ZuHI]J`w77)[>_", mockThrowable0.toString());
      assertSame(mockRuntimeException0, throwable1);
      assertNotSame(mockThrowable0, throwable0);
      assertSame(throwable1, mockRuntimeException0);
      assertNotNull(throwable1);
      assertFalse(mockThrowable0.equals((Object)throwable0));
      
      Throwable throwable2 = ExceptionUtils.getCause(throwable1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ZuHI]J`w77)[>_", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: ZuHI]J`w77)[>_", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: ZuHI]J`w77)[>_", throwable2.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ZuHI]J`w77)[>_", throwable2.getMessage());
      assertSame(mockRuntimeException0, throwable1);
      assertSame(mockThrowable0, throwable2);
      assertNotSame(mockThrowable0, throwable0);
      assertSame(throwable1, mockRuntimeException0);
      assertNotSame(throwable2, throwable0);
      assertSame(throwable2, mockThrowable0);
      assertNotNull(throwable2);
      assertFalse(mockThrowable0.equals((Object)throwable0));
      assertFalse(throwable2.equals((Object)throwable0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockError mockError0 = new MockError("dLqxp$i");
      assertNotNull(mockError0);
      
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfType((Throwable) mockError0, class0);
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      assertNotNull(throwable0);
      
      Throwable throwable1 = ExceptionUtils.getCause(throwable0);
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      assertNull(throwable1);
      
      String[] stringArray0 = ExceptionUtils.getStackFrames((Throwable) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Throwable throwable2 = ExceptionUtils.getRootCause(throwable0);
      assertSame(mockError0, throwable0);
      assertSame(mockError0, throwable2);
      assertSame(throwable0, mockError0);
      assertSame(throwable0, throwable2);
      assertSame(throwable2, mockError0);
      assertSame(throwable2, throwable0);
      assertNotNull(throwable2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockError mockError0 = new MockError("bMl");
      assertNotNull(mockError0);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockError0);
      Throwable[] throwableArray0 = ExceptionUtils.getThrowables(mockError0);
      assertEquals(1, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      Class<Throwable> class0 = Throwable.class;
      Throwable[] throwableArray1 = mockError0.getSuppressed();
      assertEquals(0, throwableArray1.length);
      assertNotSame(throwableArray1, throwableArray0);
      assertNotNull(throwableArray1);
      assertFalse(throwableArray1.equals((Object)throwableArray0));
      
      int int0 = ExceptionUtils.indexOfType((Throwable) mockError0, (Class<?>) class0, 1477);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "bMl";
      stringArray0[1] = "bMl";
      stringArray0[2] = "bMl";
      stringArray0[3] = "bMl";
      stringArray0[4] = "bMl";
      stringArray0[5] = "bMl";
      stringArray0[6] = "bMl";
      stringArray0[7] = "bMl";
      stringArray0[8] = "bMl";
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockError0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ExceptionUtils exceptionUtils0 = new ExceptionUtils();
      assertNotNull(exceptionUtils0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "v2]OLj1?ep4a(8{`?h", "v2]OLj1?ep4a(8{`?h", (-1574));
      assertEquals((-1574), stackTraceElement0.getLineNumber());
      assertEquals(".v2]OLj1?ep4a(8{`?h(v2]OLj1?ep4a(8{`?h)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("v2]OLj1?ep4a(8{`?h", stackTraceElement0.getMethodName());
      assertEquals("", stackTraceElement0.getClassName());
      assertEquals("v2]OLj1?ep4a(8{`?h", stackTraceElement0.getFileName());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "v2]OLj1?ep4a(8{`?h", "v2]OLj1?ep4a(8{`?h", 1177);
      assertEquals(1177, stackTraceElement1.getLineNumber());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("", stackTraceElement1.getClassName());
      assertEquals("v2]OLj1?ep4a(8{`?h", stackTraceElement1.getMethodName());
      assertEquals(".v2]OLj1?ep4a(8{`?h(v2]OLj1?ep4a(8{`?h:1177)", stackTraceElement1.toString());
      assertEquals("v2]OLj1?ep4a(8{`?h", stackTraceElement1.getFileName());
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[1] = stackTraceElement1;
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      assertEquals(2, stackTraceElementArray0.length);
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockThrowable0);
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertNull(throwable0);
      
      Class<Integer> class0 = Integer.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) null, class0);
      assertEquals((-1), int0);
      
      MockError mockError0 = new MockError(">{$n# I");
      assertNotNull(mockError0);
      
      Class<Throwable> class1 = Throwable.class;
      int int1 = 554;
      Throwable throwable1 = ExceptionUtils.throwableOfType((Throwable) mockError0, class1, 554);
      assertNull(throwable1);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) null);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable("");
      assertNotNull(mockThrowable1);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      
      StackTraceElement[] stackTraceElementArray0 = mockThrowable0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotNull(stackTraceElementArray0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", (-923));
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals((-923), stackTraceElement0.getLineNumber());
      assertEquals(".()", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("", stackTraceElement0.getFileName());
      assertEquals("", stackTraceElement0.getClassName());
      assertNotNull(stackTraceElement0);
      
      mockThrowable1.setOriginForDelegate(stackTraceElement0);
      assertEquals("", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable1.toString());
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals((-923), stackTraceElement0.getLineNumber());
      assertEquals(".()", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("", stackTraceElement0.getFileName());
      assertEquals("", stackTraceElement0.getClassName());
      assertNotSame(mockThrowable1, mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      
      String string0 = mockThrowable1.getLocalizedMessage();
      assertEquals("", string0);
      assertEquals("", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable1.toString());
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNotNull(string0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      
      mockThrowable0.addSuppressed(mockThrowable1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable1.toString());
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) mockThrowable0);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockError mockError0 = new MockError("oER3gW");
      assertNotNull(mockError0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockError0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertNotNull(undeclaredThrowableException0);
      
      Throwable throwable0 = undeclaredThrowableException0.fillInStackTrace();
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertNull(throwable0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException", throwable0.toString());
      assertSame(undeclaredThrowableException0, throwable0);
      assertSame(throwable0, undeclaredThrowableException0);
      assertNotNull(throwable0);
      
      String string0 = mockError0.getLocalizedMessage();
      assertEquals("oER3gW", string0);
      assertNotNull(string0);
      
      mockError0.addSuppressed(undeclaredThrowableException0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertSame(undeclaredThrowableException0, throwable0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfThrowable((Throwable) mockThrowable0, class0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(throwable0);
      
      String string0 = ExceptionUtils.getMessage((Throwable) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfThrowable((Throwable) mockThrowable0, class0, 2);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNull(throwable0);
      
      String[] stringArray0 = ExceptionUtils.getStackFrames((Throwable) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Class<Throwable> class1 = Throwable.class;
      Throwable throwable1 = ExceptionUtils.throwableOfThrowable((Throwable) null, class1);
      assertSame(class1, class0);
      assertNull(throwable1);
      
      boolean boolean0 = ExceptionUtils.hasCause((Throwable) null, class1);
      assertFalse(boolean0);
      assertSame(class1, class0);
      
      int int0 = ExceptionUtils.getThrowableCount(mockThrowable0);
      assertEquals(1, int0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      
      Class<RuntimeException> class2 = RuntimeException.class;
      boolean boolean1 = ExceptionUtils.hasCause((Throwable) null, class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = ExceptionUtils.indexOfType((Throwable) mockThrowable0, (Class<?>) class2, 1);
      assertEquals((-1), int1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfType((Throwable) mockRuntimeException0, class0, (-264));
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      assertNotNull(throwable0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(throwable0);
      assertNull(undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNotNull(undeclaredThrowableException0);
      
      Throwable throwable1 = ExceptionUtils.getRootCause(undeclaredThrowableException0);
      assertNull(undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertSame(mockRuntimeException0, throwable0);
      assertSame(mockRuntimeException0, throwable1);
      assertSame(throwable0, throwable1);
      assertSame(throwable0, mockRuntimeException0);
      assertSame(throwable1, throwable0);
      assertSame(throwable1, mockRuntimeException0);
      assertNotNull(throwable1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfType((Throwable) null, class0);
      assertNull(throwable0);
      
      MockThrowable mockThrowable0 = new MockThrowable((String) null, (Throwable) null);
      assertNotNull(mockThrowable0);
      
      Throwable[] throwableArray0 = ExceptionUtils.getThrowables(mockThrowable0);
      assertEquals(1, throwableArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNotNull(throwableArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockError0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertNotNull(undeclaredThrowableException0);
      
      Class<UndeclaredThrowableException> class0 = UndeclaredThrowableException.class;
      UndeclaredThrowableException undeclaredThrowableException1 = ExceptionUtils.throwableOfType((Throwable) undeclaredThrowableException0, class0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException0.toString());
      assertNull(undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException", undeclaredThrowableException1.toString());
      assertNull(undeclaredThrowableException1.getMessage());
      assertSame(undeclaredThrowableException0, undeclaredThrowableException1);
      assertSame(undeclaredThrowableException1, undeclaredThrowableException0);
      assertNotNull(undeclaredThrowableException1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      Throwable throwable0 = mockThrowable0.initCause(mockError0);
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", throwable0.toString());
      assertEquals("", throwable0.getMessage());
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      assertNotNull(throwable0);
      
      String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace(mockThrowable0);
      assertEquals(2, stringArray0.length);
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertSame(mockThrowable0, throwable0);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.removeCommonFrames((List<String>) null, (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The List must not be null
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = ExceptionUtils.getStackTrace((Throwable) null);
      assertEquals("<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string0);
      assertNotNull(string0);
      
      Class<UndeclaredThrowableException> class0 = UndeclaredThrowableException.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) null, class0, 1166);
      assertEquals((-1), int0);
      
      String string1 = ExceptionUtils.getMessage((Throwable) null);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      MockError mockError1 = new MockError(mockError0);
      assertNotNull(mockError1);
      assertFalse(mockError1.equals((Object)mockError0));
      
      MockThrowable mockThrowable0 = new MockThrowable(mockError1);
      assertNotNull(mockThrowable0);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(mockError1.equals((Object)mockError0));
      
      Throwable throwable0 = mockError1.getCause();
      assertNotSame(mockError0, mockError1);
      assertSame(mockError0, throwable0);
      assertNotSame(mockError1, mockError0);
      assertNotSame(mockError1, throwable0);
      assertSame(throwable0, mockError0);
      assertNotSame(throwable0, mockError1);
      assertNotNull(throwable0);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(mockError1.equals((Object)mockError0));
      assertFalse(throwable0.equals((Object)mockError1));
      
      Throwable[] throwableArray0 = mockThrowable0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNotSame(mockError0, mockError1);
      assertSame(mockError0, throwable0);
      assertNotSame(mockError1, mockError0);
      assertNotSame(mockError1, throwable0);
      assertNotNull(throwableArray0);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(mockError1.equals((Object)mockError0));
      assertFalse(mockError1.equals((Object)throwable0));
      
      int int0 = ExceptionUtils.getThrowableCount(mockThrowable0);
      assertEquals(3, int0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNotSame(mockError0, mockError1);
      assertSame(mockError0, throwable0);
      assertNotSame(mockError1, mockError0);
      assertNotSame(mockError1, throwable0);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(mockError1.equals((Object)mockError0));
      assertFalse(mockError1.equals((Object)throwable0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      String string0 = ExceptionUtils.getMessage(mockError0);
      assertEquals("MockError: ", string0);
      assertNotNull(string0);
      
      StackTraceElement[] stackTraceElementArray0 = mockError0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      String[] stringArray0 = ExceptionUtils.getStackFrames(mockError0);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      Class<String> class0 = String.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockError0, (Class<?>) class0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("");
      assertNotNull(mockRuntimeException0);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      StackTraceElement[] stackTraceElementArray0 = mockRuntimeException0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      Throwable throwable0 = ExceptionUtils.getRootCause(mockRuntimeException0);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      assertNotNull(throwable0);
      
      String string0 = ExceptionUtils.getRootCauseMessage(throwable0);
      assertEquals("MockRuntimeException: ", string0);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      assertNotNull(string0);
      
      ExceptionUtils exceptionUtils0 = new ExceptionUtils();
      assertNotNull(exceptionUtils0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockRuntimeException0);
      assertNull(throwable0);
      
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      assertNotNull(mockThrowable0);
      
      Throwable throwable1 = ExceptionUtils.getRootCause(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable1.toString());
      assertNull(throwable1.getMessage());
      assertSame(mockThrowable0, throwable1);
      assertSame(throwable1, mockThrowable0);
      assertNotNull(throwable1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.removeCommonFrames((List<String>) null, (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The List must not be null
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getStackFrames("getCause");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("getCause");
      assertNotNull(mockRuntimeException0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockRuntimeException0, "4yQ#A0_h)\"cZ8/g");
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertNotNull(undeclaredThrowableException0);
      
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) undeclaredThrowableException0);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      assertNotNull(throwable0);
      
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable1 = ExceptionUtils.throwableOfThrowable(throwable0, class0, (-1035));
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      assertNull(throwable1);
      
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException("getCause", (Throwable) null);
      assertNotNull(mockRuntimeException1);
      assertFalse(mockRuntimeException1.equals((Object)throwable0));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      
      String string0 = mockRuntimeException1.getMessage();
      assertEquals("getCause", string0);
      assertNotSame(mockRuntimeException1, throwable0);
      assertNotSame(mockRuntimeException1, mockRuntimeException0);
      assertNotNull(string0);
      assertFalse(mockRuntimeException1.equals((Object)throwable0));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      
      List<String> list0 = ExceptionUtils.getStackFrameList(mockRuntimeException1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains("getCause"));
      assertNotSame(mockRuntimeException1, throwable0);
      assertNotSame(mockRuntimeException1, mockRuntimeException0);
      assertNotNull(list0);
      assertFalse(mockRuntimeException1.equals((Object)throwable0));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      
      String string1 = ExceptionUtils.getRootCauseMessage(undeclaredThrowableException0);
      assertEquals("MockRuntimeException: getCause", string1);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(mockRuntimeException0, throwable0);
      assertNotNull(string1);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(string1.equals((Object)string0));
      
      throwable0.addSuppressed(undeclaredThrowableException0);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(mockRuntimeException0, throwable0);
      assertNotSame(throwable0, mockRuntimeException1);
      assertSame(throwable0, mockRuntimeException0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable0.equals((Object)mockRuntimeException1));
      
      String[] stringArray1 = ExceptionUtils.getRootCauseStackTrace(throwable0);
      assertEquals(1, stringArray1.length);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(mockRuntimeException0, throwable0);
      assertNotSame(throwable0, mockRuntimeException1);
      assertSame(throwable0, mockRuntimeException0);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable0.equals((Object)mockRuntimeException1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Class<Throwable> class1 = Throwable.class;
      int int0 = ExceptionUtils.indexOfType(throwable0, class1, 2093);
      assertEquals((-1), int0);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(mockRuntimeException0, throwable0);
      assertNotSame(throwable0, mockRuntimeException1);
      assertSame(throwable0, mockRuntimeException0);
      assertSame(class1, class0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable0.equals((Object)mockRuntimeException1));
      
      String string2 = ExceptionUtils.getStackTrace((Throwable) null);
      assertEquals("<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = ExceptionUtils.indexOfType((Throwable) undeclaredThrowableException0, (Class<?>) class1);
      assertEquals(0, int1);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(class1, class0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(int1 == int0);
      
      String[] stringArray2 = ExceptionUtils.getStackFrames(mockRuntimeException0);
      assertEquals(6, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(mockRuntimeException0, throwable0);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$y%O:byZc");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(throwable0, mockRuntimeException1);
      assertSame(throwable0, mockRuntimeException0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotNull(printWriter0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable0.equals((Object)mockRuntimeException1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockRuntimeException0, printWriter0);
      assertEquals(1, stringArray1.length);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(throwable0, mockRuntimeException1);
      assertSame(throwable0, mockRuntimeException0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable0.equals((Object)mockRuntimeException1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      
      Throwable throwable2 = ExceptionUtils.getCause((Throwable) undeclaredThrowableException0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(mockRuntimeException0, throwable2);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable2, mockRuntimeException0);
      assertNotSame(throwable2, mockRuntimeException1);
      assertSame(throwable2, throwable0);
      assertNotNull(throwable2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable2.equals((Object)mockRuntimeException1));
      
      int int2 = ExceptionUtils.indexOfThrowable(throwable2, class0);
      assertEquals((-1), int2);
      assertEquals(1, stringArray0.length);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(mockRuntimeException0, throwable2);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable2, mockRuntimeException0);
      assertNotSame(throwable2, mockRuntimeException1);
      assertSame(throwable2, throwable0);
      assertSame(class0, class1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable2.equals((Object)mockRuntimeException1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = ExceptionUtils.getRootCauseMessage(throwable0);
      assertEquals("MockRuntimeException: getCause", string3);
      assertEquals("4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: 4yQ#A0_h)\"cZ8/g", undeclaredThrowableException0.toString());
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(mockRuntimeException0, throwable2);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, throwable2);
      assertNotSame(throwable0, mockRuntimeException1);
      assertSame(throwable0, mockRuntimeException0);
      assertNotNull(string3);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable0.equals((Object)mockRuntimeException1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String[] stringArray3 = ExceptionUtils.getDefaultCauseMethodNames();
      assertEquals(12, stringArray3.length);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotNull(stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      
      MockError mockError0 = new MockError("MockRuntimeException: getCause");
      assertNotNull(mockError0);
      
      Throwable throwable3 = ExceptionUtils.getRootCause(mockError0);
      assertSame(mockError0, throwable3);
      assertSame(throwable3, mockError0);
      assertNotNull(throwable3);
      
      Throwable throwable4 = ExceptionUtils.getRootCause(throwable3);
      assertSame(mockError0, throwable4);
      assertSame(mockError0, throwable3);
      assertSame(throwable3, throwable4);
      assertSame(throwable3, mockError0);
      assertSame(throwable4, mockError0);
      assertSame(throwable4, throwable3);
      assertNotNull(throwable4);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfThrowable((Throwable) mockRuntimeException0, class0);
      assertNull(throwable0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("getNextException");
      assertNotNull(mockPrintStream0);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) null, (PrintStream) mockPrintStream0);
      String string0 = mockRuntimeException0.getLocalizedMessage();
      assertNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "getNextException";
      stringArray0[1] = "getNextException";
      stringArray0[2] = "getNextException";
      stringArray0[3] = "getNextException";
      stringArray0[4] = "RgzH/r.L9";
      stringArray0[5] = "getNextException";
      stringArray0[6] = "getNextException";
      Throwable throwable1 = ExceptionUtils.getCause((Throwable) mockRuntimeException0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNull(throwable1);
      
      String string1 = ExceptionUtils.getRootCauseMessage((Throwable) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format("`N", (Object[]) stringArray0);
      assertEquals(7, stringArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) null, printWriter0);
      assertEquals(7, stringArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Throwable throwable0 = null;
      Throwable throwable1 = ExceptionUtils.getCause((Throwable) null);
      assertNull(throwable1);
      
      MockError mockError0 = new MockError((Throwable) null);
      assertNotNull(mockError0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockRuntimeException0, "Search and Replace array lengths don't match: ");
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", undeclaredThrowableException0.toString());
      assertEquals("Search and Replace array lengths don't match: ", undeclaredThrowableException0.getMessage());
      assertNotNull(undeclaredThrowableException0);
      
      MockError mockError0 = new MockError("Search and Replace array lengths don't match: ", undeclaredThrowableException0);
      assertNotNull(mockError0);
      
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockError0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", undeclaredThrowableException0.toString());
      assertEquals("Search and Replace array lengths don't match: ", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", throwable0.toString());
      assertEquals("Search and Replace array lengths don't match: ", throwable0.getMessage());
      assertSame(undeclaredThrowableException0, throwable0);
      assertSame(throwable0, undeclaredThrowableException0);
      assertNotNull(throwable0);
      
      List<String> list0 = ExceptionUtils.getStackFrameList(throwable0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", undeclaredThrowableException0.toString());
      assertEquals("Search and Replace array lengths don't match: ", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", throwable0.toString());
      assertEquals("Search and Replace array lengths don't match: ", throwable0.getMessage());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains("Search and Replace array lengths don't match: "));
      assertSame(undeclaredThrowableException0, throwable0);
      assertSame(throwable0, undeclaredThrowableException0);
      assertNotNull(list0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Search and Replace array lengths don't match: ");
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockError0, (PrintWriter) mockPrintWriter0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", undeclaredThrowableException0.toString());
      assertEquals("Search and Replace array lengths don't match: ", undeclaredThrowableException0.getMessage());
      assertSame(undeclaredThrowableException0, throwable0);
      
      String string0 = ExceptionUtils.getMessage(undeclaredThrowableException0);
      assertEquals("UndeclaredThrowableException: Search and Replace array lengths don't match: ", string0);
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", undeclaredThrowableException0.toString());
      assertEquals("Search and Replace array lengths don't match: ", undeclaredThrowableException0.getMessage());
      assertSame(undeclaredThrowableException0, throwable0);
      assertNotNull(string0);
      
      Class<MockError> class0 = MockError.class;
      MockError mockError1 = ExceptionUtils.throwableOfThrowable((Throwable) mockError0, class0, (-2));
      assertEquals("java.lang.reflect.UndeclaredThrowableException: Search and Replace array lengths don't match: ", undeclaredThrowableException0.toString());
      assertEquals("Search and Replace array lengths don't match: ", undeclaredThrowableException0.getMessage());
      assertSame(undeclaredThrowableException0, throwable0);
      assertSame(mockError0, mockError1);
      assertSame(mockError1, mockError0);
      assertNotNull(mockError1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Throwable throwable0 = null;
      Throwable throwable1 = ExceptionUtils.getRootCause((Throwable) null);
      assertNull(throwable1);
      
      ExceptionUtils exceptionUtils0 = new ExceptionUtils();
      assertNotNull(exceptionUtils0);
      
      String[] stringArray0 = ExceptionUtils.getStackFrames((Throwable) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      MockThrowable mockThrowable0 = new MockThrowable("getTargetException");
      assertNotNull(mockThrowable0);
      
      Throwable throwable2 = ExceptionUtils.getCause((Throwable) mockThrowable0);
      assertEquals("getTargetException", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: getTargetException", mockThrowable0.toString());
      assertNull(throwable2);
      
      Throwable throwable3 = mockThrowable0.initCause((Throwable) null);
      assertEquals("getTargetException", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: getTargetException", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: getTargetException", throwable3.toString());
      assertEquals("getTargetException", throwable3.getMessage());
      assertSame(mockThrowable0, throwable3);
      assertSame(throwable3, mockThrowable0);
      assertNotNull(throwable3);
      
      String string0 = ExceptionUtils.getStackTrace(mockThrowable0);
      assertEquals("sun.reflect.GeneratedConstructorAccessor45.newInstance(Unknown Source)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string0);
      assertEquals("getTargetException", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: getTargetException", mockThrowable0.toString());
      assertSame(mockThrowable0, throwable3);
      assertNotNull(string0);
      
      Class<Integer> class0 = Integer.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) null, class0, (-2948));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockError mockError0 = new MockError("bMl");
      assertNotNull(mockError0);
      
      Throwable[] throwableArray0 = ExceptionUtils.getThrowables(mockError0);
      assertEquals(1, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      Class<Throwable> class0 = Throwable.class;
      MockThrowable mockThrowable0 = new MockThrowable(":px*HF3N~j");
      assertNotNull(mockThrowable0);
      
      Throwable throwable0 = mockError0.initCause(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: :px*HF3N~j", mockThrowable0.toString());
      assertEquals(":px*HF3N~j", mockThrowable0.getMessage());
      assertEquals("bMl", throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: bMl", throwable0.toString());
      assertNotSame(mockThrowable0, throwable0);
      assertNotSame(throwable0, mockThrowable0);
      assertNotNull(throwable0);
      assertFalse(throwable0.equals((Object)mockThrowable0));
      
      int int0 = ExceptionUtils.indexOfType((Throwable) mockError0, (Class<?>) class0, 1477);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "bMl";
      stringArray0[1] = "bMl";
      stringArray0[2] = "bMl";
      stringArray0[3] = "bMl";
      stringArray0[4] = "bMl";
      stringArray0[5] = "bMl";
      stringArray0[6] = "bMl";
      stringArray0[7] = "bMl";
      Throwable throwable1 = ExceptionUtils.getCause((Throwable) mockError0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertNull(throwable1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Throwable throwable0 = ExceptionUtils.getRootCause(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNull(throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      assertNotNull(throwable0);
      
      Throwable throwable1 = ExceptionUtils.getCause(throwable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNull(throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      assertNull(throwable1);
      
      throwable0.printStackTrace();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNull(throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      
      Class<Throwable> class0 = Throwable.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) null, class0, 0);
      assertEquals((-1), int0);
      
      String string0 = ExceptionUtils.getMessage(mockThrowable0);
      assertEquals("MockThrowable: ", string0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertSame(mockThrowable0, throwable0);
      assertNotNull(string0);
      
      Class<Object> class1 = Object.class;
      int int1 = ExceptionUtils.indexOfType((Throwable) mockThrowable0, (Class<?>) class1, 0);
      assertEquals(0, int1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertSame(mockThrowable0, throwable0);
      assertFalse(int1 == int0);
      
      Class<UndeclaredThrowableException> class2 = UndeclaredThrowableException.class;
      boolean boolean1 = ExceptionUtils.hasCause((Throwable) null, class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = ExceptionUtils.getStackTrace(mockThrowable0);
      assertEquals("sun.reflect.GeneratedConstructorAccessor44.newInstance(Unknown Source)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertSame(mockThrowable0, throwable0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = ExceptionUtils.getStackTrace(mockThrowable0);
      assertEquals("sun.reflect.GeneratedConstructorAccessor44.newInstance(Unknown Source)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string2);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertSame(mockThrowable0, throwable0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = ExceptionUtils.getRootCauseMessage((Throwable) null);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      Class<Error> class3 = Error.class;
      Error error0 = ExceptionUtils.throwableOfType((Throwable) mockError0, class3, (-4235));
      assertSame(error0, mockError0);
      assertSame(mockError0, error0);
      assertNotNull(error0);
      
      MockError mockError1 = new MockError("The PrintWriter must not be null");
      assertNotNull(mockError1);
      assertFalse(mockError1.equals((Object)mockError0));
      assertFalse(mockError1.equals((Object)error0));
      
      Class<RuntimeException> class4 = RuntimeException.class;
      int int2 = ExceptionUtils.indexOfType((Throwable) mockError1, (Class<?>) class4);
      assertEquals((-1), int2);
      assertNotSame(mockError1, mockError0);
      assertNotSame(mockError1, error0);
      assertFalse(mockError1.equals((Object)mockError0));
      assertFalse(mockError1.equals((Object)error0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      // Undeclared exception!
      try { 
        Locale.LanguageRange.parse("sun.reflect.GeneratedConstructorAccessor44.newInstance(Unknown Source)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=sun.reflect.generatedconstructoraccessor44.newinstance(unknownsource)
         // <evosuite>.<evosuite>(<evosuite>)
         // <evosuite>.<evosuite>(<evosuite>)
         // <evosuite>.<evosuite>(<evosuite>)
         // <evosuite>.<evosuite>(<evosuite>)
         // <evosuite>.<evosuite>(<evosuite>)
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("+nr'v1#:0$2V");
      assertNotNull(mockRuntimeException0);
      
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockRuntimeException0, "+nr'v1#:0$2V");
      assertEquals("+nr'v1#:0$2V", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: +nr'v1#:0$2V", undeclaredThrowableException0.toString());
      assertNotNull(undeclaredThrowableException0);
      
      StackTraceElement[] stackTraceElementArray0 = undeclaredThrowableException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals("+nr'v1#:0$2V", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: +nr'v1#:0$2V", undeclaredThrowableException0.toString());
      assertNotNull(stackTraceElementArray0);
      
      String string0 = ExceptionUtils.getStackTrace(undeclaredThrowableException0);
      assertEquals("<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string0);
      assertEquals("+nr'v1#:0$2V", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: +nr'v1#:0$2V", undeclaredThrowableException0.toString());
      assertNotNull(string0);
      
      String[] stringArray0 = ExceptionUtils.getStackFrames(undeclaredThrowableException0);
      assertEquals(3, stringArray0.length);
      assertEquals("+nr'v1#:0$2V", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: +nr'v1#:0$2V", undeclaredThrowableException0.toString());
      assertNotNull(stringArray0);
      
      mockRuntimeException0.printStackTrace();
      ExceptionUtils exceptionUtils0 = new ExceptionUtils();
      assertNotNull(exceptionUtils0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("+nr'v1#:0$2V"));
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertEquals(0, linkedList0.size());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(set0.contains("+nr'v1#:0$2V"));
      assertFalse(list0.contains("+nr'v1#:0$2V"));
      assertNotNull(list0);
      
      ExceptionUtils.removeCommonFrames(list0, list0);
      assertEquals(0, linkedList0.size());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(set0.contains("+nr'v1#:0$2V"));
      assertFalse(list0.contains("+nr'v1#:0$2V"));
      
      String string1 = ExceptionUtils.getRootCauseMessage(undeclaredThrowableException0);
      assertEquals("MockRuntimeException: +nr'v1#:0$2V", string1);
      assertEquals("+nr'v1#:0$2V", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: +nr'v1#:0$2V", undeclaredThrowableException0.toString());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = ExceptionUtils.getThrowableCount(undeclaredThrowableException0);
      assertEquals(2, int0);
      assertEquals("+nr'v1#:0$2V", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: +nr'v1#:0$2V", undeclaredThrowableException0.toString());
      
      List<Throwable> list1 = ExceptionUtils.getThrowableList(undeclaredThrowableException0);
      assertEquals("+nr'v1#:0$2V", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: +nr'v1#:0$2V", undeclaredThrowableException0.toString());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ExceptionUtils.throwableOfType((Throwable) mockThrowable0, class0, 2);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNull(runtimeException0);
      
      Class<Error> class1 = Error.class;
      boolean boolean0 = ExceptionUtils.hasCause((Throwable) null, class1);
      assertFalse(boolean0);
      
      String[] stringArray1 = ExceptionUtils.getDefaultCauseMethodNames();
      assertEquals(12, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = ExceptionUtils.getMessage(mockThrowable0);
      assertEquals("MockThrowable: ", string2);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      RuntimeException runtimeException1 = ExceptionUtils.throwableOfThrowable((Throwable) undeclaredThrowableException0, class0);
      assertEquals("+nr'v1#:0$2V", undeclaredThrowableException0.getMessage());
      assertEquals("java.lang.reflect.UndeclaredThrowableException: +nr'v1#:0$2V", undeclaredThrowableException0.toString());
      assertNull(runtimeException1);
      
      Error error0 = ExceptionUtils.throwableOfType((Throwable) null, class1);
      assertNull(error0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) undeclaredThrowableException0);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Ho*V5{|");
      assertNotNull(mockRuntimeException0);
      
      MockError mockError0 = new MockError("Ho*V5{|", mockRuntimeException0);
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.printRootCauseStackTrace((Throwable) mockError0, (PrintWriter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The PrintWriter must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ExceptionUtils exceptionUtils0 = new ExceptionUtils();
      assertNotNull(exceptionUtils0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(I@";
      stringArray0[1] = "f#seqEH* eM:cI&::yC";
      stringArray0[2] = "The validated collection index is invalid: %d";
      stringArray0[3] = "G";
      stringArray0[4] = "3^/\\r5Szg";
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) null, stringArray0);
      assertEquals(5, stringArray0.length);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      assertNotNull(mockRuntimeException0);
      
      String string0 = ExceptionUtils.getRootCauseMessage(mockRuntimeException0);
      assertEquals("MockRuntimeException: ", string0);
      assertNotNull(string0);
      
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockRuntimeException0);
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) null, (Class<?>) null);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockError mockError0 = new MockError("7mFGc");
      ExceptionUtils.getThrowables(mockError0);
      MockThrowable mockThrowable0 = new MockThrowable(mockError0);
      mockError0.initCause(mockThrowable0);
      Class<String> class0 = String.class;
      ExceptionUtils.indexOfType((Throwable) mockError0, (Class<?>) class0, (-365));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast(")YG|;iOrc/@k-KW&");
      ExceptionUtils.removeCommonFrames(linkedList0, linkedList0);
      assertFalse(linkedList0.contains(")YG|;iOrc/@k-KW&"));
      
      ExceptionUtils exceptionUtils0 = new ExceptionUtils();
      MockError mockError0 = new MockError();
      mockError0.toString();
      mockError0.getSuppressed();
      ExceptionUtils.getStackTrace(mockError0);
      mockError0.getMessage();
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockError0);
      mockError0.getSuppressed();
      ExceptionUtils.getMessage(mockError0);
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockError0);
      Class<Object> class0 = Object.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) undeclaredThrowableException0, (Class<?>) class0, 0);
      assertEquals((-1), int0);
  }
}
