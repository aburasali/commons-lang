/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:52:21 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Dimension2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.math.RoundingMode;
import java.net.HttpCookie;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.LongBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.HijrahDate;
import java.time.chrono.MinguoDate;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.ToDoubleFunction;
import java.util.function.ToLongFunction;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectUtils_ESTest extends ObjectUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectUtils.CONST(0.0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Locale locale0 = Locale.ROOT;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) linkedList0);
      ObjectUtils.notEqual(mockDateFormat0, mockDateFormat0);
      ObjectUtils.hashCode((Object) locale0);
      LocalTime localTime0 = MockLocalTime.now();
      Time time0 = Time.valueOf(localTime0);
      ObjectUtils.identityToString((Object) time0);
      ObjectUtils objectUtils0 = new ObjectUtils();
      MockDateFormat mockDateFormat1 = new MockDateFormat();
      MockDateFormat mockDateFormat2 = new MockDateFormat();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockDateFormat2;
      objectArray0[1] = (Object) time0;
      objectArray0[2] = (Object) mockDateFormat0;
      objectArray0[3] = (Object) mockDateFormat2;
      objectArray0[4] = (Object) "java.sql.Time@2";
      objectArray0[5] = (Object) mockDateFormat0;
      objectArray0[6] = (Object) mockDateFormat0;
      objectArray0[7] = (Object) mockDateFormat1;
      ObjectUtils.hashCodeMulti(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectUtils.CONST((byte)31);
      MutableInt mutableInt0 = new MutableInt((int) (byte)31);
      ObjectUtils.CONST('F');
      ObjectUtils.CONST((double) (byte)31);
      ObjectUtils.CONST((-1432.0693954477));
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) mutableInt0;
      mutableInt0.add(0);
      objectArray0[2] = (Object) mutableInt0;
      ObjectUtils.cloneIfPossible(objectArray0[3]);
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) mutableInt0;
      ObjectUtils.anyNotNull(objectArray0);
      ObjectUtils.compare("=]vk2BrmQ@Bwx4KJ", "*");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "H";
      String string1 = "R_cgpw";
      ObjectUtils.compare("H", "R_cgpw", false);
      System.setCurrentTimeMillis((-10));
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 2);
      Comparable<Object>[] comparableArray1 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      ObjectUtils.min(comparableArray1);
      comparableArray0[0] = null;
      ObjectUtils.min(comparableArray0);
      comparableArray0[1] = null;
      ObjectUtils.max(comparableArray0);
      ObjectUtils.min(comparableArray0);
      ObjectUtils.compare((Integer) null, (Integer) null, false);
      ObjectUtils.CONST_SHORT((-621));
      // Undeclared exception!
      try { 
        BitSet.valueOf((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectUtils.firstNonNull(objectArray0);
      objectArray0[0] = null;
      ObjectUtils.anyNotNull(objectArray0);
      ObjectUtils objectUtils0 = new ObjectUtils();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      String string0 = "C(9\"&,=68f)c";
      stringBuilder0.append("C(9\"&,=68f)c");
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = '(';
      stringBuilder0.insert(0, charArray0);
      ObjectUtils.identityToString(stringBuilder0, (Object) objectUtils0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ObjectUtils.clone(locale_FilteringMode0);
      Point point0 = new Point();
      Point point1 = new Point((-3726), (-2907));
      point0.setLocation((Point2D) point1);
      point0.setLocation((Point2D) point1);
      point0.clone();
      ObjectUtils.CONST(point0);
      ObjectUtils.isNotEmpty(locale_FilteringMode0);
      ObjectUtils.CONST(355.42578273949);
      IdentityHashMap<RenderingHints.Key, MutableInt> identityHashMap0 = new IdentityHashMap<RenderingHints.Key, MutableInt>();
      RenderingHints renderingHints0 = new RenderingHints(identityHashMap0);
      ObjectUtils.equals((Object) locale_FilteringMode0, (Object) renderingHints0);
      ObjectUtils.CONST_SHORT(0);
      ObjectUtils.toString((Object) locale_FilteringMode0);
      ObjectUtils.hashCode((Object) "java.util.Locale$FilteringMode@0000000002");
      String string1 = "Exception cloning Cloneable type ";
      ObjectUtils.toString((Object) null, "Exception cloning Cloneable type ");
      ChoiceFormat[] choiceFormatArray0 = new ChoiceFormat[5];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '(';
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.util.Locale$FilteringMode@0000000002";
      stringArray0[1] = "Exception cloning Cloneable type ";
      stringArray0[2] = "java.util.Locale$FilteringMode@0000000002";
      stringArray0[3] = "C(9\"&,=68f)c";
      stringArray0[4] = "Exception cloning Cloneable type ";
      stringArray0[5] = "C(9\"&,=68f)c";
      stringArray0[6] = "java.util.Locale$FilteringMode@0000000002";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectUtils.mode((DecimalFormat[]) null);
      ObjectUtils.toString((Object) null, "");
      Date date0 = new Date((-431L));
      ObjectUtils.compare(date0, date0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-633));
      Integer integer0 = mutableInt0.getValue();
      ObjectUtils.CONST(integer0);
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      // Undeclared exception!
      try { 
        ObjectUtils.clone(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot clone Cloneable type sun.util.locale.provider.RuleBasedBreakIterator
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectUtils.CONST('8');
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 5);
      ObjectUtils.min(comparableArray0);
      comparableArray0[0] = null;
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectUtils.firstNonNull(objectArray0);
      objectArray0[0] = null;
      ObjectUtils.anyNotNull(objectArray0);
      ObjectUtils objectUtils0 = new ObjectUtils();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      stringBuilder0.append("C(9\"&,=68f)c");
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = '(';
      stringBuilder0.insert(0, charArray0);
      ObjectUtils.identityToString(stringBuilder0, (Object) objectUtils0);
      Point point0 = new Point();
      Point point1 = new Point((-3726), (-2907));
      point1.setLocation((Point2D) point0);
      point0.setLocation((Point2D) point1);
      point0.setLocation((Point2D) point1);
      point0.clone();
      ObjectUtils.CONST(point0);
      ObjectUtils.CONST(355.42578273949);
      IdentityHashMap<RenderingHints.Key, MutableInt> identityHashMap0 = new IdentityHashMap<RenderingHints.Key, MutableInt>();
      RenderingHints renderingHints0 = new RenderingHints(identityHashMap0);
      ObjectUtils.CONST_SHORT(0);
      ObjectUtils.isEmpty((Object) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1L, (-1L), 1L, 3015L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      Comparator<Object> comparator1 = Comparator.nullsFirst((Comparator<? super Object>) comparator0);
      Comparator<Collator> comparator2 = Comparator.nullsLast((Comparator<? super Collator>) comparator1);
      Collator[] collatorArray0 = new Collator[2];
      Locale locale0 = Locale.UK;
      Collator collator0 = Collator.getInstance(locale0);
      collatorArray0[0] = collator0;
      ToLongFunction<Object> toLongFunction1 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      collator0.thenComparingLong(toLongFunction1);
      Collator collator1 = Collator.getInstance();
      collatorArray0[1] = collator1;
      Collator.getInstance();
      Collator collator2 = ObjectUtils.median(comparator2, collatorArray0);
      Collator.getInstance(locale0);
      ObjectUtils.hashCodeMulti(collatorArray0);
      ObjectUtils.defaultIfNull(collator1, collator2);
      ObjectUtils.compare((MutableInt) null, (MutableInt) null);
      ObjectUtils.compare("The string %s does not match the pattern %s", "*o$,K`s]Jq?fOTQ7e", true);
      ObjectUtils.allNotNull(collatorArray0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("clone");
      ObjectUtils.toString((Object) choiceFormat0, "");
      ObjectUtils.compare("h5Ki", "h5Ki", false);
      ObjectUtils.CONST_BYTE(114);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      ObjectUtils.CONST_SHORT((-85));
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      HashSet<LinkedList> hashSet1 = ObjectUtils.cloneIfPossible((HashSet<LinkedList>) hashSet0);
      ObjectUtils.isNotEmpty(hashSet1);
      ObjectUtils.CONST((-1206.459));
      Locale locale0 = Locale.ITALY;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      ObjectUtils.toString((Object) dateFormatSymbols0);
      Object[] objectArray0 = new Object[3];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("java.text.DateFormatSymbols@0000000002");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : java.text.
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Comparator<String> comparator0 = Comparator.comparing((Function<? super String, ? extends String>) function0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = " .]SH=^)?TiqT]";
      stringArray0[1] = "V";
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Comparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.US;
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance(locale0);
      // Undeclared exception!
      try { 
        ObjectUtils.cloneIfPossible(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot clone Cloneable type sun.util.locale.provider.RuleBasedBreakIterator
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertNotNull(decimalFormatSymbols0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertNotNull(decimalFormat0);
      
      StringBuffer stringBuffer0 = new StringBuffer(730);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals((-1), fieldPosition0.getField());
      assertNotNull(fieldPosition0);
      
      StringBuffer stringBuffer1 = decimalFormat0.format((-1L), stringBuffer0, fieldPosition0);
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-1", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals((-1), fieldPosition0.getField());
      assertEquals("-1", stringBuffer1.toString());
      assertEquals(2, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ObjectUtils.identityToString(stringBuffer1, (Object) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      String[] stringArray0 = new String[1];
      DateFormatSymbols dateFormatSymbols1 = (DateFormatSymbols)dateFormatSymbols0.clone();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols1.getLocalPatternChars());
      assertNotSame(dateFormatSymbols0, dateFormatSymbols1);
      assertNotSame(dateFormatSymbols1, dateFormatSymbols0);
      assertNotNull(dateFormatSymbols1);
      assertTrue(dateFormatSymbols1.equals((Object)dateFormatSymbols0));
      
      stringArray0[0] = "^";
      dateFormatSymbols0.setEras(stringArray0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotSame(dateFormatSymbols0, dateFormatSymbols1);
      assertEquals(1, stringArray0.length);
      assertFalse(dateFormatSymbols0.equals((Object)dateFormatSymbols1));
      
      DateFormatSymbols dateFormatSymbols2 = (DateFormatSymbols)dateFormatSymbols0.clone();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols2.getLocalPatternChars());
      assertNotSame(dateFormatSymbols0, dateFormatSymbols2);
      assertNotSame(dateFormatSymbols0, dateFormatSymbols1);
      assertNotSame(dateFormatSymbols2, dateFormatSymbols0);
      assertNotSame(dateFormatSymbols2, dateFormatSymbols1);
      assertNotNull(dateFormatSymbols2);
      assertFalse(dateFormatSymbols0.equals((Object)dateFormatSymbols1));
      assertFalse(dateFormatSymbols2.equals((Object)dateFormatSymbols1));
      assertTrue(dateFormatSymbols2.equals((Object)dateFormatSymbols0));
      
      String string0 = ObjectUtils.toString((Object) dateFormatSymbols0, (String) null);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotSame(dateFormatSymbols0, dateFormatSymbols2);
      assertNotSame(dateFormatSymbols0, dateFormatSymbols1);
      assertNotNull(string0);
      assertFalse(dateFormatSymbols0.equals((Object)dateFormatSymbols1));
      assertTrue(dateFormatSymbols0.equals((Object)dateFormatSymbols2));
      
      boolean boolean0 = ObjectUtils.isEmpty("^");
      assertFalse(boolean0);
      
      int int0 = 0;
      MockDate mockDate0 = new MockDate((-1801), 0, (-1801), 0, 0);
      assertNotNull(mockDate0);
      
      int int1 = ObjectUtils.compare(mockDate0, mockDate0, false);
      assertEquals("Sat Jan 25 00:00:00 GMT 94", mockDate0.toString());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      PageAttributes.ColorType pageAttributes_ColorType0 = PageAttributes.ColorType.COLOR;
      assertNotNull(pageAttributes_ColorType0);
      
      PageAttributes.MediaType pageAttributes_MediaType0 = PageAttributes.MediaType.ISO_A4;
      assertNotNull(pageAttributes_MediaType0);
      
      PageAttributes.OrientationRequestedType pageAttributes_OrientationRequestedType0 = PageAttributes.OrientationRequestedType.LANDSCAPE;
      assertNotNull(pageAttributes_OrientationRequestedType0);
      
      PageAttributes.OriginType pageAttributes_OriginType0 = PageAttributes.OriginType.PHYSICAL;
      assertNotNull(pageAttributes_OriginType0);
      
      PageAttributes.PrintQualityType pageAttributes_PrintQualityType0 = PageAttributes.PrintQualityType.NORMAL;
      assertNotNull(pageAttributes_PrintQualityType0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 101;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2;
      PageAttributes pageAttributes0 = null;
      try {
        pageAttributes0 = new PageAttributes(pageAttributes_ColorType0, pageAttributes_MediaType0, pageAttributes_OrientationRequestedType0, pageAttributes_OriginType0, pageAttributes_PrintQualityType0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid value for attribute printerResolution
         //
         verifyException("java.awt.PageAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = ObjectUtils.compare("Supplied value must be a valid byte literal between -32768 and 32767: [", "Cloneable type ", true);
      assertEquals(16, int0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotNull(imageCapabilities0);
      
      ObjectUtils.identityToString((Appendable) pipedWriter0, (Object) imageCapabilities0);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      
      byte byte0 = ObjectUtils.CONST((byte) (-57));
      assertEquals((byte) (-57), byte0);
      
      double double0 = ObjectUtils.CONST((-656.30373977686));
      assertEquals((-656.30373977686), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Rectangle rectangle0 = new Rectangle(115, 115);
      assertEquals(0, rectangle0.y);
      assertEquals(115, rectangle0.height);
      assertEquals(115, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(115.0, rectangle0.getMaxY(), 0.01);
      assertEquals(57.5, rectangle0.getCenterY(), 0.01);
      assertEquals(115.0, rectangle0.getMaxX(), 0.01);
      assertEquals(57.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(115.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(115.0, rectangle0.getHeight(), 0.01);
      assertNotNull(rectangle0);
      
      Rectangle rectangle1 = (Rectangle)ObjectUtils.cloneIfPossible((Object) rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(115, rectangle0.height);
      assertEquals(115, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(115, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(115, rectangle1.height);
      assertEquals(0, rectangle1.x);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(115.0, rectangle0.getMaxY(), 0.01);
      assertEquals(57.5, rectangle0.getCenterY(), 0.01);
      assertEquals(115.0, rectangle0.getMaxX(), 0.01);
      assertEquals(57.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(115.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(115.0, rectangle0.getHeight(), 0.01);
      assertEquals(115.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(115.0, rectangle1.getMaxY(), 0.01);
      assertFalse(rectangle1.isEmpty());
      assertEquals(115.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(57.5, rectangle1.getCenterX(), 0.01);
      assertEquals(115.0, rectangle1.getMaxX(), 0.01);
      assertEquals(57.5, rectangle1.getCenterY(), 0.01);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertNotNull(rectangle1);
      assertTrue(rectangle1.equals((Object)rectangle0));
      
      objectArray0[0] = (Object) rectangle1;
      PageAttributes pageAttributes0 = new PageAttributes();
      assertNotNull(pageAttributes0);
      
      PageAttributes pageAttributes1 = (PageAttributes)ObjectUtils.defaultIfNull((Object) null, (Object) pageAttributes0);
      assertSame(pageAttributes0, pageAttributes1);
      assertSame(pageAttributes1, pageAttributes0);
      assertNotNull(pageAttributes1);
      
      pageAttributes0.setMediaToDefault();
      assertSame(pageAttributes0, pageAttributes1);
      
      rectangle0.setSize(115, 115);
      assertEquals(0, rectangle0.y);
      assertEquals(115, rectangle0.height);
      assertEquals(115, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(115.0, rectangle0.getMaxY(), 0.01);
      assertEquals(57.5, rectangle0.getCenterY(), 0.01);
      assertEquals(115.0, rectangle0.getMaxX(), 0.01);
      assertEquals(57.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(115.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(115.0, rectangle0.getHeight(), 0.01);
      assertNotSame(rectangle0, rectangle1);
      assertTrue(rectangle0.equals((Object)rectangle1));
      
      pageAttributes0.setMediaToDefault();
      assertSame(pageAttributes0, pageAttributes1);
      
      objectArray0[1] = (Object) pageAttributes1;
      boolean boolean0 = ObjectUtils.anyNotNull(objectArray0);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
      
      // Undeclared exception!
      try { 
        MockLocalDate.now((Clock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // clock
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point point0 = new Point();
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotNull(point0);
      
      point0.translate(0, 0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      
      Point point1 = (Point)point0.clone();
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertNotNull(point1);
      assertTrue(point1.equals((Object)point0));
      
      Point point2 = new Point(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertNotNull(point2);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point0));
      
      point0.setLocation(0, 0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotSame(point0, point2);
      assertNotSame(point0, point1);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point0.equals((Object)point2));
      
      Point point3 = (Point)point2.clone();
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      assertEquals(0, point3.y);
      assertEquals(0, point3.x);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point3.getY(), 0.01);
      assertEquals(0.0, point3.getX(), 0.01);
      assertNotSame(point0, point3);
      assertNotSame(point0, point2);
      assertNotSame(point0, point1);
      assertNotSame(point2, point1);
      assertNotSame(point2, point3);
      assertNotSame(point2, point0);
      assertNotSame(point3, point1);
      assertNotSame(point3, point2);
      assertNotSame(point3, point0);
      assertNotNull(point3);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point0.equals((Object)point2));
      assertTrue(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point0));
      assertTrue(point3.equals((Object)point0));
      assertTrue(point3.equals((Object)point2));
      assertTrue(point3.equals((Object)point1));
      
      Point point4 = ObjectUtils.cloneIfPossible(point2);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      assertEquals(0, point4.y);
      assertEquals(0, point4.x);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point4.getX(), 0.01);
      assertEquals(0.0, point4.getY(), 0.01);
      assertNotSame(point0, point3);
      assertNotSame(point0, point4);
      assertNotSame(point0, point2);
      assertNotSame(point0, point1);
      assertNotSame(point2, point4);
      assertNotSame(point2, point1);
      assertNotSame(point2, point3);
      assertNotSame(point2, point0);
      assertNotSame(point4, point1);
      assertNotSame(point4, point3);
      assertNotSame(point4, point0);
      assertNotSame(point4, point2);
      assertNotNull(point4);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point0.equals((Object)point3));
      assertTrue(point0.equals((Object)point2));
      assertTrue(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point3));
      assertTrue(point2.equals((Object)point0));
      assertTrue(point4.equals((Object)point2));
      assertTrue(point4.equals((Object)point1));
      assertTrue(point4.equals((Object)point3));
      assertTrue(point4.equals((Object)point0));
      
      boolean boolean0 = ObjectUtils.isEmpty(point4);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      assertEquals(0, point4.y);
      assertEquals(0, point4.x);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point4.getX(), 0.01);
      assertEquals(0.0, point4.getY(), 0.01);
      assertFalse(boolean0);
      assertNotSame(point0, point3);
      assertNotSame(point0, point4);
      assertNotSame(point0, point2);
      assertNotSame(point0, point1);
      assertNotSame(point2, point4);
      assertNotSame(point2, point1);
      assertNotSame(point2, point3);
      assertNotSame(point2, point0);
      assertNotSame(point4, point1);
      assertNotSame(point4, point3);
      assertNotSame(point4, point0);
      assertNotSame(point4, point2);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point0.equals((Object)point4));
      assertTrue(point0.equals((Object)point3));
      assertTrue(point0.equals((Object)point2));
      assertTrue(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point3));
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point4));
      assertTrue(point4.equals((Object)point2));
      assertTrue(point4.equals((Object)point1));
      assertTrue(point4.equals((Object)point3));
      assertTrue(point4.equals((Object)point0));
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ObjectUtils.anyNotNull(objectArray0);
      assertFalse(boolean1);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotNull(imageCapabilities0);
      
      ImageCapabilities imageCapabilities1 = ObjectUtils.defaultIfNull((ImageCapabilities) null, imageCapabilities0);
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities1.isTrueVolatile());
      assertTrue(imageCapabilities1.isAccelerated());
      assertSame(imageCapabilities0, imageCapabilities1);
      assertSame(imageCapabilities1, imageCapabilities0);
      assertNotNull(imageCapabilities1);
      
      long long0 = ObjectUtils.CONST((long) 0);
      assertEquals(0L, long0);
      
      int int0 = new Integer((-290));
      assertEquals((-290), int0);
      
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
      assertNotNull(objectUtils_Null0);
      
      Point point5 = (Point)point4.clone();
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      assertEquals(0, point4.y);
      assertEquals(0, point4.x);
      assertEquals(0, point5.y);
      assertEquals(0, point5.x);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point4.getX(), 0.01);
      assertEquals(0.0, point4.getY(), 0.01);
      assertEquals(0.0, point5.getX(), 0.01);
      assertEquals(0.0, point5.getY(), 0.01);
      assertNotSame(point0, point3);
      assertNotSame(point0, point4);
      assertNotSame(point0, point2);
      assertNotSame(point0, point5);
      assertNotSame(point0, point1);
      assertNotSame(point2, point4);
      assertNotSame(point2, point1);
      assertNotSame(point2, point3);
      assertNotSame(point2, point5);
      assertNotSame(point2, point0);
      assertNotSame(point4, point1);
      assertNotSame(point4, point3);
      assertNotSame(point4, point5);
      assertNotSame(point4, point0);
      assertNotSame(point4, point2);
      assertNotSame(point5, point0);
      assertNotSame(point5, point4);
      assertNotSame(point5, point1);
      assertNotSame(point5, point3);
      assertNotSame(point5, point2);
      assertNotNull(point5);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point0.equals((Object)point4));
      assertTrue(point0.equals((Object)point3));
      assertTrue(point0.equals((Object)point2));
      assertTrue(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point3));
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point4));
      assertTrue(point4.equals((Object)point2));
      assertTrue(point4.equals((Object)point1));
      assertTrue(point4.equals((Object)point3));
      assertTrue(point4.equals((Object)point0));
      assertTrue(point5.equals((Object)point3));
      assertTrue(point5.equals((Object)point4));
      assertTrue(point5.equals((Object)point1));
      assertTrue(point5.equals((Object)point2));
      assertTrue(point5.equals((Object)point0));
      
      point4.move((-144), (-648));
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      assertEquals((-648), point4.y);
      assertEquals((-144), point4.x);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals((-144.0), point4.getX(), 0.01);
      assertEquals((-648.0), point4.getY(), 0.01);
      assertNotSame(point0, point3);
      assertNotSame(point0, point4);
      assertNotSame(point0, point2);
      assertNotSame(point0, point5);
      assertNotSame(point0, point1);
      assertNotSame(point2, point4);
      assertNotSame(point2, point1);
      assertNotSame(point2, point3);
      assertNotSame(point2, point5);
      assertNotSame(point2, point0);
      assertNotSame(point4, point1);
      assertNotSame(point4, point3);
      assertNotSame(point4, point5);
      assertNotSame(point4, point0);
      assertNotSame(point4, point2);
      assertTrue(point0.equals((Object)point5));
      assertFalse(point0.equals((Object)point4));
      assertTrue(point0.equals((Object)point1));
      assertTrue(point0.equals((Object)point3));
      assertTrue(point0.equals((Object)point2));
      assertTrue(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point3));
      assertFalse(point2.equals((Object)point4));
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point5));
      assertFalse(point4.equals((Object)point1));
      assertFalse(point4.equals((Object)point3));
      assertFalse(point4.equals((Object)point5));
      assertFalse(point4.equals((Object)point0));
      assertFalse(point4.equals((Object)point2));
      
      point4.y = 1;
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(1.0, point4.getY(), 0.01);
      assertEquals((-144.0), point4.getX(), 0.01);
      
      byte byte0 = ObjectUtils.CONST((byte) (-58));
      assertEquals((byte) (-58), byte0);
      
      Dimension dimension0 = new Dimension();
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      Dimension dimension1 = ObjectUtils.CONST(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertSame(dimension0, dimension1);
      assertSame(dimension1, dimension0);
      assertNotNull(dimension1);
      
      Time time0 = null;
      // Undeclared exception!
      try { 
        Time.valueOf("z!q]vwW6_O7C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char char0 = ObjectUtils.CONST('.');
      assertEquals('.', char0);
      
      Insets insets0 = new Insets((-294), (-294), (-294), (-294));
      assertEquals((-294), insets0.right);
      assertEquals((-294), insets0.top);
      assertEquals((-294), insets0.bottom);
      assertEquals((-294), insets0.left);
      assertNotNull(insets0);
      
      insets0.left = (-294);
      Insets insets1 = ObjectUtils.cloneIfPossible(insets0);
      assertEquals((-294), insets0.right);
      assertEquals((-294), insets0.top);
      assertEquals((-294), insets0.bottom);
      assertEquals((-294), insets0.left);
      assertEquals((-294), insets1.left);
      assertEquals((-294), insets1.top);
      assertEquals((-294), insets1.bottom);
      assertEquals((-294), insets1.right);
      assertNotSame(insets0, insets1);
      assertNotSame(insets1, insets0);
      assertNotNull(insets1);
      assertTrue(insets1.equals((Object)insets0));
      
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 0L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<BitSet> comparator0 = Comparator.comparingLong((ToLongFunction<? super BitSet>) toLongFunction0);
      assertNotNull(comparator0);
      
      BitSet[] bitSetArray0 = new BitSet[4];
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      bitSetArray0[0] = bitSet0;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-294);
      longArray0[1] = (long) '.';
      longArray0[2] = (long) '.';
      longArray0[3] = (long) (-294);
      BitSet bitSet1 = BitSet.valueOf(longArray0);
      assertArrayEquals(new long[] {(-294L), 46L, 46L, (-294L)}, longArray0);
      assertEquals(128, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(256, bitSet1.length());
      assertEquals("{1, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 129, 130, 131, 133, 193, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}", bitSet1.toString());
      assertEquals(256, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      bitSetArray0[1] = bitSet1;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-59);
      BitSet bitSet2 = BitSet.valueOf(byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte)102, (byte) (-59)}, byteArray0);
      assertEquals(13, bitSet2.cardinality());
      assertEquals("{0, 1, 2, 4, 5, 9, 10, 13, 14, 16, 18, 22, 23}", bitSet2.toString());
      assertFalse(bitSet2.isEmpty());
      assertEquals(24, bitSet2.length());
      assertEquals(64, bitSet2.size());
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet2);
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      
      bitSetArray0[2] = bitSet2;
      BitSet bitSet3 = new BitSet();
      assertEquals(0, bitSet3.length());
      assertEquals(0, bitSet3.cardinality());
      assertEquals("{}", bitSet3.toString());
      assertTrue(bitSet3.isEmpty());
      assertEquals(64, bitSet3.size());
      assertNotNull(bitSet3);
      assertFalse(bitSet3.equals((Object)bitSet1));
      assertTrue(bitSet3.equals((Object)bitSet0));
      assertFalse(bitSet3.equals((Object)bitSet2));
      
      bitSetArray0[3] = bitSet3;
      BitSet bitSet4 = ObjectUtils.median(comparator0, bitSetArray0);
      assertEquals(0, bitSet4.length());
      assertTrue(bitSet4.isEmpty());
      assertEquals(64, bitSet4.size());
      assertEquals(0, bitSet4.cardinality());
      assertEquals("{}", bitSet4.toString());
      assertNotSame(bitSet4, bitSet2);
      assertNotSame(bitSet4, bitSet3);
      assertNotSame(bitSet4, bitSet1);
      assertSame(bitSet4, bitSet0);
      assertEquals(4, bitSetArray0.length);
      assertNotNull(bitSet4);
      assertFalse(bitSet4.equals((Object)bitSet2));
      assertFalse(bitSet4.equals((Object)bitSet1));
      assertTrue(bitSet4.equals((Object)bitSet3));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-2312);
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE((-2312));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [-2312]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE((-432));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [-432]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char char0 = ObjectUtils.CONST('_');
      assertEquals('_', char0);
      
      short short0 = ObjectUtils.CONST_SHORT(0);
      assertEquals((short)0, short0);
      
      Dimension dimension0 = new Dimension();
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      
      Dimension dimension1 = new Dimension();
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertNotNull(dimension1);
      assertTrue(dimension1.equals((Object)dimension0));
      
      dimension1.width = (int) (short)0;
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      
      dimension1.setSize(1971, (int) (short)0);
      assertEquals(0, dimension1.height);
      assertEquals(1971, dimension1.width);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(1971.0, dimension1.getWidth(), 0.01);
      assertNotSame(dimension1, dimension0);
      assertFalse(dimension1.equals((Object)dimension0));
      
      dimension0.setSize((Dimension2D) dimension1);
      assertEquals(1971, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension1.height);
      assertEquals(1971, dimension1.width);
      assertEquals(1971.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(1971.0, dimension1.getWidth(), 0.01);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      
      Rectangle rectangle0 = new Rectangle(dimension0);
      assertEquals(1971, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(1971, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(1971.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1971.0, rectangle0.getMaxX(), 0.01);
      assertEquals(985.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1971.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertNotNull(rectangle0);
      assertTrue(dimension0.equals((Object)dimension1));
      
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) rectangle0);
      assertEquals(1971, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(1971, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(1971.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1971.0, rectangle0.getMaxX(), 0.01);
      assertEquals(985.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1971.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertFalse(boolean0);
      assertNotSame(dimension0, dimension1);
      assertTrue(dimension0.equals((Object)dimension1));
      
      BreakIterator breakIterator0 = ObjectUtils.mode((BreakIterator[]) null);
      assertNull(breakIterator0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      int int0 = ObjectUtils.compare(locale_FilteringMode0, locale_FilteringMode0);
      assertEquals(0, int0);
      
      short short1 = ObjectUtils.CONST((short)4534);
      assertEquals((short)4534, short1);
      assertFalse(short1 == short0);
      
      boolean boolean1 = ObjectUtils.allNotNull((Object[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 4);
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.FilteringMode> enumSet1 = enumSet0.clone();
      assertEquals(1, enumSet1.size());
      assertEquals(1, enumSet0.size());
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      
      enumSetArray0[1] = enumSet1;
      EnumSet<Locale.FilteringMode> enumSet2 = enumSet1.clone();
      assertEquals(1, enumSet1.size());
      assertEquals(1, enumSet2.size());
      assertEquals(1, enumSet0.size());
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotNull(enumSet2);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertTrue(enumSet2.contains(locale_FilteringMode0));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      
      enumSetArray0[2] = enumSet2;
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet3 = EnumSet.noneOf(class0);
      assertEquals(0, enumSet3.size());
      assertNotSame(enumSet3, enumSet0);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet2);
      assertNotNull(enumSet3);
      assertFalse(enumSet3.equals((Object)enumSet0));
      assertFalse(enumSet3.equals((Object)enumSet1));
      assertFalse(enumSet3.equals((Object)enumSet2));
      assertFalse(enumSet3.contains(locale_FilteringMode0));
      
      enumSetArray0[3] = enumSet3;
      EnumSet<Locale.FilteringMode> enumSet4 = ObjectUtils.mode(enumSetArray0);
      assertEquals(1, enumSet4.size());
      assertNotSame(enumSet4, enumSet3);
      assertSame(enumSet4, enumSet0);
      assertNotSame(enumSet4, enumSet1);
      assertNotSame(enumSet4, enumSet2);
      assertEquals(4, enumSetArray0.length);
      assertNotNull(enumSet4);
      assertFalse(enumSet4.equals((Object)enumSet3));
      assertTrue(enumSet4.equals((Object)enumSet1));
      assertTrue(enumSet4.equals((Object)enumSet2));
      assertTrue(enumSet4.contains(locale_FilteringMode0));
      
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<MockCalendar> comparator0 = Comparator.comparingLong((ToLongFunction<? super MockCalendar>) toLongFunction0);
      assertNotNull(comparator0);
      
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator0, (MockCalendar[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null/empty items
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = null;
      boolean boolean0 = ObjectUtils.allNotNull((Object[]) null);
      assertFalse(boolean0);
      
      Point point0 = new Point(115, 0);
      assertEquals(115, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(115.0, point0.getX(), 0.01);
      assertNotNull(point0);
      
      Point point1 = (Point)point0.clone();
      assertEquals(115, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.y);
      assertEquals(115, point1.x);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(115.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(115.0, point1.getX(), 0.01);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertNotNull(point1);
      assertTrue(point1.equals((Object)point0));
      
      point0.setLocation(115, 115);
      assertEquals(115, point0.x);
      assertEquals(115, point0.y);
      assertEquals(115.0, point0.getY(), 0.01);
      assertEquals(115.0, point0.getX(), 0.01);
      assertNotSame(point0, point1);
      assertFalse(point0.equals((Object)point1));
      
      Point point2 = ObjectUtils.cloneIfPossible(point0);
      assertEquals(115, point0.x);
      assertEquals(115, point0.y);
      assertEquals(115, point2.x);
      assertEquals(115, point2.y);
      assertEquals(115.0, point0.getY(), 0.01);
      assertEquals(115.0, point0.getX(), 0.01);
      assertEquals(115.0, point2.getY(), 0.01);
      assertEquals(115.0, point2.getX(), 0.01);
      assertNotSame(point0, point2);
      assertNotSame(point0, point1);
      assertNotSame(point2, point1);
      assertNotSame(point2, point0);
      assertNotNull(point2);
      assertFalse(point0.equals((Object)point1));
      assertTrue(point2.equals((Object)point0));
      assertFalse(point2.equals((Object)point1));
      
      point0.x = 115;
      assertEquals(115.0, point0.getY(), 0.01);
      assertEquals(115.0, point0.getX(), 0.01);
      
      point0.move(115, 115);
      assertEquals(115, point0.x);
      assertEquals(115, point0.y);
      assertEquals(115.0, point0.getY(), 0.01);
      assertEquals(115.0, point0.getX(), 0.01);
      assertNotSame(point0, point2);
      assertNotSame(point0, point1);
      assertFalse(point0.equals((Object)point1));
      assertTrue(point0.equals((Object)point2));
      
      StringBuilder stringBuilder0 = new StringBuilder(108);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(0L);
      assertEquals("0", stringBuilder0.toString());
      assertEquals("0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01);
      assertEquals(10, gridBagConstraints0.anchor);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01);
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals(1, gridBagConstraints0.gridheight);
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals((-1), gridBagConstraints0.gridx);
      assertEquals(0, gridBagConstraints0.ipady);
      assertNotNull(gridBagConstraints0);
      
      ObjectUtils.identityToString(stringBuilder0, (Object) gridBagConstraints0);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01);
      assertEquals(10, gridBagConstraints0.anchor);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01);
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals(1, gridBagConstraints0.gridheight);
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals((-1), gridBagConstraints0.gridx);
      assertEquals(0, gridBagConstraints0.ipady);
      assertSame(stringBuilder0, stringBuilder1);
      
      boolean boolean1 = ObjectUtils.isEmpty(point0);
      assertEquals(115, point0.x);
      assertEquals(115, point0.y);
      assertEquals(115.0, point0.getY(), 0.01);
      assertEquals(115.0, point0.getX(), 0.01);
      assertFalse(boolean1);
      assertNotSame(point0, point2);
      assertNotSame(point0, point1);
      assertFalse(point0.equals((Object)point1));
      assertTrue(point0.equals((Object)point2));
      assertTrue(boolean1 == boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(30, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(30, charBuffer0.remaining());
      assertEquals(30, charBuffer0.capacity());
      assertEquals(30, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertSame(stringBuilder0, stringBuilder1);
      assertNotNull(charBuffer0);
      
      AbstractMap.SimpleImmutableEntry<CharBuffer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<CharBuffer, String>(charBuffer0, "Cannot clone Cloneable type ");
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(30, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(30, charBuffer0.remaining());
      assertEquals(30, charBuffer0.capacity());
      assertEquals(30, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<EnumSet, MessageFormat> abstractMap_SimpleImmutableEntry1 = ObjectUtils.defaultIfNull((AbstractMap.SimpleImmutableEntry<EnumSet, MessageFormat>) abstractMap_SimpleImmutableEntry0, (AbstractMap.SimpleImmutableEntry<EnumSet, MessageFormat>) abstractMap_SimpleImmutableEntry0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(30, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(30, charBuffer0.remaining());
      assertEquals(30, charBuffer0.capacity());
      assertEquals(30, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertSame(stringBuilder0, stringBuilder1);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      boolean boolean2 = ObjectUtils.isNotEmpty(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(30, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(30, charBuffer0.remaining());
      assertEquals(30, charBuffer0.capacity());
      assertEquals(30, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(boolean2);
      assertSame(stringBuilder0, stringBuilder1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((Appendable) charBuffer0, (Object) charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'o';
      charArray0[2] = 'J';
      charArray0[3] = '~';
      charArray0[4] = 'o';
      charArray0[5] = 'X';
      charArray0[6] = ':';
      charArray0[7] = 'r';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'n', 'o', 'J', '~', 'o', 'X', ':', 'r'}, charArray0);
      assertEquals("noJ~oX:r", stringBuilder0.toString());
      assertEquals("noJ~oX:r", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(8, charArray0.length);
      assertNotNull(stringBuilder1);
      
      int int0 = (-257);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-257), (float) (-257));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -257
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float float0 = ObjectUtils.CONST((-5337.7593F));
      assertEquals((-5337.7593F), float0, 0.01F);
      
      int int0 = (-1);
      Insets insets0 = new Insets(2, (-1), (-1), (-1));
      assertEquals((-1), insets0.right);
      assertEquals(2, insets0.top);
      assertEquals((-1), insets0.bottom);
      assertEquals((-1), insets0.left);
      assertNotNull(insets0);
      
      Insets insets1 = ObjectUtils.CONST(insets0);
      assertEquals((-1), insets0.right);
      assertEquals(2, insets0.top);
      assertEquals((-1), insets0.bottom);
      assertEquals((-1), insets0.left);
      assertEquals(2, insets1.top);
      assertEquals((-1), insets1.right);
      assertEquals((-1), insets1.bottom);
      assertEquals((-1), insets1.left);
      assertSame(insets0, insets1);
      assertSame(insets1, insets0);
      assertNotNull(insets1);
      
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("end < start");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : end < star
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JobAttributes[] jobAttributesArray0 = new JobAttributes[0];
      JobAttributes jobAttributes0 = ObjectUtils.mode(jobAttributesArray0);
      assertEquals(0, jobAttributesArray0.length);
      assertNull(jobAttributes0);
      
      long long0 = ObjectUtils.CONST(2448L);
      assertEquals(2448L, long0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertNotNull(rectangle0);
      
      Rectangle rectangle1 = ObjectUtils.clone(rectangle0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertNotNull(rectangle1);
      assertTrue(rectangle1.equals((Object)rectangle0));
      
      long long1 = ObjectUtils.CONST(1L);
      assertEquals(1L, long1);
      assertFalse(long1 == long0);
      
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 4);
      Comparable<Object> comparable0 = ObjectUtils.min(comparableArray0);
      assertEquals(4, comparableArray0.length);
      assertNull(comparable0);
      
      comparableArray0[0] = null;
      Comparable<Object> comparable1 = ObjectUtils.min(comparableArray0);
      assertEquals(4, comparableArray0.length);
      assertNull(comparable1);
      
      comparableArray0[1] = null;
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isNotEmpty((Object) null);
      assertFalse(boolean0);
      
      float float0 = ObjectUtils.CONST(0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      byte byte0 = ObjectUtils.CONST((byte)0);
      assertEquals((byte)0, byte0);
      
      long long0 = ObjectUtils.CONST(0L);
      assertEquals(0L, long0);
      
      ObjectUtils objectUtils0 = new ObjectUtils();
      assertNotNull(objectUtils0);
      
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 8);
      Comparable<Object> comparable0 = ObjectUtils.min(comparableArray0);
      assertEquals(8, comparableArray0.length);
      assertNull(comparable0);
      
      comparableArray0[0] = null;
      Comparable<Object> comparable1 = ObjectUtils.max(comparableArray0);
      assertEquals(8, comparableArray0.length);
      assertNull(comparable1);
      
      comparableArray0[1] = null;
      Comparable<Object>[] comparableArray1 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 8);
      assertFalse(comparableArray1.equals((Object)comparableArray0));
      
      comparableArray1[0] = null;
      comparableArray1[1] = null;
      comparableArray1[2] = null;
      comparableArray1[3] = null;
      comparableArray1[4] = null;
      comparableArray1[5] = null;
      comparableArray1[6] = null;
      comparableArray1[7] = null;
      Comparable<Object> comparable2 = ObjectUtils.max(comparableArray1);
      assertNotSame(comparableArray1, comparableArray0);
      assertEquals(8, comparableArray1.length);
      assertNull(comparable2);
      assertFalse(comparableArray1.equals((Object)comparableArray0));
      
      comparableArray0[2] = null;
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate(285, 285, 285, 285, 0);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Sun Jul 23 21:00:00 GMT 2209", mockDate0.toString());
      assertNotNull(instant0);
      
      Timestamp timestamp0 = Timestamp.from(instant0);
      assertEquals("Sun Jul 23 21:00:00 GMT 2209", mockDate0.toString());
      assertEquals(0, timestamp0.getNanos());
      assertEquals("2209-07-23 21:00:00.0", timestamp0.toString());
      assertNotNull(timestamp0);
      
      boolean boolean0 = ObjectUtils.isEmpty(timestamp0);
      assertEquals("Sun Jul 23 21:00:00 GMT 2209", mockDate0.toString());
      assertEquals(0, timestamp0.getNanos());
      assertEquals("2209-07-23 21:00:00.0", timestamp0.toString());
      assertFalse(boolean0);
      
      RuleBasedCollator ruleBasedCollator0 = (RuleBasedCollator)Collator.getInstance();
      assertEquals(2, ruleBasedCollator0.getStrength());
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      assertNotNull(ruleBasedCollator0);
      
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = ruleBasedCollator0.thenComparingDouble(toDoubleFunction0);
      assertEquals(2, ruleBasedCollator0.getStrength());
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      assertNotNull(comparator0);
      
      Comparator<ArrayList<JobAttributes>> comparator1 = Comparator.nullsLast((Comparator<? super ArrayList<JobAttributes>>) comparator0);
      assertEquals(2, ruleBasedCollator0.getStrength());
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      assertNotNull(comparator1);
      
      ArrayList<JobAttributes>[] arrayListArray0 = (ArrayList<JobAttributes>[]) Array.newInstance(ArrayList.class, 2);
      ArrayList<JobAttributes> arrayList0 = new ArrayList<JobAttributes>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      arrayListArray0[0] = arrayList0;
      ArrayList<JobAttributes> arrayList1 = new ArrayList<JobAttributes>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      arrayListArray0[1] = arrayList1;
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator1, arrayListArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.ArrayList cannot be cast to java.lang.String
         //
         verifyException("java.text.Collator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)0);
      assertEquals((byte)0, byte0);
      
      ObjectUtils objectUtils0 = new ObjectUtils();
      assertNotNull(objectUtils0);
      
      Date[] dateArray0 = new Date[8];
      Date date0 = new Date((-1321L));
      assertNotNull(date0);
      
      dateArray0[0] = date0;
      LocalDate localDate0 = null;
      // Undeclared exception!
      try { 
        Date.valueOf((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuilder) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot get the toString of a null object
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = ObjectUtils.CONST(1765L);
      assertEquals(1765L, long0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = ObjectUtils.cloneIfPossible(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      
      IdentityHashMap<TimeZone, NumberFormat> identityHashMap0 = new IdentityHashMap<TimeZone, NumberFormat>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      IdentityHashMap<TimeZone, NumberFormat> identityHashMap1 = ObjectUtils.cloneIfPossible(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      assertNotSame(identityHashMap0, identityHashMap1);
      assertNotSame(identityHashMap1, identityHashMap0);
      assertNotNull(identityHashMap1);
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      
      MutableInt mutableInt0 = ObjectUtils.firstNonNull((MutableInt[]) null);
      assertNull(mutableInt0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ObjectUtils.toString(object0, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparable<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
      assertNotNull(objectUtils_Null0);
      
      char char0 = ObjectUtils.CONST('a');
      assertEquals('a', char0);
      
      float float0 = ObjectUtils.CONST(0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      Dimension dimension0 = new Dimension();
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      
      Dimension dimension1 = new Dimension(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertNotNull(dimension1);
      assertTrue(dimension1.equals((Object)dimension0));
      
      Rectangle rectangle0 = new Rectangle(dimension1);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertNotNull(rectangle0);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      
      boolean boolean0 = ObjectUtils.notEqual(rectangle0, objectUtils_Null0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertTrue(boolean0);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      
      // Undeclared exception!
      try { 
        MockHijrahDate.of(0, 0, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid Hijrah month: 0
         //
         verifyException("java.time.chrono.HijrahChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayCountry();
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = ObjectUtils.toString((Object) locale0, "n9r9fu<`F");
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ObjectUtils.mode(objectArray0);
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = ObjectUtils.CONST(object0);
      assertEquals(2, objectArray0.length);
      assertNull(object1);
      
      objectArray0[1] = null;
      boolean boolean0 = ObjectUtils.allNotNull(objectArray0);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      assertNotNull(imageCapabilities0);
      
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      assertNotNull(bufferCapabilities_FlipContents0);
      
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(bufferCapabilities0.isMultiBufferAvailable());
      assertFalse(bufferCapabilities0.isFullScreenRequired());
      assertTrue(bufferCapabilities0.isPageFlipping());
      assertNotNull(bufferCapabilities0);
      
      boolean boolean1 = ObjectUtils.isNotEmpty(bufferCapabilities0);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(bufferCapabilities0.isMultiBufferAvailable());
      assertFalse(bufferCapabilities0.isFullScreenRequired());
      assertTrue(bufferCapabilities0.isPageFlipping());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Comparable<Object> comparable0 = ObjectUtils.min((Comparable<Object>[]) null);
      assertNull(comparable0);
      
      ObjectUtils.hashCode((Object) null);
      byte byte0 = ObjectUtils.CONST((byte)31);
      assertEquals((byte)31, byte0);
      
      Time[] timeArray0 = new Time[1];
      LocalTime localTime0 = MockLocalTime.of(0, 0, (int) (byte)31, 0);
      assertNotNull(localTime0);
      
      Time time0 = Time.valueOf(localTime0);
      assertEquals("00:00:31", time0.toString());
      assertNotNull(time0);
      
      timeArray0[0] = time0;
      Time time1 = ObjectUtils.max(timeArray0);
      assertEquals("00:00:31", time1.toString());
      assertSame(time1, time0);
      assertEquals(1, timeArray0.length);
      assertNotNull(time1);
      
      String string0 = ObjectUtils.toString(object0);
      assertEquals("", string0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      char char0 = ObjectUtils.CONST('e');
      assertEquals('e', char0);
      
      byte byte1 = ObjectUtils.CONST((byte)5);
      assertEquals((byte)5, byte1);
      assertFalse(byte1 == byte0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = ObjectUtils.compare((String) null, "org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals((-1), int0);
      
      byte byte0 = ObjectUtils.CONST_BYTE(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)0);
      assertEquals((short)0, short0);
      
      double double0 = ObjectUtils.CONST(0.0);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = ObjectUtils.CONST(1L);
      assertEquals(1L, long0);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = "7>MnM6_7~;f(";
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, (String) null, "7>MnM6_7~;f(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Dimension>[] linkedListArray0 = (LinkedList<Dimension>[]) Array.newInstance(LinkedList.class, 2);
      LinkedList<Dimension> linkedList0 = new LinkedList<Dimension>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Dimension dimension0 = linkedList0.pollLast();
      assertEquals(0, linkedList0.size());
      assertNull(dimension0);
      
      linkedListArray0[0] = linkedList0;
      LinkedList<Dimension> linkedList1 = new LinkedList<Dimension>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      linkedListArray0[1] = linkedList1;
      LinkedList<Dimension> linkedList2 = ObjectUtils.mode(linkedListArray0);
      assertEquals(0, linkedList2.size());
      assertSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertEquals(2, linkedListArray0.length);
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList1));
      
      byte byte0 = ObjectUtils.CONST_BYTE(115);
      assertEquals((byte)115, byte0);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[7] = locale_FilteringMode7;
      Locale.FilteringMode locale_FilteringMode8 = ObjectUtils.min(locale_FilteringModeArray0);
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode8);
      assertNotSame(locale_FilteringMode8, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode8, locale_FilteringMode6);
      assertSame(locale_FilteringMode8, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode8, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode8, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode8, locale_FilteringMode4);
      assertNotSame(locale_FilteringMode8, locale_FilteringMode5);
      assertNotSame(locale_FilteringMode8, locale_FilteringMode7);
      assertEquals(8, locale_FilteringModeArray0.length);
      assertFalse(locale_FilteringMode8.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode8.equals((Object)locale_FilteringMode6));
      assertFalse(locale_FilteringMode8.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode8.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode8.equals((Object)locale_FilteringMode4));
      assertFalse(locale_FilteringMode8.equals((Object)locale_FilteringMode5));
      assertFalse(locale_FilteringMode8.equals((Object)locale_FilteringMode7));
      
      String string0 = ObjectUtils.identityToString((Object) locale_FilteringMode8);
      assertNotSame(locale_FilteringMode8, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode8, locale_FilteringMode6);
      assertSame(locale_FilteringMode8, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode8, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode8, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode8, locale_FilteringMode4);
      assertNotSame(locale_FilteringMode8, locale_FilteringMode5);
      assertNotSame(locale_FilteringMode8, locale_FilteringMode7);
      assertEquals(8, locale_FilteringModeArray0.length);
      assertNotNull(string0);
      assertFalse(locale_FilteringMode8.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode8.equals((Object)locale_FilteringMode6));
      assertFalse(locale_FilteringMode8.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode8.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode8.equals((Object)locale_FilteringMode4));
      assertFalse(locale_FilteringMode8.equals((Object)locale_FilteringMode5));
      assertFalse(locale_FilteringMode8.equals((Object)locale_FilteringMode7));
      
      Comparable<GridBagConstraints> comparable0 = (Comparable<GridBagConstraints>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Comparable<GridBagConstraints> comparable1 = ObjectUtils.cloneIfPossible(comparable0);
      assertSame(comparable1, comparable0);
      assertNotNull(comparable1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Insets insets0 = new Insets(0, 127, 97, 127);
      assertEquals(0, insets0.top);
      assertEquals(127, insets0.right);
      assertEquals(127, insets0.left);
      assertEquals(97, insets0.bottom);
      assertNotNull(insets0);
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(642, 0, (-516), 97, 1557.85201, 1.0, 97, 642, insets0, 1957, (-516));
      assertEquals(0, insets0.top);
      assertEquals(127, insets0.right);
      assertEquals(127, insets0.left);
      assertEquals(97, insets0.bottom);
      assertEquals(1.0, gridBagConstraints0.weighty, 0.01);
      assertEquals(642, gridBagConstraints0.gridx);
      assertEquals(97, gridBagConstraints0.gridheight);
      assertEquals(1557.85201, gridBagConstraints0.weightx, 0.01);
      assertEquals((-516), gridBagConstraints0.ipady);
      assertEquals(97, gridBagConstraints0.anchor);
      assertEquals(1957, gridBagConstraints0.ipadx);
      assertEquals(0, gridBagConstraints0.gridy);
      assertEquals(642, gridBagConstraints0.fill);
      assertEquals((-516), gridBagConstraints0.gridwidth);
      assertNotNull(gridBagConstraints0);
      
      Object object0 = ObjectUtils.defaultIfNull((Object) "org.apache.commons.lang3.exception.CloneFailedException", (Object) gridBagConstraints0);
      assertEquals(0, insets0.top);
      assertEquals(127, insets0.right);
      assertEquals(127, insets0.left);
      assertEquals(97, insets0.bottom);
      assertEquals(1.0, gridBagConstraints0.weighty, 0.01);
      assertEquals(642, gridBagConstraints0.gridx);
      assertEquals(97, gridBagConstraints0.gridheight);
      assertEquals(1557.85201, gridBagConstraints0.weightx, 0.01);
      assertEquals((-516), gridBagConstraints0.ipady);
      assertEquals(97, gridBagConstraints0.anchor);
      assertEquals(1957, gridBagConstraints0.ipadx);
      assertEquals(0, gridBagConstraints0.gridy);
      assertEquals(642, gridBagConstraints0.fill);
      assertEquals((-516), gridBagConstraints0.gridwidth);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      assertNotNull(objectUtils0);
      
      LinkedHashMap<Insets, Integer>[] linkedHashMapArray0 = (LinkedHashMap<Insets, Integer>[]) Array.newInstance(LinkedHashMap.class, 5);
      LinkedHashMap<Insets, Integer> linkedHashMap0 = new LinkedHashMap<Insets, Integer>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      linkedHashMapArray0[0] = linkedHashMap0;
      LinkedHashMap<Insets, Integer> linkedHashMap1 = new LinkedHashMap<Insets, Integer>(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      assertNotNull(linkedHashMap1);
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      
      linkedHashMapArray0[1] = linkedHashMap1;
      LinkedHashMap<Insets, Integer> linkedHashMap2 = new LinkedHashMap<Insets, Integer>();
      assertTrue(linkedHashMap2.isEmpty());
      assertEquals(0, linkedHashMap2.size());
      assertNotNull(linkedHashMap2);
      assertTrue(linkedHashMap2.equals((Object)linkedHashMap0));
      assertTrue(linkedHashMap2.equals((Object)linkedHashMap1));
      
      linkedHashMapArray0[2] = linkedHashMap2;
      LinkedHashMap<Insets, Integer> linkedHashMap3 = new LinkedHashMap<Insets, Integer>();
      assertTrue(linkedHashMap3.isEmpty());
      assertEquals(0, linkedHashMap3.size());
      assertNotNull(linkedHashMap3);
      assertTrue(linkedHashMap3.equals((Object)linkedHashMap0));
      assertTrue(linkedHashMap3.equals((Object)linkedHashMap1));
      assertTrue(linkedHashMap3.equals((Object)linkedHashMap2));
      
      linkedHashMapArray0[3] = linkedHashMap3;
      LinkedHashMap<Insets, Integer> linkedHashMap4 = new LinkedHashMap<Insets, Integer>();
      assertTrue(linkedHashMap4.isEmpty());
      assertEquals(0, linkedHashMap4.size());
      assertNotNull(linkedHashMap4);
      assertTrue(linkedHashMap4.equals((Object)linkedHashMap3));
      assertTrue(linkedHashMap4.equals((Object)linkedHashMap0));
      assertTrue(linkedHashMap4.equals((Object)linkedHashMap2));
      assertTrue(linkedHashMap4.equals((Object)linkedHashMap1));
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap4.replaceAll(biFunction0);
      assertTrue(linkedHashMap4.isEmpty());
      assertEquals(0, linkedHashMap4.size());
      assertNotSame(linkedHashMap4, linkedHashMap2);
      assertNotSame(linkedHashMap4, linkedHashMap1);
      assertNotSame(linkedHashMap4, linkedHashMap3);
      assertNotSame(linkedHashMap4, linkedHashMap0);
      assertTrue(linkedHashMap4.equals((Object)linkedHashMap3));
      assertTrue(linkedHashMap4.equals((Object)linkedHashMap0));
      assertTrue(linkedHashMap4.equals((Object)linkedHashMap2));
      assertTrue(linkedHashMap4.equals((Object)linkedHashMap1));
      
      Insets insets0 = new Insets((-2973), (-2973), (-771), (-1589));
      assertEquals((-2973), insets0.top);
      assertEquals((-2973), insets0.left);
      assertEquals((-1589), insets0.right);
      assertEquals((-771), insets0.bottom);
      assertNotNull(insets0);
      
      Insets insets1 = new Insets((-5846), (-1059), (-2973), 0);
      assertEquals((-5846), insets1.top);
      assertEquals((-1059), insets1.left);
      assertEquals(0, insets1.right);
      assertEquals((-2973), insets1.bottom);
      assertNotNull(insets1);
      assertFalse(insets1.equals((Object)insets0));
      
      Integer integer0 = linkedHashMap4.put(insets1, (Integer) null);
      assertEquals((-5846), insets1.top);
      assertEquals((-1059), insets1.left);
      assertEquals(0, insets1.right);
      assertEquals((-2973), insets1.bottom);
      assertEquals(1, linkedHashMap4.size());
      assertFalse(linkedHashMap4.isEmpty());
      assertNotSame(linkedHashMap4, linkedHashMap2);
      assertNotSame(linkedHashMap4, linkedHashMap1);
      assertNotSame(linkedHashMap4, linkedHashMap3);
      assertNotSame(linkedHashMap4, linkedHashMap0);
      assertNotSame(insets1, insets0);
      assertNull(integer0);
      assertFalse(linkedHashMap4.equals((Object)linkedHashMap2));
      assertFalse(linkedHashMap4.equals((Object)linkedHashMap1));
      assertFalse(linkedHashMap4.equals((Object)linkedHashMap3));
      assertFalse(linkedHashMap4.equals((Object)linkedHashMap0));
      assertFalse(insets1.equals((Object)insets0));
      
      Integer integer1 = linkedHashMap4.put(insets0, (Integer) (-2973));
      assertEquals((-2973), insets0.top);
      assertEquals((-2973), insets0.left);
      assertEquals((-1589), insets0.right);
      assertEquals((-771), insets0.bottom);
      assertEquals(2, linkedHashMap4.size());
      assertFalse(linkedHashMap4.isEmpty());
      assertNotSame(linkedHashMap4, linkedHashMap2);
      assertNotSame(linkedHashMap4, linkedHashMap1);
      assertNotSame(linkedHashMap4, linkedHashMap3);
      assertNotSame(linkedHashMap4, linkedHashMap0);
      assertNotSame(insets0, insets1);
      assertNull(integer1);
      assertFalse(linkedHashMap4.equals((Object)linkedHashMap2));
      assertFalse(linkedHashMap4.equals((Object)linkedHashMap1));
      assertFalse(linkedHashMap4.equals((Object)linkedHashMap3));
      assertFalse(linkedHashMap4.equals((Object)linkedHashMap0));
      assertFalse(insets0.equals((Object)insets1));
      
      Insets insets2 = new Insets((-2973), (-2973), (-2973), (-2973));
      assertEquals((-2973), insets2.bottom);
      assertEquals((-2973), insets2.top);
      assertEquals((-2973), insets2.right);
      assertEquals((-2973), insets2.left);
      assertNotNull(insets2);
      assertFalse(insets2.equals((Object)insets0));
      assertFalse(insets2.equals((Object)insets1));
      
      Integer integer2 = linkedHashMap1.put(insets2, (Integer) (-2973));
      assertEquals((-2973), insets2.bottom);
      assertEquals((-2973), insets2.top);
      assertEquals((-2973), insets2.right);
      assertEquals((-2973), insets2.left);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertFalse(linkedHashMap1.isEmpty());
      assertEquals(1, linkedHashMap1.size());
      assertNotSame(insets2, insets0);
      assertNotSame(insets2, insets1);
      assertNotSame(linkedHashMap0, linkedHashMap3);
      assertNotSame(linkedHashMap0, linkedHashMap2);
      assertNotSame(linkedHashMap0, linkedHashMap1);
      assertNotSame(linkedHashMap0, linkedHashMap4);
      assertNotSame(linkedHashMap1, linkedHashMap3);
      assertNotSame(linkedHashMap1, linkedHashMap0);
      assertNotSame(linkedHashMap1, linkedHashMap2);
      assertNotSame(linkedHashMap1, linkedHashMap4);
      assertNull(integer2);
      assertFalse(insets2.equals((Object)insets0));
      assertFalse(insets2.equals((Object)insets1));
      assertTrue(linkedHashMap0.equals((Object)linkedHashMap2));
      assertTrue(linkedHashMap0.equals((Object)linkedHashMap3));
      assertFalse(linkedHashMap0.equals((Object)linkedHashMap1));
      assertFalse(linkedHashMap0.equals((Object)linkedHashMap4));
      assertFalse(linkedHashMap1.equals((Object)linkedHashMap3));
      assertFalse(linkedHashMap1.equals((Object)linkedHashMap0));
      assertFalse(linkedHashMap1.equals((Object)linkedHashMap2));
      assertFalse(linkedHashMap1.equals((Object)linkedHashMap4));
      
      linkedHashMapArray0[4] = linkedHashMap4;
      LinkedHashMap<Insets, Integer> linkedHashMap5 = ObjectUtils.firstNonNull(linkedHashMapArray0);
      assertTrue(linkedHashMap5.isEmpty());
      assertEquals(0, linkedHashMap5.size());
      assertNotSame(linkedHashMap5, linkedHashMap4);
      assertNotSame(linkedHashMap5, linkedHashMap3);
      assertSame(linkedHashMap5, linkedHashMap0);
      assertNotSame(linkedHashMap5, linkedHashMap2);
      assertNotSame(linkedHashMap5, linkedHashMap1);
      assertEquals(5, linkedHashMapArray0.length);
      assertNotNull(linkedHashMap5);
      assertTrue(linkedHashMap5.equals((Object)linkedHashMap2));
      assertFalse(linkedHashMap5.equals((Object)linkedHashMap4));
      assertTrue(linkedHashMap5.equals((Object)linkedHashMap3));
      assertFalse(linkedHashMap5.equals((Object)linkedHashMap1));
      
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE(3104);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [3104]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(0);
      assertEquals((byte)0, byte0);
      
      Object[] objectArray0 = new Object[9];
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("GaMjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      DateFormatSymbols dateFormatSymbols1 = (DateFormatSymbols)ObjectUtils.clone((Object) dateFormatSymbols0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("GaMjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("GaMjkHmsSEDFwWxhKzZ", dateFormatSymbols1.getLocalPatternChars());
      assertNotSame(dateFormatSymbols0, dateFormatSymbols1);
      assertNotSame(dateFormatSymbols1, dateFormatSymbols0);
      assertNotNull(dateFormatSymbols1);
      assertTrue(dateFormatSymbols1.equals((Object)dateFormatSymbols0));
      
      objectArray0[0] = (Object) dateFormatSymbols1;
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparing((Function<? super Object, ? extends Integer>) function0);
      assertNotNull(comparator0);
      
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      float float0 = ObjectUtils.CONST(1623.3829F);
      assertEquals(1623.3829F, float0, 0.01F);
      
      short short0 = ObjectUtils.CONST_SHORT(0);
      assertEquals((short)0, short0);
      
      Insets insets0 = new Insets((short)0, 2095, 0, (-593));
      assertEquals((-593), insets0.right);
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.bottom);
      assertEquals(2095, insets0.left);
      assertNotNull(insets0);
      
      Insets insets1 = (Insets)insets0.clone();
      assertEquals((-593), insets0.right);
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.bottom);
      assertEquals(2095, insets0.left);
      assertEquals(0, insets1.bottom);
      assertEquals(2095, insets1.left);
      assertEquals((-593), insets1.right);
      assertEquals(0, insets1.top);
      assertNotSame(insets0, insets1);
      assertNotSame(insets1, insets0);
      assertNotNull(insets1);
      assertTrue(insets1.equals((Object)insets0));
      
      insets0.top = (-593);
      Insets insets2 = (Insets)insets0.clone();
      assertEquals((-593), insets0.right);
      assertEquals((-593), insets0.top);
      assertEquals(0, insets0.bottom);
      assertEquals(2095, insets0.left);
      assertEquals((-593), insets2.right);
      assertEquals(0, insets2.bottom);
      assertEquals((-593), insets2.top);
      assertEquals(2095, insets2.left);
      assertNotSame(insets0, insets2);
      assertNotSame(insets0, insets1);
      assertNotSame(insets2, insets0);
      assertNotSame(insets2, insets1);
      assertNotNull(insets2);
      assertFalse(insets0.equals((Object)insets1));
      assertTrue(insets2.equals((Object)insets0));
      assertFalse(insets2.equals((Object)insets1));
      
      Insets insets3 = ObjectUtils.clone(insets0);
      assertEquals((-593), insets0.right);
      assertEquals((-593), insets0.top);
      assertEquals(0, insets0.bottom);
      assertEquals(2095, insets0.left);
      assertEquals((-593), insets3.top);
      assertEquals((-593), insets3.right);
      assertEquals(2095, insets3.left);
      assertEquals(0, insets3.bottom);
      assertNotSame(insets0, insets3);
      assertNotSame(insets0, insets2);
      assertNotSame(insets0, insets1);
      assertNotSame(insets3, insets0);
      assertNotSame(insets3, insets2);
      assertNotSame(insets3, insets1);
      assertNotNull(insets3);
      assertTrue(insets0.equals((Object)insets2));
      assertFalse(insets0.equals((Object)insets1));
      assertTrue(insets3.equals((Object)insets2));
      assertTrue(insets3.equals((Object)insets0));
      assertFalse(insets3.equals((Object)insets1));
      
      MessageFormat messageFormat0 = new MessageFormat("");
      assertNotNull(messageFormat0);
      
      String string0 = ObjectUtils.identityToString((Object) messageFormat0);
      assertNotNull(string0);
      
      String string1 = null;
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = ObjectUtils.CONST((-1175.9));
      assertEquals((-1175.9), double0, 0.01);
      
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE(2582);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [2582]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ObjectUtils.firstNonNull(objectArray0);
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = ObjectUtils.clone((Object) null);
      assertNull(object1);
      
      objectArray0[1] = null;
      Object object2 = ObjectUtils.cloneIfPossible((Object) null);
      assertNull(object2);
      
      objectArray0[2] = null;
      RuleBasedCollator ruleBasedCollator0 = (RuleBasedCollator)Collator.getInstance();
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      assertEquals(2, ruleBasedCollator0.getStrength());
      assertNotNull(ruleBasedCollator0);
      
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) ruleBasedCollator0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        ObjectUtils.median(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotNull(imageCapabilities0);
      
      ImageCapabilities imageCapabilities1 = (ImageCapabilities)imageCapabilities0.clone();
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities1.isAccelerated());
      assertFalse(imageCapabilities1.isTrueVolatile());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities1, imageCapabilities0);
      assertNotNull(imageCapabilities1);
      assertFalse(imageCapabilities1.equals((Object)imageCapabilities0));
      
      boolean boolean0 = ObjectUtils.equals((Object) imageCapabilities0, (Object) imageCapabilities0);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(boolean0);
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities1));
      
      ObjectUtils.hashCode((Object) imageCapabilities0);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities1));
      
      MockGregorianCalendar[] mockGregorianCalendarArray0 = new MockGregorianCalendar[2];
      int int0 = 370;
      int int1 = 1341;
      int int2 = (-1696);
      int int3 = (-2189);
      int int4 = 97;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(370, "}xA M49KLmdSQ,H{z", 1341, (-1696), 2, (-2189), 370, 1341, 97, 1341, 343);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 1341
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = ObjectUtils.CONST((DateFormatSymbols) null);
      assertNull(dateFormatSymbols0);
      
      long long0 = ObjectUtils.CONST(1611L);
      assertEquals(1611L, long0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ObjectUtils.anyNotNull(objectArray0);
      assertFalse(boolean0);
      assertEquals(0, objectArray0.length);
      
      int int0 = 32767;
      short short0 = ObjectUtils.CONST_SHORT(32767);
      assertEquals((short)32767, short0);
      
      boolean boolean1 = ObjectUtils.CONST(false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte byte0 = (byte) (-79);
      byte byte1 = ObjectUtils.CONST((byte) (-79));
      assertEquals((byte) (-79), byte1);
      assertTrue(byte1 == byte0);
      
      boolean boolean2 = ObjectUtils.anyNotNull(objectArray0);
      assertFalse(boolean2);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      double double0 = ObjectUtils.CONST((double) (byte) (-79));
      assertEquals((-79.0), double0, 0.01);
      
      Function<TimeZone, PageAttributes> function0 = (Function<TimeZone, PageAttributes>) mock(Function.class, new ViolatedAssumptionAnswer());
      RuleBasedCollator ruleBasedCollator0 = (RuleBasedCollator)Collator.getInstance();
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      assertEquals(2, ruleBasedCollator0.getStrength());
      assertNotNull(ruleBasedCollator0);
      
      Comparator<SimpleTimeZone> comparator0 = Comparator.comparing((Function<? super SimpleTimeZone, ? extends PageAttributes>) function0, (Comparator<? super PageAttributes>) ruleBasedCollator0);
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      assertEquals(2, ruleBasedCollator0.getStrength());
      assertNotNull(comparator0);
      
      SimpleTimeZone[] simpleTimeZoneArray0 = new SimpleTimeZone[4];
      String string0 = "m1B0ReJe{IPBvd";
      int int1 = 1930;
      int int2 = 0;
      int int3 = (-3301);
      int int4 = 31;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(31, "m1B0ReJe{IPBvd", 0, (-900), 31, 1930, 0, (-3301), 4919, 0, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 31
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      
      EnumSet<Locale.FilteringMode> enumSet1 = enumSet0.clone();
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      
      enumSetArray0[0] = enumSet1;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean0 = enumSet1.add(locale_FilteringMode1);
      assertEquals(1, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertTrue(boolean0);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(enumSet0.contains(locale_FilteringMode1));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertTrue(enumSet1.contains(locale_FilteringMode1));
      
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.complementOf(enumSet1);
      assertEquals(1, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertEquals(3, enumSet2.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertNotNull(enumSet2);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet0.contains(locale_FilteringMode1));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertTrue(enumSet1.contains(locale_FilteringMode1));
      assertFalse(enumSet2.contains(locale_FilteringMode1));
      
      enumSetArray0[1] = enumSet2;
      EnumSet<Locale.FilteringMode> enumSet3 = ObjectUtils.mode(enumSetArray0);
      assertEquals(2, enumSetArray0.length);
      assertNull(enumSet3);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string0 = "%9a4X(['w^J;\"Y8-tc";
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("%9a4X(['w^J;\"Y8-tc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=%9a4x(['w^j;\"y8-tc
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
      assertNotNull(objectUtils_Null0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectUtils_Null0;
      objectArray0[1] = (Object) objectUtils_Null0;
      objectArray0[2] = (Object) objectUtils_Null0;
      objectArray0[3] = (Object) objectUtils_Null0;
      objectArray0[4] = (Object) objectUtils_Null0;
      objectArray0[5] = (Object) objectUtils_Null0;
      objectArray0[6] = (Object) objectUtils_Null0;
      boolean boolean0 = ObjectUtils.allNotNull(objectArray0);
      assertTrue(boolean0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ObjectUtils.allNotNull(objectArray0);
      assertTrue(boolean1);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      
      JobAttributes jobAttributes0 = new JobAttributes();
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertEquals(1, jobAttributes0.getToPage());
      assertEquals(1, jobAttributes0.getFromPage());
      assertEquals(1, jobAttributes0.getMinPage());
      assertNull(jobAttributes0.getFileName());
      assertNull(jobAttributes0.getPrinter());
      assertEquals(1, jobAttributes0.getCopies());
      assertNotNull(jobAttributes0);
      
      boolean boolean2 = ObjectUtils.isEmpty(jobAttributes0);
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertEquals(1, jobAttributes0.getToPage());
      assertEquals(1, jobAttributes0.getFromPage());
      assertEquals(1, jobAttributes0.getMinPage());
      assertNull(jobAttributes0.getFileName());
      assertNull(jobAttributes0.getPrinter());
      assertEquals(1, jobAttributes0.getCopies());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short) (-75));
      assertEquals((short) (-75), short0);
      
      short short1 = ObjectUtils.CONST_SHORT((-254));
      assertEquals((short) (-254), short1);
      assertFalse(short1 == short0);
      
      int int0 = ObjectUtils.CONST((int) (short) (-75));
      assertEquals((-75), int0);
      
      Comparable<Object> comparable0 = ObjectUtils.max((Comparable<Object>[]) null);
      assertNull(comparable0);
      
      short short2 = ObjectUtils.CONST_SHORT((short) (-254));
      assertEquals((short) (-254), short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      
      Comparable<Object> comparable1 = ObjectUtils.max((Comparable<Object>[]) null);
      assertNull(comparable1);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("Of?y%vyswG=.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=of?y%vyswg=.
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)916);
      assertEquals((short)916, short0);
      
      // Undeclared exception!
      try { 
        Charset.forName("Supplied value must be a valid byte literal between -32768 and 32767: [");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte) (-56));
      assertEquals((byte) (-56), byte0);
      
      int int0 = ObjectUtils.CONST((int) (byte) (-56));
      assertEquals((-56), int0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(5, "");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(5, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set(5, (int) (byte) (-56), (-56), 115, 3136, (int) (byte) (-56));
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(5, simpleTimeZone0.getRawOffset());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=-56,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=-56,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=115,MINUTE=3136,SECOND=-56,MILLISECOND=325,ZONE_OFFSET=5,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      int int1 = ObjectUtils.hashCode((Object) mockGregorianCalendar0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(5, simpleTimeZone0.getRawOffset());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=-56,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=-56,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=115,MINUTE=3136,SECOND=-56,MILLISECOND=325,ZONE_OFFSET=5,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = ObjectUtils.hashCodeMulti((Object[]) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short) (-1126));
      assertEquals((short) (-1126), short0);
      
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 2);
      Comparable<Object> comparable0 = ObjectUtils.min(comparableArray0);
      assertEquals(2, comparableArray0.length);
      assertNull(comparable0);
      
      comparableArray0[0] = null;
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long long0 = ObjectUtils.CONST((-2432L));
      assertEquals((-2432L), long0);
      
      float float0 = ObjectUtils.CONST(455.8F);
      assertEquals(455.8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BreakIterator breakIterator0 = BreakIterator.getWordInstance();
      assertNotNull(breakIterator0);
      
      int int0 = breakIterator0.next((-659));
      assertEquals((-1), int0);
      
      int int1 = ObjectUtils.hashCode((Object) breakIterator0);
      assertFalse(int1 == int0);
      
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
      assertNotNull(objectUtils_Null0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt((-2084));
      assertEquals((-2084), mutableInt0.intValue());
      assertEquals((short) (-2084), mutableInt0.shortValue());
      assertEquals((-2084L), mutableInt0.longValue());
      assertEquals((-2084.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2084), (int)mutableInt0.getValue());
      assertEquals("-2084", mutableInt0.toString());
      assertEquals((-2084), (int)mutableInt0.toInteger());
      assertEquals((byte) (-36), mutableInt0.byteValue());
      assertEquals((-2084.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertEquals((-2084), mutableInt0.intValue());
      assertEquals((short) (-2084), mutableInt0.shortValue());
      assertEquals((-2084L), mutableInt0.longValue());
      assertEquals((-2084.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2084), (int)mutableInt0.getValue());
      assertEquals("-2084", mutableInt0.toString());
      assertEquals((-2084), (int)mutableInt0.toInteger());
      assertEquals((byte) (-36), mutableInt0.byteValue());
      assertEquals((-2084.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2084), (int)mutableInt1.getValue());
      assertEquals((-2084.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-2084.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-2084L), mutableInt1.longValue());
      assertEquals((-2084), (int)mutableInt1.toInteger());
      assertEquals((byte) (-36), mutableInt1.byteValue());
      assertEquals("-2084", mutableInt1.toString());
      assertEquals((short) (-2084), mutableInt1.shortValue());
      assertEquals((-2084), mutableInt1.intValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = ObjectUtils.min(mutableIntArray0);
      assertEquals((-2084), mutableInt2.intValue());
      assertEquals((-2084), (int)mutableInt2.toInteger());
      assertEquals((short) (-2084), mutableInt2.shortValue());
      assertEquals((-2084.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-2084L), mutableInt2.longValue());
      assertEquals((byte) (-36), mutableInt2.byteValue());
      assertEquals((-2084), (int)mutableInt2.getValue());
      assertEquals("-2084", mutableInt2.toString());
      assertEquals((-2084.0F), mutableInt2.floatValue(), 0.01F);
      assertSame(mutableInt2, mutableInt0);
      assertNotSame(mutableInt2, mutableInt1);
      assertEquals(2, mutableIntArray0.length);
      assertNotNull(mutableInt2);
      assertTrue(mutableInt2.equals((Object)mutableInt1));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 3);
      Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0);
      assertEquals(3, comparableArray0.length);
      assertNull(comparable0);
      
      comparableArray0[0] = null;
      Comparable<Object> comparable1 = ObjectUtils.max(comparableArray0);
      assertEquals(3, comparableArray0.length);
      assertNull(comparable1);
      
      comparableArray0[1] = null;
      Comparable<Object> comparable2 = ObjectUtils.max(comparableArray0);
      assertEquals(3, comparableArray0.length);
      assertNull(comparable2);
      
      comparableArray0[2] = null;
      Comparable<Object> comparable3 = ObjectUtils.min(comparableArray0);
      assertEquals(3, comparableArray0.length);
      assertNull(comparable3);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)116);
      assertEquals((byte)116, byte0);
      
      Object[] objectArray0 = new Object[9];
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = ObjectUtils.CONST((Object) null);
      assertNull(object0);
      
      objectArray1[0] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray1[1] = object1;
      Object object2 = ObjectUtils.cloneIfPossible((Object) null);
      assertNull(object2);
      
      objectArray1[2] = null;
      Object object3 = ObjectUtils.mode(objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(3, objectArray1.length);
      assertNull(object3);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray0[0] = null;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      
      objectArray0[1] = object4;
      Object object5 = ObjectUtils.firstNonNull(objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertSame(object5, object4);
      assertNotSame(object5, object1);
      assertEquals(9, objectArray0.length);
      assertNotNull(object5);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(object5.equals((Object)object1));
      
      objectArray0[2] = object5;
      Object object6 = ObjectUtils.CONST((Object) null);
      assertNull(object6);
      
      objectArray0[3] = null;
      Object object7 = ObjectUtils.CONST((Object) null);
      assertNull(object7);
      
      objectArray0[4] = null;
      Object object8 = ObjectUtils.clone((Object) null);
      assertNull(object8);
      
      objectArray0[5] = null;
      Object object9 = new Object();
      assertNotNull(object9);
      assertFalse(object9.equals((Object)object4));
      assertFalse(object9.equals((Object)object5));
      assertFalse(object9.equals((Object)object1));
      
      objectArray0[6] = object9;
      // Undeclared exception!
      try { 
        Time.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = ObjectUtils.compare((MutableInt) null, (MutableInt) null, false);
      assertEquals(0, int0);
      
      long long0 = ObjectUtils.CONST((long) 0);
      assertEquals(0L, long0);
      
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 3);
      Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0);
      assertEquals(3, comparableArray0.length);
      assertNull(comparable0);
      
      comparableArray0[0] = null;
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("Cannot get the toString of a null object");
      assertEquals(0, stringCharacterIterator0.getIndex());
      assertEquals(0, stringCharacterIterator0.getBeginIndex());
      assertEquals(40, stringCharacterIterator0.getEndIndex());
      assertEquals('C', stringCharacterIterator0.current());
      assertNotNull(stringCharacterIterator0);
      
      char char0 = stringCharacterIterator0.first();
      assertEquals(0, stringCharacterIterator0.getIndex());
      assertEquals(0, stringCharacterIterator0.getBeginIndex());
      assertEquals(40, stringCharacterIterator0.getEndIndex());
      assertEquals('C', stringCharacterIterator0.current());
      assertEquals('C', char0);
      
      char char1 = stringCharacterIterator0.previous();
      assertEquals(0, stringCharacterIterator0.getIndex());
      assertEquals(0, stringCharacterIterator0.getBeginIndex());
      assertEquals(40, stringCharacterIterator0.getEndIndex());
      assertEquals('C', stringCharacterIterator0.current());
      assertEquals('\uFFFF', char1);
      assertFalse(char1 == char0);
      
      StringCharacterIterator stringCharacterIterator1 = ObjectUtils.defaultIfNull(stringCharacterIterator0, stringCharacterIterator0);
      assertEquals(0, stringCharacterIterator0.getIndex());
      assertEquals(0, stringCharacterIterator0.getBeginIndex());
      assertEquals(40, stringCharacterIterator0.getEndIndex());
      assertEquals('C', stringCharacterIterator0.current());
      assertEquals(0, stringCharacterIterator1.getBeginIndex());
      assertEquals(0, stringCharacterIterator1.getIndex());
      assertEquals('C', stringCharacterIterator1.current());
      assertEquals(40, stringCharacterIterator1.getEndIndex());
      assertSame(stringCharacterIterator0, stringCharacterIterator1);
      assertSame(stringCharacterIterator1, stringCharacterIterator0);
      assertNotNull(stringCharacterIterator1);
      
      short short0 = ObjectUtils.CONST_SHORT(2);
      assertEquals((short)2, short0);
      
      byte byte0 = ObjectUtils.CONST_BYTE(2);
      assertEquals((byte)2, byte0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("]");
      assertNotNull(mockSimpleDateFormat0);
      
      // Undeclared exception!
      try { 
        MockLocalDateTime.of((-2485), (-2485), (-231), 2, (int) (byte)2, 2226, (-231));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -2485
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(true);
      assertTrue(boolean0);
      
      boolean boolean1 = ObjectUtils.anyNotNull((Object[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ObjectUtils.CONST(0);
      assertEquals(0, int0);
      
      ObjectUtils objectUtils0 = new ObjectUtils();
      assertNotNull(objectUtils0);
      
      BitSet[] bitSetArray0 = new BitSet[4];
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      bitSetArray0[0] = bitSet0;
      BitSet bitSet1 = new BitSet();
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      bitSetArray0[1] = bitSet1;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1372);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1372, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(1372, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1372 cap=1372]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(1372, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      
      BitSet bitSet2 = BitSet.valueOf(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1372, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(1372, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1372 cap=1372]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(1372, byteBuffer0.capacity());
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.length());
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertNotNull(bitSet2);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      
      bitSetArray0[2] = bitSet2;
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1372, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(1372, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1372 cap=1372]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(1372, byteBuffer0.capacity());
      assertFalse(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(171, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(171, longBuffer0.remaining());
      assertEquals(171, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.isDirect());
      assertEquals("java.nio.DirectLongBufferS[pos=0 lim=171 cap=171]", longBuffer0.toString());
      assertNotNull(longBuffer0);
      
      BitSet bitSet3 = BitSet.valueOf(longBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1372, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(1372, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1372 cap=1372]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(1372, byteBuffer0.capacity());
      assertFalse(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(171, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(171, longBuffer0.remaining());
      assertEquals(171, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.isDirect());
      assertEquals("java.nio.DirectLongBufferS[pos=0 lim=171 cap=171]", longBuffer0.toString());
      assertEquals(0, bitSet3.length());
      assertTrue(bitSet3.isEmpty());
      assertEquals(0, bitSet3.size());
      assertEquals("{}", bitSet3.toString());
      assertEquals(0, bitSet3.cardinality());
      assertNotSame(bitSet3, bitSet0);
      assertNotSame(bitSet3, bitSet1);
      assertNotSame(bitSet3, bitSet2);
      assertNotNull(bitSet3);
      assertTrue(bitSet3.equals((Object)bitSet1));
      assertTrue(bitSet3.equals((Object)bitSet2));
      assertTrue(bitSet3.equals((Object)bitSet0));
      
      bitSetArray0[3] = bitSet3;
      BitSet bitSet4 = ObjectUtils.mode(bitSetArray0);
      assertEquals("{}", bitSet4.toString());
      assertEquals(64, bitSet4.size());
      assertTrue(bitSet4.isEmpty());
      assertEquals(0, bitSet4.length());
      assertEquals(0, bitSet4.cardinality());
      assertSame(bitSet4, bitSet0);
      assertNotSame(bitSet4, bitSet2);
      assertNotSame(bitSet4, bitSet3);
      assertNotSame(bitSet4, bitSet1);
      assertEquals(4, bitSetArray0.length);
      assertNotNull(bitSet4);
      assertTrue(bitSet4.equals((Object)bitSet3));
      assertTrue(bitSet4.equals((Object)bitSet1));
      assertTrue(bitSet4.equals((Object)bitSet2));
      
      boolean boolean2 = ObjectUtils.anyNotNull((Object[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = ObjectUtils.identityToString((Object) null);
      assertNull(string0);
      
      byte byte0 = ObjectUtils.CONST((byte) (-1));
      assertEquals((byte) (-1), byte0);
      
      boolean boolean0 = ObjectUtils.CONST(false);
      assertFalse(boolean0);
      
      ObjectUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char char0 = ObjectUtils.CONST('T');
      assertEquals('T', char0);
      
      Insets insets0 = new Insets((-1679), (-1679), (-1679), 32767);
      assertEquals(32767, insets0.right);
      assertEquals((-1679), insets0.bottom);
      assertEquals((-1679), insets0.left);
      assertEquals((-1679), insets0.top);
      assertNotNull(insets0);
      
      Insets insets1 = ObjectUtils.clone(insets0);
      assertEquals(32767, insets0.right);
      assertEquals((-1679), insets0.bottom);
      assertEquals((-1679), insets0.left);
      assertEquals((-1679), insets0.top);
      assertEquals((-1679), insets1.top);
      assertEquals((-1679), insets1.left);
      assertEquals((-1679), insets1.bottom);
      assertEquals(32767, insets1.right);
      assertNotSame(insets0, insets1);
      assertNotSame(insets1, insets0);
      assertNotNull(insets1);
      assertTrue(insets1.equals((Object)insets0));
      
      Object[] objectArray0 = new Object[5];
      insets1.set((-1679), (-604), 32767, (-1679));
      assertEquals(32767, insets0.right);
      assertEquals((-1679), insets0.bottom);
      assertEquals((-1679), insets0.left);
      assertEquals((-1679), insets0.top);
      assertEquals((-1679), insets1.top);
      assertEquals((-1679), insets1.right);
      assertEquals((-604), insets1.left);
      assertEquals(32767, insets1.bottom);
      assertNotSame(insets0, insets1);
      assertNotSame(insets1, insets0);
      assertFalse(insets0.equals((Object)insets1));
      assertFalse(insets1.equals((Object)insets0));
      
      objectArray0[0] = (Object) insets1;
      objectArray0[1] = (Object) insets0;
      objectArray0[2] = (Object) insets0;
      objectArray0[3] = (Object) insets0;
      Insets insets2 = (Insets)ObjectUtils.mode(objectArray0);
      assertEquals((-1679), insets2.bottom);
      assertEquals(32767, insets2.right);
      assertEquals((-1679), insets2.top);
      assertEquals((-1679), insets2.left);
      assertSame(insets2, insets0);
      assertNotSame(insets2, insets1);
      assertEquals(5, objectArray0.length);
      assertNotNull(insets2);
      assertFalse(insets2.equals((Object)insets1));
      
      objectArray0[4] = (Object) insets2;
      int int0 = ObjectUtils.hashCodeMulti(objectArray0);
      assertEquals(32477155, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Insets[] insetsArray0 = new Insets[1];
      Insets insets0 = new Insets(2011, 0, 114, 114);
      assertEquals(114, insets0.right);
      assertEquals(0, insets0.left);
      assertEquals(114, insets0.bottom);
      assertEquals(2011, insets0.top);
      assertNotNull(insets0);
      
      insetsArray0[0] = insets0;
      Insets insets1 = ObjectUtils.mode(insetsArray0);
      assertEquals(2011, insets1.top);
      assertEquals(114, insets1.bottom);
      assertEquals(114, insets1.right);
      assertEquals(0, insets1.left);
      assertSame(insets1, insets0);
      assertEquals(1, insetsArray0.length);
      assertNotNull(insets1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = ObjectUtils.compare((MockDate) null, (MockDate) null);
      assertEquals(0, int0);
      
      short short0 = ObjectUtils.CONST_SHORT(0);
      assertEquals((short)0, short0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Properties properties1 = ObjectUtils.clone(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(breakIterator0);
      
      boolean boolean0 = ObjectUtils.notEqual(breakIterator0, breakIterator0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      char char0 = ObjectUtils.CONST('^');
      assertEquals('^', char0);
      
      Date date0 = new Date((-1L));
      assertNotNull(date0);
      
      String string0 = date0.toString();
      assertEquals("1969-12-31", string0);
      assertNotNull(string0);
      
      int int0 = ObjectUtils.compare(date0, (Date) null, false);
      assertEquals(1, int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "1969-12-31";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      boolean boolean0 = ObjectUtils.anyNotNull(objectArray0);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(5);
      assertEquals((short)5, short0);
      
      JobAttributes jobAttributes0 = new JobAttributes();
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertEquals(1, jobAttributes0.getToPage());
      assertEquals(1, jobAttributes0.getFromPage());
      assertEquals(1, jobAttributes0.getMinPage());
      assertNull(jobAttributes0.getFileName());
      assertEquals(1, jobAttributes0.getCopies());
      assertNull(jobAttributes0.getPrinter());
      assertNotNull(jobAttributes0);
      
      ObjectUtils.hashCode((Object) jobAttributes0);
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertEquals(1, jobAttributes0.getToPage());
      assertEquals(1, jobAttributes0.getFromPage());
      assertEquals(1, jobAttributes0.getMinPage());
      assertNull(jobAttributes0.getFileName());
      assertEquals(1, jobAttributes0.getCopies());
      assertNull(jobAttributes0.getPrinter());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Set<String> set0 = properties0.stringPropertyNames();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Object object0 = properties0.replace((Object) jobAttributes0, (Object) jobAttributes0);
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertEquals(1, jobAttributes0.getToPage());
      assertEquals(1, jobAttributes0.getFromPage());
      assertEquals(1, jobAttributes0.getMinPage());
      assertNull(jobAttributes0.getFileName());
      assertEquals(1, jobAttributes0.getCopies());
      assertNull(jobAttributes0.getPrinter());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(object0);
      
      Properties properties1 = ObjectUtils.defaultIfNull(properties0, properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertSame(properties0, properties1);
      assertSame(properties1, properties0);
      assertNotNull(properties1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)31);
      assertEquals((byte)31, byte0);
      
      MutableInt mutableInt0 = new MutableInt((int) (byte)31);
      assertEquals(31, (int)mutableInt0.toInteger());
      assertEquals((byte)31, mutableInt0.byteValue());
      assertEquals(31, (int)mutableInt0.getValue());
      assertEquals(31.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(31L, mutableInt0.longValue());
      assertEquals(31.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("31", mutableInt0.toString());
      assertEquals(31, mutableInt0.intValue());
      assertEquals((short)31, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      char char0 = ObjectUtils.CONST('F');
      assertEquals('F', char0);
      
      double double0 = ObjectUtils.CONST((double) (byte)31);
      assertEquals(31.0, double0, 0.01);
      
      double double1 = ObjectUtils.CONST((-1432.0693954477));
      assertEquals((-1432.0693954477), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) mutableInt0;
      objectArray0[2] = (Object) mutableInt0;
      Object object0 = ObjectUtils.cloneIfPossible(objectArray0[3]);
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) mutableInt0;
      boolean boolean0 = ObjectUtils.anyNotNull(objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertNotNull(decimalFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(937);
      assertEquals(937, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=937,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      Object object0 = decimalFormat0.parseObject("YMud>", parsePosition0);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(937, parsePosition0.getErrorIndex());
      assertEquals(937, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=937,errorIndex=937]", parsePosition0.toString());
      assertNull(object0);
      
      boolean boolean0 = ObjectUtils.equals((Object) decimalFormat0, (Object) decimalFormat0);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertTrue(boolean0);
      
      String string0 = ObjectUtils.identityToString((Object) decimalFormat0);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) parsePosition0;
      ParsePosition parsePosition1 = (ParsePosition)ObjectUtils.firstNonNull(objectArray0);
      assertEquals(937, parsePosition1.getErrorIndex());
      assertEquals(937, parsePosition1.getIndex());
      assertEquals("java.text.ParsePosition[index=937,errorIndex=937]", parsePosition1.toString());
      assertSame(parsePosition1, parsePosition0);
      assertEquals(3, objectArray0.length);
      assertNotNull(parsePosition1);
      
      objectArray0[1] = (Object) parsePosition1;
      objectArray0[2] = (Object) "YMud>";
      boolean boolean1 = ObjectUtils.allNotNull(objectArray0);
      assertTrue(boolean1);
      assertEquals(3, objectArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      long long0 = ObjectUtils.CONST(1765L);
      assertEquals(1765L, long0);
      
      IdentityHashMap<TimeZone, NumberFormat> identityHashMap0 = new IdentityHashMap<TimeZone, NumberFormat>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Set<TimeZone> set0 = identityHashMap0.keySet();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      IdentityHashMap<TimeZone, NumberFormat> identityHashMap1 = ObjectUtils.cloneIfPossible(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      assertNotSame(identityHashMap0, identityHashMap1);
      assertNotSame(identityHashMap1, identityHashMap0);
      assertNotNull(identityHashMap1);
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ObjectUtils.toString(object0, (String) null);
      assertNotNull(string0);
      
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 7);
      Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0);
      assertEquals(7, comparableArray0.length);
      assertNull(comparable0);
      
      comparableArray0[0] = null;
      Comparable<Object> comparable1 = ObjectUtils.min(comparableArray0);
      assertEquals(7, comparableArray0.length);
      assertNull(comparable1);
      
      comparableArray0[1] = null;
      Comparable<Object> comparable2 = ObjectUtils.max(comparableArray0);
      assertEquals(7, comparableArray0.length);
      assertNull(comparable2);
      
      comparableArray0[2] = null;
      Comparable<Object> comparable3 = ObjectUtils.min(comparableArray0);
      assertEquals(7, comparableArray0.length);
      assertNull(comparable3);
      
      comparableArray0[3] = null;
      Comparable<Object> comparable4 = ObjectUtils.min(comparableArray0);
      assertEquals(7, comparableArray0.length);
      assertNull(comparable4);
      
      comparableArray0[4] = null;
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 2);
      Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0);
      assertEquals(2, comparableArray0.length);
      assertNull(comparable0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+ItXpjbN0-Hg3P/1@!");
      assertFalse(boolean0);
      
      comparableArray0[0] = null;
      Comparable<Object> comparable1 = ObjectUtils.max(comparableArray0);
      assertEquals(2, comparableArray0.length);
      assertNull(comparable1);
      
      comparableArray0[1] = null;
      Comparable<Object> comparable2 = ObjectUtils.max(comparableArray0);
      assertEquals(2, comparableArray0.length);
      assertNull(comparable2);
      
      boolean boolean1 = ObjectUtils.allNotNull(comparableArray0);
      assertFalse(boolean1);
      assertEquals(2, comparableArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int0 = ObjectUtils.hashCodeMulti(comparableArray0);
      assertEquals(961, int0);
      assertEquals(2, comparableArray0.length);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Time time0 = new Time(961);
      assertEquals("00:00:00", time0.toString());
      assertNotNull(time0);
      
      mockGregorianCalendar0.setGregorianChange(time0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("00:00:00", time0.toString());
      
      String string0 = "The validated array is empty";
      String string1 = ObjectUtils.toString((Object) mockGregorianCalendar0, "The validated array is empty");
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Comparable<Object> comparable3 = ObjectUtils.max(comparableArray0);
      assertEquals(2, comparableArray0.length);
      assertNull(comparable3);
      
      TreeSet<Time> treeSet0 = new TreeSet<Time>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(time0));
      
      Time time1 = treeSet0.pollFirst();
      assertNull(time1);
      assertFalse(treeSet0.contains(time0));
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      TreeSet<Time> treeSet1 = ObjectUtils.clone(treeSet0);
      assertNotSame(treeSet1, treeSet0);
      assertNotSame(treeSet0, treeSet1);
      assertNotNull(treeSet1);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertFalse(treeSet1.contains(time0));
      assertFalse(treeSet0.contains(time0));
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        Chronology.of((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      collator0.thenComparing((Comparator<? super Object>) collator0);
      Collator.getInstance();
      ObjectUtils.toString((Object) collator0);
      ObjectUtils.max((MockCalendar[]) null);
      ObjectUtils.CONST(false);
      ObjectUtils.CONST_BYTE(64);
      MutableInt mutableInt0 = new MutableInt(64);
      MutableInt mutableInt1 = new MutableInt(102);
      mutableInt0.compareTo(mutableInt1);
      ObjectUtils.compare(mutableInt0, mutableInt0);
      MockDateFormat[] mockDateFormatArray0 = new MockDateFormat[2];
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      mockDateFormatArray0[0] = mockDateFormat0;
      MockDateFormat mockDateFormat1 = new MockDateFormat();
      mockDateFormatArray0[1] = mockDateFormat1;
      ObjectUtils.mode(mockDateFormatArray0);
      CharBuffer[] charBufferArray0 = new CharBuffer[8];
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = 'a';
      charArray0[2] = '0';
      charArray0[3] = '*';
      charArray0[4] = '4';
      charArray0[5] = 'Z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBufferArray0[0] = charBuffer0;
      char[] charArray1 = new char[6];
      charArray1[0] = '4';
      charArray1[1] = '*';
      charArray1[2] = 'Q';
      charArray1[3] = 't';
      charArray1[4] = 'a';
      charArray1[5] = '*';
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectUtils.firstNonNull(objectArray0);
      objectArray0[0] = null;
      boolean boolean0 = ObjectUtils.anyNotNull(objectArray0);
      assertFalse(boolean0);
      
      ObjectUtils objectUtils0 = new ObjectUtils();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      stringBuilder0.append("C(9\"&,=68f)c");
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = '(';
      stringBuilder0.insert(0, charArray0);
      ObjectUtils.identityToString(stringBuilder0, (Object) objectUtils0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ObjectUtils.clone(locale_FilteringMode0);
      Point point0 = new Point();
      Point point1 = new Point((-3726), (-2907));
      point0.setLocation((Point2D) point1);
      point0.setLocation((Point2D) point1);
      point0.clone();
      ObjectUtils.CONST(point0);
      boolean boolean1 = ObjectUtils.isNotEmpty(locale_FilteringMode0);
      double double0 = ObjectUtils.CONST(355.42578273949);
      assertEquals(355.42578273949, double0, 0.01);
      
      IdentityHashMap<RenderingHints.Key, MutableInt> identityHashMap0 = new IdentityHashMap<RenderingHints.Key, MutableInt>();
      RenderingHints renderingHints0 = new RenderingHints(identityHashMap0);
      boolean boolean2 = ObjectUtils.equals((Object) locale_FilteringMode0, (Object) renderingHints0);
      assertFalse(boolean2 == boolean1);
      
      short short0 = ObjectUtils.CONST_SHORT(0);
      assertEquals((short)0, short0);
      
      ObjectUtils.toString((Object) locale_FilteringMode0);
      ObjectUtils.hashCode((Object) "java.util.Locale$FilteringMode@0000000002");
      Timestamp[] timestampArray0 = new Timestamp[6];
      Instant instant0 = MockInstant.ofEpochMilli(778L);
      Instant instant1 = MockInstant.minusNanos(instant0, (-2907));
      Instant instant2 = MockInstant.plusNanos(instant1, 0L);
      Timestamp timestamp0 = Timestamp.from(instant2);
      timestampArray0[0] = timestamp0;
      Timestamp timestamp1 = new Timestamp((-1L));
      timestampArray0[1] = timestamp1;
      Timestamp timestamp2 = new Timestamp((-2907));
      timestampArray0[2] = timestamp2;
      Timestamp timestamp3 = new Timestamp((-1L));
      timestampArray0[3] = timestamp3;
      Timestamp timestamp4 = new Timestamp((-2907));
      timestampArray0[4] = timestamp4;
      Timestamp timestamp5 = Timestamp.from(instant0);
      timestampArray0[5] = timestamp5;
      Timestamp timestamp6 = ObjectUtils.firstNonNull(timestampArray0);
      assertNotNull(timestamp6);
      assertEquals(778002907, timestamp6.getNanos());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double double0 = ObjectUtils.CONST(0.0);
      assertEquals(0.0, double0, 0.01);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Locale locale0 = Locale.ROOT;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) linkedList0);
      boolean boolean0 = ObjectUtils.notEqual(mockDateFormat0, mockDateFormat0);
      assertFalse(boolean0);
      
      ObjectUtils.hashCode((Object) locale0);
      LocalTime localTime0 = MockLocalTime.now();
      Time time0 = Time.valueOf(localTime0);
      String string0 = ObjectUtils.identityToString((Object) time0);
      assertNotNull(string0);
      
      ObjectUtils objectUtils0 = new ObjectUtils();
      MockDateFormat[] mockDateFormatArray0 = new MockDateFormat[9];
      mockDateFormatArray0[0] = mockDateFormat0;
      mockDateFormatArray0[1] = mockDateFormat0;
      mockDateFormatArray0[2] = mockDateFormat0;
      MockDateFormat mockDateFormat1 = new MockDateFormat();
      mockDateFormatArray0[3] = mockDateFormat1;
      mockDateFormatArray0[4] = mockDateFormat0;
      MockDateFormat mockDateFormat2 = new MockDateFormat();
      mockDateFormatArray0[5] = mockDateFormat2;
      mockDateFormatArray0[6] = mockDateFormat0;
      mockDateFormatArray0[7] = mockDateFormat0;
      mockDateFormatArray0[8] = mockDateFormat0;
      MockDateFormat mockDateFormat3 = ObjectUtils.mode(mockDateFormatArray0);
      assertNotNull(mockDateFormat3);
      assertNotSame(mockDateFormat3, mockDateFormat1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ObjectUtils.CONST(0.0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Locale locale0 = Locale.ROOT;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) linkedList0);
      MockDateFormat.getTimeInstance(0, locale0);
      // Undeclared exception!
      try { 
        MockDateFormat.getDateInstance((-1352));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1352
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ObjectUtils.CONST_BYTE(31);
      ObjectUtils.CONST_SHORT((byte)31);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((byte)31);
      Date date0 = Date.valueOf(localDate0);
      ObjectUtils.hashCode((Object) date0);
      int int0 = 0;
      ObjectUtils.CONST(0);
      StringBuilder stringBuilder0 = new StringBuilder();
      int int1 = (-23);
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = 'G';
      charArray0[2] = 't';
      charArray0[3] = '-';
      charArray0[4] = '&';
      charArray0[7] = 'c';
      charArray0[8] = '&';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-23), charArray0, (-23), 87);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -23
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Point point0 = new Point((-290), (-290));
      point0.translate(0, 0);
      point0.clone();
      Point point1 = new Point(point0);
      point0.setLocation((-290), (-290));
      point1.clone();
      Point point2 = ObjectUtils.cloneIfPossible(point1);
      ObjectUtils.isEmpty(point2);
      Object[] objectArray0 = new Object[0];
      ObjectUtils.anyNotNull(objectArray0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      ObjectUtils.defaultIfNull(imageCapabilities0, imageCapabilities0);
      ObjectUtils.CONST(2019L);
      ObjectUtils.CONST(97);
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
      point2.clone();
      point2.move((-144), (-648));
      point2.y = 1;
      ObjectUtils.CONST((byte) (-58));
      Properties properties0 = new Properties();
      properties0.put(point2, point2);
      ObjectUtils.toString((Object) properties0);
      Dimension dimension0 = new Dimension();
      ObjectUtils.CONST(dimension0);
      Time time0 = null;
      // Undeclared exception!
      try { 
        Time.valueOf("z!q]vwW6_O7C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }
}
