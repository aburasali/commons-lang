/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:09:55 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import org.apache.commons.lang3.BooleanUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BooleanUtils_ESTest extends BooleanUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject("0");
      assertNull(boolean1);
      
      boolean boolean2 = Boolean.logicalXor(true, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = Boolean.logicalAnd(false, false);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string0 = BooleanUtils.toStringYesNo((Boolean) null);
      assertNull(string0);
      
      boolean boolean4 = BooleanUtils.isNotTrue((Boolean) null);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      String string1 = BooleanUtils.toStringTrueFalse(true);
      assertEquals("true", string1);
      assertNotNull(string1);
      
      Integer integer0 = BooleanUtils.toIntegerObject(true);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean5 = BooleanUtils.toBoolean(1);
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      
      boolean boolean6 = BooleanUtils.or(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false, true, true}, booleanArray0));
      assertTrue(boolean6);
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      
      Boolean boolean7 = BooleanUtils.toBooleanObject("$-D~7");
      assertNull(boolean7);
      
      boolean boolean8 = BooleanUtils.and(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false, true, true}, booleanArray0));
      assertFalse(boolean8);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean8 == boolean4);
      assertTrue(boolean8 == boolean2);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean3);
      assertFalse(boolean8 == boolean5);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = BooleanUtils.or(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      boolean boolean1 = BooleanUtils.or(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean1);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int0 = BooleanUtils.toInteger(true);
      assertEquals(1, int0);
      
      Boolean[] booleanArray1 = new Boolean[5];
      booleanArray1[0] = (Boolean) false;
      Boolean boolean2 = BooleanUtils.toBooleanObject((String) null, "-0X", (String) null, (String) null);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray1[1] = boolean2;
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject(Integer.MAX_VALUE, (-1319), (-1), 84);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = BooleanUtils.toBoolean("faHse");
      assertFalse(boolean0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject("8,!e'D^j");
      assertNull(boolean1);
      
      Integer integer0 = new Integer(843);
      assertEquals(843, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = Boolean.logicalXor(false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      
      String string0 = Integer.toUnsignedString(120);
      assertEquals("120", string0);
      assertNotNull(string0);
      
      Integer integer1 = Integer.valueOf(539);
      assertEquals(539, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(120);
      assertEquals(120, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      long long0 = Integer.toUnsignedLong((-2644));
      assertEquals(4294964652L, long0);
      
      Boolean boolean3 = BooleanUtils.toBooleanObject(integer1, integer0, integer2, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNull(boolean3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = new Integer(43);
      assertEquals(43, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("no", (Integer) null);
      assertNull(integer1);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) null, integer0, (Integer) null, (Integer) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String string0 = BooleanUtils.toStringTrueFalse(boolean0);
      assertEquals("false", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = BooleanUtils.toString(true, "g1#X~agY%@V<ho9", "Arguments cannot both be null");
      assertEquals("g1#X~agY%@V<ho9", string0);
      assertNotNull(string0);
      
      String string1 = BooleanUtils.toStringYesNo(false);
      assertEquals("no", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = BooleanUtils.isNotTrue(boolean0);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      boolean boolean3 = BooleanUtils.isTrue(boolean2);
      assertTrue(boolean3);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean3 == boolean1);
      
      Boolean boolean4 = BooleanUtils.toBooleanObject("no");
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      String string2 = BooleanUtils.toStringTrueFalse(boolean4);
      assertEquals("false", string2);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = BooleanUtils.toString(boolean2, "3>", "g1#X~agY%@V<ho9", "Arguments cannot both be null");
      assertEquals("3>", string3);
      assertFalse(boolean2.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean5 = BooleanUtils.isNotFalse(boolean0);
      assertTrue(boolean5);
      assertFalse(boolean0.equals((Object)boolean4));
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      
      Integer integer0 = new Integer(370);
      assertEquals(370, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(840);
      assertEquals(840, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Boolean boolean6 = BooleanUtils.toBooleanObject(integer0, integer0, integer1, (Integer) null);
      assertTrue(boolean6);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      
      Integer integer2 = new Integer(70);
      assertEquals(70, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      String string4 = Integer.toUnsignedString((-2570));
      assertEquals("4294964726", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBoolean((Integer) null, integer2, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = BooleanUtils.toInteger(true);
      assertEquals(1, int0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject("p7e5");
      assertNull(boolean0);
      
      boolean boolean1 = Boolean.logicalOr(true, true);
      assertTrue(boolean1);
      
      String string0 = BooleanUtils.toStringOnOff(true);
      assertEquals("on", string0);
      assertNotNull(string0);
      
      String string1 = BooleanUtils.toStringTrueFalse((Boolean) null);
      assertNull(string1);
      
      Boolean boolean2 = Boolean.valueOf("true");
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      boolean boolean3 = Boolean.logicalAnd(true, false);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      
      int int1 = Boolean.compare(true, true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string2 = BooleanUtils.toStringYesNo(boolean2);
      assertEquals("yes", string2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean3));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject("T<#8L^cL&tw36C6", "Array cannot be empty.", "5GGQ_*VZw{|mD;", "Array cannot be empty.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        BooleanUtils.xor(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array is empty
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = BooleanUtils.toStringYesNo(false);
      assertEquals("no", string0);
      assertNotNull(string0);
      
      String string1 = BooleanUtils.toStringOnOff(false);
      assertEquals("off", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Boolean boolean0 = Boolean.valueOf(".K~MY");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("no");
      assertFalse(boolean1);
      
      String string2 = BooleanUtils.toStringTrueFalse(boolean0);
      assertEquals("false", string2);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Integer integer0 = BooleanUtils.toIntegerObject(true);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = BooleanUtils.toBoolean((Integer) null, integer0, (Integer) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean3 = BooleanUtils.and(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, false, true, true}, booleanArray0));
      assertFalse(boolean3);
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = BooleanUtils.toBoolean("", "", "");
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = Boolean.getBoolean("Rn',H+x,/z!");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = Boolean.getBoolean("");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      boolean boolean4 = BooleanUtils.isNotTrue(boolean1);
      assertTrue(boolean4);
      assertTrue(boolean1.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      int int0 = Boolean.compare(true, true);
      assertEquals(0, int0);
      
      boolean boolean5 = BooleanUtils.isNotTrue(boolean1);
      assertTrue(boolean5);
      assertTrue(boolean1.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean4));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      Boolean boolean6 = BooleanUtils.xor(booleanArray0);
      assertFalse(boolean6);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      
      Boolean boolean7 = BooleanUtils.toBooleanObject("");
      assertNull(boolean7);
      
      boolean boolean8 = Boolean.logicalOr((boolean) boolean1, true);
      assertTrue(boolean8);
      assertTrue(boolean1.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean5));
      assertFalse(boolean1.equals((Object)boolean4));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean8 == boolean2);
      assertTrue(boolean8 == boolean5);
      assertFalse(boolean8 == boolean3);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean0);
      
      String string0 = BooleanUtils.toStringTrueFalse((Boolean) null);
      assertNull(string0);
      
      boolean boolean9 = BooleanUtils.isTrue(boolean6);
      assertFalse(boolean9);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean8));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean9 == boolean5);
      assertFalse(boolean9 == boolean4);
      assertTrue(boolean9 == boolean2);
      assertFalse(boolean9 == boolean0);
      assertTrue(boolean9 == boolean3);
      assertFalse(boolean9 == boolean8);
      
      Boolean boolean10 = BooleanUtils.and(booleanArray0);
      assertFalse(boolean10);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean10.equals((Object)boolean2));
      assertTrue(boolean10.equals((Object)boolean3));
      assertFalse(boolean10.equals((Object)boolean0));
      assertFalse(boolean10.equals((Object)boolean4));
      assertTrue(boolean10.equals((Object)boolean9));
      assertFalse(boolean10.equals((Object)boolean5));
      assertFalse(boolean10.equals((Object)boolean8));
      assertNotNull(boolean10);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject((String) null, "Z D+)=RYJNL<&", "The String did not match any specified value", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean("au&]*zFR,");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = false;
      boolean boolean2 = true;
      boolean boolean3 = Boolean.logicalAnd(false, true);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      booleanArray0[0] = boolean0;
      Boolean boolean4 = BooleanUtils.toBooleanObject((String) null, "0", "0", (String) null);
      assertNull(boolean4);
      
      booleanArray0[1] = null;
      Integer integer0 = new Integer(2488);
      assertEquals(2488, (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean5 = BooleanUtils.toBooleanObject((String) null);
      assertNull(boolean5);
      
      Integer integer1 = Integer.decode("0");
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2488);
      assertEquals(2488, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(83);
      assertEquals(83, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = BooleanUtils.toIntegerObject((Boolean) null, integer1, integer2, integer3);
      assertEquals(83, (int)integer4);
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      int int0 = 70;
      try { 
        Integer.valueOf((String) null, 70);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "{}";
      Boolean boolean0 = BooleanUtils.toBooleanObject("{}");
      assertNull(boolean0);
      
      int int0 = Boolean.compare(true, false);
      assertEquals(1, int0);
      
      boolean boolean1 = Boolean.logicalOr(true, false);
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.getBoolean("{}");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      int int1 = Boolean.compare(true, true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = BooleanUtils.toStringTrueFalse((Boolean) null);
      assertNull(string1);
      
      Integer integer0 = BooleanUtils.toIntegerObject((Boolean) null, (Integer) null, (Integer) null, (Integer) null);
      assertNull(integer0);
      
      Boolean boolean3 = BooleanUtils.toBooleanObject((String) null);
      assertNull(boolean3);
      
      boolean boolean4 = Boolean.logicalOr(true, false);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      boolean boolean5 = Boolean.logicalAnd(true, false);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      
      boolean boolean6 = Boolean.logicalXor(true, true);
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      
      boolean boolean7 = Boolean.getBoolean("G<VHF8,*^O");
      assertFalse(boolean7);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean1);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBoolean((String) null, "{}", "', has a length less than 2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = true;
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean1 = BooleanUtils.or(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false, true, true}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Boolean boolean2 = BooleanUtils.toBooleanObject("0");
      assertNull(boolean2);
      
      boolean boolean3 = Boolean.logicalAnd(false, false);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string0 = BooleanUtils.toStringYesNo((Boolean) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBoolean((String) null, "0", "0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = BooleanUtils.toString(true, (String) null, "dA!Ef~");
      assertNull(string0);
      
      Integer integer0 = Integer.getInteger("8P im1>q{B", 420);
      assertEquals(420, (int)integer0);
      assertNotNull(integer0);
      
      String string1 = Integer.toUnsignedString(420);
      assertEquals("420", string1);
      assertNotNull(string1);
      
      int int0 = Integer.max(121, 121);
      assertEquals(121, int0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0);
      assertTrue(boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(boolean0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(boolean0);
      assertEquals(1, (int)integer1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean1 = BooleanUtils.xor(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = BooleanUtils.toStringTrueFalse(true);
      assertEquals("true", string0);
      assertNotNull(string0);
      
      boolean boolean1 = BooleanUtils.toBoolean("true");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      String string1 = null;
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[0] = boolean2;
      String string2 = "org.apache.commons.lang3.math.NumberUtils";
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject((String) null, "true", "true", "org.apache.commons.lang3.math.NumberUtils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = BooleanUtils.toStringYesNo(false);
      assertEquals("no", string0);
      assertNotNull(string0);
      
      String string1 = BooleanUtils.toStringTrueFalse(false);
      assertEquals("false", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = BooleanUtils.toStringYesNo(false);
      assertEquals("no", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.divideUnsigned(0, 65);
      assertEquals(0, int0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(integer0);
      assertFalse(boolean1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(boolean1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean2 = BooleanUtils.and(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertFalse(boolean2);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean2 == boolean0);
      
      String string3 = BooleanUtils.toStringOnOff((Boolean) false);
      assertEquals("off", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean3 = BooleanUtils.xor(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertFalse(boolean3);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = boolean1;
      booleanArray1[4] = (Boolean) false;
      booleanArray1[5] = (Boolean) false;
      booleanArray1[6] = (Boolean) false;
      Boolean boolean4 = BooleanUtils.or(booleanArray1);
      assertFalse(boolean4);
      assertEquals(7, booleanArray1.length);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      boolean boolean5 = BooleanUtils.toBooleanDefaultIfNull(boolean4, boolean0);
      assertFalse(boolean5);
      assertEquals(7, booleanArray1.length);
      assertTrue(boolean0 == boolean3);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = BooleanUtils.toStringTrueFalse(false);
      assertEquals("false", string0);
      assertNotNull(string0);
      
      boolean boolean1 = BooleanUtils.toBoolean("false");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      String string1 = null;
      Boolean boolean2 = new Boolean((String) null);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[0] = boolean2;
      boolean boolean3 = false;
      boolean boolean4 = true;
      Boolean boolean5 = BooleanUtils.toBooleanObject("true");
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      Integer integer0 = new Integer(6);
      assertEquals(6, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1581));
      assertEquals((-1581), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = BooleanUtils.toIntegerObject((boolean) boolean2);
      assertEquals(0, (int)integer2);
      assertFalse(boolean2.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean5));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = BooleanUtils.toIntegerObject(boolean5, integer0, integer1, integer2);
      assertEquals(6, (int)integer3);
      assertFalse(boolean2.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean5));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject((String) null, "false", "false", "Array is empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "The String did not match either specified value";
      String string1 = BooleanUtils.toString(true, "The String did not match either specified value", "The String did not match either specified value");
      assertEquals("The String did not match either specified value", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        BooleanUtils.or(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array is empty
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = Boolean.getBoolean("");
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.logicalXor(true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = Boolean.compare(true, false);
      assertEquals(1, int0);
      
      boolean boolean2 = Boolean.getBoolean("The array must not contain any null elements");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = Boolean.logicalOr(true, true);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1002);
      assertEquals(1002, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = BooleanUtils.toIntegerObject((Boolean) null, integer0, integer1, integer2);
      assertEquals(1002, (int)integer3);
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 202;
      Integer integer0 = new Integer(202);
      assertEquals(202, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.logicalAnd(false, false);
      assertFalse(boolean1);
      
      String string0 = BooleanUtils.toStringTrueFalse(boolean0);
      assertEquals("true", string0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean0.equals((Object)boolean1));
      assertNotNull(string0);
      
      String string1 = "ATpQi";
      Boolean boolean2 = new Boolean("ATpQi");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Integer integer1 = Integer.valueOf(202);
      assertEquals(202, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = BooleanUtils.toIntegerObject(boolean2, integer0, integer1, integer1);
      assertEquals(202, (int)integer2);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(202);
      assertEquals(202, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Boolean boolean3 = BooleanUtils.toBooleanObject(integer0, integer2, integer3, integer0);
      assertTrue(boolean3);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer3));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[0];
      // Undeclared exception!
      try { 
        BooleanUtils.or(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array is empty
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = BooleanUtils.toStringOnOff(false);
      assertEquals("off", string0);
      assertNotNull(string0);
      
      String string1 = BooleanUtils.toStringYesNo(false);
      assertEquals("no", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = 202;
      Integer integer1 = new Integer(202);
      assertEquals(202, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject((Integer) null, integer0, integer1, (Integer) null);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertNull(boolean1);
      
      booleanArray0[1] = null;
      Boolean boolean2 = BooleanUtils.toBooleanObject(integer0);
      assertFalse(boolean2);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      int int2 = 0;
      int int3 = 41;
      Boolean boolean3 = BooleanUtils.toBooleanObject(202, 0, 41, 202);
      assertNull(boolean3);
      
      booleanArray0[3] = null;
      int int4 = 1828;
      Boolean boolean4 = BooleanUtils.toBooleanObject(1828);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      // Undeclared exception!
      try { 
        BooleanUtils.xor(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array must not contain any null elements
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject(0, 0, 0, 3123);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.logicalAnd(true, true);
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.logicalXor(false, false);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = Boolean.logicalAnd(false, false);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = Boolean.logicalOr(false, false);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean5 = Boolean.getBoolean("--");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      
      String string0 = BooleanUtils.toStringOnOff(boolean0);
      assertEquals("on", string0);
      assertFalse(boolean0.equals((Object)boolean4));
      assertFalse(boolean0.equals((Object)boolean5));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean2));
      assertNotNull(string0);
      
      int int1 = BooleanUtils.compare(true, true);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Boolean boolean6 = BooleanUtils.toBooleanObject("on");
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      
      Integer integer0 = BooleanUtils.toIntegerObject(true);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = BooleanUtils.toInteger(true);
      assertEquals(1, int0);
      
      String string0 = BooleanUtils.toStringTrueFalse(true);
      assertEquals("true", string0);
      assertNotNull(string0);
      
      int int1 = (-1429);
      Boolean boolean0 = BooleanUtils.toBooleanObject(1, 1, (-1429), 1);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.logicalOr(true, true);
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.getBoolean(",DgSp7");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      int int2 = Boolean.compare(false, true);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string1 = BooleanUtils.toStringYesNo(boolean0);
      assertEquals("yes", string1);
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Boolean boolean3 = BooleanUtils.toBooleanObject("yes");
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      boolean boolean4 = Boolean.getBoolean("true");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      Integer integer0 = BooleanUtils.toIntegerObject(true);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int3 = (-1774);
      try { 
        Integer.decode("_@XD|ST!1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_@XD|ST!1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = BooleanUtils.toInteger(true);
      assertEquals(1, int0);
      
      boolean boolean0 = BooleanUtils.toBoolean(0, 1, 0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(88);
      assertEquals(88, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(integer0);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      
      int int1 = Integer.min(88, 290);
      assertEquals(88, int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = Boolean.logicalXor(true, false);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      boolean boolean4 = Boolean.getBoolean("");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      boolean boolean5 = Boolean.logicalXor(true, true);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      
      int int2 = Integer.min(0, 3);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean6 = Boolean.logicalOr(false, true);
      assertTrue(boolean6);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      
      try { 
        Integer.decode("(EjOnM#j(RK!,A");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(EjOnM#j(RK!,A\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject(472);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = BooleanUtils.isFalse(boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalOr(false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      
      Integer integer0 = new Integer(472);
      assertEquals(472, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger((String) null);
      assertNull(integer1);
      
      String string0 = Integer.toUnsignedString(472);
      assertEquals("472", string0);
      assertNotNull(string0);
      
      Integer integer2 = BooleanUtils.toIntegerObject(false, integer0, integer0);
      assertEquals(472, (int)integer2);
      assertNotNull(integer2);
      
      boolean boolean3 = BooleanUtils.toBoolean(472);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = BooleanUtils.toBoolean(472);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      // Undeclared exception!
      try { 
        BooleanUtils.xor((boolean[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = BooleanUtils.toStringTrueFalse(false);
      assertEquals("false", string0);
      assertNotNull(string0);
      
      boolean boolean0 = BooleanUtils.toBoolean("false");
      assertFalse(boolean0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject("false");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      String string1 = BooleanUtils.toStringYesNo(boolean1);
      assertEquals("no", string1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Boolean boolean2 = BooleanUtils.negate(boolean1);
      assertTrue(boolean2);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      String string2 = BooleanUtils.toStringTrueFalse(false);
      assertEquals("false", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean3 = Boolean.logicalXor(false, false);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      
      String string3 = BooleanUtils.toString(boolean1, "kT6UEn4p;6s_W?cnv", (String) null, "rG");
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean3));
      assertNull(string3);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean4 = BooleanUtils.or(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, true, false, false}, booleanArray0));
      assertTrue(boolean4);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      
      boolean boolean5 = BooleanUtils.toBoolean((String) null);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      
      Boolean boolean6 = BooleanUtils.negate((Boolean) true);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      
      boolean boolean7 = Boolean.logicalAnd(false, true);
      assertFalse(boolean7);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      
      String string4 = BooleanUtils.toStringOnOff(boolean6);
      assertEquals("off", string4);
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean7));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean8 = BooleanUtils.or(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, true, false, false}, booleanArray0));
      assertTrue(boolean8);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean5);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8 == boolean4);
      assertFalse(boolean8 == boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean[] booleanArray1 = new Boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = BooleanUtils.negate(boolean0);
      assertTrue(boolean2);
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray1[2] = boolean2;
      Boolean boolean3 = BooleanUtils.toBooleanObject(integer0);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray1[3] = boolean3;
      Boolean boolean4 = BooleanUtils.toBooleanObject(1074, 0, 1074, 1074);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray1[4] = boolean4;
      Boolean boolean5 = BooleanUtils.toBooleanObject((String) null, (String) null, "", "");
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      
      booleanArray1[5] = boolean5;
      Boolean boolean6 = BooleanUtils.toBooleanObject((String) null);
      assertNull(boolean6);
      
      booleanArray1[6] = null;
      // Undeclared exception!
      try { 
        BooleanUtils.xor(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array must not contain any null elements
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer(108);
      assertEquals(108, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(3025);
      assertEquals(3025, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = BooleanUtils.toIntegerObject(false, integer0, integer1);
      assertEquals(3025, (int)integer2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = BooleanUtils.toIntegerObject(boolean0, integer2, integer2, integer1);
      assertEquals(3025, (int)integer3);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      String string0 = BooleanUtils.toStringOnOff(false);
      assertEquals("off", string0);
      assertNotNull(string0);
      
      Integer integer4 = new Integer(1927);
      assertEquals(1927, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(108);
      assertEquals(108, (int)integer5);
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject(integer4, integer5, integer2, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "";
      Boolean boolean0 = BooleanUtils.toBooleanObject("");
      assertNull(boolean0);
      
      boolean boolean1 = Boolean.logicalOr(true, true);
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.getBoolean("[31$`O");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = Boolean.getBoolean("LP[#86TgY w");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      Boolean boolean4 = BooleanUtils.negate((Boolean) null);
      assertNull(boolean4);
      
      Integer integer0 = BooleanUtils.toIntegerObject((Boolean) null);
      assertNull(integer0);
      
      Boolean boolean5 = new Boolean("");
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      
      Integer integer1 = BooleanUtils.toIntegerObject(boolean5);
      assertEquals(0, (int)integer1);
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertNotNull(integer1);
      
      BooleanUtils booleanUtils0 = new BooleanUtils();
      assertNotNull(booleanUtils0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = null;
      booleanArray0[1] = boolean5;
      booleanArray0[2] = null;
      // Undeclared exception!
      try { 
        BooleanUtils.xor(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array must not contain any null elements
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Boolean boolean0 = null;
      Integer integer0 = new Integer((-572));
      assertEquals((-572), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 0;
      int int1 = Integer.sum((-572), 0);
      assertEquals((-572), int1);
      assertFalse(int1 == int0);
      
      Integer integer1 = new Integer((-572));
      assertEquals((-572), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.getInteger("7BR#,DIk G]", integer1);
      assertEquals((-572), (int)integer2);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = Integer.getInteger("", 0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int1));
      assertNotNull(integer3);
      
      int int2 = Integer.compare((-572), 0);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Integer integer4 = BooleanUtils.toIntegerObject((Boolean) null, integer0, integer1, integer0);
      assertEquals((-572), (int)integer4);
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer4.equals((Object)int2));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      // Undeclared exception!
      try { 
        BooleanUtils.and((boolean[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.logicalAnd(true, true);
      assertTrue(boolean1);
      
      String string0 = BooleanUtils.toStringTrueFalse(boolean0);
      assertEquals("false", string0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertNotNull(string0);
      
      Integer integer0 = Integer.valueOf(97);
      assertEquals(97, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare(97, 97);
      assertEquals(0, int0);
      
      Integer integer1 = Integer.getInteger("false", 0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean2 = BooleanUtils.toBoolean(integer0, integer0, integer0);
      assertTrue(boolean2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean2 == boolean1);
      
      Boolean boolean3 = BooleanUtils.toBooleanObject((-4720));
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean boolean4 = BooleanUtils.toBooleanObject(integer0);
      assertTrue(boolean4);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      boolean boolean5 = Boolean.logicalOr(true, false);
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      
      String string1 = BooleanUtils.toStringTrueFalse(boolean4);
      assertEquals("true", string1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean5));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Integer integer2 = new Integer(17);
      assertEquals(17, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-4720));
      assertEquals((-4720), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      boolean boolean6 = BooleanUtils.toBoolean(integer2, integer2, integer3);
      assertTrue(boolean6);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      
      // Undeclared exception!
      try { 
        BooleanUtils.or((boolean[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject("The Integer did not match any specified value");
      assertNull(boolean0);
      
      int int0 = Boolean.compare(false, true);
      assertEquals((-1), int0);
      
      boolean boolean1 = Boolean.logicalOr(false, true);
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.getBoolean("#");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      String string0 = BooleanUtils.toString((Boolean) null, "#", "#", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = BooleanUtils.toStringYesNo(false);
      assertEquals("no", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean3 = BooleanUtils.toBoolean("NUse2wIHp}im");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      // Undeclared exception!
      try { 
        BooleanUtils.or((boolean[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanUtils.xor((Boolean[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String string0 = BooleanUtils.toStringTrueFalse(boolean0);
      assertEquals("true", string0);
      assertNotNull(string0);
      
      String string1 = BooleanUtils.toStringTrueFalse(boolean0);
      assertEquals("true", string1);
      assertNotNull(string1);
      
      boolean boolean1 = BooleanUtils.toBoolean(boolean0);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer(79);
      assertEquals(79, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-639));
      assertEquals((-639), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean2 = BooleanUtils.toBoolean(integer0, integer1, integer0);
      assertFalse(boolean2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = BooleanUtils.toInteger(true, 65, 0);
      assertEquals(65, int0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(65, 0, 65, (-2325));
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.logicalOr(true, false);
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.logicalOr(false, true);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      
      int int1 = Boolean.compare(true, true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = BooleanUtils.isNotFalse(boolean0);
      assertFalse(boolean3);
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = BooleanUtils.toBoolean(boolean0);
      assertFalse(boolean4);
      assertTrue(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      boolean boolean6 = BooleanUtils.isTrue(boolean5);
      assertTrue(boolean6);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean5;
      booleanArray0[2] = boolean5;
      booleanArray0[3] = boolean5;
      booleanArray0[4] = boolean5;
      booleanArray0[5] = boolean5;
      booleanArray0[6] = boolean5;
      Boolean boolean7 = BooleanUtils.or(booleanArray0);
      assertTrue(boolean7);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean0));
      assertNotNull(boolean7);
      
      boolean boolean8 = Boolean.logicalAnd(false, true);
      assertFalse(boolean8);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean3);
      assertFalse(boolean8 == boolean1);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean6);
      
      Integer integer0 = BooleanUtils.toIntegerObject(boolean7);
      assertEquals(1, (int)integer0);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean8));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      Boolean boolean9 = BooleanUtils.toBooleanObject("^");
      assertNull(boolean9);
      
      boolean boolean10 = BooleanUtils.toBooleanDefaultIfNull(boolean5, true);
      assertTrue(boolean10);
      assertTrue(boolean10 == boolean6);
      assertFalse(boolean10 == boolean4);
      assertTrue(boolean10 == boolean1);
      assertFalse(boolean10 == boolean3);
      assertTrue(boolean10 == boolean2);
      assertFalse(boolean10 == boolean8);
      assertTrue(boolean5.equals((Object)boolean6));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean8));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      
      String string0 = BooleanUtils.toStringOnOff(false);
      assertEquals("off", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean0 = BooleanUtils.or(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false, true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(9, booleanArray0.length);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject("0");
      assertNull(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(false, false);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      
      String string0 = BooleanUtils.toStringYesNo((Boolean) null);
      assertNull(string0);
      
      boolean boolean3 = BooleanUtils.isNotTrue((Boolean) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string1 = BooleanUtils.toStringTrueFalse(false);
      assertEquals("false", string1);
      assertNotNull(string1);
      
      Integer integer0 = BooleanUtils.toIntegerObject(true);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBoolean(101, (-2848), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject(0, 0, 364, 364);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String string0 = BooleanUtils.toStringOnOff(boolean0);
      assertEquals("on", string0);
      assertNotNull(string0);
      
      String string1 = BooleanUtils.toStringOnOff(true);
      assertEquals("on", string1);
      assertNotNull(string1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = BooleanUtils.xor(booleanArray0);
      assertFalse(boolean1);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      String string2 = BooleanUtils.toStringTrueFalse(false);
      assertEquals("false", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = BooleanUtils.toStringOnOff(true);
      assertEquals("on", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean2 = BooleanUtils.toBoolean((Integer) null, (Integer) null, (Integer) null);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.logicalXor(true, true);
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.getBoolean("no");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      
      booleanArray0[0] = boolean0;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      boolean boolean4 = Boolean.logicalOr((boolean) boolean0, true);
      assertTrue(boolean4);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean3));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      
      booleanArray0[1] = boolean3;
      Boolean boolean5 = BooleanUtils.xor(booleanArray0);
      assertTrue(boolean5);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      String string0 = BooleanUtils.toStringTrueFalse(false);
      assertEquals("false", string0);
      assertNotNull(string0);
      
      boolean boolean6 = BooleanUtils.toBoolean((String) null, (String) null, " in an array of ");
      assertTrue(boolean6);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      
      Integer integer0 = new Integer((-1930));
      assertEquals((-1930), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1930));
      assertEquals((-1930), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-868));
      assertEquals((-868), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = BooleanUtils.toIntegerObject(boolean0, integer0, integer1, integer2);
      assertEquals((-1930), (int)integer3);
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean5));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean6));
      assertFalse(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean4));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.remainderUnsigned(1726, 1337);
      assertEquals(389, int0);
      
      String string0 = Integer.toUnsignedString(0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      int int1 = Integer.compare(0, 0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = Integer.max(0, 0);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = Integer.sum(0, 121);
      assertEquals(121, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      Integer integer1 = BooleanUtils.toIntegerObject(true, integer0, integer0);
      assertEquals(0, (int)integer1);
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int2));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int3));
      assertNotNull(integer1);
      
      boolean boolean0 = BooleanUtils.toBoolean(0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = Boolean.logicalOr(false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = Boolean.getBoolean("");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      int int4 = BooleanUtils.toInteger(boolean1, (-1452), 0, 55);
      assertEquals(0, int4);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      
      String string1 = BooleanUtils.toStringOnOff(false);
      assertEquals("off", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Boolean[] booleanArray0 = new Boolean[8];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean1;
      booleanArray0[6] = boolean1;
      booleanArray0[7] = boolean1;
      Boolean boolean4 = BooleanUtils.and(booleanArray0);
      assertFalse(boolean4);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      String string2 = BooleanUtils.toStringOnOff(boolean4);
      assertEquals("off", string2);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject("vJxux=!", "vJxux=!", "", "");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      Boolean boolean1 = BooleanUtils.or(booleanArray0);
      assertTrue(boolean1);
      assertEquals(5, booleanArray0.length);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject(">Ye,0");
      assertNull(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean1 = BooleanUtils.or(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(3, booleanArray0.length);
      
      boolean boolean2 = BooleanUtils.xor(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(boolean2);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = BooleanUtils.xor(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(boolean3);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) false;
      Boolean boolean4 = BooleanUtils.and(booleanArray1);
      assertFalse(boolean4);
      assertEquals(1, booleanArray1.length);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = BooleanUtils.toString(false, "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = BooleanUtils.toString((Boolean) null, "Array and element cannot both be null", "", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = BooleanUtils.toInteger((Boolean) null, (-965), (-965), (-965));
      assertEquals((-965), int0);
      
      Integer integer0 = new Integer(1474);
      assertEquals(1474, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean0 = BooleanUtils.toBoolean(integer0, integer0, integer0);
      assertTrue(boolean0);
      assertFalse(integer0.equals((Object)int0));
      
      Boolean boolean1 = BooleanUtils.negate((Boolean) null);
      assertNull(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean2 = BooleanUtils.and(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertFalse(boolean2);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      int int0 = Integer.compareUnsigned((-2012), 3792);
      assertEquals(1, int0);
      
      boolean boolean1 = BooleanUtils.isTrue(boolean0);
      assertFalse(boolean1);
      assertFalse(integer0.equals((Object)int0));
      
      String string0 = "The String did not match any specified value";
      try { 
        Integer.parseUnsignedInt("6^M:aNUv@5{");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6^M:aNUv@5{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = BooleanUtils.toInteger((Boolean) null, 3838, 3838, 45);
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = BooleanUtils.and(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      int int0 = Boolean.compare(true, true);
      assertEquals(0, int0);
      
      String string0 = BooleanUtils.toStringOnOff(boolean1);
      assertEquals("off", string0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(string0);
      
      Boolean boolean2 = BooleanUtils.toBooleanObject("The Array must not be null");
      assertNull(boolean2);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = BooleanUtils.toIntegerObject((Boolean) null, integer0, integer0, integer0);
      assertEquals(0, (int)integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Boolean boolean3 = BooleanUtils.toBooleanObject(integer1, integer0, integer1, integer1);
      assertTrue(boolean3);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      boolean boolean4 = BooleanUtils.isFalse(boolean3);
      assertFalse(boolean4);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean4 == boolean0);
      
      Boolean[] booleanArray1 = new Boolean[8];
      booleanArray1[0] = null;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) true;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) true;
      booleanArray1[7] = (Boolean) true;
      // Undeclared exception!
      try { 
        BooleanUtils.or(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array must not contain any null elements
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = BooleanUtils.toInteger(true);
      assertEquals(1, int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = BooleanUtils.xor(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = Integer.getInteger("", integer2);
      assertEquals(0, (int)integer3);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      String string0 = Integer.toUnsignedString(1);
      assertEquals("1", string0);
      assertNotNull(string0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(integer0, (Integer) null, integer0, integer1);
      assertFalse(boolean1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer3));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      boolean boolean3 = BooleanUtils.toBooleanDefaultIfNull(boolean2, true);
      assertFalse(boolean3);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer(1565);
      assertEquals(1565, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1507));
      assertEquals((-1507), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, (Integer) null, integer1, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(true, integer0, integer0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      int int0 = BooleanUtils.toInteger(false, 1848, 1848);
      assertEquals(1848, int0);
      
      Boolean boolean0 = Boolean.valueOf("0&R?BQnxk)Rj");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = BooleanUtils.toBooleanDefaultIfNull(boolean0, true);
      assertFalse(boolean1);
      
      int int1 = BooleanUtils.compare(true, true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject("-#");
      assertNull(boolean0);
      
      Integer integer0 = new Integer(79);
      assertEquals(79, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-674));
      assertEquals((-674), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(integer0, integer0, integer1, integer1);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(boolean1);
      
      boolean boolean2 = BooleanUtils.isTrue(boolean1);
      assertTrue(boolean2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = Integer.divideUnsigned(79, 79);
      assertEquals(1, int0);
      
      int int1 = Integer.compareUnsigned(97, 1);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      Integer integer2 = Integer.getInteger("$kjm,UA");
      assertNull(integer2);
      
      boolean boolean3 = false;
      boolean boolean4 = Boolean.logicalOr(false, false);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      Boolean boolean5 = BooleanUtils.toBooleanObject("-#");
      assertNull(boolean5);
      
      int int2 = Boolean.compare(true, true);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean6 = BooleanUtils.isFalse((Boolean) null);
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject((-738), 1, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject(65);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String string0 = BooleanUtils.toString(boolean0, "`^-j~c:X> B,", "Array is empty", " is not a valid number.");
      assertEquals("`^-j~c:X> B,", string0);
      assertNotNull(string0);
      
      String string1 = BooleanUtils.toStringOnOff(boolean0);
      assertEquals("on", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      Boolean boolean1 = BooleanUtils.xor(booleanArray0);
      assertTrue(boolean1);
      assertEquals(5, booleanArray0.length);
      assertNotNull(boolean1);
      
      String string2 = BooleanUtils.toString(boolean1, "`^-j~c:X> B,", "`^-j~c:X> B,", "`^-j~c:X> B,");
      assertEquals("`^-j~c:X> B,", string2);
      assertEquals(5, booleanArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = BooleanUtils.toStringYesNo(false);
      assertEquals("no", string0);
      assertNotNull(string0);
      
      Integer integer0 = new Integer((-2068));
      assertEquals((-2068), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2068));
      assertEquals((-2068), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = BooleanUtils.toIntegerObject(false, integer0, integer1);
      assertEquals((-2068), (int)integer2);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      boolean boolean0 = BooleanUtils.toBoolean("no");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(boolean0, integer0, integer0, integer0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      boolean boolean1 = Boolean.logicalAnd((boolean) boolean0, (boolean) boolean0);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean0;
      Boolean boolean2 = BooleanUtils.xor(booleanArray0);
      assertFalse(boolean2);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      String string0 = BooleanUtils.toStringTrueFalse(boolean3);
      assertEquals("true", string0);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = BooleanUtils.isFalse((Boolean) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject("");
      assertNull(boolean0);
      
      String string0 = BooleanUtils.toStringOnOff((Boolean) null);
      assertNull(string0);
      
      boolean boolean1 = BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean2 = BooleanUtils.and(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(boolean2);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = BooleanUtils.compare(true, false);
      assertEquals(1, int0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = BooleanUtils.isNotFalse(boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject("oB<EsL09XM}U\"7T", "zyJRAtW<^z?{", "zyJRAtW<^z?{", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Integer integer0 = new Integer(1292);
      assertEquals(1292, (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean2 = BooleanUtils.toBooleanObject(integer0);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Integer integer1 = Integer.getInteger("UQ'TizS>RG>]7f^2 J");
      assertNull(integer1);
      
      Integer integer2 = new Integer(1292);
      assertEquals(1292, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-2660));
      assertEquals((-2660), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-2660));
      assertEquals((-2660), (int)integer4);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject((Integer) null, integer2, integer3, integer4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = BooleanUtils.toInteger(false);
      assertEquals(0, int0);
      
      int int1 = new Integer(0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = BooleanUtils.compare(true, false);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject(1, 1732, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = BooleanUtils.isNotFalse(boolean0);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      String string0 = "off";
      Boolean boolean0 = BooleanUtils.toBooleanObject("off");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Integer integer0 = new Integer((-3707));
      assertEquals((-3707), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3352));
      assertEquals((-3352), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(70);
      assertEquals(70, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject((Integer) null, integer0, integer1, integer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject("{}");
      assertNull(boolean0);
      
      boolean boolean1 = BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanUtils.and((boolean[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        BooleanUtils.and((Boolean[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = BooleanUtils.toStringYesNo(false);
      assertEquals("no", string0);
      assertNotNull(string0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = BooleanUtils.negate(boolean0);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = Boolean.logicalXor(false, false);
      assertFalse(boolean2);
      
      String string1 = BooleanUtils.toString(false, "no", "h[");
      assertEquals("h[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean3 = BooleanUtils.or(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertFalse(boolean3);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean3 == boolean2);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean4 = Boolean.getBoolean("");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      int int1 = Boolean.compare(false, false);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = BooleanUtils.toInteger(boolean1, 1819, 664, (-393));
      assertEquals(1819, int2);
      assertTrue(boolean0.equals((Object)boolean4));
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean4));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean5 = BooleanUtils.toBoolean(0);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      
      String string2 = BooleanUtils.toString(true, "The String did not match any specified value", "sInjI:Q~brEF");
      assertEquals("The String did not match any specified value", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int3 = BooleanUtils.toInteger(boolean1, 10, 0, 664);
      assertEquals(10, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(boolean0.equals((Object)boolean4));
      assertTrue(boolean0.equals((Object)boolean5));
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean5));
      assertFalse(boolean1.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean4));
      
      Boolean boolean6 = Boolean.valueOf("h[");
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      
      String string3 = BooleanUtils.toString(boolean6, "The String did not match any specified value", "FACMP}bsJg+g2%}", "sInjI:Q~brEF");
      assertEquals("FACMP}bsJg+g2%}", string3);
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Boolean boolean7 = BooleanUtils.toBooleanObject(6);
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean5));
      assertNotNull(boolean7);
      
      String string4 = BooleanUtils.toStringYesNo(true);
      assertEquals("yes", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean8 = BooleanUtils.isNotTrue(boolean0);
      assertTrue(boolean8);
      assertTrue(boolean0.equals((Object)boolean4));
      assertTrue(boolean0.equals((Object)boolean6));
      assertTrue(boolean0.equals((Object)boolean5));
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean7));
      assertTrue(boolean0.equals((Object)boolean3));
      assertFalse(boolean8 == boolean4);
      assertFalse(boolean8 == boolean5);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject("Q{%.3owMM*e_o", "Q{%.3owMM*e_o", "The Array must not be null", "The Array must not be null");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.logicalXor(true, true);
      assertFalse(boolean1);
      
      boolean boolean2 = BooleanUtils.toBoolean(boolean0);
      assertTrue(boolean2);
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean2 == boolean1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean3 = Boolean.logicalAnd(true, false);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean boolean4 = BooleanUtils.and(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true, false}, booleanArray0));
      assertFalse(boolean4);
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      Boolean boolean5 = BooleanUtils.negate((Boolean) true);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      boolean boolean6 = BooleanUtils.toBoolean(76);
      assertTrue(boolean6);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean2));
      assertNotNull(boolean7);
      
      int int0 = Boolean.compare(true, true);
      assertEquals(0, int0);
      
      String string0 = BooleanUtils.toStringTrueFalse(boolean7);
      assertEquals("true", string0);
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean2));
      assertNotNull(string0);
      
      boolean boolean8 = BooleanUtils.toBoolean(0);
      assertFalse(boolean8);
      assertTrue(boolean8 == boolean3);
      assertFalse(boolean8 == boolean2);
      assertTrue(boolean8 == boolean4);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8 == boolean1);
      
      Boolean boolean9 = Boolean.TRUE;
      assertTrue(boolean9);
      assertTrue(boolean9.equals((Object)boolean2));
      assertFalse(boolean9.equals((Object)boolean3));
      assertFalse(boolean9.equals((Object)boolean1));
      assertFalse(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean4));
      assertTrue(boolean9.equals((Object)boolean6));
      assertFalse(boolean9.equals((Object)boolean5));
      assertNotNull(boolean9);
      
      boolean boolean10 = BooleanUtils.isTrue(boolean9);
      assertTrue(boolean10);
      assertTrue(boolean9.equals((Object)boolean2));
      assertFalse(boolean9.equals((Object)boolean3));
      assertFalse(boolean9.equals((Object)boolean1));
      assertFalse(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean4));
      assertTrue(boolean9.equals((Object)boolean6));
      assertFalse(boolean9.equals((Object)boolean5));
      assertFalse(boolean10 == boolean4);
      assertFalse(boolean10 == boolean3);
      assertTrue(boolean10 == boolean2);
      assertTrue(boolean10 == boolean6);
      assertFalse(boolean10 == boolean8);
      assertFalse(boolean10 == boolean1);
      
      String string1 = BooleanUtils.toString((Boolean) true, "", "", "<7Ek8s}<#|=G\"");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = BooleanUtils.toInteger(true, (-2493), 0);
      assertEquals((-2493), int0);
      
      Integer integer0 = BooleanUtils.toIntegerObject(true);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String string0 = BooleanUtils.toStringTrueFalse(boolean0);
      assertEquals("false", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.logicalXor(false, false);
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(false, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = BooleanUtils.toBoolean(boolean0);
      assertFalse(boolean3);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      Integer integer0 = new Integer(88);
      assertEquals(88, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.max(4, 88);
      assertEquals(88, int0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(true, integer0, integer0);
      assertEquals(88, (int)integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Boolean boolean4 = BooleanUtils.toBooleanObject("H&");
      assertNull(boolean4);
      
      Boolean[] booleanArray1 = new Boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        BooleanUtils.xor(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array is empty
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject((String) null);
      assertNull(boolean0);
      
      Integer integer0 = BooleanUtils.toIntegerObject(true, (Integer) null, (Integer) null);
      assertNull(integer0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      // Undeclared exception!
      try { 
        BooleanUtils.and(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array is empty
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject(85, 85, 0, 85);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = BooleanUtils.toIntegerObject(boolean0, integer0, integer0, integer1);
      assertEquals(0, (int)integer2);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean boolean0 = BooleanUtils.and(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, true, false, true}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(9, booleanArray0.length);
      
      String string0 = BooleanUtils.toStringTrueFalse(true);
      assertEquals("true", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBoolean("true", (String) null, ", '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 2800;
      boolean boolean0 = BooleanUtils.toBoolean(0, 0, 2800);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-3142));
      assertEquals((-3142), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(true, integer0, (Integer) null);
      assertEquals((-3142), (int)integer1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      int int1 = Integer.compare((-964), 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(integer1);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject("~ZfD;*8V(d #N2%", (String) null, "lr k", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject("Eva1JQ;FR;");
      assertNull(boolean0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject((-3143));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = BooleanUtils.toBooleanObject((-3143));
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      boolean boolean3 = Boolean.logicalXor(true, true);
      assertFalse(boolean3);
      
      boolean boolean4 = Boolean.logicalOr(false, false);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = Boolean.logicalXor(false, false);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean6 = BooleanUtils.toBoolean(boolean2);
      assertTrue(boolean6);
      assertFalse(boolean2.equals((Object)boolean4));
      assertFalse(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean5));
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean4);
      
      String string0 = BooleanUtils.toStringOnOff(false);
      assertEquals("off", string0);
      assertNotNull(string0);
      
      boolean boolean7 = BooleanUtils.toBoolean(0);
      assertFalse(boolean7);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean8 = BooleanUtils.xor(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, true, true}, booleanArray0));
      assertFalse(boolean8);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean5);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8 == boolean3);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanUtils.toBoolean("", (String) null, "The String did not match any specified value");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer(4764);
      assertEquals(4764, (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) null, (Integer) null, integer0, integer0);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1633));
      assertEquals((-1633), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = BooleanUtils.toIntegerObject(boolean0, integer1, (Integer) null, integer2);
      assertEquals(0, (int)integer3);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      int int0 = Integer.compareUnsigned(0, 0);
      assertEquals(0, int0);
      
      int int1 = BooleanUtils.toInteger(boolean0, (-2934), 1197, 4764);
      assertEquals((-2934), int1);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean1 = BooleanUtils.or(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(boolean1);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = BooleanUtils.toStringTrueFalse(false);
      assertEquals("false", string0);
      assertNotNull(string0);
      
      boolean boolean1 = BooleanUtils.toBoolean("false");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      String string1 = null;
      Boolean boolean2 = new Boolean((String) null);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[0] = boolean2;
      String string2 = "org.apache.commons.lang3.math.NumberUtils";
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject((String) null, "false", "false", "org.apache.commons.lang3.math.NumberUtils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = BooleanUtils.toBoolean("false");
      assertFalse(boolean0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(0, 0, 2, (-3425));
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = BooleanUtils.isNotFalse(boolean1);
      assertTrue(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = BooleanUtils.toBoolean("hOm*MW`d($Y9T");
      assertFalse(boolean0);
      
      String string0 = BooleanUtils.toString(false, "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject("", "no", (String) null, "hOm*MW`d($Y9T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = BooleanUtils.and(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = true;
      int int0 = BooleanUtils.toInteger(true);
      assertEquals(1, int0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject((String) null);
      assertNull(boolean1);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      try { 
        Integer.parseUnsignedInt("Yc", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.logicalXor(false, true);
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.getBoolean("8Ekk:o/aFqbc&W");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
      assertEquals(0, (int)integer0);
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean1));
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = BooleanUtils.toInteger(true, 0, (-109));
      assertEquals(0, int0);
      
      boolean boolean0 = BooleanUtils.isTrue((Boolean) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject((-2696), 0, (-1075), (-3510));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = new Integer(2327);
      assertEquals(2327, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2327);
      assertEquals(2327, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = BooleanUtils.toBoolean(integer0, integer0, integer1);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = BooleanUtils.toInteger(false);
      assertEquals(0, int0);
      
      int int1 = BooleanUtils.compare(false, true);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = BooleanUtils.compare(true, true);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(0, 1732, (-1), 0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject((-1463));
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String string0 = BooleanUtils.toStringOnOff(boolean0);
      assertEquals("on", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Integer integer0 = new Integer((-2507));
      assertEquals((-2507), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2507));
      assertEquals((-2507), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, integer0, integer0, integer1);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      String string0 = "org.apache.commons.lang3.BooleanUtils";
      Boolean boolean1 = Boolean.valueOf("org.apache.commons.lang3.BooleanUtils");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      // Undeclared exception!
      try { 
        BooleanUtils.xor(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array must not contain any null elements
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = true;
      int int0 = BooleanUtils.toInteger(true);
      assertEquals(1, int0);
      
      int int1 = BooleanUtils.toInteger(true, 3, 3);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = BooleanUtils.toBoolean(0, 0, 55);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = BooleanUtils.toStringTrueFalse(true);
      assertEquals("true", string0);
      assertNotNull(string0);
      
      Boolean boolean2 = BooleanUtils.toBooleanObject(0);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      // Undeclared exception!
      try { 
        BooleanUtils.or((Boolean[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BooleanUtils booleanUtils0 = new BooleanUtils();
      assertNotNull(booleanUtils0);
      
      boolean boolean0 = BooleanUtils.toBoolean("", "", "The array must not contain any null elements");
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = BooleanUtils.xor(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean1);
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Boolean boolean2 = new Boolean("The array must not contain any null elements");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      boolean boolean3 = Boolean.logicalOr(false, false);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      Integer integer0 = BooleanUtils.toIntegerObject(boolean2);
      assertEquals(0, (int)integer0);
      assertTrue(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = BooleanUtils.toBoolean("", "yes", "");
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      int int0 = BooleanUtils.toInteger(boolean1, 937, 937, 937);
      assertEquals(937, int0);
      assertTrue(boolean1.equals((Object)boolean0));
      
      int int1 = BooleanUtils.compare(false, false);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject("plZiSLX}9~9", "u+>Z8=!l", "plZiSLX}9~9", "");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = BooleanUtils.or(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject(3129);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = BooleanUtils.isTrue(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject(1, 1, 2829, 2829);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.logicalAnd(false, false);
      assertFalse(boolean1);
      
      Boolean boolean2 = BooleanUtils.negate(boolean0);
      assertFalse(boolean2);
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = BooleanUtils.negate(boolean2);
      assertTrue(boolean3);
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.negate((Boolean) null);
      assertNull(boolean0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject("");
      assertNull(boolean1);
      
      boolean boolean2 = BooleanUtils.toBoolean((Boolean) null);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-633));
      assertEquals((-633), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = BooleanUtils.toIntegerObject(boolean0, integer0, integer0, integer1);
      assertEquals(1, (int)integer2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = BooleanUtils.toStringOnOff(false);
      assertEquals("off", string0);
      assertNotNull(string0);
      
      boolean boolean0 = BooleanUtils.toBoolean(757);
      assertTrue(boolean0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject("off", "off", "", "true");
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Integer integer0 = BooleanUtils.toIntegerObject(true);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.min(0, 0);
      assertEquals(0, int0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(boolean1, integer0, integer0, integer0);
      assertEquals(1, (int)integer1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      String string1 = BooleanUtils.toStringYesNo(false);
      assertEquals("no", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Boolean[] booleanArray0 = new Boolean[7];
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject((-1993), 757, 757, 1562);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String string0 = BooleanUtils.toStringYesNo(boolean0);
      assertEquals("no", string0);
      assertNotNull(string0);
      
      Integer integer0 = new Integer(1864);
      assertEquals(1864, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.min(1864, 0);
      assertEquals(0, int0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(false, integer0, integer0);
      assertEquals(1864, (int)integer1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      String string1 = BooleanUtils.toStringYesNo(false);
      assertEquals("no", string1);
      assertNotNull(string1);
      
      String string2 = BooleanUtils.toStringOnOff(true);
      assertEquals("on", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Integer integer2 = new Integer(1864);
      assertEquals(1864, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = BooleanUtils.toIntegerObject(true, integer0, integer2);
      assertEquals(1864, (int)integer3);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject("3%IW*SD<hr~P:%]Xh");
      assertNull(boolean0);
      
      Integer integer0 = BooleanUtils.toIntegerObject(false);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1243);
      assertEquals(1243, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(integer0, integer1, integer0, integer2);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = BooleanUtils.toStringTrueFalse((Boolean) null);
      assertNull(string0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(1257, 1257, 1257, 0);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject(1257, (-195), 0, (-195));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject(0, 43, 0, 0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compareUnsigned(43, 0);
      assertEquals(1, int0);
      
      boolean boolean1 = BooleanUtils.toBoolean(integer0, integer0, integer0);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = BooleanUtils.toStringTrueFalse(true);
      assertEquals("true", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = new Integer((-1045));
      assertEquals((-1045), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.min((-2906), (-1045));
      assertEquals((-2906), int0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(false, integer0, integer0);
      assertEquals((-1045), (int)integer1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanUtils.toBoolean(777, 214, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer integer0 = new Integer(2530);
      assertEquals(2530, (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(", '", ", '", ", '", "");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Integer integer1 = new Integer(2530);
      assertEquals(2530, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = BooleanUtils.toIntegerObject(true, integer1, integer0);
      assertEquals(2530, (int)integer2);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(2530);
      assertEquals(2530, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = BooleanUtils.toIntegerObject(boolean0, integer2, integer3, integer3);
      assertEquals(2530, (int)integer4);
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer3));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(2530);
      assertEquals(2530, (int)integer5);
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(integer0, integer4, integer3, integer5);
      assertTrue(boolean1);
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer5));
      assertTrue(integer0.equals((Object)integer4));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer5));
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer5));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer5));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer4));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer5));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        BooleanUtils.and(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array is empty
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = BooleanUtils.toInteger(true);
      assertEquals(1, int0);
      
      int int1 = (-440);
      boolean boolean0 = BooleanUtils.toBoolean((-440));
      assertTrue(boolean0);
      
      int int2 = BooleanUtils.compare(true, true);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string0 = BooleanUtils.toStringYesNo(true);
      assertEquals("yes", string0);
      assertNotNull(string0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      // Undeclared exception!
      try { 
        BooleanUtils.and(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array must not contain any null elements
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = BooleanUtils.xor(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, true, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(9, booleanArray0.length);
      
      boolean boolean1 = BooleanUtils.xor(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, true, false}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        BooleanUtils.toBoolean((-1), 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject("U(I75^(wmfq7", "no", "no", "U(I75^(wmfq7");
      assertNull(boolean0);
      
      String string0 = BooleanUtils.toStringYesNo((Boolean) null);
      assertNull(string0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = null;
      booleanArray0[1] = null;
      booleanArray0[2] = null;
      booleanArray0[3] = null;
      booleanArray0[4] = null;
      booleanArray0[5] = null;
      booleanArray0[6] = null;
      // Undeclared exception!
      try { 
        BooleanUtils.or(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array must not contain any null elements
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject("The type must not be null", "A blank string is not a valid number", "", "The Integer did not match either specified value");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Boolean boolean0 = BooleanUtils.toBooleanObject((String) null, (String) null, (String) null, ", Length: 0");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = Integer.getInteger("ep46l%\"O=I$Y.8;lP5", 65);
      assertEquals(65, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(true, integer0, integer0);
      assertEquals(65, (int)integer1);
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer integer0 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) null);
      assertNull(boolean0);
      
      boolean boolean1 = false;
      boolean boolean2 = Boolean.logicalXor(false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = Boolean.logicalXor(false, false);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = Boolean.logicalXor(false, false);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      String string0 = BooleanUtils.toString((Boolean) null, "r]\"c5dOyugW4>e}", "r]\"c5dOyugW4>e}", "r]\"c5dOyugW4>e}");
      assertEquals("r]\"c5dOyugW4>e}", string0);
      assertNotNull(string0);
      
      boolean boolean5 = Boolean.logicalAnd(false, true);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      
      int int0 = 1802;
      // Undeclared exception!
      try { 
        BooleanUtils.toBoolean(0, 1802, 1802);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      int int0 = Boolean.compare(true, true);
      assertEquals(0, int0);
      
      boolean boolean1 = Boolean.getBoolean("The Array must not be null");
      assertFalse(boolean1);
      
      boolean boolean2 = BooleanUtils.isNotTrue(boolean0);
      assertTrue(boolean2);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean2 == boolean1);
      
      int int1 = Boolean.compare(false, false);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = Boolean.compare(false, false);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = Boolean.compare(false, false);
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      boolean boolean3 = Boolean.logicalOr(false, false);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = BooleanUtils.toBoolean("");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = BooleanUtils.isFalse(boolean0);
      assertTrue(boolean5);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean4));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      
      boolean boolean6 = BooleanUtils.toBoolean("", "", "deU1B{W1_++E;.L");
      assertTrue(boolean6);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      
      int int4 = BooleanUtils.toInteger(true);
      assertEquals(1, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        BooleanUtils.and(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array is empty
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = BooleanUtils.toBoolean((String) null);
      assertFalse(boolean0);
      
      int int0 = BooleanUtils.toInteger(false, (-1078), (-778));
      assertEquals((-778), int0);
      
      int int1 = BooleanUtils.compare(false, false);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      // Undeclared exception!
      try { 
        BooleanUtils.and(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array must not contain any null elements
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Integer integer0 = new Integer(1335);
      assertEquals(1335, (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = BooleanUtils.and(booleanArray0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = BooleanUtils.toBoolean((-1130));
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = BooleanUtils.toBooleanObject("");
      assertNull(boolean1);
      
      booleanArray0[0] = null;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      boolean boolean3 = Boolean.logicalXor(true, true);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      
      booleanArray0[1] = boolean2;
      // Undeclared exception!
      try { 
        BooleanUtils.xor(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array must not contain any null elements
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = BooleanUtils.toInteger(true);
      assertEquals(1, int0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = BooleanUtils.isNotFalse(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = BooleanUtils.xor(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      
      Integer integer0 = new Integer(3210);
      assertEquals(3210, (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(integer0);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean0 = BooleanUtils.or(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(6, booleanArray0.length);
      
      Integer integer0 = BooleanUtils.toIntegerObject((Boolean) null);
      assertNull(integer0);
      
      String string0 = BooleanUtils.toStringTrueFalse((Boolean) true);
      assertEquals("true", string0);
      assertNotNull(string0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(false);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject("/pZ[", "0x", "0x", "/pZ[");
      assertNull(boolean1);
      
      Integer integer2 = BooleanUtils.toIntegerObject((Boolean) null);
      assertNull(integer2);
      
      Boolean boolean2 = BooleanUtils.toBooleanObject("}X&^r;g|.4b3.fBb", "/pZ[", "}X&^r;g|.4b3.fBb", "Qt");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray1 = new Boolean[6];
      Integer integer3 = new Integer((-2865));
      assertEquals((-2865), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-2865));
      assertEquals((-2865), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer((-2865));
      assertEquals((-2865), (int)integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      Integer integer6 = BooleanUtils.toIntegerObject((Boolean) null, integer3, integer4, integer5);
      assertEquals((-2865), (int)integer6);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer5));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer3.equals((Object)integer5));
      assertTrue(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer6);
      
      Integer integer7 = new Integer((-2865));
      assertEquals((-2865), (int)integer7);
      assertTrue(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer5));
      assertNotNull(integer7);
      
      Integer integer8 = new Integer((-2865));
      assertEquals((-2865), (int)integer8);
      assertTrue(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer3));
      assertTrue(integer8.equals((Object)integer5));
      assertTrue(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer1));
      assertNotNull(integer8);
      
      Boolean boolean3 = BooleanUtils.toBooleanObject(integer6, integer7, integer8, (Integer) null);
      assertTrue(boolean3);
      assertTrue(integer4.equals((Object)integer7));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer6));
      assertTrue(integer4.equals((Object)integer5));
      assertTrue(integer4.equals((Object)integer8));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer8));
      assertTrue(integer5.equals((Object)integer7));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer7));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer8));
      assertTrue(integer7.equals((Object)integer8));
      assertTrue(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer5));
      assertTrue(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer3));
      assertTrue(integer8.equals((Object)integer5));
      assertTrue(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(integer3.equals((Object)integer5));
      assertTrue(integer3.equals((Object)integer8));
      assertTrue(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer7));
      assertTrue(integer3.equals((Object)integer6));
      assertNotNull(boolean3);
      
      booleanArray1[0] = boolean3;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) false;
      Boolean boolean4 = BooleanUtils.toBooleanObject("true");
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray1[5] = boolean4;
      Boolean boolean5 = BooleanUtils.xor(booleanArray1);
      assertFalse(boolean5);
      assertEquals(6, booleanArray1.length);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = BooleanUtils.toInteger(true, 65, 0);
      assertEquals(65, int0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(65, 0, 65, (-2325));
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.logicalOr(true, false);
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(false, false);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = Boolean.logicalOr(false, true);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      int int1 = Boolean.compare(true, true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean4 = BooleanUtils.toBoolean(boolean0);
      assertFalse(boolean4);
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      
      boolean boolean6 = BooleanUtils.isTrue(boolean5);
      assertTrue(boolean6);
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean5;
      booleanArray0[2] = boolean5;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean5;
      booleanArray0[5] = boolean5;
      booleanArray0[6] = boolean5;
      Boolean boolean7 = BooleanUtils.or(booleanArray0);
      assertTrue(boolean7);
      assertEquals(7, booleanArray0.length);
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean3));
      assertNotNull(boolean7);
      
      boolean boolean8 = Boolean.logicalAnd(false, true);
      assertFalse(boolean8);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean4);
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean1);
      
      Integer integer0 = BooleanUtils.toIntegerObject(boolean7);
      assertEquals(1, (int)integer0);
      assertEquals(7, booleanArray0.length);
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean8));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      Boolean boolean9 = BooleanUtils.toBooleanObject("^");
      assertNull(boolean9);
      
      boolean boolean10 = BooleanUtils.toBooleanDefaultIfNull(boolean5, true);
      assertTrue(boolean10);
      assertFalse(boolean10 == boolean8);
      assertTrue(boolean10 == boolean1);
      assertFalse(boolean10 == boolean4);
      assertTrue(boolean10 == boolean3);
      assertTrue(boolean10 == boolean6);
      assertFalse(boolean10 == boolean2);
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean8));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean6));
      
      String string0 = BooleanUtils.toStringOnOff(false);
      assertEquals("off", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("g+)*adf.Q/R(z");
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.getBoolean("g+)*adf.Q/R(z");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = Boolean.logicalAnd(true, false);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
      assertEquals(0, (int)integer0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean3));
      assertNotNull(integer0);
      
      Boolean boolean4 = new Boolean("76");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      int int1 = Boolean.compare(true, false);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String string0 = BooleanUtils.toStringOnOff(boolean4);
      assertEquals("off", string0);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(string0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean4;
      Boolean boolean5 = BooleanUtils.or(booleanArray0);
      assertFalse(boolean5);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      
      Boolean boolean6 = BooleanUtils.toBooleanObject(79, 1, 79, (-1352));
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      
      String string1 = BooleanUtils.toStringYesNo(boolean6);
      assertEquals("no", string1);
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Boolean boolean7 = Boolean.valueOf(true);
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean6));
      assertNotNull(boolean7);
      
      Integer integer1 = BooleanUtils.toIntegerObject(boolean7);
      assertEquals(1, (int)integer1);
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = BooleanUtils.xor(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(41);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = (Boolean) false;
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray1[1] = boolean2;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        BooleanUtils.or(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array must not contain any null elements
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "?9rVgNMD<0-C";
      String string1 = "YUH!HbZ]+Y?4fSiADt$";
      Boolean boolean0 = BooleanUtils.toBooleanObject("?9rVgNMD<0-C", "YUH!HbZ]+Y?4fSiADt$", "YUH!HbZ]+Y?4fSiADt$", "?9rVgNMD<0-C");
      assertNull(boolean0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject((-1867), (-1867), 100, 100);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("YUH!HbZ]+Y?4fSiADt$");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject(1609, 100, 1266, 1047);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = BooleanUtils.toBoolean(1677, 1677, 1677);
      assertTrue(boolean0);
      
      int int0 = (-817);
      Integer integer0 = new Integer((-817));
      assertEquals((-817), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = 1106;
      Integer integer1 = new Integer(1106);
      assertEquals(1106, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1106);
      assertEquals(1106, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertNotNull(integer2);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBoolean(integer0, integer1, integer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = BooleanUtils.toBooleanObject("off");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer((-3707));
      assertEquals((-3707), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3352));
      assertEquals((-3352), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(70);
      assertEquals(70, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject((Integer) null, integer0, integer1, integer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = BooleanUtils.toStringOnOff(false);
      assertEquals("off", string0);
      assertNotNull(string0);
      
      boolean boolean0 = BooleanUtils.toBoolean(757);
      assertTrue(boolean0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject("off", "off", "", "true");
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Integer integer0 = BooleanUtils.toIntegerObject(true);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.sum(0, 0);
      assertEquals(0, int0);
      
      int int1 = Integer.min(0, 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(boolean1, integer0, integer0, integer0);
      assertEquals(1, (int)integer1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      String string1 = BooleanUtils.toStringYesNo(false);
      assertEquals("no", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean1;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean1;
      booleanArray0[6] = boolean1;
      Boolean boolean4 = BooleanUtils.and(booleanArray0);
      assertTrue(boolean4);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      boolean boolean5 = Boolean.logicalOr(true, true);
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean0);
      
      String string2 = BooleanUtils.toStringYesNo(boolean4);
      assertEquals("yes", string2);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean4.equals((Object)boolean5));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = BooleanUtils.toStringOnOff(boolean1);
      assertEquals("on", string3);
      assertTrue(boolean1.equals((Object)boolean5));
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Boolean boolean6 = BooleanUtils.toBooleanObject((-1993));
      assertTrue(boolean6);
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      
      String string4 = BooleanUtils.toStringYesNo(boolean6);
      assertEquals("yes", string4);
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Boolean boolean7 = BooleanUtils.or(booleanArray0);
      assertTrue(boolean7);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean0));
      assertNotNull(boolean7);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = BooleanUtils.toStringOnOff(true);
      assertEquals("on", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = BooleanUtils.or(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject("on");
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[0];
      // Undeclared exception!
      try { 
        BooleanUtils.and(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array is empty
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = BooleanUtils.toStringOnOff(true);
      assertEquals("on", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = BooleanUtils.or(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject("-#");
      assertNull(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[0];
      // Undeclared exception!
      try { 
        BooleanUtils.and(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array is empty
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = BooleanUtils.toBoolean(boolean0);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      boolean boolean3 = Boolean.logicalXor(false, true);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      
      String string0 = BooleanUtils.toStringOnOff(boolean2);
      assertEquals("on", string0);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(string0);
      
      int int0 = BooleanUtils.toInteger(true);
      assertEquals(1, int0);
      
      String string1 = BooleanUtils.toStringTrueFalse((Boolean) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BooleanUtils.toStringYesNo(false);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      BooleanUtils.and(booleanArray0);
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      BooleanUtils.xor(booleanArray1);
      Integer integer0 = new Integer((-3326));
      Integer integer1 = BooleanUtils.toIntegerObject((Boolean) false, integer0, integer0, integer0);
      BooleanUtils.toBoolean("no");
      Integer integer2 = BooleanUtils.toIntegerObject(false);
      Integer.getInteger((String) null, 1181);
      Integer integer3 = new Integer((-2573));
      Integer.divideUnsigned(102, 1181);
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject(integer2, (Integer) null, integer1, integer3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BooleanUtils.toString(true, "g1#X~agY%@V<ho9", "Arguments cannot both be null");
      String string0 = BooleanUtils.toStringYesNo(true);
      assertEquals("yes", string0);
      
      Boolean boolean0 = new Boolean(true);
      boolean boolean1 = BooleanUtils.isNotTrue(boolean0);
      Boolean boolean2 = Boolean.valueOf(true);
      BooleanUtils.isTrue(boolean2);
      Boolean boolean3 = BooleanUtils.toBooleanObject("yes");
      assertNotNull(boolean3);
      
      String string1 = BooleanUtils.toString(boolean2, "3>", "g1#X~agY%@V<ho9", "Arguments cannot both be null");
      assertEquals("3>", string1);
      
      boolean boolean4 = BooleanUtils.isNotFalse(boolean0);
      assertFalse(boolean4 == boolean1);
      
      String string2 = BooleanUtils.toStringOnOff(boolean2);
      assertEquals("on", string2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BooleanUtils.toString(true, "g1#X~agY%@V<ho9", "Arguments cannot both be null");
      BooleanUtils.toStringYesNo(false);
      Boolean boolean0 = new Boolean(true);
      BooleanUtils.isNotTrue(boolean0);
      Boolean boolean1 = Boolean.valueOf(true);
      BooleanUtils.isTrue(boolean1);
      Boolean boolean2 = new Boolean(false);
      Boolean.getBoolean("");
      BooleanUtils.toStringTrueFalse(boolean2);
      BooleanUtils.toString(boolean1, "3>", "g1#X~agY%@V<ho9", "Arguments cannot both be null");
      BooleanUtils.isNotFalse(boolean0);
      Boolean boolean3 = BooleanUtils.toBooleanObject((-309));
      Boolean.logicalOr(true, false);
      Boolean.logicalAnd(true, false);
      BooleanUtils.toStringOnOff(boolean3);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      BooleanUtils.xor(booleanArray0);
      BooleanUtils.toStringOnOff(false);
      // Undeclared exception!
      try { 
        BooleanUtils.toBoolean("g1#X~agY%@V<ho9", "false", "The Integer did not match either specified value");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer.parseUnsignedInt("0");
      BooleanUtils.toBooleanObject("The String did not match any specified value", "The String did not match any specified value", "0", "$8$s(qELFV@IdvZ@^)");
      // Undeclared exception!
      try { 
        BooleanUtils.toBooleanObject("J;*m7DF?ZoCKaf*", "$8$s(qELFV@IdvZ@^)", ",x[7LY;N?QwGZ0xR", "The String did not match any specified value");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = BooleanUtils.toBoolean("", "", "");
      Boolean boolean1 = Boolean.valueOf("");
      Boolean.getBoolean("Rn',H+x,/z!");
      Boolean.getBoolean("");
      Boolean.logicalAnd(true, false);
      Boolean.compare(true, false);
      boolean boolean2 = BooleanUtils.isNotTrue(boolean1);
      assertTrue(boolean2 == boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      Boolean boolean3 = BooleanUtils.xor(booleanArray0);
      Boolean boolean4 = BooleanUtils.toBooleanObject("");
      assertNull(boolean4);
      
      Boolean.logicalOr((boolean) boolean1, true);
      String string0 = BooleanUtils.toStringTrueFalse((Boolean) null);
      assertNull(string0);
      
      boolean boolean5 = BooleanUtils.isTrue(boolean3);
      Boolean boolean6 = BooleanUtils.and(booleanArray0);
      assertTrue(boolean6.equals((Object)boolean5));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BooleanUtils.toBoolean(",]w");
      Boolean boolean0 = Boolean.valueOf("U)+iKe<");
      Boolean.logicalOr(false, false);
      Boolean.compare(true, false);
      Boolean.compare(true, false);
      boolean boolean1 = true;
      Boolean.getBoolean("");
      Boolean.compare(true, true);
      Boolean.compare(true, true);
      int int0 = 0;
      BooleanUtils.toInteger(boolean0, 0, 0, 0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      BooleanUtils.and(booleanArray0);
      BooleanUtils.toBooleanObject(0, 0, 2021, 0);
      // Undeclared exception!
      try { 
        BooleanUtils.toBoolean(0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BooleanUtils.toInteger(false);
      Boolean boolean0 = new Boolean("YJ'wQ&d8xw{^[Ss@q");
      Boolean.logicalOr(true, false);
      boolean boolean1 = false;
      Boolean.getBoolean("");
      Boolean.compare(false, false);
      BooleanUtils.toStringYesNo(boolean0);
      Boolean boolean2 = BooleanUtils.toBooleanObject(0);
      BooleanUtils.toStringTrueFalse(boolean0);
      BooleanUtils.toInteger(true, 0, 0);
      Integer integer0 = new Integer(0);
      BooleanUtils.toIntegerObject(false, integer0, integer0);
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean3 = new Boolean(true);
      booleanArray0[0] = boolean3;
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean2;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean2;
      booleanArray0[7] = boolean2;
      BooleanUtils.and(booleanArray0);
      String string0 = "Oaau0YDh?btY1/";
      // Undeclared exception!
      try { 
        BooleanUtils.toBoolean("no", "", "Oaau0YDh?btY1/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BooleanUtils.compare(true, true);
      Boolean boolean0 = BooleanUtils.toBooleanObject("_,^7c", "", "_,^7c", "_,^7c");
      Boolean.getBoolean((String) null);
      Boolean.getBoolean("");
      Boolean.logicalOr(true, false);
      Boolean.compare(false, true);
      BooleanUtils.toBoolean((-1), 0, (-1));
      Boolean.logicalXor(true, true);
      Boolean.compare(true, true);
      Boolean.compare(true, false);
      Boolean boolean1 = BooleanUtils.negate(boolean0);
      BooleanUtils.toInteger(true);
      Boolean boolean2 = BooleanUtils.toBooleanObject((-336));
      Boolean[] booleanArray0 = new Boolean[14];
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      booleanArray0[2] = boolean3;
      booleanArray0[3] = boolean2;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean1;
      booleanArray0[6] = boolean1;
      // Undeclared exception!
      try { 
        BooleanUtils.and(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array must not contain any null elements
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BooleanUtils.toStringOnOff(false);
      BooleanUtils.toStringYesNo(false);
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = new Boolean(false);
      booleanArray0[0] = boolean0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(202);
      BooleanUtils.toBooleanObject((Integer) null, integer0, integer1, (Integer) null);
      booleanArray0[1] = null;
      Boolean boolean1 = BooleanUtils.toBooleanObject(integer0);
      booleanArray0[2] = boolean1;
      BooleanUtils.toBooleanObject(202, 0, 41, 202);
      Integer.sum(0, 202);
      booleanArray0[3] = null;
      Boolean boolean2 = BooleanUtils.toBooleanObject(1828);
      booleanArray0[4] = boolean2;
      // Undeclared exception!
      try { 
        BooleanUtils.xor(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array must not contain any null elements
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Integer integer0 = new Integer(926);
      Integer integer1 = new Integer(926);
      Integer integer2 = BooleanUtils.toIntegerObject(false, integer1, integer1);
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, integer0, integer1, integer2);
      Boolean.compare(true, false);
      booleanArray0[0] = boolean0;
      BooleanUtils.and(booleanArray0);
      Boolean boolean1 = BooleanUtils.xor(booleanArray0);
      BooleanUtils.isFalse(boolean1);
      Integer.divideUnsigned((-642027680), (-1));
      BooleanUtils.toInteger(false);
      Boolean.compare(true, false);
      Integer.divideUnsigned(0, 1);
      BooleanUtils.toStringYesNo(true);
      Integer integer3 = new Integer(926);
      BooleanUtils.toBoolean(integer2, integer1, integer3);
      // Undeclared exception!
      try { 
        BooleanUtils.or((boolean[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }
}
