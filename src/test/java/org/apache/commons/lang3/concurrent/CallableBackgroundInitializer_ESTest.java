/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 02:29:34 GMT 2019
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CallableBackgroundInitializer_ESTest extends CallableBackgroundInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1);
      CallableBackgroundInitializer<Callable<String>> callableBackgroundInitializer0 = null;
      try {
        callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<String>>((Callable<Callable<String>>) null, forkJoinPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Callable must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = null;
      try {
        callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>((Callable<Delayed>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Callable must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = null;
      try {
        callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>((Callable<String>) null, scheduledThreadPoolExecutor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Callable must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Callable<ForkJoinTask<String>> callable0 = (Callable<ForkJoinTask<String>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = null;
      try {
        callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>((Callable<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Callable must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ExecutorService executorService0 = null;
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable0, (ExecutorService) null);
      Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(callable1).call();
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Integer>(callable1);
      callableBackgroundInitializer1.initialize();
      callableBackgroundInitializer1.initialize();
      callableBackgroundInitializer1.initialize();
      callableBackgroundInitializer1.start();
      callableBackgroundInitializer1.initialize();
      callableBackgroundInitializer1.initialize();
      Callable<Callable<String>> callable2 = (Callable<Callable<String>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable2).call();
      CallableBackgroundInitializer<Callable<String>> callableBackgroundInitializer2 = new CallableBackgroundInitializer<Callable<String>>(callable2);
      callableBackgroundInitializer2.initialize();
      CallableBackgroundInitializer<String> callableBackgroundInitializer3 = null;
      try {
        callableBackgroundInitializer3 = new CallableBackgroundInitializer<String>((Callable<String>) null, (ExecutorService) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Callable must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread mockThread0 = new MockThread();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-446), forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CallableBackgroundInitializer<Callable<String>> callableBackgroundInitializer0 = null;
      try {
        callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<String>>((Callable<Callable<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Callable must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      callableBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.initialize();
      Callable<Delayed> callable1 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      // Undeclared exception!
      try { 
        scheduledThreadPoolExecutor0.setMaximumPoolSize(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Callable<Callable<String>> callable0 = (Callable<Callable<String>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Callable<String>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<String>>(callable0);
      assertFalse(callableBackgroundInitializer0.isStarted());
  }
}
